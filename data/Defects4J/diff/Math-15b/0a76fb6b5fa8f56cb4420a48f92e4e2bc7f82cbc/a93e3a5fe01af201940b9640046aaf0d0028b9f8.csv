is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,278,/ org.apache.commons.math.ode.nonstiff.AdamsIntegrator
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,278,// org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,279,// org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,20,import java.io.IOException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,21,import java.io.ObjectInputStream;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,22,import java.io.ObjectOutputStream;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,23,import java.lang.reflect.Field;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,24,import java.util.Arrays;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,25,import java.util.HashMap;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,26,import java.util.Map;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,28,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,29,import org.apache.commons.math.fraction.BigFraction;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,30,import org.apache.commons.math.linear.DefaultRealMatrixChangingVisitor;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,31,import org.apache.commons.math.linear.FieldLUDecompositionImpl;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,32,import org.apache.commons.math.linear.FieldMatrix;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,33,import org.apache.commons.math.linear.FieldMatrixImpl;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,34,import org.apache.commons.math.linear.MatrixUtils;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,35,import org.apache.commons.math.linear.MatrixVisitorException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,36,import org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,37,import org.apache.commons.math.linear.RealMatrixImpl;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,38,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,39,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,40,import org.apache.commons.math.ode.IntegratorException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,41,import org.apache.commons.math.ode.MultistepIntegrator;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,42,import org.apache.commons.math.ode.events.CombinedEventsManager;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,43,import org.apache.commons.math.ode.sampling.NordsieckStepInterpolator;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,44,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,48,* This class implements explicit Adams-Bashforth integrators for Ordinary
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,49,* Differential Equations.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,51,* <p>Adams-Bashforth methods (in fact due to Adams alone) are explicit
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,52,* multistep ODE solvers with fixed stepsize. The value of state vector
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,53,* at step n+1 is a simple combination of the value at step n and of the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,54,"* derivatives at steps n, n-1, n-2 ... Depending on the number k of previous"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,55,"* steps one wants to use for computing the next value, different formulas"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,56,* are available:</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,57,* <ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,58,*   <li>k = 1: y<sub>n+1</sub> = y<sub>n</sub> + h y'<sub>n</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,59,*   <li>k = 2: y<sub>n+1</sub> = y<sub>n</sub> + h (3y'<sub>n</sub>-y'<sub>n-1</sub>)/2</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,60,*   <li>k = 3: y<sub>n+1</sub> = y<sub>n</sub> + h (23y'<sub>n</sub>-16y'<sub>n-1</sub>+5y'<sub>n-2</sub>)/12</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,61,*   <li>k = 4: y<sub>n+1</sub> = y<sub>n</sub> + h (55y'<sub>n</sub>-59y'<sub>n-1</sub>+37y'<sub>n-2</sub>-9y'<sub>n-3</sub>)/24</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,62,*   <li>...</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,63,* </ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,65,* <p>A k-steps Adams-Bashforth method is of order k. There is no theoretical limit to the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,66,"* value of k, but due to an implementation limitation k must be greater than 1.</p>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,68,* <h3>Implementation details</h3>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,70,* <p>We define scaled derivatives s<sub>i</sub>(n) at step n as:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,71,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,72,* s<sub>1</sub>(n) = h y'<sub>n</sub> for first derivative
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,73,* s<sub>2</sub>(n) = h<sup>2</sup>/2 y''<sub>n</sub> for second derivative
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,74,* s<sub>3</sub>(n) = h<sup>3</sup>/6 y'''<sub>n</sub> for third derivative
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,76,* s<sub>k</sub>(n) = h<sup>k</sup>/k! y(k)<sub>n</sub> for k<sup>th</sup> derivative
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,77,* </pre></p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,79,* <p>The definitions above use the classical representation with several previous first
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,80,* derivatives. Lets define
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,81,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,82,*   q<sub>n</sub> = [ s<sub>1</sub>(n-1) s<sub>1</sub>(n-2) ... s<sub>1</sub>(n-(k-1)) ]<sup>T</sup>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,83,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,84,"* (we omit the k index in the notation for clarity). With these definitions,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,85,* Adams-Bashforth methods can be written:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,86,* <ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,87,*   <li>k = 1: y<sub>n+1</sub> = y<sub>n</sub> + s<sub>1</sub>(n)</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,88,*   <li>k = 2: y<sub>n+1</sub> = y<sub>n</sub> + 3/2 s<sub>1</sub>(n) + [ -1/2 ] q<sub>n</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,89,*   <li>k = 3: y<sub>n+1</sub> = y<sub>n</sub> + 23/12 s<sub>1</sub>(n) + [ -16/12 5/12 ] q<sub>n</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,90,*   <li>k = 4: y<sub>n+1</sub> = y<sub>n</sub> + 55/24 s<sub>1</sub>(n) + [ -59/24 37/24 -9/24 ] q<sub>n</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,91,*   <li>...</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,92,* </ul></p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,94,"* <p>Instead of using the classical representation with first derivatives only (y<sub>n</sub>,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,95,"* s<sub>1</sub>(n) and q<sub>n</sub>), our implementation uses the Nordsieck vector with"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,96,"* higher degrees scaled derivatives all taken at the same step (y<sub>n</sub>, s<sub>1</sub>(n)"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,97,* and r<sub>n</sub>) where r<sub>n</sub> is defined as:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,98,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,99,"* r<sub>n</sub> = [ s<sub>2</sub>(n), s<sub>3</sub>(n) ... s<sub>k</sub>(n) ]<sup>T</sup>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,100,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,101,* (here again we omit the k index in the notation for clarity)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,102,* </p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,104,"* <p>Taylor series formulas show that for any index offset i, s<sub>1</sub>(n-i) can be"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,105,"* computed from s<sub>1</sub>(n), s<sub>2</sub>(n) ... s<sub>k</sub>(n), the formula being exact"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,106,* for degree k polynomials.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,107,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,108,* s<sub>1</sub>(n-i) = s<sub>1</sub>(n) + &sum;<sub>j</sub> j (-i)<sup>j-1</sup> s<sub>j</sub>(n)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,109,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,110,* The previous formula can be used with several values for i to compute the transform between
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,111,* classical representation and Nordsieck vector. The transform between r<sub>n</sub>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,112,* and q<sub>n</sub> resulting from the Taylor series formulas above is:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,113,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,114,* q<sub>n</sub> = s<sub>1</sub>(n) u + P r<sub>n</sub>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,115,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,116,* where u is the [ 1 1 ... 1 ]<sup>T</sup> vector and P is the (k-1)&times;(k-1) matrix built
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,117,* with the j (-i)<sup>j-1</sup> terms:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,118,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,119,*        [  -2   3   -4    5  ... ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,120,*        [  -4  12  -32   80  ... ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,121,*   P =  [  -6  27 -108  405  ... ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,122,*        [  -8  48 -256 1280  ... ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,124,* </pre></p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,126,* <p>Using the Nordsieck vector has several advantages:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,127,* <ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,128,*   <li>it greatly simplifies step interpolation as the interpolator mainly applies
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,129,"*   Taylor series formulas,</li>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,130,*   <li>it simplifies step changes that occur when discrete events that truncate
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,131,"*   the step are triggered,</li>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,132,*   <li>it allows to extend the methods in order to support adaptive stepsize (not implemented yet).</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,133,* </ul></p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,135,* <p>The Nordsieck vector at step n+1 is computed from the Nordsieck vector at step n as follows:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,136,* <ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,137,*   <li>y<sub>n+1</sub> = y<sub>n</sub> + s<sub>1</sub>(n) + u<sup>T</sup> r<sub>n</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,138,"*   <li>s<sub>1</sub>(n+1) = h f(t<sub>n+1</sub>, y<sub>n+1</sub>)</li>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,139,*   <li>r<sub>n+1</sub> = (s<sub>1</sub>(n) - s<sub>1</sub>(n+1)) P<sup>-1</sup> u + P<sup>-1</sup> A P r<sub>n</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,140,* </ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,141,* where A is a rows shifting matrix (the lower left part is an identity matrix):
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,142,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,143,*        [ 0 0   ...  0 0 | 0 ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,145,*        [ 1 0   ...  0 0 | 0 ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,146,*    A = [ 0 1   ...  0 0 | 0 ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,147,*        [       ...      | 0 ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,148,*        [ 0 0   ...  1 0 | 0 ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,149,*        [ 0 0   ...  0 1 | 0 ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,150,* </pre></p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,152,"* <p>The P<sup>-1</sup>u vector and the P<sup>-1</sup> A P matrix do not depend on the state,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,153,* they only depend on k and therefore are precomputed once for all.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,155,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,156,* @since 2.0
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,158,public class AdamsBashforthIntegrator extends MultistepIntegrator {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,160,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,161,private static final long serialVersionUID = 67792782787082199L;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,163,/** Cache for already computed coefficients. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,164,"private static final Map<Integer, CachedCoefficients> cache ="
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,165,"new HashMap<Integer, CachedCoefficients>();"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,167,/** Coefficients of the method. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,168,private final transient CachedCoefficients coefficients;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,170,/** Integration step. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,171,private final double step;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,174,* Build an Adams-Bashforth with the given order and step size.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,175,* @param order order of the method (must be greater than 1: due to
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,176,* an implementation limitation the order 1 method is not supported)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,177,* @param step integration step size
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,178,* @exception IllegalArgumentException if order is 1 or less
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,180,"public AdamsBashforthIntegrator(final int order, final double step)"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,181,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,183,"super(""Adams-Bashforth"", order);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,184,if (order <= 1) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,185,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,186,"""{0} is supported only for orders 2 or more"","
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,187,getName());
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,190,"// cache the coefficients for each order, to avoid recomputing them"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,191,synchronized(cache) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,192,CachedCoefficients coeff = cache.get(order);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,193,if (coeff == null) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,194,coeff = new CachedCoefficients(order);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,195,"cache.put(order, coeff);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,197,coefficients = coeff;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,200,this.step = Math.abs(step);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,204,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,205,"public double integrate(final FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,206,"final double t0, final double[] y0,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,207,"final double t, final double[] y)"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,208,"throws DerivativeException, IntegratorException {"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,210,final int n = y0.length;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,211,"sanityChecks(equations, t0, y0, t, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,212,final boolean forward = (t > t0);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,214,// initialize working arrays
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,215,if (y != y0) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,216,"System.arraycopy(y0, 0, y, 0, n);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,219,// set up an interpolator sharing the integrator arrays
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,220,final NordsieckStepInterpolator interpolator = new NordsieckStepInterpolator();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,221,"interpolator.reinitialize(y, forward);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,223,// set up integration control objects
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,224,stepStart = t0;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,225,stepSize  = forward ? step : -step;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,226,for (StepHandler handler : stepHandlers) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,227,handler.reset();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,229,"CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,231,// compute the first few steps using the configured starter integrator
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,232,double stopTime =
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,233,"start(previousF.length, stepSize, manager, equations, stepStart, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,234,if (Double.isNaN(previousT[0])) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,235,return stopTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,237,stepStart = previousT[0];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,239,// convert to Nordsieck representation
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,240,double[]   scaled    = convertToNordsieckLow();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,241,RealMatrix nordsieck = convertToNordsieckHigh(scaled);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,242,"interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,243,interpolator.storeTime(stepStart);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,245,boolean lastStep = false;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,246,while (!lastStep) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,248,// shift all data
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,249,interpolator.shift();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,251,// discrete events handling
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,252,interpolator.storeTime(stepStart + stepSize);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,253,if (manager.evaluateStep(interpolator)) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,254,stepSize = manager.getEventTime() - stepStart;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,257,// the step has been accepted (may have been truncated)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,258,final double nextStep = stepStart + stepSize;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,259,interpolator.storeTime(nextStep);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,260,"System.arraycopy(interpolator.getInterpolatedState(), 0, y, 0, n);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,261,"manager.stepAccepted(nextStep, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,262,lastStep = manager.stop();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,264,// update the Nordsieck vector
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,265,final double[] f0 = previousF[0];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,266,previousT[0] = nextStep;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,267,"equations.computeDerivatives(nextStep, y, f0);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,268,nordsieck = coefficients.msUpdate.multiply(nordsieck);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,269,final double[] end = new double[y0.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,270,for (int j = 0; j < y0.length; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,271,end[j] = stepSize * f0[j];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,273,"nordsieck.walkInOptimizedOrder(new NordsieckUpdater(scaled, end, coefficients.c1));"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,274,scaled = end;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,275,"interpolator.reinitialize(nextStep, stepSize, scaled, nordsieck);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,277,// provide the step data to the step handler
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,278,for (StepHandler handler : stepHandlers) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,279,"handler.handleStep(interpolator, lastStep);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,281,stepStart = nextStep;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,283,"if (!lastStep && manager.reset(stepStart, y)) {"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,285,// some events handler has triggered changes that
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,286,"// invalidate the derivatives, we need to restart from scratch"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,287,stopTime =
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,288,"start(previousF.length, stepSize, manager, equations, stepStart, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,289,if (Double.isNaN(previousT[0])) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,290,return stopTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,292,stepStart = previousT[0];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,294,// convert to Nordsieck representation
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,295,scaled    = convertToNordsieckLow();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,296,nordsieck = convertToNordsieckHigh(scaled);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,297,"interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,303,stopTime  = stepStart;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,304,stepStart = Double.NaN;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,305,stepSize  = Double.NaN;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,306,return stopTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,310,/** Convert the multistep representation after a restart to Nordsieck representation.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,311,* @return first scaled derivative
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,313,private double[] convertToNordsieckLow() {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,315,final double[] f0 = previousF[0];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,316,final double[] scaled = new double[f0.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,317,for (int j = 0; j < f0.length; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,318,scaled[j] = stepSize * f0[j];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,320,return scaled;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,324,/** Convert the multistep representation after a restart to Nordsieck representation.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,325,* @param scaled first scaled derivative
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,326,* @return Nordsieck matrix of the higher scaled derivatives
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,328,private RealMatrix convertToNordsieckHigh(final double[] scaled) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,330,final double[] f0 = previousF[0];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,331,final double[][] multistep = new double[coefficients.msToN.getColumnDimension()][f0.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,332,for (int i = 0; i < multistep.length; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,333,final double[] msI = multistep[i];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,334,final double[] fI  = previousF[i + 1];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,335,for (int j = 0; j < f0.length; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,336,msI[j] = stepSize * fI[j] - scaled[j];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,340,"return coefficients.msToN.multiply(new RealMatrixImpl(multistep, false));"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,344,/** Updater for Nordsieck vector. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,345,private static class NordsieckUpdater extends DefaultRealMatrixChangingVisitor {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,347,/** Scaled first derivative at step start. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,348,private final double[] start;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,350,/** Scaled first derivative at step end. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,351,private final double[] end;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,353,/** Update coefficients. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,354,private final double[] c1;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,356,/** Simple constructor.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,357,* @param start scaled first derivative at step start
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,358,* @param end scaled first derivative at step end
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,359,* @param c1 update coefficients
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,361,"public NordsieckUpdater(final double[] start, final double[] end,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,362,final double[] c1) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,363,this.start = start;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,364,this.end   = end;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,365,this.c1    = c1;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,368,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,369,@Override
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,370,"public double visit(int row, int column, double value)"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,371,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,372,return value + c1[row] * (start[column] - end[column]);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,377,/** Cache for already computed coefficients. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,378,private static class CachedCoefficients {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,380,/** Transformer between multistep and Nordsieck representations. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,381,private final RealMatrix msToN;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,383,"/** Update coefficients of the higher order derivatives wrt y'', y''' ... */"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,384,private final RealMatrix msUpdate;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,386,/** Update coefficients of the higher order derivatives wrt y'. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,387,private final double[] c1;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,389,/** Simple constructor.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,390,* @param order order of the method (must be greater than 1: due to
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,391,* an implementation limitation the order 1 method is not supported)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,393,public CachedCoefficients(int order) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,395,// compute exact coefficients
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,396,FieldMatrix<BigFraction> bigNtoMS = buildP(order);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,397,FieldMatrix<BigFraction> bigMStoN =
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,398,new FieldLUDecompositionImpl<BigFraction>(bigNtoMS).getSolver().getInverse();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,399,BigFraction[] u = new BigFraction[order - 1];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,400,"Arrays.fill(u, BigFraction.ONE);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,401,BigFraction[] bigC1 = bigMStoN.operate(u);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,403,// update coefficients are computed by combining transform from
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,404,"// Nordsieck to multistep, then shifting rows to represent step advance"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,405,// then applying inverse transform
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,406,BigFraction[][] shiftedP = bigNtoMS.getData();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,407,for (int i = shiftedP.length - 1; i > 0; --i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,408,// shift rows
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,409,shiftedP[i] = shiftedP[i - 1];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,411,shiftedP[0] = new BigFraction[order - 1];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,412,"Arrays.fill(shiftedP[0], BigFraction.ZERO);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,413,FieldMatrix<BigFraction> bigMSupdate =
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,414,"bigMStoN.multiply(new FieldMatrixImpl<BigFraction>(shiftedP, false));"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,416,// convert coefficients to double
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,417,msToN    = MatrixUtils.bigFractionMatrixToRealMatrix(bigMStoN);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,418,msUpdate = MatrixUtils.bigFractionMatrixToRealMatrix(bigMSupdate);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,419,c1       = new double[order - 1];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,420,for (int i = 0; i < order - 1; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,421,c1[i] = bigC1[i].doubleValue();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,426,/** Build the P matrix transforming multistep to Nordsieck.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,427,* <p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,428,* <p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,429,"* Multistep representation uses y(k), s<sub>1</sub>(k), s<sub>1</sub>(k-1) ... s<sub>1</sub>(k-(n-1))."
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,430,"* Nordsieck representation uses y(k), s<sub>1</sub>(k), s<sub>2</sub>(k) ... s<sub>n</sub>(k)."
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,431,* The two representations share their two first components y(k) and
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,432,* s<sub>1</sub>(k). The P matrix is used to transform the remaining ones:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,433,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,434,* [ s<sub>1</sub>(k-1) ... s<sub>1</sub>(k-(n-1)]<sup>T</sup> = s<sub>1</sub>(k) [1 ... 1]<sup>T</sup> + P [s<sub>2</sub>(k) ... s<sub>n</sub>(k)]<sup>T</sup>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,435,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,436,* </p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,437,* @param order order of the method (must be strictly positive)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,438,* @return P matrix
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,440,private static FieldMatrix<BigFraction> buildP(final int order) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,442,final BigFraction[][] pData = new BigFraction[order - 1][order - 1];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,444,for (int i = 0; i < pData.length; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,445,// build the P matrix elements from Taylor series formulas
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,446,final BigFraction[] pI = pData[i];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,447,final int factor = -(i + 1);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,448,int aj = factor;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,449,for (int j = 0; j < pI.length; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,450,pI[j] = new BigFraction(aj * (j + 2));
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,451,aj *= factor;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,455,"return new FieldMatrixImpl<BigFraction>(pData, false);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,461,/** Serialize the instance.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,462,* @param oos stream where object should be written
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,463,* @throws IOException if object cannot be written to stream
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,465,private void writeObject(ObjectOutputStream oos)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,466,throws IOException {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,467,oos.defaultWriteObject();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,468,oos.writeInt(coefficients.msToN.getRowDimension() + 1);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,471,/** Deserialize the instance.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,472,* @param ois stream from which the object should be read
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,473,* @throws ClassNotFoundException if a class in the stream cannot be found
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,474,* @throws IOException if object cannot be read from the stream
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,476,private void readObject(ObjectInputStream ois)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,477,"throws ClassNotFoundException, IOException {"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,478,try {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,480,ois.defaultReadObject();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,481,final int order = ois.readInt();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,483,final Class<AdamsBashforthIntegrator> cl = AdamsBashforthIntegrator.class;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,484,"final Field f = cl.getDeclaredField(""coefficients"");"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,485,f.setAccessible(true);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,487,"// cache the coefficients for each order, to avoid recomputing them"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,488,synchronized(cache) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,489,CachedCoefficients coeff = cache.get(order);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,490,if (coeff == null) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,491,coeff = new CachedCoefficients(order);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,492,"cache.put(order, coeff);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,494,"f.set(this, coeff);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,497,} catch (NoSuchFieldException nsfe) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,498,IOException ioe = new IOException();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,499,ioe.initCause(nsfe);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,500,throw ioe;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,501,} catch (IllegalAccessException iae) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,502,IOException ioe = new IOException();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,503,ioe.initCause(iae);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,504,throw ioe;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,49, This class implements explicit Adams-Bashforth and Adams-Moulton integrators for Ordinary
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,49,* This class implements implicit Adams-Moulton integrators for Ordinary
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,52, <p>Adams-Bashforth (in fact due to Adams alone) methods are explicit
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,53, multistep ODE solvers witch fixed stepsize. The value of state vector
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,52,* <p>Adams-Moulton methods (in fact due to Adams alone) are implicit
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,53,* multistep ODE solvers with fixed stepsize. The value of state vector
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,55," derivatives at steps n, n-1, n-2 ... Depending on the number k of previous"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,56," steps one wants to use for computing the next value, different formulas"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,57, are available:</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,58, <ul>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,59,   <li>k = 1: y<sub>n+1</sub> = y<sub>n</sub> + h y'<sub>n</sub></li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,60,   <li>k = 2: y<sub>n+1</sub> = y<sub>n</sub> + h (3y'<sub>n</sub>-y'<sub>n-1</sub>)/2</li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,61,   <li>k = 3: y<sub>n+1</sub> = y<sub>n</sub> + h (23y'<sub>n</sub>-16y'<sub>n-1</sub>+5y'<sub>n-2</sub>)/12</li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,62,   <li>k = 4: y<sub>n+1</sub> = y<sub>n</sub> + h (55y'<sub>n</sub>-59y'<sub>n-1</sub>+37y'<sub>n-2</sub>-9y'<sub>n-3)/24</sub></li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,63,   <li>...</li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,64, </ul>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,66, <p>A k-steps Adams-Bashforth method is of order k. There is no theoretical limit to the
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,67," value of k, but due to an implementation limitation k must be greater than 1.</p>"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,69, <p>Adams-Moulton (also due to Adams alone) methods are implicit
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,70, multistep ODE solvers witch fixed stepsize. The value of state vector
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,71, at step n+1 is a simple combination of the value at step n and of the
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,72," derivatives at steps n+1, n, n-1 ... Depending on the number k of previous"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,73," steps one wants to use for computing the next value, different formulas"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,74, are available:</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,55,"* derivatives at steps n+1, n, n-1 ... Since y'<sub>n+1</sub> is needed to"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,56,"* compute y<sub>n+1</sub>, another method must be used to compute a first"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,57,"* estimate of y<sub>n+1</sub>, then compute y'<sub>n+1</sub>, then compute"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,58,* a final estimate of y<sub>n+1</sub> using the following formulas. Depending
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,59,* on the number k of previous steps one wants to use for computing the next
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,60,"* value, different formulas are available for the final estimate:</p>"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,79,   <li>k = 4: y<sub>n+1</sub> = y<sub>n</sub> + h (9y'<sub>n+1</sub>+19y'<sub>n</sub>-5y'<sub>n-1</sub>+y'<sub>n-2)/24</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,65,*   <li>k = 4: y<sub>n+1</sub> = y<sub>n</sub> + h (9y'<sub>n+1</sub>+19y'<sub>n</sub>-5y'<sub>n-1</sub>+y'<sub>n-2</sub>)/24</li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,103, Adams-Bashforth methods can be written:
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,104, <ul>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,105,   <li>k = 1: y<sub>n+1</sub> = y<sub>n</sub> + s<sub>1</sub>(n)</li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,106,   <li>k = 2: y<sub>n+1</sub> = y<sub>n</sub> + 3/2 s<sub>1</sub>(n) + [ -1/2 ] q<sub>n</sub></li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,107,   <li>k = 3: y<sub>n+1</sub> = y<sub>n</sub> + 23/12 s<sub>1</sub>(n) + [ -16/12 5/12 ] q<sub>n</sub></li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,108,   <li>k = 4: y<sub>n+1</sub> = y<sub>n</sub> + 55/24 s<sub>1</sub>(n) + [ -59/24 37/24 -9/24 ] q<sub>n</sub></li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,109,   <li>...</li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,110, </ul>and Adams-Moulton methods can be written:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,89,* Adams-Moulton methods can be written:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,98,"* <p>Instead of using the classical representation with first derivatives only (y<sub>n</sub>,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,99,"* s<sub>1</sub>(n+1) and q<sub>n+1</sub>), our implementation uses the Nordsieck vector with"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,100,"* higher degrees scaled derivatives all taken at the same step (y<sub>n</sub>, s<sub>1</sub>(n)"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,101,* and r<sub>n</sub>) where r<sub>n</sub> is defined as:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,102,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,103,"* r<sub>n</sub> = [ s<sub>2</sub>(n), s<sub>3</sub>(n) ... s<sub>k</sub>(n) ]<sup>T</sup>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,104,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,105,* (here again we omit the k index in the notation for clarity)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,106,* </p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,126, classical representation (q<sub>n</sub> for Adams-Bashforth or q<sub>n+1</sub> for Adams-Moulton)
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,127, and Nordsieck vector
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,128, <pre>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,129," r<sub>n</sub> = [ s<sub>2</sub>(n), s<sub>3</sub>(n) ... s<sub>k</sub>(n) ]<supT</sup>"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,130, </pre>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,131, (here again we omit the k index in the notation for clarity). The transform between r<sub>n</sub>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,115,* classical representation and Nordsieck vector. The transform between r<sub>n</sub>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,146, <p>This class implements the Adams-Bashforth and Adams-Moulton method using the Nordsieck vector
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,147," (i.e. y<sub>n</sub>, s<sub>1</sub>(n) and r<sub>n</sub>) rather than the classical representation."
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,148, Using the Nordsieck vector has several advantages:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,130,* <p>Using the Nordsieck vector has several advantages:
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,150,   <li>it leverages Adams-Bashforth and Adams-Moulton methods as in this representation
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,151,"   they share most of their coefficients and most of their implementation,</li>"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,159, <p>The Nordsieck vector at step n+1 is computed from the Nordsieck vector at step n as follows:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,139,* <p>The predicted Nordsieck vector at step n+1 is computed from the Nordsieck vector at step
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,140,* n as follows:
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,161,   <li>y<sub>n+1</sub> = y<sub>n</sub> + s<sub>1</sub>(n) + u<sup>T</sup> r<sub>n</sub></li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,162,"   <li>s<sub>1</sub>(n+1) = h f(t<sub>n+1</sub>, y<sub>n+1</sub>)</li>"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,163,   <li>r<sub>n+1</sub> = (s<sub>1</sub>(n) - s<sub>1</sub>(n+1)) P<sup>-1</sup> u + P<sup>-1</sup> A P r<sub>n</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,142,*   <li>Y<sub>n+1</sub> = y<sub>n</sub> + s<sub>1</sub>(n) + u<sup>T</sup> r<sub>n</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,143,"*   <li>S<sub>1</sub>(n+1) = h f(t<sub>n+1</sub>, Y<sub>n+1</sub>)</li>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,144,*   <li>R<sub>n+1</sub> = (s<sub>1</sub>(n) - s<sub>1</sub>(n+1)) P<sup>-1</sup> u + P<sup>-1</sup> A P r<sub>n</sub></li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,175," If the method is an Adams-Moulton method, the following additional correction is performed:"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,156,"* From this predicted vector, the corrected vector is computed as follows:"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,177,   <li>Y<sub>n+1</sub> = y<sub>n</sub> + s<sub>1</sub>(n+1) + [ -1 +1 -1 +1 ... &plusmn;1 ] r<sub>n+1</sub></li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,178,"   <li>S<sub>1</sub>(n+1) = h f(t<sub>n+1</sub>, Y<sub>n+1</sub>)</li>"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,179,   <li>R<sub>n+1</sub> = r<sub>n+1</sub> + (s<sub>1</sub>(n) - S<sub>1</sub>(n+1)) P<sup>-1</sup> u</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,158,*   <li>y<sub>n+1</sub> = y<sub>n</sub> + S<sub>1</sub>(n+1) + [ -1 +1 -1 +1 ... &plusmn;1 ] r<sub>n+1</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,159,"*   <li>s<sub>1</sub>(n+1) = h f(t<sub>n+1</sub>, y<sub>n+1</sub>)</li>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,160,*   <li>r<sub>n+1</sub> = R<sub>n+1</sub> + (s<sub>1</sub>(n+1) - S<sub>1</sub>(n+1)) P<sup>-1</sup> u</li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,181," where the upper case Y<sub>n+1</sub>, S<sub>n+1</sub> and R<sub>n+1</sub> represent the"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,182," corrected states whereas the lower case y<sub>n+1</sub>, s<sub>n+1</sub> and r<sub>n+1</sub>"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,183, represent the predicted states.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,162,"* where the upper case Y<sub>n+1</sub>, S<sub>1</sub>(n+1) and R<sub>n+1</sub> represent the"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,163,"* predicted states whereas the lower case y<sub>n+1</sub>, s<sub>n+1</sub> and r<sub>n+1</sub>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,164,* represent the corrected states.</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,186, they are precomputed once for all.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,167,* they only depend on k and therefore are precomputed once for all.</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,191,ublic class AdamsIntegrator extends MultistepIntegrator {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,172,public class AdamsMoultonIntegrator extends MultistepIntegrator {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,194,rivate static final long serialVersionUID = -5893911062100008922L;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,175,private static final long serialVersionUID = -2740961714898447598L;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,200,** No correction integrator method name. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,201,"rivate static final String NO_CORRECTION_METHOD_NAME = ""Adams-Bashforth"";"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,203,** Correction integrator method name. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,204,"rivate static final String CORRECTION_METHOD_NAME = ""Adams-Moulton"";"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,206,** Correction indicator (to choose between Adams-Bashforth and Adams-Moulton). */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,207,rivate final boolean withCorrection;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,216, Build an Adams-Bashforth or Adams-Moulton integrator with the given order and step size.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,188,* Build an Adams-Moulton integrator with the given order and step size.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,219, @param withCorrection if true apply Adams-Moulton correction at end of
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,220," step, otherwise use only Adams-Bashforth prediction"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,224,"ublic AdamsIntegrator(final int order, final boolean withCorrection,"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,225,inal double step)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,194,"public AdamsMoultonIntegrator(final int order, final double step)"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,228,"uper(withCorrection ? CORRECTION_METHOD_NAME : NO_CORRECTION_METHOD_NAME,"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,229,"rder, new NordsieckStepInterpolator());"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,197,"super(""Adams-Moulton"", order);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,235,his.withCorrection = withCorrection;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,267,/ set up an interpolator sharing the integrator arrays
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,268,inal NordsieckStepInterpolator interpolator =
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,269,NordsieckStepInterpolator) prototype.copy();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,270,"nterpolator.reinitialize(yTmp, forward);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,234,// set up two interpolators sharing the integrator arrays
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,235,final NordsieckStepInterpolator interpolator = new NordsieckStepInterpolator();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,236,"interpolator.reinitialize(y, forward);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,237,final NordsieckStepInterpolator interpolatorTmp = new NordsieckStepInterpolator();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,238,"interpolatorTmp.reinitialize(yTmp, forward);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,287,"ystem.arraycopy(y, 0, yTmp, 0, n);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,255,double hNew = 0;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,292,"nterpolator.reinitialize(stepSize, scaled, nordsieck);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,260,"interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,301,f (withCorrection) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,269,hNew  = forward ? step : -step;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,270,for (boolean loop = true; loop;) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,272,stepSize = hNew;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,303,/ evaluate derivative at predicted state
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,274,// predict a first estimate of the state at step end (P in the PECE sequence)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,276,interpolator.setInterpolatedTime(stepEnd);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,277,"System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,279,// evaluate a first estimate of the derivative (first E in the PECE sequence)
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,307,"quations.computeDerivatives(stepEnd, interpolator.getInterpolatedState(), f0);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,282,"equations.computeDerivatives(stepEnd, yTmp, f0);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,310,ordsieck = coefficients.msUpdate.multiply(nordsieck);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,311,inal double[] end = new double[y0.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,285,final RealMatrix nordsieckTmp = coefficients.msUpdate.multiply(nordsieck);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,286,final double[] predictedScaled = new double[y0.length];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,313,nd[j] = stepSize * f0[j];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,288,predictedScaled[j] = stepSize * f0[j];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,315,"ordsieck.walkInOptimizedOrder(new NordsieckUpdater(scaled, end, coefficients.c1));"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,316,caled = end;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,290,"nordsieckTmp.walkInOptimizedOrder(new NordsieckUpdater(scaled, predictedScaled, coefficients.c1));"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,318,/ update interpolator
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,319,"ordsieck.walkInOptimizedOrder(new Corrector(y, scaled, yTmp));"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,320,"nterpolator.reinitialize(stepSize, scaled, nordsieck);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,292,// apply correction (C in the PECE sequence)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,293,"nordsieckTmp.walkInOptimizedOrder(new Corrector(y, predictedScaled, yTmp));"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,295,// evaluate a final estimate of the derivative (second E in the PECE sequence)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,296,"equations.computeDerivatives(stepEnd, yTmp, f0);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,298,// update Nordsieck vector
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,299,final double[] correctedScaled = new double[y0.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,300,for (int j = 0; j < y0.length; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,301,correctedScaled[j] = stepSize * f0[j];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,303,"nordsieckTmp.walkInOptimizedOrder(new NordsieckUpdater(predictedScaled, correctedScaled, coefficients.c1));"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,305,// discrete events handling
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,306,"interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,307,interpolatorTmp.storeTime(stepStart);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,308,interpolatorTmp.shift();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,309,interpolatorTmp.storeTime(stepEnd);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,310,if (manager.evaluateStep(interpolatorTmp)) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,311,// reject the step to match exactly the next switch time
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,312,hNew = manager.getEventTime() - stepStart;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,313,} else {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,314,// accept the step
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,315,scaled    = correctedScaled;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,316,nordsieck = nordsieckTmp;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,317,"interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,318,loop = false;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,324,/ discrete events handling
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,325,nterpolator.storeTime(stepStart + stepSize);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,326,f (manager.evaluateStep(interpolator)) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,327,tepSize = manager.getEventTime() - stepStart;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,332,nterpolator.setInterpolatedTime(nextStep);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,333,"ystem.arraycopy(interpolator.getInterpolatedState(), 0, y, 0, n);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,325,"System.arraycopy(yTmp, 0, y, 0, n);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,326,interpolator.storeTime(nextStep);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,331,interpolator.setInterpolatedTime(nextStep);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,343,f (!lastStep) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,344,/ prepare next step
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,346,"f (manager.reset(stepStart, y)) {"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,348,/ some events handler has triggered changes that
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,349,"/ invalidate the derivatives, we need to restart from scratch"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,350,topTime =
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,351,"tart(previousF.length, stepSize, manager, equations, stepStart, y);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,352,f (Double.isNaN(previousT[0])) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,353,eturn stopTime;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,355,tepStart = previousT[0];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,357,/ convert to Nordsieck representation
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,358,caled    = convertToNordsieckLow();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,359,ordsieck = convertToNordsieckHigh(scaled);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,360,"nterpolator.reinitialize(stepSize, scaled, nordsieck);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,361,nterpolator.storeTime(stepStart);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,364, else {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,366,/ evaluate differential equations for next step
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,367,inal double[] f0 = previousF[0];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,368,reviousT[0] = stepStart;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,369,"quations.computeDerivatives(stepStart, y, f0);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,370,f (!withCorrection) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,371,ordsieck = coefficients.msUpdate.multiply(nordsieck);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,373,inal double[] end = new double[y0.length];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,374,or (int j = 0; j < y0.length; ++j) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,375,nd[j] = stepSize * f0[j];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,377,"ordsieck.walkInOptimizedOrder(new NordsieckUpdater(scaled, end, coefficients.c1));"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,378,caled = end;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,379,"nterpolator.reinitialize(stepSize, scaled, nordsieck);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,337,"if (!lastStep && manager.reset(stepStart, y)) {"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,339,// some events handler has triggered changes that
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,340,"// invalidate the derivatives, we need to restart from scratch"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,341,stopTime =
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,342,"start(previousF.length, stepSize, manager, equations, stepStart, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,343,if (Double.isNaN(previousT[0])) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,344,return stopTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,346,stepStart = previousT[0];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,383,"ystem.arraycopy(y, 0, yTmp, 0, n);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,348,// convert to Nordsieck representation
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,349,scaled    = convertToNordsieckLow();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,350,nordsieck = convertToNordsieckHigh(scaled);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,351,"interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,352,interpolator.storeTime(stepStart);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,624,inal Class<AdamsIntegrator> cl = AdamsIntegrator.class;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,593,final Class<AdamsMoultonIntegrator> cl = AdamsMoultonIntegrator.class;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,20,import static org.junit.Assert.assertEquals;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,21,import static org.junit.Assert.assertTrue;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,23,import java.io.ByteArrayInputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,24,import java.io.ByteArrayOutputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,25,import java.io.IOException;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,26,import java.io.ObjectInputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,27,import java.io.ObjectOutputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,29,import org.apache.commons.math.ode.DerivativeException;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,30,import org.apache.commons.math.ode.FirstOrderIntegrator;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,31,import org.apache.commons.math.ode.IntegratorException;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,32,import org.apache.commons.math.ode.events.EventHandler;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,33,import org.junit.Test;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,35,public class AdamsBashforthIntegratorTest {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,37,@Test(expected=IntegratorException.class)
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,38,"public void dimensionCheck() throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,39,TestProblem1 pb = new TestProblem1();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,40,"new AdamsBashforthIntegrator(3, 0.01).integrate(pb,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,41,"0.0, new double[pb.getDimension()+10],"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,42,"1.0, new double[pb.getDimension()+10]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,45,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,46,"public void decreasingSteps() throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,48,TestProblemAbstract[] problems = TestProblemFactory.getProblems();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,49,for (int k = 0; k < problems.length; ++k) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,51,double previousError = Double.NaN;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,52,for (int i = 6; i < 10; ++i) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,54,TestProblemAbstract pb  = (TestProblemAbstract) problems[k].clone();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,55,"double step = (pb.getFinalTime() - pb.getInitialTime()) * Math.pow(2.0, -i);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,57,"FirstOrderIntegrator integ = new AdamsBashforthIntegrator(5, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,58,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,59,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,60,EventHandler[] functions = pb.getEventsHandlers();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,61,for (int l = 0; l < functions.length; ++l) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,62,"integ.addEventHandler(functions[l],"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,63,"Double.POSITIVE_INFINITY, 1.0e-3 * step, 1000);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,65,"double stopTime = integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,66,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,67,if (functions.length == 0) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,68,"assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,71,double error = handler.getMaximalValueError();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,72,if ((i > 6) && !(pb instanceof TestProblem4) && !(pb instanceof TestProblem6)) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,73,assertTrue(error <= Math.abs(1.05 * previousError));
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,75,previousError = error;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,83,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,84,"public void smallStep() throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,86,TestProblem1 pb  = new TestProblem1();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,87,double range = pb.getFinalTime() - pb.getInitialTime();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,88,double step = range * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,90,"AdamsBashforthIntegrator integ = new AdamsBashforthIntegrator(3, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,91,"integ.setStarterIntegrator(new DormandPrince853Integrator(0, range, 1.0e-12, 1.0e-12));"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,92,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,93,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,94,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,95,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,96,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,98,assertTrue(handler.getLastError() < 2.0e-9);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,99,assertTrue(handler.getMaximalValueError() < 9.0e-9);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,100,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,101,"assertEquals(""Adams-Bashforth"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,105,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,106,"public void bigStep() throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,108,TestProblem1 pb  = new TestProblem1();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,109,double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.2;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,111,"FirstOrderIntegrator integ = new AdamsBashforthIntegrator(3, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,112,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,113,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,114,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,115,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,116,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,118,assertTrue(handler.getLastError() > 0.06);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,119,assertTrue(handler.getMaximalValueError() > 0.06);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,120,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,124,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,125,"public void backward() throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,127,TestProblem5 pb = new TestProblem5();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,128,double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,130,"FirstOrderIntegrator integ = new AdamsBashforthIntegrator(5, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,131,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,132,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,133,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,134,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,136,assertTrue(handler.getLastError() < 8.0e-11);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,137,assertTrue(handler.getMaximalValueError() < 8.0e-11);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,138,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-16);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,139,"assertEquals(""Adams-Bashforth"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,142,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,143,"public void polynomial() throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,144,TestProblem6 pb = new TestProblem6();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,145,double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.02;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,147,for (int order = 2; order < 9; ++order) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,148,"AdamsBashforthIntegrator integ = new AdamsBashforthIntegrator(order, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,149,"integ.setStarterIntegrator(new DormandPrince853Integrator(1.0e-3 * step, 1.0e3 * step,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,150,"1.0e-5, 1.0e-5));"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,151,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,152,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,153,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,154,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,155,if (order < 5) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,156,assertTrue(handler.getMaximalValueError() > 1.0e-5);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,157,} else {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,158,assertTrue(handler.getMaximalValueError() < 7.0e-12);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,164,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,165,public void serialization()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,166,"throws IntegratorException, DerivativeException,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,167,"IOException, ClassNotFoundException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,169,TestProblem6 pb = new TestProblem6();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,170,double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.01;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,172,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,173,ObjectOutputStream    oos = new ObjectOutputStream(bos);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,174,"oos.writeObject(new AdamsBashforthIntegrator(8, step));"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,175,assertTrue(bos.size() > 2800);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,176,assertTrue(bos.size() < 2900);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,178,ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,179,ObjectInputStream     ois = new ObjectInputStream(bis);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,180,FirstOrderIntegrator integ  = (AdamsBashforthIntegrator) ois.readObject();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,181,"assertEquals(""Adams-Bashforth"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,182,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,183,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,184,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,185,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,186,assertTrue(handler.getMaximalValueError() < 7.0e-13);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,18,ackage org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,21,mport static org.junit.Assert.assertTrue;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,23,mport java.io.ByteArrayInputStream;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,24,mport java.io.ByteArrayOutputStream;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,25,mport java.io.IOException;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,26,mport java.io.ObjectInputStream;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,27,mport java.io.ObjectOutputStream;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,29,mport org.apache.commons.math.ode.DerivativeException;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,30,mport org.apache.commons.math.ode.FirstOrderIntegrator;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,31,mport org.apache.commons.math.ode.IntegratorException;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,32,mport org.apache.commons.math.ode.events.EventHandler;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,33,mport org.junit.Test;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,35,ublic class AdamsIntegratorTest {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,37,Test(expected=IntegratorException.class)
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,38,"ublic void dimensionCheckBashforth() throws DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,39,estProblem1 pb = new TestProblem1();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,40,"ew AdamsIntegrator(3, false, 0.01).integrate(pb,"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,41,".0, new double[pb.getDimension()+10],"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,42,".0, new double[pb.getDimension()+10]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,45,Test
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,46,"ublic void decreasingStepsBashforth() throws DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,48,estProblemAbstract[] problems = TestProblemFactory.getProblems();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,49,or (int k = 0; k < problems.length; ++k) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,51,ouble previousError = Double.NaN;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,52,or (int i = 6; i < 10; ++i) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,54,estProblemAbstract pb  = (TestProblemAbstract) problems[k].clone();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,55,"ouble step = (pb.getFinalTime() - pb.getInitialTime()) * Math.pow(2.0, -i);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,57,"irstOrderIntegrator integ = new AdamsIntegrator(5, false, step);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,58,"estProblemHandler handler = new TestProblemHandler(pb, integ);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,59,nteg.addStepHandler(handler);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,60,ventHandler[] functions = pb.getEventsHandlers();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,61,or (int l = 0; l < functions.length; ++l) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,62,"nteg.addEventHandler(functions[l],"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,63,"ouble.POSITIVE_INFINITY, 1.0e-3 * step, 1000);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,65,"ouble stopTime = integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,66,"b.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,67,f (functions.length == 0) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,68,"ssertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,71,ouble error = handler.getMaximalValueError();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,72,f ((i > 6) && !(pb instanceof TestProblem4) && !(pb instanceof TestProblem6)) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,73,ssertTrue(error <= Math.abs(1.05 * previousError));
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,75,reviousError = error;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,83,Test
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,84,"ublic void smallStepBashforth() throws DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,86,estProblem1 pb  = new TestProblem1();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,87,ouble step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,89,"irstOrderIntegrator integ = new AdamsIntegrator(3, false, step);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,90,"estProblemHandler handler = new TestProblemHandler(pb, integ);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,91,nteg.addStepHandler(handler);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,92,"nteg.integrate(pb,"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,93,"b.getInitialTime(), pb.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,94,"b.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,96,ssertTrue(handler.getLastError() < 2.0e-9);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,97,ssertTrue(handler.getMaximalValueError() < 9.0e-9);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,98,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-14);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,99,"ssertEquals(""Adams-Bashforth"", integ.getName());"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,103,Test
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,104,"ublic void bigStepBashforth() throws DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,106,estProblem1 pb  = new TestProblem1();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,107,ouble step = (pb.getFinalTime() - pb.getInitialTime()) * 0.2;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,109,"irstOrderIntegrator integ = new AdamsIntegrator(3, false, step);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,110,"estProblemHandler handler = new TestProblemHandler(pb, integ);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,111,nteg.addStepHandler(handler);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,112,"nteg.integrate(pb,"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,113,"b.getInitialTime(), pb.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,114,"b.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,116,ssertTrue(handler.getLastError() > 0.06);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,117,ssertTrue(handler.getMaximalValueError() > 0.06);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,118,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-14);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,122,Test
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,123,"ublic void backwardBashforth() throws DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,125,estProblem5 pb = new TestProblem5();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,126,ouble step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,128,"irstOrderIntegrator integ = new AdamsIntegrator(5, false, step);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,129,"estProblemHandler handler = new TestProblemHandler(pb, integ);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,130,nteg.addStepHandler(handler);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,131,"nteg.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,132,"b.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,134,ssertTrue(handler.getLastError() < 8.0e-11);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,135,ssertTrue(handler.getMaximalValueError() < 8.0e-11);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,136,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-15);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,137,"ssertEquals(""Adams-Bashforth"", integ.getName());"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,140,Test
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,141,"ublic void polynomialBashforth() throws DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,142,estProblem6 pb = new TestProblem6();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,143,ouble step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.02;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,145,or (int order = 2; order < 9; ++order) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,146,"damsIntegrator integ = new AdamsIntegrator(order, false, step);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,147,"nteg.setStarterIntegrator(new DormandPrince853Integrator(1.0e-3 * step, 1.0e3 * step,"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,148,".0e-5, 1.0e-5));"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,149,"estProblemHandler handler = new TestProblemHandler(pb, integ);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,150,nteg.addStepHandler(handler);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,151,"nteg.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,152,"b.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,153,f (order < 5) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,154,ssertTrue(handler.getMaximalValueError() > 1.0e-5);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,155, else {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,156,ssertTrue(handler.getMaximalValueError() < 7.0e-12);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,162,Test
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,163,ublic void serializationBashforth()
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,164,"hrows IntegratorException, DerivativeException,"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,165,"OException, ClassNotFoundException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,167,estProblem6 pb = new TestProblem6();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,168,ouble step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.01;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,170,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,171,bjectOutputStream    oos = new ObjectOutputStream(bos);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,172,"os.writeObject(new AdamsIntegrator(8, false, step));"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,173,ssertTrue(bos.size() > 3000);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,174,ssertTrue(bos.size() < 3100);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,176,yteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,177,bjectInputStream     ois = new ObjectInputStream(bis);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,178,irstOrderIntegrator integ  = (AdamsIntegrator) ois.readObject();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,179,"ssertEquals(""Adams-Bashforth"", integ.getName());"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,180,"estProblemHandler handler = new TestProblemHandler(pb, integ);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,181,nteg.addStepHandler(handler);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,182,"nteg.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,183,"b.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,184,ssertTrue(handler.getMaximalValueError() < 7.0e-13);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,188,Test(expected=IntegratorException.class)
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,189,ublic void dimensionCheckMoulton()
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,190,"hrows DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,191,estProblem1 pb = new TestProblem1();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,192,"ew AdamsIntegrator(3, true, 0.01).integrate(pb,"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,193,".0, new double[pb.getDimension()+10],"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,194,".0, new double[pb.getDimension()+10]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,197,Test
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,198,ublic void decreasingStepsMoulton()
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,199,"hrows DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,201,estProblemAbstract[] problems = TestProblemFactory.getProblems();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,202,or (int k = 0; k < problems.length; ++k) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,204,ouble previousError = Double.NaN;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,205,or (int i = 6; i < 10; ++i) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,207,estProblemAbstract pb  = (TestProblemAbstract) problems[k].clone();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,208,"ouble step = (pb.getFinalTime() - pb.getInitialTime()) * Math.pow(2.0, -i);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,210,"irstOrderIntegrator integ = new AdamsIntegrator(5, true, step);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,211,"estProblemHandler handler = new TestProblemHandler(pb, integ);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,212,nteg.addStepHandler(handler);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,213,ventHandler[] functions = pb.getEventsHandlers();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,214,or (int l = 0; l < functions.length; ++l) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,215,"nteg.addEventHandler(functions[l],"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,216,"ouble.POSITIVE_INFINITY, 1.0e-3 * step, 1000);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,218,"ouble stopTime = integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,219,"b.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,220,f (functions.length == 0) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,221,"ssertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,224,ouble error = handler.getMaximalValueError();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,225,f ((i > 6) && !(pb instanceof TestProblem4) && !(pb instanceof TestProblem6)) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,226,ssertTrue(error <= Math.abs(1.05 * previousError));
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,228,reviousError = error;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,236,Test
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,237,ublic void smallStepMoulton()
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,238,"hrows DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,240,estProblem1 pb  = new TestProblem1();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,241,ouble step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,243,"irstOrderIntegrator integ = new AdamsIntegrator(3, true, step);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,244,"estProblemHandler handler = new TestProblemHandler(pb, integ);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,245,nteg.addStepHandler(handler);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,246,"nteg.integrate(pb,"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,247,"b.getInitialTime(), pb.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,248,"b.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,250,ssertTrue(handler.getLastError() < 1.0e-14);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,251,ssertTrue(handler.getMaximalValueError() < 2.0e-17);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,252,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-15);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,253,"ssertEquals(""Adams-Moulton"", integ.getName());"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,257,Test
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,258,ublic void bigStepMoulton()
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,259,"hrows DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,261,estProblem1 pb  = new TestProblem1();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,262,ouble step = (pb.getFinalTime() - pb.getInitialTime()) * 0.2;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,264,"irstOrderIntegrator integ = new AdamsIntegrator(3, true, step);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,265,"estProblemHandler handler = new TestProblemHandler(pb, integ);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,266,nteg.addStepHandler(handler);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,267,"nteg.integrate(pb,"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,268,"b.getInitialTime(), pb.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,269,"b.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,271,ssertTrue(handler.getMaximalValueError() > 6.0e-6);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,275,Test
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,276,ublic void backwardMoulton()
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,277,"hrows DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,279,estProblem5 pb = new TestProblem5();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,280,ouble step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,282,"irstOrderIntegrator integ = new AdamsIntegrator(5, true, step);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,283,"estProblemHandler handler = new TestProblemHandler(pb, integ);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,284,nteg.addStepHandler(handler);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,285,"nteg.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,286,"b.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,288,ssertTrue(handler.getLastError() < 1.0e-15);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,289,ssertTrue(handler.getMaximalValueError() < 3.0e-16);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,290,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-15);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,291,"ssertEquals(""Adams-Moulton"", integ.getName());"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,294,Test
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,295,ublic void polynomialMoulton()
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,296,"hrows DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,297,estProblem6 pb = new TestProblem6();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,298,ouble step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.02;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,300,or (int order = 2; order < 9; ++order) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,301,"damsIntegrator integ = new AdamsIntegrator(order, true, step);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,302,"nteg.setStarterIntegrator(new DormandPrince853Integrator(1.0e-3 * step, 1.0e3 * step,"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,303,".0e-5, 1.0e-5));"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,304,"estProblemHandler handler = new TestProblemHandler(pb, integ);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,305,nteg.addStepHandler(handler);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,306,"nteg.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,307,"b.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,308,ssertTrue(handler.getMaximalValueError() < 2.0e-13);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,20,import static org.junit.Assert.assertEquals;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,21,import static org.junit.Assert.assertTrue;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,23,import java.io.ByteArrayInputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,24,import java.io.ByteArrayOutputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,25,import java.io.IOException;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,26,import java.io.ObjectInputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,27,import java.io.ObjectOutputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,29,import org.apache.commons.math.ode.DerivativeException;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,30,import org.apache.commons.math.ode.FirstOrderIntegrator;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,31,import org.apache.commons.math.ode.IntegratorException;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,32,import org.apache.commons.math.ode.events.EventHandler;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,33,import org.junit.Test;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,35,public class AdamsMoultonIntegratorTest {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,37,@Test(expected=IntegratorException.class)
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,38,public void dimensionCheck()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,39,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,40,TestProblem1 pb = new TestProblem1();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,41,"new AdamsMoultonIntegrator(3, 0.01).integrate(pb,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,42,"0.0, new double[pb.getDimension()+10],"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,43,"1.0, new double[pb.getDimension()+10]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,46,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,47,public void decreasingSteps()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,48,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,50,TestProblemAbstract[] problems = TestProblemFactory.getProblems();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,51,for (int k = 0; k < problems.length; ++k) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,53,double previousError = Double.NaN;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,54,for (int i = 6; i < 10; ++i) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,56,TestProblemAbstract pb  = (TestProblemAbstract) problems[k].clone();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,57,"double step = (pb.getFinalTime() - pb.getInitialTime()) * Math.pow(2.0, -i);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,59,"FirstOrderIntegrator integ = new AdamsMoultonIntegrator(5, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,60,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,61,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,62,EventHandler[] functions = pb.getEventsHandlers();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,63,for (int l = 0; l < functions.length; ++l) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,64,"integ.addEventHandler(functions[l],"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,65,"Double.POSITIVE_INFINITY, 1.0e-3 * step, 1000);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,67,"double stopTime = integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,68,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,69,if (functions.length == 0) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,70,"assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,73,double error = handler.getMaximalValueError();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,74,if ((i > 6) && !(pb instanceof TestProblem4) && !(pb instanceof TestProblem6)) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,75,assertTrue(error <= Math.abs(1.05 * previousError));
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,77,previousError = error;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,85,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,86,public void smallStep()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,87,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,89,TestProblem1 pb  = new TestProblem1();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,90,double range = pb.getFinalTime() - pb.getInitialTime();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,91,double step = range * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,93,"AdamsMoultonIntegrator integ = new AdamsMoultonIntegrator(3, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,94,"integ.setStarterIntegrator(new DormandPrince853Integrator(0, range, 1.0e-12, 1.0e-12));"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,95,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,96,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,97,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,98,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,99,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,101,assertTrue(handler.getLastError() < 2.0e-10);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,102,assertTrue(handler.getMaximalValueError() < 1.0e-9);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,103,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-15);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,104,"assertEquals(""Adams-Moulton"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,108,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,109,public void bigStep()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,110,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,112,TestProblem1 pb  = new TestProblem1();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,113,double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.2;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,115,"FirstOrderIntegrator integ = new AdamsMoultonIntegrator(3, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,116,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,117,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,118,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,119,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,120,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,122,assertTrue(handler.getMaximalValueError() > 6.0e-6);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,126,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,127,public void backward()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,128,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,130,TestProblem5 pb = new TestProblem5();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,131,double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,133,"FirstOrderIntegrator integ = new AdamsMoultonIntegrator(5, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,134,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,135,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,136,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,137,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,139,assertTrue(handler.getLastError() < 4.0e-12);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,140,assertTrue(handler.getMaximalValueError() < 4.0e-12);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,141,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-15);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,142,"assertEquals(""Adams-Moulton"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,145,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,146,public void polynomial()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,147,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,148,final TestProblem6 pb = new TestProblem6();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,149,double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.02;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,151,for (int order = 2; order < 9; ++order) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,152,"AdamsMoultonIntegrator integ = new AdamsMoultonIntegrator(order, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,153,"integ.setStarterIntegrator(new DormandPrince853Integrator(1.0e-3 * step, 1.0e3 * step,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,154,"1.0e-5, 1.0e-5));"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,155,"final TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,156,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,157,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,158,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,159,if (order < 5) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,160,assertTrue(handler.getMaximalValueError() > 1.0e-6);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,161,} else {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,162,assertTrue(handler.getMaximalValueError() < 4.0e-13);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,168,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,169,public void serialization()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,170,"throws IntegratorException, DerivativeException,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,171,"IOException, ClassNotFoundException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,173,TestProblem6 pb = new TestProblem6();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,174,double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.01;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,176,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,177,ObjectOutputStream    oos = new ObjectOutputStream(bos);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,178,"oos.writeObject(new AdamsMoultonIntegrator(8, step));"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,179,assertTrue(bos.size() > 2800);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,180,assertTrue(bos.size() < 2900);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,182,ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,183,ObjectInputStream     ois = new ObjectInputStream(bis);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,184,FirstOrderIntegrator integ  = (AdamsMoultonIntegrator) ois.readObject();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,185,"assertEquals(""Adams-Moulton"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,186,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,187,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,188,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,189,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,190,assertTrue(handler.getMaximalValueError() < 2.0e-13);
False,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,32,mport org.apache.commons.math.ode.nonstiff.AdamsIntegrator;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,32,import org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator;
False,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,44,"damsIntegrator integ = new AdamsIntegrator(5, false, step);"
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,44,"AdamsBashforthIntegrator integ = new AdamsBashforthIntegrator(5, step);"
False,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,55,"damsIntegrator integ = new AdamsIntegrator(5, false, step);"
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,55,"AdamsBashforthIntegrator integ = new AdamsBashforthIntegrator(5, step);"

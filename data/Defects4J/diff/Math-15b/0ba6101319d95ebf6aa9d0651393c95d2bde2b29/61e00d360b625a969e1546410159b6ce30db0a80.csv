is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1026,** Computes of a derivative structure.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1026,/** Computes shifted logarithm of a derivative structure.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1030, logarithm the result array <em>cannot</em> be the input
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1030,* shifted logarithm the result array <em>cannot</em> be the input
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1054,/** Computes base 10 logarithm of a derivative structure.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1055,* @param operand array holding the operand
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1056,* @param operandOffset offset of the operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1057,* @param result array where result must be stored (for
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1058,* base 10 logarithm the result array <em>cannot</em> be the input
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1059,* array)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1061,"public void log10(final double[] operand, final int operandOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1062,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1065,// create the function value and derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1066,double[] function = new double[1 + order];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1067,function[0] = FastMath.log10(operand[operandOffset]);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1068,if (order > 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1069,double inv = 1.0 / operand[operandOffset];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1070,double xk  = inv / FastMath.log(10.0);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1071,for (int i = 1; i <= order; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1072,function[i] = xk;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1073,xk *= -i * inv;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1077,// apply function composition
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1078,"compose(operand, operandOffset, function, result, resultOffset);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,639,/** Base 10 logarithm.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,640,* @return base 10 logarithm of the instance
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,642,public DerivativeStructure log10() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,643,final DerivativeStructure result = new DerivativeStructure(compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,644,"compiler.log10(data, 0, result.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,645,return result;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,505,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,506,public void testLog10Definition() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,507,"double[] epsilon = new double[] { 3.0e-16, 3.0e-16, 8.0e-15, 3.0e-13, 8.0e-12 };"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,508,for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,509,for (double x = 0.1; x < 1.2; x += 0.001) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,510,"DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,511,DerivativeStructure log101 = dsX.log10();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,512,DerivativeStructure log102 = dsX.log().divide(FastMath.log(10.0));
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,513,DerivativeStructure zero = log101.subtract(log102);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,514,for (int n = 0; n <= maxOrder; ++n) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,515,"Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,551,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,552,public void testLog10Power() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,553,"double[] epsilon = new double[] { 3.0e-16, 3.0e-16, 9.0e-16, 6.0e-15, 6.0e-14 };"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,554,for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,555,for (double x = 0.1; x < 1.2; x += 0.001) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,556,"DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,557,"DerivativeStructure rebuiltX = new DerivativeStructure(1, maxOrder, 10.0).pow(dsX).log10();"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,558,DerivativeStructure zero = rebuiltX.subtract(dsX);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,559,for (int n = 0; n <= maxOrder; ++n) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,560,"Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]);"

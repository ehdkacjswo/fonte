is_addition,old_file_path,new_file_path,line_num,content
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,45,rivate static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,147,"ssertEquals(""eras"", BuddhistChronology.getInstance().eras().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,148,"ssertEquals(""centuries"", BuddhistChronology.getInstance().centuries().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,149,"ssertEquals(""years"", BuddhistChronology.getInstance().years().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,150,"ssertEquals(""weekyears"", BuddhistChronology.getInstance().weekyears().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,151,"ssertEquals(""months"", BuddhistChronology.getInstance().months().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,152,"ssertEquals(""weeks"", BuddhistChronology.getInstance().weeks().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,153,"ssertEquals(""days"", BuddhistChronology.getInstance().days().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,146,final BuddhistChronology buddhist = BuddhistChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,147,"assertEquals(""eras"", buddhist.eras().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,148,"assertEquals(""centuries"", buddhist.centuries().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,149,"assertEquals(""years"", buddhist.years().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,150,"assertEquals(""weekyears"", buddhist.weekyears().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,151,"assertEquals(""months"", buddhist.months().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,152,"assertEquals(""weeks"", buddhist.weeks().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,153,"assertEquals(""days"", buddhist.days().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,155,"ssertEquals(""hours"", BuddhistChronology.getInstance().hours().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,156,"ssertEquals(""minutes"", BuddhistChronology.getInstance().minutes().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,157,"ssertEquals(""seconds"", BuddhistChronology.getInstance().seconds().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,158,"ssertEquals(""millis"", BuddhistChronology.getInstance().millis().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,155,"assertEquals(""hours"", buddhist.hours().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,156,"assertEquals(""minutes"", buddhist.minutes().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,157,"assertEquals(""seconds"", buddhist.seconds().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,158,"assertEquals(""millis"", buddhist.millis().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,160,"ssertEquals(false, BuddhistChronology.getInstance().eras().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,161,"ssertEquals(true, BuddhistChronology.getInstance().centuries().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,162,"ssertEquals(true, BuddhistChronology.getInstance().years().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,163,"ssertEquals(true, BuddhistChronology.getInstance().weekyears().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,164,"ssertEquals(true, BuddhistChronology.getInstance().months().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,165,"ssertEquals(true, BuddhistChronology.getInstance().weeks().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,166,"ssertEquals(true, BuddhistChronology.getInstance().days().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,167,"ssertEquals(true, BuddhistChronology.getInstance().halfdays().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,168,"ssertEquals(true, BuddhistChronology.getInstance().hours().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,169,"ssertEquals(true, BuddhistChronology.getInstance().minutes().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,170,"ssertEquals(true, BuddhistChronology.getInstance().seconds().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,171,"ssertEquals(true, BuddhistChronology.getInstance().millis().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,160,"assertEquals(false, buddhist.eras().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,161,"assertEquals(true, buddhist.centuries().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,162,"assertEquals(true, buddhist.years().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,163,"assertEquals(true, buddhist.weekyears().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,164,"assertEquals(true, buddhist.months().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,165,"assertEquals(true, buddhist.weeks().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,166,"assertEquals(true, buddhist.days().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,167,"assertEquals(true, buddhist.halfdays().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,168,"assertEquals(true, buddhist.hours().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,169,"assertEquals(true, buddhist.minutes().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,170,"assertEquals(true, buddhist.seconds().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,171,"assertEquals(true, buddhist.millis().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,173,"ssertEquals(false, BuddhistChronology.getInstance().centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,174,"ssertEquals(false, BuddhistChronology.getInstance().years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,175,"ssertEquals(false, BuddhistChronology.getInstance().weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,176,"ssertEquals(false, BuddhistChronology.getInstance().months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,177,"ssertEquals(false, BuddhistChronology.getInstance().weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,178,"ssertEquals(false, BuddhistChronology.getInstance().days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,179,"ssertEquals(false, BuddhistChronology.getInstance().halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,180,"ssertEquals(true, BuddhistChronology.getInstance().hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,181,"ssertEquals(true, BuddhistChronology.getInstance().minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,182,"ssertEquals(true, BuddhistChronology.getInstance().seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,183,"ssertEquals(true, BuddhistChronology.getInstance().millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,173,"assertEquals(false, buddhist.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,174,"assertEquals(false, buddhist.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,175,"assertEquals(false, buddhist.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,176,"assertEquals(false, buddhist.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,177,"assertEquals(false, buddhist.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,178,"assertEquals(false, buddhist.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,179,"assertEquals(false, buddhist.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,180,"assertEquals(true, buddhist.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,181,"assertEquals(true, buddhist.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,182,"assertEquals(true, buddhist.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,183,"assertEquals(true, buddhist.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,185,"ssertEquals(false, BuddhistChronology.getInstanceUTC().centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,186,"ssertEquals(false, BuddhistChronology.getInstanceUTC().years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,187,"ssertEquals(false, BuddhistChronology.getInstanceUTC().weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,188,"ssertEquals(false, BuddhistChronology.getInstanceUTC().months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,189,"ssertEquals(true, BuddhistChronology.getInstanceUTC().weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,190,"ssertEquals(true, BuddhistChronology.getInstanceUTC().days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,191,"ssertEquals(true, BuddhistChronology.getInstanceUTC().halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,192,"ssertEquals(true, BuddhistChronology.getInstanceUTC().hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,193,"ssertEquals(true, BuddhistChronology.getInstanceUTC().minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,194,"ssertEquals(true, BuddhistChronology.getInstanceUTC().seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,195,"ssertEquals(true, BuddhistChronology.getInstanceUTC().millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,185,final BuddhistChronology buddhistUTC = BuddhistChronology.getInstanceUTC();
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,186,"assertEquals(false, buddhistUTC.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,187,"assertEquals(false, buddhistUTC.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,188,"assertEquals(false, buddhistUTC.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,189,"assertEquals(false, buddhistUTC.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,190,"assertEquals(true, buddhistUTC.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,191,"assertEquals(true, buddhistUTC.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,192,"assertEquals(true, buddhistUTC.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,193,"assertEquals(true, buddhistUTC.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,194,"assertEquals(true, buddhistUTC.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,195,"assertEquals(true, buddhistUTC.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,196,"assertEquals(true, buddhistUTC.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,197,"ateTimeZone gmt = DateTimeZone.forID(""Etc/GMT"");"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,198,"ssertEquals(false, BuddhistChronology.getInstance(gmt).centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,199,"ssertEquals(false, BuddhistChronology.getInstance(gmt).years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,200,"ssertEquals(false, BuddhistChronology.getInstance(gmt).weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,201,"ssertEquals(false, BuddhistChronology.getInstance(gmt).months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,202,"ssertEquals(true, BuddhistChronology.getInstance(gmt).weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,203,"ssertEquals(true, BuddhistChronology.getInstance(gmt).days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,204,"ssertEquals(true, BuddhistChronology.getInstance(gmt).halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,205,"ssertEquals(true, BuddhistChronology.getInstance(gmt).hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,206,"ssertEquals(true, BuddhistChronology.getInstance(gmt).minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,207,"ssertEquals(true, BuddhistChronology.getInstance(gmt).seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,208,"ssertEquals(true, BuddhistChronology.getInstance(gmt).millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,198,"final DateTimeZone gmt = DateTimeZone.forID(""Etc/GMT"");"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,199,final BuddhistChronology buddhistGMT = BuddhistChronology.getInstance(gmt);
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,200,"assertEquals(false, buddhistGMT.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,201,"assertEquals(false, buddhistGMT.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,202,"assertEquals(false, buddhistGMT.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,203,"assertEquals(false, buddhistGMT.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,204,"assertEquals(true, buddhistGMT.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,205,"assertEquals(true, buddhistGMT.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,206,"assertEquals(true, buddhistGMT.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,207,"assertEquals(true, buddhistGMT.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,208,"assertEquals(true, buddhistGMT.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,209,"assertEquals(true, buddhistGMT.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,210,"assertEquals(true, buddhistGMT.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,212,"ssertEquals(""era"", BuddhistChronology.getInstance().era().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,213,"ssertEquals(""centuryOfEra"", BuddhistChronology.getInstance().centuryOfEra().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,214,"ssertEquals(""yearOfCentury"", BuddhistChronology.getInstance().yearOfCentury().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,215,"ssertEquals(""yearOfEra"", BuddhistChronology.getInstance().yearOfEra().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,216,"ssertEquals(""year"", BuddhistChronology.getInstance().year().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,217,"ssertEquals(""monthOfYear"", BuddhistChronology.getInstance().monthOfYear().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,218,"ssertEquals(""weekyearOfCentury"", BuddhistChronology.getInstance().weekyearOfCentury().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,219,"ssertEquals(""weekyear"", BuddhistChronology.getInstance().weekyear().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,220,"ssertEquals(""weekOfWeekyear"", BuddhistChronology.getInstance().weekOfWeekyear().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,221,"ssertEquals(""dayOfYear"", BuddhistChronology.getInstance().dayOfYear().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,222,"ssertEquals(""dayOfMonth"", BuddhistChronology.getInstance().dayOfMonth().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,223,"ssertEquals(""dayOfWeek"", BuddhistChronology.getInstance().dayOfWeek().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,214,final BuddhistChronology buddhist = BuddhistChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,215,"assertEquals(""era"", buddhist.era().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,216,"assertEquals(""centuryOfEra"", buddhist.centuryOfEra().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,217,"assertEquals(""yearOfCentury"", buddhist.yearOfCentury().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,218,"assertEquals(""yearOfEra"", buddhist.yearOfEra().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,219,"assertEquals(""year"", buddhist.year().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,220,"assertEquals(""monthOfYear"", buddhist.monthOfYear().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,221,"assertEquals(""weekyearOfCentury"", buddhist.weekyearOfCentury().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,222,"assertEquals(""weekyear"", buddhist.weekyear().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,223,"assertEquals(""weekOfWeekyear"", buddhist.weekOfWeekyear().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,224,"assertEquals(""dayOfYear"", buddhist.dayOfYear().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,225,"assertEquals(""dayOfMonth"", buddhist.dayOfMonth().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,226,"assertEquals(""dayOfWeek"", buddhist.dayOfWeek().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,225,"ssertEquals(true, BuddhistChronology.getInstance().era().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,226,"ssertEquals(true, BuddhistChronology.getInstance().centuryOfEra().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,227,"ssertEquals(true, BuddhistChronology.getInstance().yearOfCentury().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,228,"ssertEquals(true, BuddhistChronology.getInstance().yearOfEra().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,229,"ssertEquals(true, BuddhistChronology.getInstance().year().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,230,"ssertEquals(true, BuddhistChronology.getInstance().monthOfYear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,231,"ssertEquals(true, BuddhistChronology.getInstance().weekyearOfCentury().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,232,"ssertEquals(true, BuddhistChronology.getInstance().weekyear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,233,"ssertEquals(true, BuddhistChronology.getInstance().weekOfWeekyear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,234,"ssertEquals(true, BuddhistChronology.getInstance().dayOfYear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,235,"ssertEquals(true, BuddhistChronology.getInstance().dayOfMonth().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,236,"ssertEquals(true, BuddhistChronology.getInstance().dayOfWeek().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,228,"assertEquals(true, buddhist.era().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,229,"assertEquals(true, buddhist.centuryOfEra().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,230,"assertEquals(true, buddhist.yearOfCentury().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,231,"assertEquals(true, buddhist.yearOfEra().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,232,"assertEquals(true, buddhist.year().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,233,"assertEquals(true, buddhist.monthOfYear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,234,"assertEquals(true, buddhist.weekyearOfCentury().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,235,"assertEquals(true, buddhist.weekyear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,236,"assertEquals(true, buddhist.weekOfWeekyear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,237,"assertEquals(true, buddhist.dayOfYear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,238,"assertEquals(true, buddhist.dayOfMonth().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,239,"assertEquals(true, buddhist.dayOfWeek().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,240,"ssertEquals(""halfdayOfDay"", BuddhistChronology.getInstance().halfdayOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,241,"ssertEquals(""clockhourOfHalfday"", BuddhistChronology.getInstance().clockhourOfHalfday().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,242,"ssertEquals(""hourOfHalfday"", BuddhistChronology.getInstance().hourOfHalfday().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,243,"ssertEquals(""clockhourOfDay"", BuddhistChronology.getInstance().clockhourOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,244,"ssertEquals(""hourOfDay"", BuddhistChronology.getInstance().hourOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,245,"ssertEquals(""minuteOfDay"", BuddhistChronology.getInstance().minuteOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,246,"ssertEquals(""minuteOfHour"", BuddhistChronology.getInstance().minuteOfHour().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,247,"ssertEquals(""secondOfDay"", BuddhistChronology.getInstance().secondOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,248,"ssertEquals(""secondOfMinute"", BuddhistChronology.getInstance().secondOfMinute().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,249,"ssertEquals(""millisOfDay"", BuddhistChronology.getInstance().millisOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,250,"ssertEquals(""millisOfSecond"", BuddhistChronology.getInstance().millisOfSecond().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,243,final BuddhistChronology buddhist = BuddhistChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,244,"assertEquals(""halfdayOfDay"", buddhist.halfdayOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,245,"assertEquals(""clockhourOfHalfday"", buddhist.clockhourOfHalfday().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,246,"assertEquals(""hourOfHalfday"", buddhist.hourOfHalfday().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,247,"assertEquals(""clockhourOfDay"", buddhist.clockhourOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,248,"assertEquals(""hourOfDay"", buddhist.hourOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,249,"assertEquals(""minuteOfDay"", buddhist.minuteOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,250,"assertEquals(""minuteOfHour"", buddhist.minuteOfHour().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,251,"assertEquals(""secondOfDay"", buddhist.secondOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,252,"assertEquals(""secondOfMinute"", buddhist.secondOfMinute().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,253,"assertEquals(""millisOfDay"", buddhist.millisOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,254,"assertEquals(""millisOfSecond"", buddhist.millisOfSecond().getName());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,252,"ssertEquals(true, BuddhistChronology.getInstance().halfdayOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,253,"ssertEquals(true, BuddhistChronology.getInstance().clockhourOfHalfday().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,254,"ssertEquals(true, BuddhistChronology.getInstance().hourOfHalfday().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,255,"ssertEquals(true, BuddhistChronology.getInstance().clockhourOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,256,"ssertEquals(true, BuddhistChronology.getInstance().hourOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,257,"ssertEquals(true, BuddhistChronology.getInstance().minuteOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,258,"ssertEquals(true, BuddhistChronology.getInstance().minuteOfHour().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,259,"ssertEquals(true, BuddhistChronology.getInstance().secondOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,260,"ssertEquals(true, BuddhistChronology.getInstance().secondOfMinute().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,261,"ssertEquals(true, BuddhistChronology.getInstance().millisOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,262,"ssertEquals(true, BuddhistChronology.getInstance().millisOfSecond().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,256,"assertEquals(true, buddhist.halfdayOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,257,"assertEquals(true, buddhist.clockhourOfHalfday().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,258,"assertEquals(true, buddhist.hourOfHalfday().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,259,"assertEquals(true, buddhist.clockhourOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,260,"assertEquals(true, buddhist.hourOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,261,"assertEquals(true, buddhist.minuteOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,262,"assertEquals(true, buddhist.minuteOfHour().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,263,"assertEquals(true, buddhist.secondOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,264,"assertEquals(true, buddhist.secondOfMinute().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,265,"assertEquals(true, buddhist.millisOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,266,"assertEquals(true, buddhist.millisOfSecond().isSupported());"
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,345,ateTimeField gjYearOfEra = GJ_UTC.yearOfEra();
False,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,346,ateTimeField gjEra = GJ_UTC.era();
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,149,"ssertEquals(""eras"", CopticChronology.getInstance().eras().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,150,"ssertEquals(""centuries"", CopticChronology.getInstance().centuries().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,151,"ssertEquals(""years"", CopticChronology.getInstance().years().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,152,"ssertEquals(""weekyears"", CopticChronology.getInstance().weekyears().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,153,"ssertEquals(""months"", CopticChronology.getInstance().months().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,154,"ssertEquals(""weeks"", CopticChronology.getInstance().weeks().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,155,"ssertEquals(""days"", CopticChronology.getInstance().days().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,156,"ssertEquals(""halfdays"", CopticChronology.getInstance().halfdays().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,157,"ssertEquals(""hours"", CopticChronology.getInstance().hours().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,158,"ssertEquals(""minutes"", CopticChronology.getInstance().minutes().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,159,"ssertEquals(""seconds"", CopticChronology.getInstance().seconds().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,160,"ssertEquals(""millis"", CopticChronology.getInstance().millis().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,149,final CopticChronology coptic = CopticChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,150,"assertEquals(""eras"", coptic.eras().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,151,"assertEquals(""centuries"", coptic.centuries().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,152,"assertEquals(""years"", coptic.years().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,153,"assertEquals(""weekyears"", coptic.weekyears().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,154,"assertEquals(""months"", coptic.months().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,155,"assertEquals(""weeks"", coptic.weeks().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,156,"assertEquals(""days"", coptic.days().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,157,"assertEquals(""halfdays"", coptic.halfdays().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,158,"assertEquals(""hours"", coptic.hours().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,159,"assertEquals(""minutes"", coptic.minutes().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,160,"assertEquals(""seconds"", coptic.seconds().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,161,"assertEquals(""millis"", coptic.millis().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,162,"ssertEquals(false, CopticChronology.getInstance().eras().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,163,"ssertEquals(true, CopticChronology.getInstance().centuries().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,164,"ssertEquals(true, CopticChronology.getInstance().years().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,165,"ssertEquals(true, CopticChronology.getInstance().weekyears().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,166,"ssertEquals(true, CopticChronology.getInstance().months().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,167,"ssertEquals(true, CopticChronology.getInstance().weeks().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,168,"ssertEquals(true, CopticChronology.getInstance().days().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,169,"ssertEquals(true, CopticChronology.getInstance().halfdays().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,170,"ssertEquals(true, CopticChronology.getInstance().hours().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,171,"ssertEquals(true, CopticChronology.getInstance().minutes().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,172,"ssertEquals(true, CopticChronology.getInstance().seconds().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,173,"ssertEquals(true, CopticChronology.getInstance().millis().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,163,"assertEquals(false, coptic.eras().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,164,"assertEquals(true, coptic.centuries().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,165,"assertEquals(true, coptic.years().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,166,"assertEquals(true, coptic.weekyears().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,167,"assertEquals(true, coptic.months().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,168,"assertEquals(true, coptic.weeks().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,169,"assertEquals(true, coptic.days().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,170,"assertEquals(true, coptic.halfdays().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,171,"assertEquals(true, coptic.hours().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,172,"assertEquals(true, coptic.minutes().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,173,"assertEquals(true, coptic.seconds().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,174,"assertEquals(true, coptic.millis().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,175,"ssertEquals(false, CopticChronology.getInstance().centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,176,"ssertEquals(false, CopticChronology.getInstance().years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,177,"ssertEquals(false, CopticChronology.getInstance().weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,178,"ssertEquals(false, CopticChronology.getInstance().months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,179,"ssertEquals(false, CopticChronology.getInstance().weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,180,"ssertEquals(false, CopticChronology.getInstance().days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,181,"ssertEquals(false, CopticChronology.getInstance().halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,182,"ssertEquals(true, CopticChronology.getInstance().hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,183,"ssertEquals(true, CopticChronology.getInstance().minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,184,"ssertEquals(true, CopticChronology.getInstance().seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,185,"ssertEquals(true, CopticChronology.getInstance().millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,176,"assertEquals(false, coptic.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,177,"assertEquals(false, coptic.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,178,"assertEquals(false, coptic.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,179,"assertEquals(false, coptic.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,180,"assertEquals(false, coptic.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,181,"assertEquals(false, coptic.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,182,"assertEquals(false, coptic.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,183,"assertEquals(true, coptic.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,184,"assertEquals(true, coptic.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,185,"assertEquals(true, coptic.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,186,"assertEquals(true, coptic.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,187,"ssertEquals(false, CopticChronology.getInstanceUTC().centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,188,"ssertEquals(false, CopticChronology.getInstanceUTC().years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,189,"ssertEquals(false, CopticChronology.getInstanceUTC().weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,190,"ssertEquals(false, CopticChronology.getInstanceUTC().months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,191,"ssertEquals(true, CopticChronology.getInstanceUTC().weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,192,"ssertEquals(true, CopticChronology.getInstanceUTC().days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,193,"ssertEquals(true, CopticChronology.getInstanceUTC().halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,194,"ssertEquals(true, CopticChronology.getInstanceUTC().hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,195,"ssertEquals(true, CopticChronology.getInstanceUTC().minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,196,"ssertEquals(true, CopticChronology.getInstanceUTC().seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,197,"ssertEquals(true, CopticChronology.getInstanceUTC().millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,188,final CopticChronology copticUTC = CopticChronology.getInstanceUTC();
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,189,"assertEquals(false, copticUTC.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,190,"assertEquals(false, copticUTC.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,191,"assertEquals(false, copticUTC.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,192,"assertEquals(false, copticUTC.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,193,"assertEquals(true, copticUTC.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,194,"assertEquals(true, copticUTC.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,195,"assertEquals(true, copticUTC.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,196,"assertEquals(true, copticUTC.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,197,"assertEquals(true, copticUTC.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,198,"assertEquals(true, copticUTC.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,199,"assertEquals(true, copticUTC.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,199,"ateTimeZone gmt = DateTimeZone.forID(""Etc/GMT"");"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,200,"ssertEquals(false, CopticChronology.getInstance(gmt).centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,201,"ssertEquals(false, CopticChronology.getInstance(gmt).years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,202,"ssertEquals(false, CopticChronology.getInstance(gmt).weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,203,"ssertEquals(false, CopticChronology.getInstance(gmt).months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,204,"ssertEquals(true, CopticChronology.getInstance(gmt).weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,205,"ssertEquals(true, CopticChronology.getInstance(gmt).days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,206,"ssertEquals(true, CopticChronology.getInstance(gmt).halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,207,"ssertEquals(true, CopticChronology.getInstance(gmt).hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,208,"ssertEquals(true, CopticChronology.getInstance(gmt).minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,209,"ssertEquals(true, CopticChronology.getInstance(gmt).seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,210,"ssertEquals(true, CopticChronology.getInstance(gmt).millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,201,"final DateTimeZone gmt = DateTimeZone.forID(""Etc/GMT"");"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,202,final CopticChronology copticGMT = CopticChronology.getInstance(gmt);
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,203,"assertEquals(false, copticGMT.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,204,"assertEquals(false, copticGMT.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,205,"assertEquals(false, copticGMT.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,206,"assertEquals(false, copticGMT.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,207,"assertEquals(true, copticGMT.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,208,"assertEquals(true, copticGMT.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,209,"assertEquals(true, copticGMT.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,210,"assertEquals(true, copticGMT.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,211,"assertEquals(true, copticGMT.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,212,"assertEquals(true, copticGMT.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,213,"assertEquals(true, copticGMT.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,214,"ssertEquals(""era"", CopticChronology.getInstance().era().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,215,"ssertEquals(""centuryOfEra"", CopticChronology.getInstance().centuryOfEra().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,216,"ssertEquals(""yearOfCentury"", CopticChronology.getInstance().yearOfCentury().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,217,"ssertEquals(""yearOfEra"", CopticChronology.getInstance().yearOfEra().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,218,"ssertEquals(""year"", CopticChronology.getInstance().year().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,219,"ssertEquals(""monthOfYear"", CopticChronology.getInstance().monthOfYear().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,220,"ssertEquals(""weekyearOfCentury"", CopticChronology.getInstance().weekyearOfCentury().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,221,"ssertEquals(""weekyear"", CopticChronology.getInstance().weekyear().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,222,"ssertEquals(""weekOfWeekyear"", CopticChronology.getInstance().weekOfWeekyear().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,223,"ssertEquals(""dayOfYear"", CopticChronology.getInstance().dayOfYear().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,224,"ssertEquals(""dayOfMonth"", CopticChronology.getInstance().dayOfMonth().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,225,"ssertEquals(""dayOfWeek"", CopticChronology.getInstance().dayOfWeek().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,217,final CopticChronology coptic = CopticChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,218,"assertEquals(""era"", coptic.era().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,219,"assertEquals(""centuryOfEra"", coptic.centuryOfEra().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,220,"assertEquals(""yearOfCentury"", coptic.yearOfCentury().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,221,"assertEquals(""yearOfEra"", coptic.yearOfEra().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,222,"assertEquals(""year"", coptic.year().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,223,"assertEquals(""monthOfYear"", coptic.monthOfYear().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,224,"assertEquals(""weekyearOfCentury"", coptic.weekyearOfCentury().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,225,"assertEquals(""weekyear"", coptic.weekyear().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,226,"assertEquals(""weekOfWeekyear"", coptic.weekOfWeekyear().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,227,"assertEquals(""dayOfYear"", coptic.dayOfYear().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,228,"assertEquals(""dayOfMonth"", coptic.dayOfMonth().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,229,"assertEquals(""dayOfWeek"", coptic.dayOfWeek().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,227,"ssertEquals(true, CopticChronology.getInstance().era().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,228,"ssertEquals(true, CopticChronology.getInstance().centuryOfEra().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,229,"ssertEquals(true, CopticChronology.getInstance().yearOfCentury().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,230,"ssertEquals(true, CopticChronology.getInstance().yearOfEra().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,231,"ssertEquals(true, CopticChronology.getInstance().year().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,232,"ssertEquals(true, CopticChronology.getInstance().monthOfYear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,233,"ssertEquals(true, CopticChronology.getInstance().weekyearOfCentury().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,234,"ssertEquals(true, CopticChronology.getInstance().weekyear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,235,"ssertEquals(true, CopticChronology.getInstance().weekOfWeekyear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,236,"ssertEquals(true, CopticChronology.getInstance().dayOfYear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,237,"ssertEquals(true, CopticChronology.getInstance().dayOfMonth().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,238,"ssertEquals(true, CopticChronology.getInstance().dayOfWeek().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,231,"assertEquals(true, coptic.era().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,232,"assertEquals(true, coptic.centuryOfEra().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,233,"assertEquals(true, coptic.yearOfCentury().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,234,"assertEquals(true, coptic.yearOfEra().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,235,"assertEquals(true, coptic.year().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,236,"assertEquals(true, coptic.monthOfYear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,237,"assertEquals(true, coptic.weekyearOfCentury().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,238,"assertEquals(true, coptic.weekyear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,239,"assertEquals(true, coptic.weekOfWeekyear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,240,"assertEquals(true, coptic.dayOfYear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,241,"assertEquals(true, coptic.dayOfMonth().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,242,"assertEquals(true, coptic.dayOfWeek().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,242,"ssertEquals(""halfdayOfDay"", CopticChronology.getInstance().halfdayOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,243,"ssertEquals(""clockhourOfHalfday"", CopticChronology.getInstance().clockhourOfHalfday().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,244,"ssertEquals(""hourOfHalfday"", CopticChronology.getInstance().hourOfHalfday().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,245,"ssertEquals(""clockhourOfDay"", CopticChronology.getInstance().clockhourOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,246,"ssertEquals(""hourOfDay"", CopticChronology.getInstance().hourOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,247,"ssertEquals(""minuteOfDay"", CopticChronology.getInstance().minuteOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,248,"ssertEquals(""minuteOfHour"", CopticChronology.getInstance().minuteOfHour().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,249,"ssertEquals(""secondOfDay"", CopticChronology.getInstance().secondOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,250,"ssertEquals(""secondOfMinute"", CopticChronology.getInstance().secondOfMinute().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,251,"ssertEquals(""millisOfDay"", CopticChronology.getInstance().millisOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,252,"ssertEquals(""millisOfSecond"", CopticChronology.getInstance().millisOfSecond().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,246,final CopticChronology coptic = CopticChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,247,"assertEquals(""halfdayOfDay"", coptic.halfdayOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,248,"assertEquals(""clockhourOfHalfday"", coptic.clockhourOfHalfday().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,249,"assertEquals(""hourOfHalfday"", coptic.hourOfHalfday().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,250,"assertEquals(""clockhourOfDay"", coptic.clockhourOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,251,"assertEquals(""hourOfDay"", coptic.hourOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,252,"assertEquals(""minuteOfDay"", coptic.minuteOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,253,"assertEquals(""minuteOfHour"", coptic.minuteOfHour().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,254,"assertEquals(""secondOfDay"", coptic.secondOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,255,"assertEquals(""secondOfMinute"", coptic.secondOfMinute().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,256,"assertEquals(""millisOfDay"", coptic.millisOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,257,"assertEquals(""millisOfSecond"", coptic.millisOfSecond().getName());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,254,"ssertEquals(true, CopticChronology.getInstance().halfdayOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,255,"ssertEquals(true, CopticChronology.getInstance().clockhourOfHalfday().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,256,"ssertEquals(true, CopticChronology.getInstance().hourOfHalfday().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,257,"ssertEquals(true, CopticChronology.getInstance().clockhourOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,258,"ssertEquals(true, CopticChronology.getInstance().hourOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,259,"ssertEquals(true, CopticChronology.getInstance().minuteOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,260,"ssertEquals(true, CopticChronology.getInstance().minuteOfHour().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,261,"ssertEquals(true, CopticChronology.getInstance().secondOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,262,"ssertEquals(true, CopticChronology.getInstance().secondOfMinute().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,263,"ssertEquals(true, CopticChronology.getInstance().millisOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,264,"ssertEquals(true, CopticChronology.getInstance().millisOfSecond().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,259,"assertEquals(true, coptic.halfdayOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,260,"assertEquals(true, coptic.clockhourOfHalfday().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,261,"assertEquals(true, coptic.hourOfHalfday().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,262,"assertEquals(true, coptic.clockhourOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,263,"assertEquals(true, coptic.hourOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,264,"assertEquals(true, coptic.minuteOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,265,"assertEquals(true, coptic.minuteOfHour().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,266,"assertEquals(true, coptic.secondOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,267,"assertEquals(true, coptic.secondOfMinute().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,268,"assertEquals(true, coptic.millisOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,269,"assertEquals(true, coptic.millisOfSecond().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,149,"ssertEquals(""eras"", EthiopicChronology.getInstance().eras().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,150,"ssertEquals(""centuries"", EthiopicChronology.getInstance().centuries().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,151,"ssertEquals(""years"", EthiopicChronology.getInstance().years().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,152,"ssertEquals(""weekyears"", EthiopicChronology.getInstance().weekyears().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,153,"ssertEquals(""months"", EthiopicChronology.getInstance().months().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,154,"ssertEquals(""weeks"", EthiopicChronology.getInstance().weeks().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,155,"ssertEquals(""days"", EthiopicChronology.getInstance().days().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,156,"ssertEquals(""halfdays"", EthiopicChronology.getInstance().halfdays().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,157,"ssertEquals(""hours"", EthiopicChronology.getInstance().hours().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,158,"ssertEquals(""minutes"", EthiopicChronology.getInstance().minutes().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,159,"ssertEquals(""seconds"", EthiopicChronology.getInstance().seconds().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,160,"ssertEquals(""millis"", EthiopicChronology.getInstance().millis().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,149,final EthiopicChronology ethiopic = EthiopicChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,150,"assertEquals(""eras"", ethiopic.eras().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,151,"assertEquals(""centuries"", ethiopic.centuries().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,152,"assertEquals(""years"", ethiopic.years().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,153,"assertEquals(""weekyears"", ethiopic.weekyears().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,154,"assertEquals(""months"", ethiopic.months().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,155,"assertEquals(""weeks"", ethiopic.weeks().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,156,"assertEquals(""days"", ethiopic.days().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,157,"assertEquals(""halfdays"", ethiopic.halfdays().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,158,"assertEquals(""hours"", ethiopic.hours().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,159,"assertEquals(""minutes"", ethiopic.minutes().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,160,"assertEquals(""seconds"", ethiopic.seconds().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,161,"assertEquals(""millis"", ethiopic.millis().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,162,"ssertEquals(false, EthiopicChronology.getInstance().eras().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,163,"ssertEquals(true, EthiopicChronology.getInstance().centuries().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,164,"ssertEquals(true, EthiopicChronology.getInstance().years().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,165,"ssertEquals(true, EthiopicChronology.getInstance().weekyears().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,166,"ssertEquals(true, EthiopicChronology.getInstance().months().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,167,"ssertEquals(true, EthiopicChronology.getInstance().weeks().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,168,"ssertEquals(true, EthiopicChronology.getInstance().days().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,169,"ssertEquals(true, EthiopicChronology.getInstance().halfdays().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,170,"ssertEquals(true, EthiopicChronology.getInstance().hours().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,171,"ssertEquals(true, EthiopicChronology.getInstance().minutes().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,172,"ssertEquals(true, EthiopicChronology.getInstance().seconds().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,173,"ssertEquals(true, EthiopicChronology.getInstance().millis().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,163,"assertEquals(false, ethiopic.eras().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,164,"assertEquals(true, ethiopic.centuries().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,165,"assertEquals(true, ethiopic.years().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,166,"assertEquals(true, ethiopic.weekyears().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,167,"assertEquals(true, ethiopic.months().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,168,"assertEquals(true, ethiopic.weeks().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,169,"assertEquals(true, ethiopic.days().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,170,"assertEquals(true, ethiopic.halfdays().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,171,"assertEquals(true, ethiopic.hours().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,172,"assertEquals(true, ethiopic.minutes().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,173,"assertEquals(true, ethiopic.seconds().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,174,"assertEquals(true, ethiopic.millis().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,175,"ssertEquals(false, EthiopicChronology.getInstance().centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,176,"ssertEquals(false, EthiopicChronology.getInstance().years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,177,"ssertEquals(false, EthiopicChronology.getInstance().weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,178,"ssertEquals(false, EthiopicChronology.getInstance().months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,179,"ssertEquals(false, EthiopicChronology.getInstance().weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,180,"ssertEquals(false, EthiopicChronology.getInstance().days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,181,"ssertEquals(false, EthiopicChronology.getInstance().halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,182,"ssertEquals(true, EthiopicChronology.getInstance().hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,183,"ssertEquals(true, EthiopicChronology.getInstance().minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,184,"ssertEquals(true, EthiopicChronology.getInstance().seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,185,"ssertEquals(true, EthiopicChronology.getInstance().millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,176,"assertEquals(false, ethiopic.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,177,"assertEquals(false, ethiopic.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,178,"assertEquals(false, ethiopic.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,179,"assertEquals(false, ethiopic.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,180,"assertEquals(false, ethiopic.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,181,"assertEquals(false, ethiopic.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,182,"assertEquals(false, ethiopic.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,183,"assertEquals(true, ethiopic.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,184,"assertEquals(true, ethiopic.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,185,"assertEquals(true, ethiopic.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,186,"assertEquals(true, ethiopic.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,187,"ssertEquals(false, EthiopicChronology.getInstanceUTC().centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,188,"ssertEquals(false, EthiopicChronology.getInstanceUTC().years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,189,"ssertEquals(false, EthiopicChronology.getInstanceUTC().weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,190,"ssertEquals(false, EthiopicChronology.getInstanceUTC().months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,191,"ssertEquals(true, EthiopicChronology.getInstanceUTC().weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,192,"ssertEquals(true, EthiopicChronology.getInstanceUTC().days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,193,"ssertEquals(true, EthiopicChronology.getInstanceUTC().halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,194,"ssertEquals(true, EthiopicChronology.getInstanceUTC().hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,195,"ssertEquals(true, EthiopicChronology.getInstanceUTC().minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,196,"ssertEquals(true, EthiopicChronology.getInstanceUTC().seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,197,"ssertEquals(true, EthiopicChronology.getInstanceUTC().millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,188,final EthiopicChronology ethiopicUTC = EthiopicChronology.getInstanceUTC();
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,189,"assertEquals(false, ethiopicUTC.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,190,"assertEquals(false, ethiopicUTC.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,191,"assertEquals(false, ethiopicUTC.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,192,"assertEquals(false, ethiopicUTC.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,193,"assertEquals(true, ethiopicUTC.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,194,"assertEquals(true, ethiopicUTC.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,195,"assertEquals(true, ethiopicUTC.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,196,"assertEquals(true, ethiopicUTC.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,197,"assertEquals(true, ethiopicUTC.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,198,"assertEquals(true, ethiopicUTC.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,199,"assertEquals(true, ethiopicUTC.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,199,"ateTimeZone gmt = DateTimeZone.forID(""Etc/GMT"");"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,200,"ssertEquals(false, EthiopicChronology.getInstance(gmt).centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,201,"ssertEquals(false, EthiopicChronology.getInstance(gmt).years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,202,"ssertEquals(false, EthiopicChronology.getInstance(gmt).weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,203,"ssertEquals(false, EthiopicChronology.getInstance(gmt).months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,204,"ssertEquals(true, EthiopicChronology.getInstance(gmt).weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,205,"ssertEquals(true, EthiopicChronology.getInstance(gmt).days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,206,"ssertEquals(true, EthiopicChronology.getInstance(gmt).halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,207,"ssertEquals(true, EthiopicChronology.getInstance(gmt).hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,208,"ssertEquals(true, EthiopicChronology.getInstance(gmt).minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,209,"ssertEquals(true, EthiopicChronology.getInstance(gmt).seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,210,"ssertEquals(true, EthiopicChronology.getInstance(gmt).millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,201,"final DateTimeZone gmt = DateTimeZone.forID(""Etc/GMT"");"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,202,final EthiopicChronology ethiopicGMT = EthiopicChronology.getInstance(gmt);
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,203,"assertEquals(false, ethiopicGMT.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,204,"assertEquals(false, ethiopicGMT.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,205,"assertEquals(false, ethiopicGMT.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,206,"assertEquals(false, ethiopicGMT.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,207,"assertEquals(true, ethiopicGMT.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,208,"assertEquals(true, ethiopicGMT.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,209,"assertEquals(true, ethiopicGMT.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,210,"assertEquals(true, ethiopicGMT.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,211,"assertEquals(true, ethiopicGMT.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,212,"assertEquals(true, ethiopicGMT.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,213,"assertEquals(true, ethiopicGMT.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,214,"ssertEquals(""era"", EthiopicChronology.getInstance().era().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,215,"ssertEquals(""centuryOfEra"", EthiopicChronology.getInstance().centuryOfEra().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,216,"ssertEquals(""yearOfCentury"", EthiopicChronology.getInstance().yearOfCentury().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,217,"ssertEquals(""yearOfEra"", EthiopicChronology.getInstance().yearOfEra().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,218,"ssertEquals(""year"", EthiopicChronology.getInstance().year().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,219,"ssertEquals(""monthOfYear"", EthiopicChronology.getInstance().monthOfYear().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,220,"ssertEquals(""weekyearOfCentury"", EthiopicChronology.getInstance().weekyearOfCentury().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,221,"ssertEquals(""weekyear"", EthiopicChronology.getInstance().weekyear().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,222,"ssertEquals(""weekOfWeekyear"", EthiopicChronology.getInstance().weekOfWeekyear().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,223,"ssertEquals(""dayOfYear"", EthiopicChronology.getInstance().dayOfYear().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,224,"ssertEquals(""dayOfMonth"", EthiopicChronology.getInstance().dayOfMonth().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,225,"ssertEquals(""dayOfWeek"", EthiopicChronology.getInstance().dayOfWeek().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,217,final EthiopicChronology ethiopic = EthiopicChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,218,"assertEquals(""era"", ethiopic.era().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,219,"assertEquals(""centuryOfEra"", ethiopic.centuryOfEra().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,220,"assertEquals(""yearOfCentury"", ethiopic.yearOfCentury().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,221,"assertEquals(""yearOfEra"", ethiopic.yearOfEra().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,222,"assertEquals(""year"", ethiopic.year().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,223,"assertEquals(""monthOfYear"", ethiopic.monthOfYear().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,224,"assertEquals(""weekyearOfCentury"", ethiopic.weekyearOfCentury().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,225,"assertEquals(""weekyear"", ethiopic.weekyear().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,226,"assertEquals(""weekOfWeekyear"", ethiopic.weekOfWeekyear().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,227,"assertEquals(""dayOfYear"", ethiopic.dayOfYear().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,228,"assertEquals(""dayOfMonth"", ethiopic.dayOfMonth().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,229,"assertEquals(""dayOfWeek"", ethiopic.dayOfWeek().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,227,"ssertEquals(true, EthiopicChronology.getInstance().era().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,228,"ssertEquals(true, EthiopicChronology.getInstance().centuryOfEra().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,229,"ssertEquals(true, EthiopicChronology.getInstance().yearOfCentury().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,230,"ssertEquals(true, EthiopicChronology.getInstance().yearOfEra().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,231,"ssertEquals(true, EthiopicChronology.getInstance().year().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,232,"ssertEquals(true, EthiopicChronology.getInstance().monthOfYear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,233,"ssertEquals(true, EthiopicChronology.getInstance().weekyearOfCentury().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,234,"ssertEquals(true, EthiopicChronology.getInstance().weekyear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,235,"ssertEquals(true, EthiopicChronology.getInstance().weekOfWeekyear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,236,"ssertEquals(true, EthiopicChronology.getInstance().dayOfYear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,237,"ssertEquals(true, EthiopicChronology.getInstance().dayOfMonth().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,238,"ssertEquals(true, EthiopicChronology.getInstance().dayOfWeek().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,231,"assertEquals(true, ethiopic.era().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,232,"assertEquals(true, ethiopic.centuryOfEra().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,233,"assertEquals(true, ethiopic.yearOfCentury().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,234,"assertEquals(true, ethiopic.yearOfEra().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,235,"assertEquals(true, ethiopic.year().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,236,"assertEquals(true, ethiopic.monthOfYear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,237,"assertEquals(true, ethiopic.weekyearOfCentury().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,238,"assertEquals(true, ethiopic.weekyear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,239,"assertEquals(true, ethiopic.weekOfWeekyear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,240,"assertEquals(true, ethiopic.dayOfYear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,241,"assertEquals(true, ethiopic.dayOfMonth().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,242,"assertEquals(true, ethiopic.dayOfWeek().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,242,"ssertEquals(""halfdayOfDay"", EthiopicChronology.getInstance().halfdayOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,243,"ssertEquals(""clockhourOfHalfday"", EthiopicChronology.getInstance().clockhourOfHalfday().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,244,"ssertEquals(""hourOfHalfday"", EthiopicChronology.getInstance().hourOfHalfday().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,245,"ssertEquals(""clockhourOfDay"", EthiopicChronology.getInstance().clockhourOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,246,"ssertEquals(""hourOfDay"", EthiopicChronology.getInstance().hourOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,247,"ssertEquals(""minuteOfDay"", EthiopicChronology.getInstance().minuteOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,248,"ssertEquals(""minuteOfHour"", EthiopicChronology.getInstance().minuteOfHour().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,249,"ssertEquals(""secondOfDay"", EthiopicChronology.getInstance().secondOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,250,"ssertEquals(""secondOfMinute"", EthiopicChronology.getInstance().secondOfMinute().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,251,"ssertEquals(""millisOfDay"", EthiopicChronology.getInstance().millisOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,252,"ssertEquals(""millisOfSecond"", EthiopicChronology.getInstance().millisOfSecond().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,246,final EthiopicChronology ethiopic = EthiopicChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,247,"assertEquals(""halfdayOfDay"", ethiopic.halfdayOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,248,"assertEquals(""clockhourOfHalfday"", ethiopic.clockhourOfHalfday().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,249,"assertEquals(""hourOfHalfday"", ethiopic.hourOfHalfday().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,250,"assertEquals(""clockhourOfDay"", ethiopic.clockhourOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,251,"assertEquals(""hourOfDay"", ethiopic.hourOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,252,"assertEquals(""minuteOfDay"", ethiopic.minuteOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,253,"assertEquals(""minuteOfHour"", ethiopic.minuteOfHour().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,254,"assertEquals(""secondOfDay"", ethiopic.secondOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,255,"assertEquals(""secondOfMinute"", ethiopic.secondOfMinute().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,256,"assertEquals(""millisOfDay"", ethiopic.millisOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,257,"assertEquals(""millisOfSecond"", ethiopic.millisOfSecond().getName());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,254,"ssertEquals(true, EthiopicChronology.getInstance().halfdayOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,255,"ssertEquals(true, EthiopicChronology.getInstance().clockhourOfHalfday().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,256,"ssertEquals(true, EthiopicChronology.getInstance().hourOfHalfday().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,257,"ssertEquals(true, EthiopicChronology.getInstance().clockhourOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,258,"ssertEquals(true, EthiopicChronology.getInstance().hourOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,259,"ssertEquals(true, EthiopicChronology.getInstance().minuteOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,260,"ssertEquals(true, EthiopicChronology.getInstance().minuteOfHour().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,261,"ssertEquals(true, EthiopicChronology.getInstance().secondOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,262,"ssertEquals(true, EthiopicChronology.getInstance().secondOfMinute().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,263,"ssertEquals(true, EthiopicChronology.getInstance().millisOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,264,"ssertEquals(true, EthiopicChronology.getInstance().millisOfSecond().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,259,"assertEquals(true, ethiopic.halfdayOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,260,"assertEquals(true, ethiopic.clockhourOfHalfday().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,261,"assertEquals(true, ethiopic.hourOfHalfday().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,262,"assertEquals(true, ethiopic.clockhourOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,263,"assertEquals(true, ethiopic.hourOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,264,"assertEquals(true, ethiopic.minuteOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,265,"assertEquals(true, ethiopic.minuteOfHour().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,266,"assertEquals(true, ethiopic.secondOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,267,"assertEquals(true, ethiopic.secondOfMinute().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,268,"assertEquals(true, ethiopic.millisOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,269,"assertEquals(true, ethiopic.millisOfSecond().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,42,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,198,"ssertEquals(""eras"", GJChronology.getInstance().eras().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,199,"ssertEquals(""centuries"", GJChronology.getInstance().centuries().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,200,"ssertEquals(""years"", GJChronology.getInstance().years().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,201,"ssertEquals(""weekyears"", GJChronology.getInstance().weekyears().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,202,"ssertEquals(""months"", GJChronology.getInstance().months().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,203,"ssertEquals(""weeks"", GJChronology.getInstance().weeks().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,204,"ssertEquals(""halfdays"", GJChronology.getInstance().halfdays().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,205,"ssertEquals(""days"", GJChronology.getInstance().days().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,206,"ssertEquals(""hours"", GJChronology.getInstance().hours().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,207,"ssertEquals(""minutes"", GJChronology.getInstance().minutes().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,208,"ssertEquals(""seconds"", GJChronology.getInstance().seconds().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,209,"ssertEquals(""millis"", GJChronology.getInstance().millis().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,199,final GJChronology gj = GJChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,200,"assertEquals(""eras"", gj.eras().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,201,"assertEquals(""centuries"", gj.centuries().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,202,"assertEquals(""years"", gj.years().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,203,"assertEquals(""weekyears"", gj.weekyears().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,204,"assertEquals(""months"", gj.months().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,205,"assertEquals(""weeks"", gj.weeks().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,206,"assertEquals(""halfdays"", gj.halfdays().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,207,"assertEquals(""days"", gj.days().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,208,"assertEquals(""hours"", gj.hours().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,209,"assertEquals(""minutes"", gj.minutes().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,210,"assertEquals(""seconds"", gj.seconds().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,211,"assertEquals(""millis"", gj.millis().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,211,"ssertEquals(false, GJChronology.getInstance().eras().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,212,"ssertEquals(true, GJChronology.getInstance().centuries().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,213,"ssertEquals(true, GJChronology.getInstance().years().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,214,"ssertEquals(true, GJChronology.getInstance().weekyears().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,215,"ssertEquals(true, GJChronology.getInstance().months().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,216,"ssertEquals(true, GJChronology.getInstance().weeks().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,217,"ssertEquals(true, GJChronology.getInstance().days().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,218,"ssertEquals(true, GJChronology.getInstance().halfdays().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,219,"ssertEquals(true, GJChronology.getInstance().hours().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,220,"ssertEquals(true, GJChronology.getInstance().minutes().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,221,"ssertEquals(true, GJChronology.getInstance().seconds().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,222,"ssertEquals(true, GJChronology.getInstance().millis().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,213,"assertEquals(false, gj.eras().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,214,"assertEquals(true, gj.centuries().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,215,"assertEquals(true, gj.years().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,216,"assertEquals(true, gj.weekyears().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,217,"assertEquals(true, gj.months().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,218,"assertEquals(true, gj.weeks().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,219,"assertEquals(true, gj.days().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,220,"assertEquals(true, gj.halfdays().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,221,"assertEquals(true, gj.hours().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,222,"assertEquals(true, gj.minutes().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,223,"assertEquals(true, gj.seconds().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,224,"assertEquals(true, gj.millis().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,224,"ssertEquals(false, GJChronology.getInstance().centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,225,"ssertEquals(false, GJChronology.getInstance().years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,226,"ssertEquals(false, GJChronology.getInstance().weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,227,"ssertEquals(false, GJChronology.getInstance().months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,228,"ssertEquals(false, GJChronology.getInstance().weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,229,"ssertEquals(false, GJChronology.getInstance().days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,230,"ssertEquals(false, GJChronology.getInstance().halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,231,"ssertEquals(true, GJChronology.getInstance().hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,232,"ssertEquals(true, GJChronology.getInstance().minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,233,"ssertEquals(true, GJChronology.getInstance().seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,234,"ssertEquals(true, GJChronology.getInstance().millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,226,"assertEquals(false, gj.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,227,"assertEquals(false, gj.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,228,"assertEquals(false, gj.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,229,"assertEquals(false, gj.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,230,"assertEquals(false, gj.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,231,"assertEquals(false, gj.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,232,"assertEquals(false, gj.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,233,"assertEquals(true, gj.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,234,"assertEquals(true, gj.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,235,"assertEquals(true, gj.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,236,"assertEquals(true, gj.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,236,"ssertEquals(false, GJChronology.getInstanceUTC().centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,237,"ssertEquals(false, GJChronology.getInstanceUTC().years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,238,"ssertEquals(false, GJChronology.getInstanceUTC().weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,239,"ssertEquals(false, GJChronology.getInstanceUTC().months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,240,"ssertEquals(true, GJChronology.getInstanceUTC().weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,241,"ssertEquals(true, GJChronology.getInstanceUTC().days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,242,"ssertEquals(true, GJChronology.getInstanceUTC().halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,243,"ssertEquals(true, GJChronology.getInstanceUTC().hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,244,"ssertEquals(true, GJChronology.getInstanceUTC().minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,245,"ssertEquals(true, GJChronology.getInstanceUTC().seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,246,"ssertEquals(true, GJChronology.getInstanceUTC().millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,238,final GJChronology gjUTC = GJChronology.getInstanceUTC();
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,239,"assertEquals(false, gjUTC.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,240,"assertEquals(false, gjUTC.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,241,"assertEquals(false, gjUTC.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,242,"assertEquals(false, gjUTC.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,243,"assertEquals(true, gjUTC.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,244,"assertEquals(true, gjUTC.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,245,"assertEquals(true, gjUTC.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,246,"assertEquals(true, gjUTC.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,247,"assertEquals(true, gjUTC.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,248,"assertEquals(true, gjUTC.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,249,"assertEquals(true, gjUTC.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,248,"ateTimeZone gmt = DateTimeZone.forID(""Etc/GMT"");"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,249,"ssertEquals(false, GJChronology.getInstance(gmt).centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,250,"ssertEquals(false, GJChronology.getInstance(gmt).years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,251,"ssertEquals(false, GJChronology.getInstance(gmt).weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,252,"ssertEquals(false, GJChronology.getInstance(gmt).months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,253,"ssertEquals(true, GJChronology.getInstance(gmt).weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,254,"ssertEquals(true, GJChronology.getInstance(gmt).days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,255,"ssertEquals(true, GJChronology.getInstance(gmt).halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,256,"ssertEquals(true, GJChronology.getInstance(gmt).hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,257,"ssertEquals(true, GJChronology.getInstance(gmt).minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,258,"ssertEquals(true, GJChronology.getInstance(gmt).seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,259,"ssertEquals(true, GJChronology.getInstance(gmt).millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,251,"final DateTimeZone gmt = DateTimeZone.forID(""Etc/GMT"");"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,252,final GJChronology gjGMT = GJChronology.getInstance(gmt);
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,253,"assertEquals(false, gjGMT.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,254,"assertEquals(false, gjGMT.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,255,"assertEquals(false, gjGMT.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,256,"assertEquals(false, gjGMT.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,257,"assertEquals(true, gjGMT.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,258,"assertEquals(true, gjGMT.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,259,"assertEquals(true, gjGMT.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,260,"assertEquals(true, gjGMT.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,261,"assertEquals(true, gjGMT.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,262,"assertEquals(true, gjGMT.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,263,"assertEquals(true, gjGMT.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,263,"ssertEquals(""era"", GJChronology.getInstance().era().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,264,"ssertEquals(""centuryOfEra"", GJChronology.getInstance().centuryOfEra().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,265,"ssertEquals(""yearOfCentury"", GJChronology.getInstance().yearOfCentury().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,266,"ssertEquals(""yearOfEra"", GJChronology.getInstance().yearOfEra().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,267,"ssertEquals(""year"", GJChronology.getInstance().year().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,268,"ssertEquals(""monthOfYear"", GJChronology.getInstance().monthOfYear().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,269,"ssertEquals(""weekyearOfCentury"", GJChronology.getInstance().weekyearOfCentury().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,270,"ssertEquals(""weekyear"", GJChronology.getInstance().weekyear().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,271,"ssertEquals(""weekOfWeekyear"", GJChronology.getInstance().weekOfWeekyear().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,272,"ssertEquals(""dayOfYear"", GJChronology.getInstance().dayOfYear().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,273,"ssertEquals(""dayOfMonth"", GJChronology.getInstance().dayOfMonth().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,274,"ssertEquals(""dayOfWeek"", GJChronology.getInstance().dayOfWeek().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,267,final GJChronology gj = GJChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,268,"assertEquals(""era"", gj.era().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,269,"assertEquals(""centuryOfEra"", gj.centuryOfEra().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,270,"assertEquals(""yearOfCentury"", gj.yearOfCentury().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,271,"assertEquals(""yearOfEra"", gj.yearOfEra().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,272,"assertEquals(""year"", gj.year().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,273,"assertEquals(""monthOfYear"", gj.monthOfYear().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,274,"assertEquals(""weekyearOfCentury"", gj.weekyearOfCentury().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,275,"assertEquals(""weekyear"", gj.weekyear().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,276,"assertEquals(""weekOfWeekyear"", gj.weekOfWeekyear().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,277,"assertEquals(""dayOfYear"", gj.dayOfYear().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,278,"assertEquals(""dayOfMonth"", gj.dayOfMonth().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,279,"assertEquals(""dayOfWeek"", gj.dayOfWeek().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,276,"ssertEquals(true, GJChronology.getInstance().era().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,277,"ssertEquals(true, GJChronology.getInstance().centuryOfEra().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,278,"ssertEquals(true, GJChronology.getInstance().yearOfCentury().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,279,"ssertEquals(true, GJChronology.getInstance().yearOfEra().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,280,"ssertEquals(true, GJChronology.getInstance().year().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,281,"ssertEquals(true, GJChronology.getInstance().monthOfYear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,282,"ssertEquals(true, GJChronology.getInstance().weekyearOfCentury().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,283,"ssertEquals(true, GJChronology.getInstance().weekyear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,284,"ssertEquals(true, GJChronology.getInstance().weekOfWeekyear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,285,"ssertEquals(true, GJChronology.getInstance().dayOfYear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,286,"ssertEquals(true, GJChronology.getInstance().dayOfMonth().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,287,"ssertEquals(true, GJChronology.getInstance().dayOfWeek().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,281,"assertEquals(true, gj.era().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,282,"assertEquals(true, gj.centuryOfEra().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,283,"assertEquals(true, gj.yearOfCentury().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,284,"assertEquals(true, gj.yearOfEra().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,285,"assertEquals(true, gj.year().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,286,"assertEquals(true, gj.monthOfYear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,287,"assertEquals(true, gj.weekyearOfCentury().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,288,"assertEquals(true, gj.weekyear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,289,"assertEquals(true, gj.weekOfWeekyear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,290,"assertEquals(true, gj.dayOfYear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,291,"assertEquals(true, gj.dayOfMonth().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,292,"assertEquals(true, gj.dayOfWeek().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,291,"ssertEquals(""halfdayOfDay"", GJChronology.getInstance().halfdayOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,292,"ssertEquals(""clockhourOfHalfday"", GJChronology.getInstance().clockhourOfHalfday().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,293,"ssertEquals(""hourOfHalfday"", GJChronology.getInstance().hourOfHalfday().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,294,"ssertEquals(""clockhourOfDay"", GJChronology.getInstance().clockhourOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,295,"ssertEquals(""hourOfDay"", GJChronology.getInstance().hourOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,296,"ssertEquals(""minuteOfDay"", GJChronology.getInstance().minuteOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,297,"ssertEquals(""minuteOfHour"", GJChronology.getInstance().minuteOfHour().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,298,"ssertEquals(""secondOfDay"", GJChronology.getInstance().secondOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,299,"ssertEquals(""secondOfMinute"", GJChronology.getInstance().secondOfMinute().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,300,"ssertEquals(""millisOfDay"", GJChronology.getInstance().millisOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,301,"ssertEquals(""millisOfSecond"", GJChronology.getInstance().millisOfSecond().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,296,final GJChronology gj = GJChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,297,"assertEquals(""halfdayOfDay"", gj.halfdayOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,298,"assertEquals(""clockhourOfHalfday"", gj.clockhourOfHalfday().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,299,"assertEquals(""hourOfHalfday"", gj.hourOfHalfday().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,300,"assertEquals(""clockhourOfDay"", gj.clockhourOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,301,"assertEquals(""hourOfDay"", gj.hourOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,302,"assertEquals(""minuteOfDay"", gj.minuteOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,303,"assertEquals(""minuteOfHour"", gj.minuteOfHour().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,304,"assertEquals(""secondOfDay"", gj.secondOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,305,"assertEquals(""secondOfMinute"", gj.secondOfMinute().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,306,"assertEquals(""millisOfDay"", gj.millisOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,307,"assertEquals(""millisOfSecond"", gj.millisOfSecond().getName());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,303,"ssertEquals(true, GJChronology.getInstance().halfdayOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,304,"ssertEquals(true, GJChronology.getInstance().clockhourOfHalfday().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,305,"ssertEquals(true, GJChronology.getInstance().hourOfHalfday().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,306,"ssertEquals(true, GJChronology.getInstance().clockhourOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,307,"ssertEquals(true, GJChronology.getInstance().hourOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,308,"ssertEquals(true, GJChronology.getInstance().minuteOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,309,"ssertEquals(true, GJChronology.getInstance().minuteOfHour().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,310,"ssertEquals(true, GJChronology.getInstance().secondOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,311,"ssertEquals(true, GJChronology.getInstance().secondOfMinute().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,312,"ssertEquals(true, GJChronology.getInstance().millisOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,313,"ssertEquals(true, GJChronology.getInstance().millisOfSecond().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,309,"assertEquals(true, gj.halfdayOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,310,"assertEquals(true, gj.clockhourOfHalfday().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,311,"assertEquals(true, gj.hourOfHalfday().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,312,"assertEquals(true, gj.clockhourOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,313,"assertEquals(true, gj.hourOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,314,"assertEquals(true, gj.minuteOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,315,"assertEquals(true, gj.minuteOfHour().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,316,"assertEquals(true, gj.secondOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,317,"assertEquals(true, gj.secondOfMinute().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,318,"assertEquals(true, gj.millisOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,319,"assertEquals(true, gj.millisOfSecond().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,36,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,154,"ssertEquals(""eras"", GregorianChronology.getInstance().eras().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,155,"ssertEquals(""centuries"", GregorianChronology.getInstance().centuries().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,156,"ssertEquals(""years"", GregorianChronology.getInstance().years().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,157,"ssertEquals(""weekyears"", GregorianChronology.getInstance().weekyears().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,158,"ssertEquals(""months"", GregorianChronology.getInstance().months().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,159,"ssertEquals(""weeks"", GregorianChronology.getInstance().weeks().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,160,"ssertEquals(""days"", GregorianChronology.getInstance().days().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,161,"ssertEquals(""halfdays"", GregorianChronology.getInstance().halfdays().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,162,"ssertEquals(""hours"", GregorianChronology.getInstance().hours().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,163,"ssertEquals(""minutes"", GregorianChronology.getInstance().minutes().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,164,"ssertEquals(""seconds"", GregorianChronology.getInstance().seconds().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,165,"ssertEquals(""millis"", GregorianChronology.getInstance().millis().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,155,final GregorianChronology greg = GregorianChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,156,"assertEquals(""eras"", greg.eras().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,157,"assertEquals(""centuries"", greg.centuries().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,158,"assertEquals(""years"", greg.years().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,159,"assertEquals(""weekyears"", greg.weekyears().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,160,"assertEquals(""months"", greg.months().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,161,"assertEquals(""weeks"", greg.weeks().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,162,"assertEquals(""days"", greg.days().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,163,"assertEquals(""halfdays"", greg.halfdays().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,164,"assertEquals(""hours"", greg.hours().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,165,"assertEquals(""minutes"", greg.minutes().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,166,"assertEquals(""seconds"", greg.seconds().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,167,"assertEquals(""millis"", greg.millis().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,167,"ssertEquals(false, GregorianChronology.getInstance().eras().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,168,"ssertEquals(true, GregorianChronology.getInstance().centuries().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,169,"ssertEquals(true, GregorianChronology.getInstance().years().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,170,"ssertEquals(true, GregorianChronology.getInstance().weekyears().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,171,"ssertEquals(true, GregorianChronology.getInstance().months().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,172,"ssertEquals(true, GregorianChronology.getInstance().weeks().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,173,"ssertEquals(true, GregorianChronology.getInstance().days().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,174,"ssertEquals(true, GregorianChronology.getInstance().halfdays().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,175,"ssertEquals(true, GregorianChronology.getInstance().hours().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,176,"ssertEquals(true, GregorianChronology.getInstance().minutes().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,177,"ssertEquals(true, GregorianChronology.getInstance().seconds().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,178,"ssertEquals(true, GregorianChronology.getInstance().millis().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,169,"assertEquals(false, greg.eras().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,170,"assertEquals(true, greg.centuries().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,171,"assertEquals(true, greg.years().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,172,"assertEquals(true, greg.weekyears().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,173,"assertEquals(true, greg.months().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,174,"assertEquals(true, greg.weeks().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,175,"assertEquals(true, greg.days().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,176,"assertEquals(true, greg.halfdays().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,177,"assertEquals(true, greg.hours().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,178,"assertEquals(true, greg.minutes().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,179,"assertEquals(true, greg.seconds().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,180,"assertEquals(true, greg.millis().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,180,"ssertEquals(false, GregorianChronology.getInstance().centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,181,"ssertEquals(false, GregorianChronology.getInstance().years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,182,"ssertEquals(false, GregorianChronology.getInstance().weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,183,"ssertEquals(false, GregorianChronology.getInstance().months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,184,"ssertEquals(false, GregorianChronology.getInstance().weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,185,"ssertEquals(false, GregorianChronology.getInstance().days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,186,"ssertEquals(false, GregorianChronology.getInstance().halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,187,"ssertEquals(true, GregorianChronology.getInstance().hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,188,"ssertEquals(true, GregorianChronology.getInstance().minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,189,"ssertEquals(true, GregorianChronology.getInstance().seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,190,"ssertEquals(true, GregorianChronology.getInstance().millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,182,"assertEquals(false, greg.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,183,"assertEquals(false, greg.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,184,"assertEquals(false, greg.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,185,"assertEquals(false, greg.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,186,"assertEquals(false, greg.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,187,"assertEquals(false, greg.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,188,"assertEquals(false, greg.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,189,"assertEquals(true, greg.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,190,"assertEquals(true, greg.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,191,"assertEquals(true, greg.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,192,"assertEquals(true, greg.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,192,"ssertEquals(false, GregorianChronology.getInstanceUTC().centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,193,"ssertEquals(false, GregorianChronology.getInstanceUTC().years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,194,"ssertEquals(false, GregorianChronology.getInstanceUTC().weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,195,"ssertEquals(false, GregorianChronology.getInstanceUTC().months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,196,"ssertEquals(true, GregorianChronology.getInstanceUTC().weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,197,"ssertEquals(true, GregorianChronology.getInstanceUTC().days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,198,"ssertEquals(true, GregorianChronology.getInstanceUTC().halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,199,"ssertEquals(true, GregorianChronology.getInstanceUTC().hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,200,"ssertEquals(true, GregorianChronology.getInstanceUTC().minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,201,"ssertEquals(true, GregorianChronology.getInstanceUTC().seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,202,"ssertEquals(true, GregorianChronology.getInstanceUTC().millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,194,final GregorianChronology gregUTC = GregorianChronology.getInstanceUTC();
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,195,"assertEquals(false, gregUTC.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,196,"assertEquals(false, gregUTC.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,197,"assertEquals(false, gregUTC.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,198,"assertEquals(false, gregUTC.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,199,"assertEquals(true, gregUTC.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,200,"assertEquals(true, gregUTC.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,201,"assertEquals(true, gregUTC.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,202,"assertEquals(true, gregUTC.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,203,"assertEquals(true, gregUTC.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,204,"assertEquals(true, gregUTC.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,205,"assertEquals(true, gregUTC.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,204,"ateTimeZone gmt = DateTimeZone.forID(""Etc/GMT"");"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,205,"ssertEquals(false, GregorianChronology.getInstance(gmt).centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,206,"ssertEquals(false, GregorianChronology.getInstance(gmt).years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,207,"ssertEquals(false, GregorianChronology.getInstance(gmt).weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,208,"ssertEquals(false, GregorianChronology.getInstance(gmt).months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,209,"ssertEquals(true, GregorianChronology.getInstance(gmt).weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,210,"ssertEquals(true, GregorianChronology.getInstance(gmt).days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,211,"ssertEquals(true, GregorianChronology.getInstance(gmt).halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,212,"ssertEquals(true, GregorianChronology.getInstance(gmt).hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,213,"ssertEquals(true, GregorianChronology.getInstance(gmt).minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,214,"ssertEquals(true, GregorianChronology.getInstance(gmt).seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,215,"ssertEquals(true, GregorianChronology.getInstance(gmt).millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,207,"final DateTimeZone gmt = DateTimeZone.forID(""Etc/GMT"");"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,208,final GregorianChronology gregGMT = GregorianChronology.getInstance(gmt);
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,209,"assertEquals(false, gregGMT.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,210,"assertEquals(false, gregGMT.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,211,"assertEquals(false, gregGMT.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,212,"assertEquals(false, gregGMT.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,213,"assertEquals(true, gregGMT.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,214,"assertEquals(true, gregGMT.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,215,"assertEquals(true, gregGMT.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,216,"assertEquals(true, gregGMT.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,217,"assertEquals(true, gregGMT.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,218,"assertEquals(true, gregGMT.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,219,"assertEquals(true, gregGMT.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,219,"ssertEquals(""era"", GregorianChronology.getInstance().era().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,220,"ssertEquals(""centuryOfEra"", GregorianChronology.getInstance().centuryOfEra().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,221,"ssertEquals(""yearOfCentury"", GregorianChronology.getInstance().yearOfCentury().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,222,"ssertEquals(""yearOfEra"", GregorianChronology.getInstance().yearOfEra().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,223,"ssertEquals(""year"", GregorianChronology.getInstance().year().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,224,"ssertEquals(""monthOfYear"", GregorianChronology.getInstance().monthOfYear().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,225,"ssertEquals(""weekyearOfCentury"", GregorianChronology.getInstance().weekyearOfCentury().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,226,"ssertEquals(""weekyear"", GregorianChronology.getInstance().weekyear().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,227,"ssertEquals(""weekOfWeekyear"", GregorianChronology.getInstance().weekOfWeekyear().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,228,"ssertEquals(""dayOfYear"", GregorianChronology.getInstance().dayOfYear().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,229,"ssertEquals(""dayOfMonth"", GregorianChronology.getInstance().dayOfMonth().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,230,"ssertEquals(""dayOfWeek"", GregorianChronology.getInstance().dayOfWeek().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,223,final GregorianChronology greg = GregorianChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,224,"assertEquals(""era"", greg.era().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,225,"assertEquals(""centuryOfEra"", greg.centuryOfEra().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,226,"assertEquals(""yearOfCentury"", greg.yearOfCentury().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,227,"assertEquals(""yearOfEra"", greg.yearOfEra().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,228,"assertEquals(""year"", greg.year().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,229,"assertEquals(""monthOfYear"", greg.monthOfYear().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,230,"assertEquals(""weekyearOfCentury"", greg.weekyearOfCentury().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,231,"assertEquals(""weekyear"", greg.weekyear().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,232,"assertEquals(""weekOfWeekyear"", greg.weekOfWeekyear().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,233,"assertEquals(""dayOfYear"", greg.dayOfYear().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,234,"assertEquals(""dayOfMonth"", greg.dayOfMonth().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,235,"assertEquals(""dayOfWeek"", greg.dayOfWeek().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,232,"ssertEquals(true, GregorianChronology.getInstance().era().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,233,"ssertEquals(true, GregorianChronology.getInstance().centuryOfEra().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,234,"ssertEquals(true, GregorianChronology.getInstance().yearOfCentury().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,235,"ssertEquals(true, GregorianChronology.getInstance().yearOfEra().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,236,"ssertEquals(true, GregorianChronology.getInstance().year().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,237,"ssertEquals(true, GregorianChronology.getInstance().monthOfYear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,238,"ssertEquals(true, GregorianChronology.getInstance().weekyearOfCentury().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,239,"ssertEquals(true, GregorianChronology.getInstance().weekyear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,240,"ssertEquals(true, GregorianChronology.getInstance().weekOfWeekyear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,241,"ssertEquals(true, GregorianChronology.getInstance().dayOfYear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,242,"ssertEquals(true, GregorianChronology.getInstance().dayOfMonth().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,243,"ssertEquals(true, GregorianChronology.getInstance().dayOfWeek().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,237,"assertEquals(true, greg.era().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,238,"assertEquals(true, greg.centuryOfEra().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,239,"assertEquals(true, greg.yearOfCentury().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,240,"assertEquals(true, greg.yearOfEra().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,241,"assertEquals(true, greg.year().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,242,"assertEquals(true, greg.monthOfYear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,243,"assertEquals(true, greg.weekyearOfCentury().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,244,"assertEquals(true, greg.weekyear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,245,"assertEquals(true, greg.weekOfWeekyear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,246,"assertEquals(true, greg.dayOfYear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,247,"assertEquals(true, greg.dayOfMonth().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,248,"assertEquals(true, greg.dayOfWeek().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,247,"ssertEquals(""halfdayOfDay"", GregorianChronology.getInstance().halfdayOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,248,"ssertEquals(""clockhourOfHalfday"", GregorianChronology.getInstance().clockhourOfHalfday().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,249,"ssertEquals(""hourOfHalfday"", GregorianChronology.getInstance().hourOfHalfday().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,250,"ssertEquals(""clockhourOfDay"", GregorianChronology.getInstance().clockhourOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,251,"ssertEquals(""hourOfDay"", GregorianChronology.getInstance().hourOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,252,"ssertEquals(""minuteOfDay"", GregorianChronology.getInstance().minuteOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,253,"ssertEquals(""minuteOfHour"", GregorianChronology.getInstance().minuteOfHour().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,254,"ssertEquals(""secondOfDay"", GregorianChronology.getInstance().secondOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,255,"ssertEquals(""secondOfMinute"", GregorianChronology.getInstance().secondOfMinute().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,256,"ssertEquals(""millisOfDay"", GregorianChronology.getInstance().millisOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,257,"ssertEquals(""millisOfSecond"", GregorianChronology.getInstance().millisOfSecond().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,252,final GregorianChronology greg = GregorianChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,253,"assertEquals(""halfdayOfDay"", greg.halfdayOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,254,"assertEquals(""clockhourOfHalfday"", greg.clockhourOfHalfday().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,255,"assertEquals(""hourOfHalfday"", greg.hourOfHalfday().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,256,"assertEquals(""clockhourOfDay"", greg.clockhourOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,257,"assertEquals(""hourOfDay"", greg.hourOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,258,"assertEquals(""minuteOfDay"", greg.minuteOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,259,"assertEquals(""minuteOfHour"", greg.minuteOfHour().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,260,"assertEquals(""secondOfDay"", greg.secondOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,261,"assertEquals(""secondOfMinute"", greg.secondOfMinute().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,262,"assertEquals(""millisOfDay"", greg.millisOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,263,"assertEquals(""millisOfSecond"", greg.millisOfSecond().getName());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,259,"ssertEquals(true, GregorianChronology.getInstance().halfdayOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,260,"ssertEquals(true, GregorianChronology.getInstance().clockhourOfHalfday().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,261,"ssertEquals(true, GregorianChronology.getInstance().hourOfHalfday().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,262,"ssertEquals(true, GregorianChronology.getInstance().clockhourOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,263,"ssertEquals(true, GregorianChronology.getInstance().hourOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,264,"ssertEquals(true, GregorianChronology.getInstance().minuteOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,265,"ssertEquals(true, GregorianChronology.getInstance().minuteOfHour().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,266,"ssertEquals(true, GregorianChronology.getInstance().secondOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,267,"ssertEquals(true, GregorianChronology.getInstance().secondOfMinute().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,268,"ssertEquals(true, GregorianChronology.getInstance().millisOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,269,"ssertEquals(true, GregorianChronology.getInstance().millisOfSecond().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,265,"assertEquals(true, greg.halfdayOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,266,"assertEquals(true, greg.clockhourOfHalfday().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,267,"assertEquals(true, greg.hourOfHalfday().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,268,"assertEquals(true, greg.clockhourOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,269,"assertEquals(true, greg.hourOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,270,"assertEquals(true, greg.minuteOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,271,"assertEquals(true, greg.minuteOfHour().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,272,"assertEquals(true, greg.secondOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,273,"assertEquals(true, greg.secondOfMinute().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,274,"assertEquals(true, greg.millisOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,275,"assertEquals(true, greg.millisOfSecond().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,42,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,144,"ssertEquals(""eras"", ISOChronology.getInstance().eras().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,145,"ssertEquals(""centuries"", ISOChronology.getInstance().centuries().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,146,"ssertEquals(""years"", ISOChronology.getInstance().years().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,147,"ssertEquals(""weekyears"", ISOChronology.getInstance().weekyears().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,148,"ssertEquals(""months"", ISOChronology.getInstance().months().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,149,"ssertEquals(""weeks"", ISOChronology.getInstance().weeks().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,150,"ssertEquals(""days"", ISOChronology.getInstance().days().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,151,"ssertEquals(""halfdays"", ISOChronology.getInstance().halfdays().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,152,"ssertEquals(""hours"", ISOChronology.getInstance().hours().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,153,"ssertEquals(""minutes"", ISOChronology.getInstance().minutes().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,154,"ssertEquals(""seconds"", ISOChronology.getInstance().seconds().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,155,"ssertEquals(""millis"", ISOChronology.getInstance().millis().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,145,final ISOChronology iso = ISOChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,146,"assertEquals(""eras"", iso.eras().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,147,"assertEquals(""centuries"", iso.centuries().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,148,"assertEquals(""years"", iso.years().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,149,"assertEquals(""weekyears"", iso.weekyears().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,150,"assertEquals(""months"", iso.months().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,151,"assertEquals(""weeks"", iso.weeks().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,152,"assertEquals(""days"", iso.days().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,153,"assertEquals(""halfdays"", iso.halfdays().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,154,"assertEquals(""hours"", iso.hours().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,155,"assertEquals(""minutes"", iso.minutes().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,156,"assertEquals(""seconds"", iso.seconds().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,157,"assertEquals(""millis"", iso.millis().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,157,"ssertEquals(false, ISOChronology.getInstance().eras().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,158,"ssertEquals(true, ISOChronology.getInstance().centuries().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,159,"ssertEquals(true, ISOChronology.getInstance().years().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,160,"ssertEquals(true, ISOChronology.getInstance().weekyears().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,161,"ssertEquals(true, ISOChronology.getInstance().months().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,162,"ssertEquals(true, ISOChronology.getInstance().weeks().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,163,"ssertEquals(true, ISOChronology.getInstance().days().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,164,"ssertEquals(true, ISOChronology.getInstance().halfdays().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,165,"ssertEquals(true, ISOChronology.getInstance().hours().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,166,"ssertEquals(true, ISOChronology.getInstance().minutes().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,167,"ssertEquals(true, ISOChronology.getInstance().seconds().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,168,"ssertEquals(true, ISOChronology.getInstance().millis().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,159,"assertEquals(false, iso.eras().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,160,"assertEquals(true, iso.centuries().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,161,"assertEquals(true, iso.years().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,162,"assertEquals(true, iso.weekyears().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,163,"assertEquals(true, iso.months().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,164,"assertEquals(true, iso.weeks().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,165,"assertEquals(true, iso.days().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,166,"assertEquals(true, iso.halfdays().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,167,"assertEquals(true, iso.hours().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,168,"assertEquals(true, iso.minutes().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,169,"assertEquals(true, iso.seconds().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,170,"assertEquals(true, iso.millis().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,170,"ssertEquals(false, ISOChronology.getInstance().centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,171,"ssertEquals(false, ISOChronology.getInstance().years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,172,"ssertEquals(false, ISOChronology.getInstance().weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,173,"ssertEquals(false, ISOChronology.getInstance().months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,174,"ssertEquals(false, ISOChronology.getInstance().weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,175,"ssertEquals(false, ISOChronology.getInstance().days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,176,"ssertEquals(false, ISOChronology.getInstance().halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,177,"ssertEquals(true, ISOChronology.getInstance().hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,178,"ssertEquals(true, ISOChronology.getInstance().minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,179,"ssertEquals(true, ISOChronology.getInstance().seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,180,"ssertEquals(true, ISOChronology.getInstance().millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,172,"assertEquals(false, iso.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,173,"assertEquals(false, iso.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,174,"assertEquals(false, iso.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,175,"assertEquals(false, iso.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,176,"assertEquals(false, iso.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,177,"assertEquals(false, iso.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,178,"assertEquals(false, iso.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,179,"assertEquals(true, iso.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,180,"assertEquals(true, iso.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,181,"assertEquals(true, iso.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,182,"assertEquals(true, iso.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,182,"ssertEquals(false, ISOChronology.getInstanceUTC().centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,183,"ssertEquals(false, ISOChronology.getInstanceUTC().years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,184,"ssertEquals(false, ISOChronology.getInstanceUTC().weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,185,"ssertEquals(false, ISOChronology.getInstanceUTC().months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,186,"ssertEquals(true, ISOChronology.getInstanceUTC().weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,187,"ssertEquals(true, ISOChronology.getInstanceUTC().days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,188,"ssertEquals(true, ISOChronology.getInstanceUTC().halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,189,"ssertEquals(true, ISOChronology.getInstanceUTC().hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,190,"ssertEquals(true, ISOChronology.getInstanceUTC().minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,191,"ssertEquals(true, ISOChronology.getInstanceUTC().seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,192,"ssertEquals(true, ISOChronology.getInstanceUTC().millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,184,final ISOChronology isoUTC = ISOChronology.getInstanceUTC();
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,185,"assertEquals(false, isoUTC.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,186,"assertEquals(false, isoUTC.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,187,"assertEquals(false, isoUTC.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,188,"assertEquals(false, isoUTC.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,189,"assertEquals(true, isoUTC.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,190,"assertEquals(true, isoUTC.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,191,"assertEquals(true, isoUTC.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,192,"assertEquals(true, isoUTC.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,193,"assertEquals(true, isoUTC.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,194,"assertEquals(true, isoUTC.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,195,"assertEquals(true, isoUTC.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,194,"ateTimeZone gmt = DateTimeZone.forID(""Etc/GMT"");"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,195,"ssertEquals(false, ISOChronology.getInstance(gmt).centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,196,"ssertEquals(false, ISOChronology.getInstance(gmt).years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,197,"ssertEquals(false, ISOChronology.getInstance(gmt).weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,198,"ssertEquals(false, ISOChronology.getInstance(gmt).months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,199,"ssertEquals(true, ISOChronology.getInstance(gmt).weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,200,"ssertEquals(true, ISOChronology.getInstance(gmt).days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,201,"ssertEquals(true, ISOChronology.getInstance(gmt).halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,202,"ssertEquals(true, ISOChronology.getInstance(gmt).hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,203,"ssertEquals(true, ISOChronology.getInstance(gmt).minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,204,"ssertEquals(true, ISOChronology.getInstance(gmt).seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,205,"ssertEquals(true, ISOChronology.getInstance(gmt).millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,197,"final DateTimeZone gmt = DateTimeZone.forID(""Etc/GMT"");"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,198,final ISOChronology isoGMT = ISOChronology.getInstance(gmt);
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,199,"assertEquals(false, isoGMT.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,200,"assertEquals(false, isoGMT.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,201,"assertEquals(false, isoGMT.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,202,"assertEquals(false, isoGMT.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,203,"assertEquals(true, isoGMT.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,204,"assertEquals(true, isoGMT.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,205,"assertEquals(true, isoGMT.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,206,"assertEquals(true, isoGMT.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,207,"assertEquals(true, isoGMT.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,208,"assertEquals(true, isoGMT.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,209,"assertEquals(true, isoGMT.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,207,ateTimeZone offset = DateTimeZone.forOffsetHours(1);
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,208,"ssertEquals(false, ISOChronology.getInstance(offset).centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,209,"ssertEquals(false, ISOChronology.getInstance(offset).years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,210,"ssertEquals(false, ISOChronology.getInstance(offset).weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,211,"ssertEquals(false, ISOChronology.getInstance(offset).months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,212,"ssertEquals(true, ISOChronology.getInstance(offset).weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,213,"ssertEquals(true, ISOChronology.getInstance(offset).days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,214,"ssertEquals(true, ISOChronology.getInstance(offset).halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,215,"ssertEquals(true, ISOChronology.getInstance(offset).hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,216,"ssertEquals(true, ISOChronology.getInstance(offset).minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,217,"ssertEquals(true, ISOChronology.getInstance(offset).seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,218,"ssertEquals(true, ISOChronology.getInstance(offset).millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,211,final DateTimeZone offset = DateTimeZone.forOffsetHours(1);
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,212,final ISOChronology isoOffset1 = ISOChronology.getInstance(offset);
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,213,"assertEquals(false, isoOffset1.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,214,"assertEquals(false, isoOffset1.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,215,"assertEquals(false, isoOffset1.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,216,"assertEquals(false, isoOffset1.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,217,"assertEquals(true, isoOffset1.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,218,"assertEquals(true, isoOffset1.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,219,"assertEquals(true, isoOffset1.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,220,"assertEquals(true, isoOffset1.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,221,"assertEquals(true, isoOffset1.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,222,"assertEquals(true, isoOffset1.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,223,"assertEquals(true, isoOffset1.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,222,"ssertEquals(""era"", ISOChronology.getInstance().era().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,223,"ssertEquals(""centuryOfEra"", ISOChronology.getInstance().centuryOfEra().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,224,"ssertEquals(""yearOfCentury"", ISOChronology.getInstance().yearOfCentury().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,225,"ssertEquals(""yearOfEra"", ISOChronology.getInstance().yearOfEra().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,226,"ssertEquals(""year"", ISOChronology.getInstance().year().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,227,"ssertEquals(""monthOfYear"", ISOChronology.getInstance().monthOfYear().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,228,"ssertEquals(""weekyearOfCentury"", ISOChronology.getInstance().weekyearOfCentury().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,229,"ssertEquals(""weekyear"", ISOChronology.getInstance().weekyear().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,230,"ssertEquals(""weekOfWeekyear"", ISOChronology.getInstance().weekOfWeekyear().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,231,"ssertEquals(""dayOfYear"", ISOChronology.getInstance().dayOfYear().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,232,"ssertEquals(""dayOfMonth"", ISOChronology.getInstance().dayOfMonth().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,233,"ssertEquals(""dayOfWeek"", ISOChronology.getInstance().dayOfWeek().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,227,final ISOChronology iso = ISOChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,228,"assertEquals(""era"", iso.era().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,229,"assertEquals(""centuryOfEra"", iso.centuryOfEra().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,230,"assertEquals(""yearOfCentury"", iso.yearOfCentury().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,231,"assertEquals(""yearOfEra"", iso.yearOfEra().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,232,"assertEquals(""year"", iso.year().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,233,"assertEquals(""monthOfYear"", iso.monthOfYear().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,234,"assertEquals(""weekyearOfCentury"", iso.weekyearOfCentury().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,235,"assertEquals(""weekyear"", iso.weekyear().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,236,"assertEquals(""weekOfWeekyear"", iso.weekOfWeekyear().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,237,"assertEquals(""dayOfYear"", iso.dayOfYear().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,238,"assertEquals(""dayOfMonth"", iso.dayOfMonth().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,239,"assertEquals(""dayOfWeek"", iso.dayOfWeek().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,235,"ssertEquals(true, ISOChronology.getInstance().era().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,236,"ssertEquals(true, ISOChronology.getInstance().centuryOfEra().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,237,"ssertEquals(true, ISOChronology.getInstance().yearOfCentury().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,238,"ssertEquals(true, ISOChronology.getInstance().yearOfEra().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,239,"ssertEquals(true, ISOChronology.getInstance().year().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,240,"ssertEquals(true, ISOChronology.getInstance().monthOfYear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,241,"ssertEquals(true, ISOChronology.getInstance().weekyearOfCentury().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,242,"ssertEquals(true, ISOChronology.getInstance().weekyear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,243,"ssertEquals(true, ISOChronology.getInstance().weekOfWeekyear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,244,"ssertEquals(true, ISOChronology.getInstance().dayOfYear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,245,"ssertEquals(true, ISOChronology.getInstance().dayOfMonth().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,246,"ssertEquals(true, ISOChronology.getInstance().dayOfWeek().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,241,"assertEquals(true, iso.era().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,242,"assertEquals(true, iso.centuryOfEra().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,243,"assertEquals(true, iso.yearOfCentury().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,244,"assertEquals(true, iso.yearOfEra().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,245,"assertEquals(true, iso.year().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,246,"assertEquals(true, iso.monthOfYear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,247,"assertEquals(true, iso.weekyearOfCentury().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,248,"assertEquals(true, iso.weekyear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,249,"assertEquals(true, iso.weekOfWeekyear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,250,"assertEquals(true, iso.dayOfYear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,251,"assertEquals(true, iso.dayOfMonth().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,252,"assertEquals(true, iso.dayOfWeek().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,250,"ssertEquals(""halfdayOfDay"", ISOChronology.getInstance().halfdayOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,251,"ssertEquals(""clockhourOfHalfday"", ISOChronology.getInstance().clockhourOfHalfday().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,252,"ssertEquals(""hourOfHalfday"", ISOChronology.getInstance().hourOfHalfday().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,253,"ssertEquals(""clockhourOfDay"", ISOChronology.getInstance().clockhourOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,254,"ssertEquals(""hourOfDay"", ISOChronology.getInstance().hourOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,255,"ssertEquals(""minuteOfDay"", ISOChronology.getInstance().minuteOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,256,"ssertEquals(""minuteOfHour"", ISOChronology.getInstance().minuteOfHour().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,257,"ssertEquals(""secondOfDay"", ISOChronology.getInstance().secondOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,258,"ssertEquals(""secondOfMinute"", ISOChronology.getInstance().secondOfMinute().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,259,"ssertEquals(""millisOfDay"", ISOChronology.getInstance().millisOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,260,"ssertEquals(""millisOfSecond"", ISOChronology.getInstance().millisOfSecond().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,256,final ISOChronology iso = ISOChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,257,"assertEquals(""halfdayOfDay"", iso.halfdayOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,258,"assertEquals(""clockhourOfHalfday"", iso.clockhourOfHalfday().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,259,"assertEquals(""hourOfHalfday"", iso.hourOfHalfday().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,260,"assertEquals(""clockhourOfDay"", iso.clockhourOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,261,"assertEquals(""hourOfDay"", iso.hourOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,262,"assertEquals(""minuteOfDay"", iso.minuteOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,263,"assertEquals(""minuteOfHour"", iso.minuteOfHour().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,264,"assertEquals(""secondOfDay"", iso.secondOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,265,"assertEquals(""secondOfMinute"", iso.secondOfMinute().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,266,"assertEquals(""millisOfDay"", iso.millisOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,267,"assertEquals(""millisOfSecond"", iso.millisOfSecond().getName());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,262,"ssertEquals(true, ISOChronology.getInstance().halfdayOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,263,"ssertEquals(true, ISOChronology.getInstance().clockhourOfHalfday().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,264,"ssertEquals(true, ISOChronology.getInstance().hourOfHalfday().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,265,"ssertEquals(true, ISOChronology.getInstance().clockhourOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,266,"ssertEquals(true, ISOChronology.getInstance().hourOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,267,"ssertEquals(true, ISOChronology.getInstance().minuteOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,268,"ssertEquals(true, ISOChronology.getInstance().minuteOfHour().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,269,"ssertEquals(true, ISOChronology.getInstance().secondOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,270,"ssertEquals(true, ISOChronology.getInstance().secondOfMinute().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,271,"ssertEquals(true, ISOChronology.getInstance().millisOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,272,"ssertEquals(true, ISOChronology.getInstance().millisOfSecond().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,269,"assertEquals(true, iso.halfdayOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,270,"assertEquals(true, iso.clockhourOfHalfday().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,271,"assertEquals(true, iso.hourOfHalfday().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,272,"assertEquals(true, iso.clockhourOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,273,"assertEquals(true, iso.hourOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,274,"assertEquals(true, iso.minuteOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,275,"assertEquals(true, iso.minuteOfHour().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,276,"assertEquals(true, iso.secondOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,277,"assertEquals(true, iso.secondOfMinute().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,278,"assertEquals(true, iso.millisOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,279,"assertEquals(true, iso.millisOfSecond().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,146,"ssertEquals(""eras"", IslamicChronology.getInstance().eras().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,147,"ssertEquals(""centuries"", IslamicChronology.getInstance().centuries().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,148,"ssertEquals(""years"", IslamicChronology.getInstance().years().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,149,"ssertEquals(""weekyears"", IslamicChronology.getInstance().weekyears().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,150,"ssertEquals(""months"", IslamicChronology.getInstance().months().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,151,"ssertEquals(""weeks"", IslamicChronology.getInstance().weeks().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,152,"ssertEquals(""days"", IslamicChronology.getInstance().days().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,153,"ssertEquals(""halfdays"", IslamicChronology.getInstance().halfdays().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,154,"ssertEquals(""hours"", IslamicChronology.getInstance().hours().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,155,"ssertEquals(""minutes"", IslamicChronology.getInstance().minutes().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,156,"ssertEquals(""seconds"", IslamicChronology.getInstance().seconds().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,157,"ssertEquals(""millis"", IslamicChronology.getInstance().millis().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,146,final IslamicChronology islamic = IslamicChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,147,"assertEquals(""eras"", islamic.eras().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,148,"assertEquals(""centuries"", islamic.centuries().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,149,"assertEquals(""years"", islamic.years().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,150,"assertEquals(""weekyears"", islamic.weekyears().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,151,"assertEquals(""months"", islamic.months().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,152,"assertEquals(""weeks"", islamic.weeks().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,153,"assertEquals(""days"", islamic.days().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,154,"assertEquals(""halfdays"", islamic.halfdays().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,155,"assertEquals(""hours"", islamic.hours().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,156,"assertEquals(""minutes"", islamic.minutes().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,157,"assertEquals(""seconds"", islamic.seconds().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,158,"assertEquals(""millis"", islamic.millis().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,159,"ssertEquals(false, IslamicChronology.getInstance().eras().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,160,"ssertEquals(true, IslamicChronology.getInstance().centuries().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,161,"ssertEquals(true, IslamicChronology.getInstance().years().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,162,"ssertEquals(true, IslamicChronology.getInstance().weekyears().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,163,"ssertEquals(true, IslamicChronology.getInstance().months().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,164,"ssertEquals(true, IslamicChronology.getInstance().weeks().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,165,"ssertEquals(true, IslamicChronology.getInstance().days().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,166,"ssertEquals(true, IslamicChronology.getInstance().halfdays().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,167,"ssertEquals(true, IslamicChronology.getInstance().hours().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,168,"ssertEquals(true, IslamicChronology.getInstance().minutes().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,169,"ssertEquals(true, IslamicChronology.getInstance().seconds().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,170,"ssertEquals(true, IslamicChronology.getInstance().millis().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,160,"assertEquals(false, islamic.eras().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,161,"assertEquals(true, islamic.centuries().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,162,"assertEquals(true, islamic.years().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,163,"assertEquals(true, islamic.weekyears().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,164,"assertEquals(true, islamic.months().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,165,"assertEquals(true, islamic.weeks().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,166,"assertEquals(true, islamic.days().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,167,"assertEquals(true, islamic.halfdays().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,168,"assertEquals(true, islamic.hours().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,169,"assertEquals(true, islamic.minutes().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,170,"assertEquals(true, islamic.seconds().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,171,"assertEquals(true, islamic.millis().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,172,"ssertEquals(false, IslamicChronology.getInstance().centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,173,"ssertEquals(false, IslamicChronology.getInstance().years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,174,"ssertEquals(false, IslamicChronology.getInstance().weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,175,"ssertEquals(false, IslamicChronology.getInstance().months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,176,"ssertEquals(false, IslamicChronology.getInstance().weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,177,"ssertEquals(false, IslamicChronology.getInstance().days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,178,"ssertEquals(false, IslamicChronology.getInstance().halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,179,"ssertEquals(true, IslamicChronology.getInstance().hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,180,"ssertEquals(true, IslamicChronology.getInstance().minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,181,"ssertEquals(true, IslamicChronology.getInstance().seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,182,"ssertEquals(true, IslamicChronology.getInstance().millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,173,"assertEquals(false, islamic.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,174,"assertEquals(false, islamic.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,175,"assertEquals(false, islamic.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,176,"assertEquals(false, islamic.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,177,"assertEquals(false, islamic.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,178,"assertEquals(false, islamic.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,179,"assertEquals(false, islamic.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,180,"assertEquals(true, islamic.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,181,"assertEquals(true, islamic.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,182,"assertEquals(true, islamic.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,183,"assertEquals(true, islamic.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,184,"ssertEquals(false, IslamicChronology.getInstanceUTC().centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,185,"ssertEquals(false, IslamicChronology.getInstanceUTC().years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,186,"ssertEquals(false, IslamicChronology.getInstanceUTC().weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,187,"ssertEquals(false, IslamicChronology.getInstanceUTC().months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,188,"ssertEquals(true, IslamicChronology.getInstanceUTC().weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,189,"ssertEquals(true, IslamicChronology.getInstanceUTC().days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,190,"ssertEquals(true, IslamicChronology.getInstanceUTC().halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,191,"ssertEquals(true, IslamicChronology.getInstanceUTC().hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,192,"ssertEquals(true, IslamicChronology.getInstanceUTC().minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,193,"ssertEquals(true, IslamicChronology.getInstanceUTC().seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,194,"ssertEquals(true, IslamicChronology.getInstanceUTC().millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,185,final IslamicChronology islamicUTC = IslamicChronology.getInstanceUTC();
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,186,"assertEquals(false, islamicUTC.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,187,"assertEquals(false, islamicUTC.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,188,"assertEquals(false, islamicUTC.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,189,"assertEquals(false, islamicUTC.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,190,"assertEquals(true, islamicUTC.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,191,"assertEquals(true, islamicUTC.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,192,"assertEquals(true, islamicUTC.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,193,"assertEquals(true, islamicUTC.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,194,"assertEquals(true, islamicUTC.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,195,"assertEquals(true, islamicUTC.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,196,"assertEquals(true, islamicUTC.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,196,"ateTimeZone gmt = DateTimeZone.forID(""Etc/GMT"");"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,197,"ssertEquals(false, IslamicChronology.getInstance(gmt).centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,198,"ssertEquals(false, IslamicChronology.getInstance(gmt).years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,199,"ssertEquals(false, IslamicChronology.getInstance(gmt).weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,200,"ssertEquals(false, IslamicChronology.getInstance(gmt).months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,201,"ssertEquals(true, IslamicChronology.getInstance(gmt).weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,202,"ssertEquals(true, IslamicChronology.getInstance(gmt).days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,203,"ssertEquals(true, IslamicChronology.getInstance(gmt).halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,204,"ssertEquals(true, IslamicChronology.getInstance(gmt).hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,205,"ssertEquals(true, IslamicChronology.getInstance(gmt).minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,206,"ssertEquals(true, IslamicChronology.getInstance(gmt).seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,207,"ssertEquals(true, IslamicChronology.getInstance(gmt).millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,198,"final DateTimeZone gmt = DateTimeZone.forID(""Etc/GMT"");"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,199,final IslamicChronology islamicGMT = IslamicChronology.getInstance(gmt);
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,200,"assertEquals(false, islamicGMT.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,201,"assertEquals(false, islamicGMT.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,202,"assertEquals(false, islamicGMT.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,203,"assertEquals(false, islamicGMT.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,204,"assertEquals(true, islamicGMT.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,205,"assertEquals(true, islamicGMT.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,206,"assertEquals(true, islamicGMT.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,207,"assertEquals(true, islamicGMT.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,208,"assertEquals(true, islamicGMT.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,209,"assertEquals(true, islamicGMT.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,210,"assertEquals(true, islamicGMT.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,211,"ssertEquals(""era"", IslamicChronology.getInstance().era().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,212,"ssertEquals(""centuryOfEra"", IslamicChronology.getInstance().centuryOfEra().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,213,"ssertEquals(""yearOfCentury"", IslamicChronology.getInstance().yearOfCentury().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,214,"ssertEquals(""yearOfEra"", IslamicChronology.getInstance().yearOfEra().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,215,"ssertEquals(""year"", IslamicChronology.getInstance().year().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,216,"ssertEquals(""monthOfYear"", IslamicChronology.getInstance().monthOfYear().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,217,"ssertEquals(""weekyearOfCentury"", IslamicChronology.getInstance().weekyearOfCentury().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,218,"ssertEquals(""weekyear"", IslamicChronology.getInstance().weekyear().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,219,"ssertEquals(""weekOfWeekyear"", IslamicChronology.getInstance().weekOfWeekyear().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,220,"ssertEquals(""dayOfYear"", IslamicChronology.getInstance().dayOfYear().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,221,"ssertEquals(""dayOfMonth"", IslamicChronology.getInstance().dayOfMonth().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,222,"ssertEquals(""dayOfWeek"", IslamicChronology.getInstance().dayOfWeek().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,214,final IslamicChronology islamic = IslamicChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,215,"assertEquals(""era"", islamic.era().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,216,"assertEquals(""centuryOfEra"", islamic.centuryOfEra().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,217,"assertEquals(""yearOfCentury"", islamic.yearOfCentury().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,218,"assertEquals(""yearOfEra"", islamic.yearOfEra().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,219,"assertEquals(""year"", islamic.year().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,220,"assertEquals(""monthOfYear"", islamic.monthOfYear().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,221,"assertEquals(""weekyearOfCentury"", islamic.weekyearOfCentury().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,222,"assertEquals(""weekyear"", islamic.weekyear().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,223,"assertEquals(""weekOfWeekyear"", islamic.weekOfWeekyear().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,224,"assertEquals(""dayOfYear"", islamic.dayOfYear().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,225,"assertEquals(""dayOfMonth"", islamic.dayOfMonth().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,226,"assertEquals(""dayOfWeek"", islamic.dayOfWeek().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,224,"ssertEquals(true, IslamicChronology.getInstance().era().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,225,"ssertEquals(true, IslamicChronology.getInstance().centuryOfEra().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,226,"ssertEquals(true, IslamicChronology.getInstance().yearOfCentury().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,227,"ssertEquals(true, IslamicChronology.getInstance().yearOfEra().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,228,"ssertEquals(true, IslamicChronology.getInstance().year().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,229,"ssertEquals(true, IslamicChronology.getInstance().monthOfYear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,230,"ssertEquals(true, IslamicChronology.getInstance().weekyearOfCentury().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,231,"ssertEquals(true, IslamicChronology.getInstance().weekyear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,232,"ssertEquals(true, IslamicChronology.getInstance().weekOfWeekyear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,233,"ssertEquals(true, IslamicChronology.getInstance().dayOfYear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,234,"ssertEquals(true, IslamicChronology.getInstance().dayOfMonth().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,235,"ssertEquals(true, IslamicChronology.getInstance().dayOfWeek().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,228,"assertEquals(true, islamic.era().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,229,"assertEquals(true, islamic.centuryOfEra().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,230,"assertEquals(true, islamic.yearOfCentury().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,231,"assertEquals(true, islamic.yearOfEra().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,232,"assertEquals(true, islamic.year().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,233,"assertEquals(true, islamic.monthOfYear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,234,"assertEquals(true, islamic.weekyearOfCentury().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,235,"assertEquals(true, islamic.weekyear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,236,"assertEquals(true, islamic.weekOfWeekyear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,237,"assertEquals(true, islamic.dayOfYear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,238,"assertEquals(true, islamic.dayOfMonth().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,239,"assertEquals(true, islamic.dayOfWeek().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,239,"ssertEquals(""halfdayOfDay"", IslamicChronology.getInstance().halfdayOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,240,"ssertEquals(""clockhourOfHalfday"", IslamicChronology.getInstance().clockhourOfHalfday().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,241,"ssertEquals(""hourOfHalfday"", IslamicChronology.getInstance().hourOfHalfday().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,242,"ssertEquals(""clockhourOfDay"", IslamicChronology.getInstance().clockhourOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,243,"ssertEquals(""hourOfDay"", IslamicChronology.getInstance().hourOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,244,"ssertEquals(""minuteOfDay"", IslamicChronology.getInstance().minuteOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,245,"ssertEquals(""minuteOfHour"", IslamicChronology.getInstance().minuteOfHour().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,246,"ssertEquals(""secondOfDay"", IslamicChronology.getInstance().secondOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,247,"ssertEquals(""secondOfMinute"", IslamicChronology.getInstance().secondOfMinute().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,248,"ssertEquals(""millisOfDay"", IslamicChronology.getInstance().millisOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,249,"ssertEquals(""millisOfSecond"", IslamicChronology.getInstance().millisOfSecond().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,243,final IslamicChronology islamic = IslamicChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,244,"assertEquals(""halfdayOfDay"", islamic.halfdayOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,245,"assertEquals(""clockhourOfHalfday"", islamic.clockhourOfHalfday().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,246,"assertEquals(""hourOfHalfday"", islamic.hourOfHalfday().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,247,"assertEquals(""clockhourOfDay"", islamic.clockhourOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,248,"assertEquals(""hourOfDay"", islamic.hourOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,249,"assertEquals(""minuteOfDay"", islamic.minuteOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,250,"assertEquals(""minuteOfHour"", islamic.minuteOfHour().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,251,"assertEquals(""secondOfDay"", islamic.secondOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,252,"assertEquals(""secondOfMinute"", islamic.secondOfMinute().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,253,"assertEquals(""millisOfDay"", islamic.millisOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,254,"assertEquals(""millisOfSecond"", islamic.millisOfSecond().getName());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,251,"ssertEquals(true, IslamicChronology.getInstance().halfdayOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,252,"ssertEquals(true, IslamicChronology.getInstance().clockhourOfHalfday().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,253,"ssertEquals(true, IslamicChronology.getInstance().hourOfHalfday().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,254,"ssertEquals(true, IslamicChronology.getInstance().clockhourOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,255,"ssertEquals(true, IslamicChronology.getInstance().hourOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,256,"ssertEquals(true, IslamicChronology.getInstance().minuteOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,257,"ssertEquals(true, IslamicChronology.getInstance().minuteOfHour().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,258,"ssertEquals(true, IslamicChronology.getInstance().secondOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,259,"ssertEquals(true, IslamicChronology.getInstance().secondOfMinute().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,260,"ssertEquals(true, IslamicChronology.getInstance().millisOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,261,"ssertEquals(true, IslamicChronology.getInstance().millisOfSecond().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,256,"assertEquals(true, islamic.halfdayOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,257,"assertEquals(true, islamic.clockhourOfHalfday().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,258,"assertEquals(true, islamic.hourOfHalfday().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,259,"assertEquals(true, islamic.clockhourOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,260,"assertEquals(true, islamic.hourOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,261,"assertEquals(true, islamic.minuteOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,262,"assertEquals(true, islamic.minuteOfHour().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,263,"assertEquals(true, islamic.secondOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,264,"assertEquals(true, islamic.secondOfMinute().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,265,"assertEquals(true, islamic.millisOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,266,"assertEquals(true, islamic.millisOfSecond().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,151,"ssertEquals(""eras"", JulianChronology.getInstance().eras().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,152,"ssertEquals(""centuries"", JulianChronology.getInstance().centuries().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,153,"ssertEquals(""years"", JulianChronology.getInstance().years().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,154,"ssertEquals(""weekyears"", JulianChronology.getInstance().weekyears().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,155,"ssertEquals(""months"", JulianChronology.getInstance().months().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,156,"ssertEquals(""weeks"", JulianChronology.getInstance().weeks().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,157,"ssertEquals(""days"", JulianChronology.getInstance().days().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,158,"ssertEquals(""halfdays"", JulianChronology.getInstance().halfdays().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,159,"ssertEquals(""hours"", JulianChronology.getInstance().hours().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,160,"ssertEquals(""minutes"", JulianChronology.getInstance().minutes().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,161,"ssertEquals(""seconds"", JulianChronology.getInstance().seconds().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,162,"ssertEquals(""millis"", JulianChronology.getInstance().millis().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,151,final JulianChronology julian = JulianChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,152,"assertEquals(""eras"", julian.eras().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,153,"assertEquals(""centuries"", julian.centuries().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,154,"assertEquals(""years"", julian.years().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,155,"assertEquals(""weekyears"", julian.weekyears().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,156,"assertEquals(""months"", julian.months().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,157,"assertEquals(""weeks"", julian.weeks().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,158,"assertEquals(""days"", julian.days().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,159,"assertEquals(""halfdays"", julian.halfdays().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,160,"assertEquals(""hours"", julian.hours().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,161,"assertEquals(""minutes"", julian.minutes().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,162,"assertEquals(""seconds"", julian.seconds().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,163,"assertEquals(""millis"", julian.millis().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,164,"ssertEquals(false, JulianChronology.getInstance().eras().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,165,"ssertEquals(true, JulianChronology.getInstance().centuries().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,166,"ssertEquals(true, JulianChronology.getInstance().years().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,167,"ssertEquals(true, JulianChronology.getInstance().weekyears().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,168,"ssertEquals(true, JulianChronology.getInstance().months().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,169,"ssertEquals(true, JulianChronology.getInstance().weeks().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,170,"ssertEquals(true, JulianChronology.getInstance().days().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,171,"ssertEquals(true, JulianChronology.getInstance().halfdays().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,172,"ssertEquals(true, JulianChronology.getInstance().hours().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,173,"ssertEquals(true, JulianChronology.getInstance().minutes().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,174,"ssertEquals(true, JulianChronology.getInstance().seconds().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,175,"ssertEquals(true, JulianChronology.getInstance().millis().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,165,"assertEquals(false, julian.eras().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,166,"assertEquals(true, julian.centuries().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,167,"assertEquals(true, julian.years().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,168,"assertEquals(true, julian.weekyears().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,169,"assertEquals(true, julian.months().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,170,"assertEquals(true, julian.weeks().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,171,"assertEquals(true, julian.days().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,172,"assertEquals(true, julian.halfdays().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,173,"assertEquals(true, julian.hours().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,174,"assertEquals(true, julian.minutes().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,175,"assertEquals(true, julian.seconds().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,176,"assertEquals(true, julian.millis().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,177,"ssertEquals(false, JulianChronology.getInstance().centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,178,"ssertEquals(false, JulianChronology.getInstance().years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,179,"ssertEquals(false, JulianChronology.getInstance().weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,180,"ssertEquals(false, JulianChronology.getInstance().months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,181,"ssertEquals(false, JulianChronology.getInstance().weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,182,"ssertEquals(false, JulianChronology.getInstance().days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,183,"ssertEquals(false, JulianChronology.getInstance().halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,184,"ssertEquals(true, JulianChronology.getInstance().hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,185,"ssertEquals(true, JulianChronology.getInstance().minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,186,"ssertEquals(true, JulianChronology.getInstance().seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,187,"ssertEquals(true, JulianChronology.getInstance().millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,178,"assertEquals(false, julian.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,179,"assertEquals(false, julian.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,180,"assertEquals(false, julian.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,181,"assertEquals(false, julian.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,182,"assertEquals(false, julian.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,183,"assertEquals(false, julian.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,184,"assertEquals(false, julian.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,185,"assertEquals(true, julian.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,186,"assertEquals(true, julian.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,187,"assertEquals(true, julian.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,188,"assertEquals(true, julian.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,189,"ssertEquals(false, JulianChronology.getInstanceUTC().centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,190,"ssertEquals(false, JulianChronology.getInstanceUTC().years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,191,"ssertEquals(false, JulianChronology.getInstanceUTC().weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,192,"ssertEquals(false, JulianChronology.getInstanceUTC().months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,193,"ssertEquals(true, JulianChronology.getInstanceUTC().weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,194,"ssertEquals(true, JulianChronology.getInstanceUTC().days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,195,"ssertEquals(true, JulianChronology.getInstanceUTC().halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,196,"ssertEquals(true, JulianChronology.getInstanceUTC().hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,197,"ssertEquals(true, JulianChronology.getInstanceUTC().minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,198,"ssertEquals(true, JulianChronology.getInstanceUTC().seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,199,"ssertEquals(true, JulianChronology.getInstanceUTC().millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,190,final JulianChronology julianUTC = JulianChronology.getInstanceUTC();
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,191,"assertEquals(false, julianUTC.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,192,"assertEquals(false, julianUTC.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,193,"assertEquals(false, julianUTC.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,194,"assertEquals(false, julianUTC.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,195,"assertEquals(true, julianUTC.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,196,"assertEquals(true, julianUTC.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,197,"assertEquals(true, julianUTC.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,198,"assertEquals(true, julianUTC.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,199,"assertEquals(true, julianUTC.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,200,"assertEquals(true, julianUTC.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,201,"assertEquals(true, julianUTC.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,201,"ateTimeZone gmt = DateTimeZone.forID(""Etc/GMT"");"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,202,"ssertEquals(false, JulianChronology.getInstance(gmt).centuries().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,203,"ssertEquals(false, JulianChronology.getInstance(gmt).years().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,204,"ssertEquals(false, JulianChronology.getInstance(gmt).weekyears().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,205,"ssertEquals(false, JulianChronology.getInstance(gmt).months().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,206,"ssertEquals(true, JulianChronology.getInstance(gmt).weeks().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,207,"ssertEquals(true, JulianChronology.getInstance(gmt).days().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,208,"ssertEquals(true, JulianChronology.getInstance(gmt).halfdays().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,209,"ssertEquals(true, JulianChronology.getInstance(gmt).hours().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,210,"ssertEquals(true, JulianChronology.getInstance(gmt).minutes().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,211,"ssertEquals(true, JulianChronology.getInstance(gmt).seconds().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,212,"ssertEquals(true, JulianChronology.getInstance(gmt).millis().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,203,"final DateTimeZone gmt = DateTimeZone.forID(""Etc/GMT"");"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,204,final JulianChronology julianGMT = JulianChronology.getInstance(gmt);
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,205,"assertEquals(false, julianGMT.centuries().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,206,"assertEquals(false, julianGMT.years().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,207,"assertEquals(false, julianGMT.weekyears().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,208,"assertEquals(false, julianGMT.months().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,209,"assertEquals(true, julianGMT.weeks().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,210,"assertEquals(true, julianGMT.days().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,211,"assertEquals(true, julianGMT.halfdays().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,212,"assertEquals(true, julianGMT.hours().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,213,"assertEquals(true, julianGMT.minutes().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,214,"assertEquals(true, julianGMT.seconds().isPrecise());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,215,"assertEquals(true, julianGMT.millis().isPrecise());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,216,"ssertEquals(""era"", JulianChronology.getInstance().era().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,217,"ssertEquals(""centuryOfEra"", JulianChronology.getInstance().centuryOfEra().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,218,"ssertEquals(""yearOfCentury"", JulianChronology.getInstance().yearOfCentury().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,219,"ssertEquals(""yearOfEra"", JulianChronology.getInstance().yearOfEra().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,220,"ssertEquals(""year"", JulianChronology.getInstance().year().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,221,"ssertEquals(""monthOfYear"", JulianChronology.getInstance().monthOfYear().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,222,"ssertEquals(""weekyearOfCentury"", JulianChronology.getInstance().weekyearOfCentury().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,223,"ssertEquals(""weekyear"", JulianChronology.getInstance().weekyear().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,224,"ssertEquals(""weekOfWeekyear"", JulianChronology.getInstance().weekOfWeekyear().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,225,"ssertEquals(""dayOfYear"", JulianChronology.getInstance().dayOfYear().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,226,"ssertEquals(""dayOfMonth"", JulianChronology.getInstance().dayOfMonth().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,227,"ssertEquals(""dayOfWeek"", JulianChronology.getInstance().dayOfWeek().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,219,final JulianChronology julian = JulianChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,220,"assertEquals(""era"", julian.era().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,221,"assertEquals(""centuryOfEra"", julian.centuryOfEra().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,222,"assertEquals(""yearOfCentury"", julian.yearOfCentury().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,223,"assertEquals(""yearOfEra"", julian.yearOfEra().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,224,"assertEquals(""year"", julian.year().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,225,"assertEquals(""monthOfYear"", julian.monthOfYear().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,226,"assertEquals(""weekyearOfCentury"", julian.weekyearOfCentury().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,227,"assertEquals(""weekyear"", julian.weekyear().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,228,"assertEquals(""weekOfWeekyear"", julian.weekOfWeekyear().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,229,"assertEquals(""dayOfYear"", julian.dayOfYear().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,230,"assertEquals(""dayOfMonth"", julian.dayOfMonth().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,231,"assertEquals(""dayOfWeek"", julian.dayOfWeek().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,229,"ssertEquals(true, JulianChronology.getInstance().era().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,230,"ssertEquals(true, JulianChronology.getInstance().centuryOfEra().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,231,"ssertEquals(true, JulianChronology.getInstance().yearOfCentury().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,232,"ssertEquals(true, JulianChronology.getInstance().yearOfEra().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,233,"ssertEquals(true, JulianChronology.getInstance().year().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,234,"ssertEquals(true, JulianChronology.getInstance().monthOfYear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,235,"ssertEquals(true, JulianChronology.getInstance().weekyearOfCentury().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,236,"ssertEquals(true, JulianChronology.getInstance().weekyear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,237,"ssertEquals(true, JulianChronology.getInstance().weekOfWeekyear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,238,"ssertEquals(true, JulianChronology.getInstance().dayOfYear().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,239,"ssertEquals(true, JulianChronology.getInstance().dayOfMonth().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,240,"ssertEquals(true, JulianChronology.getInstance().dayOfWeek().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,233,"assertEquals(true, julian.era().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,234,"assertEquals(true, julian.centuryOfEra().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,235,"assertEquals(true, julian.yearOfCentury().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,236,"assertEquals(true, julian.yearOfEra().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,237,"assertEquals(true, julian.year().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,238,"assertEquals(true, julian.monthOfYear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,239,"assertEquals(true, julian.weekyearOfCentury().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,240,"assertEquals(true, julian.weekyear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,241,"assertEquals(true, julian.weekOfWeekyear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,242,"assertEquals(true, julian.dayOfYear().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,243,"assertEquals(true, julian.dayOfMonth().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,244,"assertEquals(true, julian.dayOfWeek().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,244,"ssertEquals(""halfdayOfDay"", JulianChronology.getInstance().halfdayOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,245,"ssertEquals(""clockhourOfHalfday"", JulianChronology.getInstance().clockhourOfHalfday().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,246,"ssertEquals(""hourOfHalfday"", JulianChronology.getInstance().hourOfHalfday().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,247,"ssertEquals(""clockhourOfDay"", JulianChronology.getInstance().clockhourOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,248,"ssertEquals(""hourOfDay"", JulianChronology.getInstance().hourOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,249,"ssertEquals(""minuteOfDay"", JulianChronology.getInstance().minuteOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,250,"ssertEquals(""minuteOfHour"", JulianChronology.getInstance().minuteOfHour().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,251,"ssertEquals(""secondOfDay"", JulianChronology.getInstance().secondOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,252,"ssertEquals(""secondOfMinute"", JulianChronology.getInstance().secondOfMinute().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,253,"ssertEquals(""millisOfDay"", JulianChronology.getInstance().millisOfDay().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,254,"ssertEquals(""millisOfSecond"", JulianChronology.getInstance().millisOfSecond().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,248,final JulianChronology julian = JulianChronology.getInstance();
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,249,"assertEquals(""halfdayOfDay"", julian.halfdayOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,250,"assertEquals(""clockhourOfHalfday"", julian.clockhourOfHalfday().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,251,"assertEquals(""hourOfHalfday"", julian.hourOfHalfday().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,252,"assertEquals(""clockhourOfDay"", julian.clockhourOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,253,"assertEquals(""hourOfDay"", julian.hourOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,254,"assertEquals(""minuteOfDay"", julian.minuteOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,255,"assertEquals(""minuteOfHour"", julian.minuteOfHour().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,256,"assertEquals(""secondOfDay"", julian.secondOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,257,"assertEquals(""secondOfMinute"", julian.secondOfMinute().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,258,"assertEquals(""millisOfDay"", julian.millisOfDay().getName());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,259,"assertEquals(""millisOfSecond"", julian.millisOfSecond().getName());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,256,"ssertEquals(true, JulianChronology.getInstance().halfdayOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,257,"ssertEquals(true, JulianChronology.getInstance().clockhourOfHalfday().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,258,"ssertEquals(true, JulianChronology.getInstance().hourOfHalfday().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,259,"ssertEquals(true, JulianChronology.getInstance().clockhourOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,260,"ssertEquals(true, JulianChronology.getInstance().hourOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,261,"ssertEquals(true, JulianChronology.getInstance().minuteOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,262,"ssertEquals(true, JulianChronology.getInstance().minuteOfHour().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,263,"ssertEquals(true, JulianChronology.getInstance().secondOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,264,"ssertEquals(true, JulianChronology.getInstance().secondOfMinute().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,265,"ssertEquals(true, JulianChronology.getInstance().millisOfDay().isSupported());"
False,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,266,"ssertEquals(true, JulianChronology.getInstance().millisOfSecond().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,261,"assertEquals(true, julian.halfdayOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,262,"assertEquals(true, julian.clockhourOfHalfday().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,263,"assertEquals(true, julian.hourOfHalfday().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,264,"assertEquals(true, julian.clockhourOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,265,"assertEquals(true, julian.hourOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,266,"assertEquals(true, julian.minuteOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,267,"assertEquals(true, julian.minuteOfHour().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,268,"assertEquals(true, julian.secondOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,269,"assertEquals(true, julian.secondOfMinute().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,270,"assertEquals(true, julian.millisOfDay().isSupported());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,271,"assertEquals(true, julian.millisOfSecond().isSupported());"

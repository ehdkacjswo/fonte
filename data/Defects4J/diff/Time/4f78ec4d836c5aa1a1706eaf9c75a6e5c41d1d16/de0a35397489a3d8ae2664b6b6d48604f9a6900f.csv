is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,74,* Get the type of the field.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,76,* @return field type
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,78,public abstract DateTimeFieldType getType();
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,89,/** The weekyearOfCentury field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,90,"private static final DateTimeFieldType WEEKYEAR_OF_CENTURY = new DateTimeFieldType(""weekyearOfCentury"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,333,* Get the year of a week based year within a century field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,335,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,337,public static DateTimeFieldType weekyearOfCentury() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,338,return WEEKYEAR_OF_CENTURY;
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,318,"eturn UnsupportedDateTimeField.getInstance(""millisOfSecond"", millis());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,318,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,327,"eturn UnsupportedDateTimeField.getInstance(""millisOfDay"", millis());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,327,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,347,"eturn UnsupportedDateTimeField.getInstance(""secondOfMinute"", seconds());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,347,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,356,"eturn UnsupportedDateTimeField.getInstance(""secondOfDay"", seconds());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,356,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,376,"eturn UnsupportedDateTimeField.getInstance(""minuteOfHour"", minutes());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,376,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,385,"eturn UnsupportedDateTimeField.getInstance(""minuteOfDay"", minutes());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,385,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,405,"eturn UnsupportedDateTimeField.getInstance(""hourOfDay"", hours());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,405,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,414,"eturn UnsupportedDateTimeField.getInstance(""clockhourOfDay"", hours());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,414,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,423,"eturn UnsupportedDateTimeField.getInstance(""hourOfHalfday"", hours());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,423,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,432,"eturn UnsupportedDateTimeField.getInstance(""clockhourOfHalfday"", hours());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,432,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,442,"""halfdayOfDay"", UnsupportedDurationField.getInstance(""halfdays""));"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,442,"(DateTimeFieldType.halfdayOfDay(), UnsupportedDurationField.getInstance(""halfdays""));"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,466,"eturn UnsupportedDateTimeField.getInstance(""dayOfWeek"", days());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,466,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,475,"eturn UnsupportedDateTimeField.getInstance(""dayOfMonth"", days());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,475,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,484,"eturn UnsupportedDateTimeField.getInstance(""dayOfYear"", days());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,484,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,504,"eturn UnsupportedDateTimeField.getInstance(""weekOfWeekyear"", weeks());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,504,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,522,"eturn UnsupportedDateTimeField.getInstance(""weekyear"", weekyears());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,522,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,542,"eturn UnsupportedDateTimeField.getInstance(""monthOfYear"", months());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,542,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,562,"eturn UnsupportedDateTimeField.getInstance(""year"", years());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,562,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,571,"eturn UnsupportedDateTimeField.getInstance(""yearOfEra"", years());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,571,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,580,"eturn UnsupportedDateTimeField.getInstance(""yearOfCentury"", years());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,580,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,598,"eturn UnsupportedDateTimeField.getInstance(""centuryOfEra"", centuries());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,598,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,616,"eturn UnsupportedDateTimeField.getInstance(""era"", eras());"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,616,"return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,61,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,160,"""millisOfSecond"", cMillisField, cSecondsField);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,161,"(DateTimeFieldType.millisOfSecond(), cMillisField, cSecondsField);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,163,"""millisOfDay"", cMillisField, cDaysField);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,164,"(DateTimeFieldType.millisOfDay(), cMillisField, cDaysField);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,166,"""secondOfMinute"", cSecondsField, cMinutesField);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,167,"(DateTimeFieldType.secondOfMinute(), cSecondsField, cMinutesField);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,169,"""secondOfDay"", cSecondsField, cDaysField);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,170,"(DateTimeFieldType.secondOfDay(), cSecondsField, cDaysField);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,172,"""minuteOfHour"", cMinutesField, cHoursField);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,173,"(DateTimeFieldType.minuteOfHour(), cMinutesField, cHoursField);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,175,"""minuteOfDay"", cMinutesField, cDaysField);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,176,"(DateTimeFieldType.minuteOfDay(), cMinutesField, cDaysField);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,178,"""hourOfDay"", cHoursField, cDaysField);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,179,"(DateTimeFieldType.hourOfDay(), cHoursField, cDaysField);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,181,"""hourOfHalfday"", cHoursField, cHalfdaysField);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,182,"(DateTimeFieldType.hourOfHalfday(), cHoursField, cHalfdaysField);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,184,"cHourOfDayField, ""clockhourOfDay"");"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,185,"(cHourOfDayField, DateTimeFieldType.clockhourOfDay());"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,187,"cHourOfHalfdayField, ""clockhourOfHalfday"");"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,188,"(cHourOfHalfdayField, DateTimeFieldType.clockhourOfHalfday());"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,340,"ateTimeField field = new OffsetDateTimeField(fields.yearOfEra, """", 99);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,341,ields.centuryOfEra = new DividedDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,342,"field, ""centuryOfEra"", ""centuries"", 100);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,341,DateTimeField field = new OffsetDateTimeField(
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,342,"fields.yearOfEra, 99);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,343,fields.centuryOfEra = new DividedDateTimeField(
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,344,"field, DateTimeFieldType.centuryOfEra(), ""centuries"", 100);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,344,ield = new RemainderDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,345,"(DividedDateTimeField)fields.centuryOfEra, """");"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,346,"ields.yearOfCentury = new OffsetDateTimeField(field, ""yearOfCentury"", 1);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,346,field = new RemainderDateTimeField(
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,347,(DividedDateTimeField) fields.centuryOfEra);
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,348,fields.yearOfCentury = new OffsetDateTimeField(
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,349,"field, DateTimeFieldType.yearOfCentury(), 1);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,822,"uper(""halfdayOfDay"", cHalfdaysField, cDaysField);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,825,"super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,63,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,211,"ields.year = new OffsetDateTimeField(field, field.getName(), BUDDHIST_OFFSET);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,212,"fields.year = new OffsetDateTimeField(field, BUDDHIST_OFFSET);"
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,214,"ields.yearOfEra = new OffsetDateTimeField(fields.year, field.getName(), BUDDHIST_OFFSET);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,215,fields.yearOfEra = new OffsetDateTimeField(
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,216,"fields.year, DateTimeFieldType.yearOfEra(), BUDDHIST_OFFSET);"
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,217,"ields.weekyear = new OffsetDateTimeField(field, field.getName(), BUDDHIST_OFFSET);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,219,"fields.weekyear = new OffsetDateTimeField(field, BUDDHIST_OFFSET);"
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,219,"ield = new OffsetDateTimeField(fields.yearOfEra, """", 99);"
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,220,"ields.centuryOfEra = new DividedDateTimeField(field, ""centuryOfEra"", ""centuries"", 100);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,221,"field = new OffsetDateTimeField(fields.yearOfEra, 99);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,222,fields.centuryOfEra = new DividedDateTimeField(
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,223,"field, DateTimeFieldType.centuryOfEra(), ""centuries"", 100);"
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,222,ield = new RemainderDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,223,"(DividedDateTimeField)fields.centuryOfEra, """");"
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,224,"ields.yearOfCentury = new OffsetDateTimeField(field, ""yearOfCentury"", 1);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,225,field = new RemainderDateTimeField(
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,226,(DividedDateTimeField) fields.centuryOfEra);
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,227,fields.yearOfCentury = new OffsetDateTimeField(
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,228,"field, DateTimeFieldType.yearOfCentury(), 1);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,59,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,85,"uper(""era"");"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,86,super(DateTimeFieldType.era());
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,57,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,77,"uper(""dayOfMonth"", days);"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,78,"super(DateTimeFieldType.dayOfMonth(), days);"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,59,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,84,"uper(""era"");"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,85,super(DateTimeFieldType.era());
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,57,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,75,"uper(""monthOfYear"", months);"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,76,"super(DateTimeFieldType.monthOfYear(), months);"
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,56,mport org.joda.time.DateTimeConstants;
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,56,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,58,mport org.joda.time.field.ImpreciseDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,59,import org.joda.time.field.ImpreciseDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,76,"uper(""year"", ""years"", chronology.getAverageMillisPerYear());"
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,76,"super(DateTimeFieldType.year(), ""years"", chronology.getAverageMillisPerYear());"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,618,uper(gregorianField.getName());
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,618,super(gregorianField.getType());
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,57,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,79,"uper(""dayOfMonth"", days);"
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,80,"super(DateTimeFieldType.dayOfMonth(), days);"
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,59,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,82,"uper(""dayOfWeek"", days);"
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,83,"super(DateTimeFieldType.dayOfWeek(), days);"
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,57,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,79,"uper(""dayOfYear"", days);"
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,80,"super(DateTimeFieldType.dayOfYear(), days);"
True,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,59,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,83,"uper(""era"");"
True,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,84,super(DateTimeFieldType.era());
True,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,59,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,86,"uper(""monthOfYear"", ""months"", chronology.getAverageMillisPerMonth());"
True,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,87,"super(DateTimeFieldType.monthOfYear(), ""months"", chronology.getAverageMillisPerMonth());"
True,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,58,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,81,"uper(""weekOfWeekyear"", weeks);"
True,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,82,"super(DateTimeFieldType.weekOfWeekyear(), weeks);"
False,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,57,mport org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,57,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,59,mport org.joda.time.field.ImpreciseDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,60,import org.joda.time.field.ImpreciseDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,84,"uper(""weekyear"", ""weekyears"", chronology.getAverageMillisPerYear());"
True,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,84,"super(DateTimeFieldType.weekyear(), ""weekyears"", chronology.getAverageMillisPerYear());"
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,57,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,58,mport org.joda.time.field.ImpreciseDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,60,import org.joda.time.field.ImpreciseDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,81,"uper(""year"", ""years"", chronology.getAverageMillisPerYear());"
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,82,"super(DateTimeFieldType.year(), ""years"", chronology.getAverageMillisPerYear());"
True,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,57,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,76,"uper(yearField, ""yearOfEra"");"
True,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,77,"super(yearField, DateTimeFieldType.yearOfEra());"
True,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,64,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,208,ields.centuryOfEra = new DividedDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,209,"ISOYearOfEraDateTimeField.INSTANCE, ""centuryOfEra"", ""centuries"", 100);"
False,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,210,ields.yearOfCentury = new RemainderDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,211,"(DividedDateTimeField)fields.centuryOfEra, ""yearOfCentury"");"
True,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,209,fields.centuryOfEra = new DividedDateTimeField(
True,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,210,"ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra(), ""centuries"", 100);"
True,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,211,fields.yearOfCentury = new RemainderDateTimeField(
True,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,212,"(DividedDateTimeField) fields.centuryOfEra, DateTimeFieldType.yearOfCentury());"
True,JodaTime/src/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,57,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,82,"uper(GregorianChronology.getInstanceUTC().year(), ""yearOfEra"");"
True,JodaTime/src/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,83,"super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,444,"uper(field, field.getName());"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,444,"super(field, field.getType());"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,359,uper(field.getName());
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,359,super(field.getType());
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,56,mport java.io.Serializable;
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,59,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,78,ublic abstract class BaseDateTimeField extends DateTimeField implements Serializable {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,78,public abstract class BaseDateTimeField extends DateTimeField {
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,80,** Serialization version */
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,81,rivate static final long serialVersionUID = -4388055220581798589L;
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,83,** A desriptive name for the field */
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,84,rivate final String iName;
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,80,/** The field type. */
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,81,private final DateTimeFieldType iType;
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,89,rotected BaseDateTimeField(String name) {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,86,protected BaseDateTimeField(DateTimeFieldType type) {
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,91,f (name == null) {
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,92,"hrow new IllegalArgumentException(""The name must not be null"");"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,88,if (type == null) {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,89,"throw new IllegalArgumentException(""The type must not be null"");"
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,94,Name = name;
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,91,iType = type;
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,94,public final DateTimeFieldType getType() {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,95,return iType;
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,98,eturn iName;
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,99,return iType.getName();
True,JodaTime/src/java/org/joda/time/field/DecoratedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DecoratedDateTimeField.java,57,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/field/DecoratedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DecoratedDateTimeField.java,88, @param name  allow name to be overridden
True,JodaTime/src/java/org/joda/time/field/DecoratedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DecoratedDateTimeField.java,89,* @param type  allow type to be overridden
False,JodaTime/src/java/org/joda/time/field/DecoratedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DecoratedDateTimeField.java,90,"rotected DecoratedDateTimeField(DateTimeField field, String name) {"
False,JodaTime/src/java/org/joda/time/field/DecoratedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DecoratedDateTimeField.java,91,uper(name);
True,JodaTime/src/java/org/joda/time/field/DecoratedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DecoratedDateTimeField.java,91,"protected DecoratedDateTimeField(DateTimeField field, DateTimeFieldType type) {"
True,JodaTime/src/java/org/joda/time/field/DecoratedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DecoratedDateTimeField.java,92,super(type);
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,59,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,80,** A desriptive name for the field */
False,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,81,rivate final String iName;
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,81,/** The override field type */
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,82,private final DateTimeFieldType iType;
False,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,96, @param name  the name of the field
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,97,* @param type  the field type override
False,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,98,"rotected DelegatedDateTimeField(DateTimeField field, String name) {"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,99,"protected DelegatedDateTimeField(DateTimeField field, DateTimeFieldType type) {"
False,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,104,Name = name;
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,105,iType = (type == null ? field.getType() : type);
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,117,public DateTimeFieldType getType() {
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,118,return iType;
False,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,117,eturn (iName == null) ? iField.getName() : iName;
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,122,return iType.getName();
False,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,297,eturn (iName == null) ? iField.toString() :
False,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,298,"""DateTimeField["" + iName + ']');"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,302,"return (""DateTimeField["" + getName() + ']');"
True,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,57,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,87," @param name  short, descriptive name, like ""century""."
True,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,88,* @param type  the field type this field will actually use
False,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,93,"tring name, String durationName, int divisor) {"
False,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,94,"uper(field, name);"
True,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,94,"DateTimeFieldType type, String durationName, int divisor) {"
True,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,95,"super(field, type);"
False,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,124," @param name  short, descriptive name, like ""century""."
True,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,125,* @param type  the field type this field will actually use
False,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,126,"ublic DividedDateTimeField(RemainderDateTimeField remainderField, String name) {"
False,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,127,"uper(remainderField.getWrappedField(), name);"
True,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,127,"public DividedDateTimeField(RemainderDateTimeField remainderField, DateTimeFieldType type) {"
True,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,128,"super(remainderField.getWrappedField(), type);"
True,JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java,56,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java,86," @param name  short, descriptive name, like ""monthOfYear""."
True,JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java,87,* @param type  the field type
False,JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java,90,"ublic ImpreciseDateTimeField(String name, String durationName, long unitMillis) {"
False,JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java,91,uper(name);
True,JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java,91,"public ImpreciseDateTimeField(DateTimeFieldType type, String durationName, long unitMillis) {"
True,JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java,92,super(type);
True,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,57,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,75," @param name  short, descriptive name, like ""clockhourOfDay""."
True,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,76,* Constructor.
True,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,78,* @param field  the base field
True,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,79,* @param type  the field type this field will actually use
False,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,78,"ublic NonZeroDateTimeField(DateTimeField field, String name) {"
False,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,79,"uper(field, name);"
True,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,82,"public NonZeroDateTimeField(DateTimeField field, DateTimeFieldType type) {"
True,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,83,"super(field, type);"
True,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,57,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,76, Constructor
True,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,77,* Constructor.
False,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,79," @param name  short, descriptive name, like ""offsetYear""."
False,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,83,"ublic OffsetDateTimeField(DateTimeField field, String name, int offset) {"
False,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,84,"his(field, name, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);"
True,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,83,"public OffsetDateTimeField(DateTimeField field, int offset) {"
True,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,84,"this(field, field.getType(), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);"
False,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,88, Constructor
True,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,88,* Constructor.
False,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,91," @param name  short, descriptive name, like ""offsetYear""."
True,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,91,* @param type  the field type this field actually uses
True,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,92,* @param offset  offset to add to field values
True,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,93,* @throws IllegalArgumentException if offset is zero
True,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,95,"public OffsetDateTimeField(DateTimeField field, DateTimeFieldType type, int offset) {"
True,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,96,"this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);"
True,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,100,* Constructor.
True,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,102,"* @param field  the field to wrap, like ""year()""."
True,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,103,* @param type  the field type this field actually uses
False,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,97,"ublic OffsetDateTimeField(DateTimeField field, String name, int offset,"
True,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,109,"public OffsetDateTimeField(DateTimeField field, DateTimeFieldType type, int offset,"
False,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,99,"uper(field, name);"
True,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,111,"super(field, type);"
True,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,56,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,84," @param name  short, descriptive name, like ""secondOfMinute""."
True,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,85,* @param type  the field type this field uses
False,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,92,"ublic PreciseDateTimeField(String name,"
True,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,93,"public PreciseDateTimeField(DateTimeFieldType type,"
False,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,94,"uper(name, unit);"
True,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,95,"super(type, unit);"
True,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,56,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,78," @param name  short, descriptive name, like ""dayOfMonth""."
True,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,79,* @param type  the field type
False,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,83,"ublic PreciseDurationDateTimeField(String name, DurationField unit) {"
False,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,84,uper(name);
True,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,84,"public PreciseDurationDateTimeField(DateTimeFieldType type, DurationField unit) {"
True,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,85,super(type);
True,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,57,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,83," @param name  short, descriptive name, like ""yearOfCentury""."
True,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,84,* @param type  the field type this field actually uses
False,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,89,"tring name, String rangeName, int divisor) {"
False,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,90,"uper(field, name);"
True,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,90,"DateTimeFieldType type, String rangeName, int divisor) {"
True,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,91,"super(field, type);"
False,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,111," @param name  short, descriptive name, like ""yearOfCentury""."
False,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,113,"ublic RemainderDateTimeField(DividedDateTimeField dividedField, String name) {"
False,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,114,"uper(dividedField.getWrappedField(), name);"
True,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,113,public RemainderDateTimeField(DividedDateTimeField dividedField) {
True,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,114,"this(dividedField, dividedField.getType());"
True,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,118,* Construct a RemainderDateTimeField that compliments the given
True,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,119,* DividedDateTimeField.
True,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,121,"* @param dividedField  complimentary divided field, like ""century()""."
True,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,122,* @param type  the field type this field actually uses
True,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,124,"public RemainderDateTimeField(DividedDateTimeField dividedField, DateTimeFieldType type) {"
True,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,125,"super(dividedField.getWrappedField(), type);"
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,60,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,88,"tring name, DurationField durationField) {"
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,89,"DateTimeFieldType type, DurationField durationField) {"
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,95,ield = (UnsupportedDateTimeField)cCache.get(name);
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,96,field = (UnsupportedDateTimeField)cCache.get(type);
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,101,"ield = new UnsupportedDateTimeField(name, durationField);"
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,102,"Cache.put(name, field);"
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,102,"field = new UnsupportedDateTimeField(type, durationField);"
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,103,"cCache.put(type, field);"
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,107,** The name of the datetime field */
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,108,rivate final String iName;
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,108,/** The field type */
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,109,private final DateTimeFieldType iType;
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,115, @param name  the name to use
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,116,* @param type  the field type
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,118,"rivate UnsupportedDateTimeField(String name, DurationField durationField) {"
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,119,f (durationField == null) {
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,119,"private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {"
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,120,if (type == null || durationField == null) {
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,122,Name = name;
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,123,iType = type;
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,131,public DateTimeFieldType getType() {
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,132,return iType;
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,131,eturn iName;
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,136,return iType.getName();
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,545,"eturn getInstance(iName, iDurationField);"
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,550,"return getInstance(iType, iDurationField);"
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,549,"eturn new UnsupportedOperationException(iName + "" field is unsupported"");"
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,554,"return new UnsupportedOperationException(iType + "" field is unsupported"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,67,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,292,"chronoUTC.weekyear(), ""weekyearOfCentury"", ""centuries"", 100);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,293,"(chronoUTC.weekyear(), DateTimeFieldType.weekyearOfCentury(), ""centuries"", 100);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,296,"chronoUTC.year(), ""yearOfCentury"", ""centuries"", 100);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,297,"(chronoUTC.year(), DateTimeFieldType.yearOfCentury(), ""centuries"", 100);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,300,"chronoUTC.yearOfEra(), ""yearOfCentury"", ""centuries"", 100);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,301,"(chronoUTC.yearOfEra(), DateTimeFieldType.yearOfCentury(), ""centuries"", 100);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,64,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1746,""""", MillisDurationField.INSTANCE, iField.getDurationField());"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1747,"(DateTimeFieldType.millisOfSecond(), MillisDurationField.INSTANCE, iField.getDurationField());"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDateTimeField.java,56,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDateTimeField.java,65,"ublic TestGJDateTimeField(String name, String duratioName,"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDateTimeField.java,66,"public TestGJDateTimeField(DateTimeFieldType type, String duratioName,"
False,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDateTimeField.java,67,"uper(name, duratioName, unitMillis);"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDateTimeField.java,68,"super(type, duratioName, unitMillis);"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfMonthField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfMonthField.java,56,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfMonthField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfMonthField.java,64,"uper(""dayOfMonth"", ""days"", chrono.MILLIS_PER_DAY, chrono);"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfMonthField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfMonthField.java,65,"super(DateTimeFieldType.dayOfMonth(), ""days"", chrono.MILLIS_PER_DAY, chrono);"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfWeekField.java,56,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfWeekField.java,64,"uper(""dayOfWeek"", ""days"", chrono.MILLIS_PER_DAY, chrono);"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfWeekField.java,65,"super(DateTimeFieldType.dayOfWeek(), ""days"", chrono.MILLIS_PER_DAY, chrono);"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfYearField.java,56,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfYearField.java,64,"uper(""dayOfYear"", ""days"", chrono.MILLIS_PER_DAY, chrono);"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfYearField.java,65,"super(DateTimeFieldType.dayOfYear(), ""days"", chrono.MILLIS_PER_DAY, chrono);"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJMonthOfYearField.java,56,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/test/org/joda/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJMonthOfYearField.java,64,"uper(""monthOfYear"", ""months"", chrono.millisPerMonth(), chrono);"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJMonthOfYearField.java,65,"super(DateTimeFieldType.monthOfYear(), ""months"", chrono.millisPerMonth(), chrono);"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekOfWeekyearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekOfWeekyearField.java,56,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekOfWeekyearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekOfWeekyearField.java,64,"uper(""weekOfWeekyear"", ""weeks"","
True,JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekOfWeekyearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekOfWeekyearField.java,65,"super(DateTimeFieldType.weekOfWeekyear(), ""weeks"","
True,JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekyearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekyearField.java,56,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekyearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekyearField.java,64,"uper(""weekyear"", ""weekyears"", chrono.millisPerYear(), chrono);"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekyearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekyearField.java,65,"super(DateTimeFieldType.weekyear(), ""weekyears"", chrono.millisPerYear(), chrono);"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJYearField.java,56,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/test/org/joda/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJYearField.java,64,"uper(""year"", ""years"", chrono.millisPerYear(), chrono);"
True,JodaTime/src/test/org/joda/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJYearField.java,65,"super(DateTimeFieldType.year(), ""years"", chrono.millisPerYear(), chrono);"

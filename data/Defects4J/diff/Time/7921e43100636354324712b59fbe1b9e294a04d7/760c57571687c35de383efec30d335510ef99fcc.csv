is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,26,import org.joda.time.LocalDate;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,27,import org.joda.time.LocalDateTime;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,28,import org.joda.time.LocalTime;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,670,"* Parses only the local date from the given text, returning a new LocalDate."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,671,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,672,"* This will parse the text fully according to the formatter, using the UTC zone."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,673,"* Once parsed, only the local date will be used."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,674,"* This means that any parsed time, time-zone or offset field is completely ignored."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,675,* It also means that the zone and offset-parsed settings are ignored.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,677,"* @param text  the text to parse, not null"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,678,"* @return the parsed date, never null"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,679,* @throws UnsupportedOperationException if parsing is not supported
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,680,* @throws IllegalArgumentException if the text to parse is invalid
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,682,public LocalDate parseLocalDate(String text) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,683,return parseLocalDateTime(text).toLocalDate();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,687,"* Parses only the local time from the given text, returning a new LocalDate."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,688,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,689,"* This will parse the text fully according to the formatter, using the UTC zone."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,690,"* Once parsed, only the local time will be used."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,691,"* This means that any parsed date, time-zone or offset field is completely ignored."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,692,* It also means that the zone and offset-parsed settings are ignored.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,694,"* @param text  the text to parse, not null"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,695,"* @return the parsed time, never null"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,696,* @throws UnsupportedOperationException if parsing is not supported
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,697,* @throws IllegalArgumentException if the text to parse is invalid
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,699,public LocalTime parseLocalTime(String text) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,700,return parseLocalDateTime(text).toLocalTime();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,704,"* Parses only the local date-time from the given text, returning a new LocalDate."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,705,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,706,"* This will parse the text fully according to the formatter, using the UTC zone."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,707,"* Once parsed, only the local date-time will be used."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,708,* This means that any parsed time-zone or offset field is completely ignored.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,709,* It also means that the zone and offset-parsed settings are ignored.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,711,"* @param text  the text to parse, not null"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,712,"* @return the parsed date-time, never null"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,713,* @throws UnsupportedOperationException if parsing is not supported
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,714,* @throws IllegalArgumentException if the text to parse is invalid
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,716,public LocalDateTime parseLocalDateTime(String text) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,717,DateTimeParser parser = requireParser();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,719,"Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,720,"DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,721,"int newPos = parser.parseInto(bucket, text, 0);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,722,if (newPos >= 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,723,if (newPos >= text.length()) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,724,"long millis = bucket.computeMillis(true, text);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,725,if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,726,int parsedOffset = bucket.getOffset();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,727,DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,728,chrono = chrono.withZone(parsedZone);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,730,"return new LocalDateTime(millis, chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,732,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,733,newPos = ~newPos;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,735,"throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,2,*  Copyright 2001-2009 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,30,import org.joda.time.LocalDate;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,31,import org.joda.time.LocalDateTime;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,32,import org.joda.time.LocalTime;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,341,public void testParseLocalDate_simple() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,342,"assertEquals(new LocalDate(2004, 6, 9), g.parseLocalDate(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,343,"assertEquals(new LocalDate(2004, 6, 9), g.parseLocalDate(""2004-06-09T10:20:30+18:00""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,344,"assertEquals(new LocalDate(2004, 6, 9), g.parseLocalDate(""2004-06-09T10:20:30-18:00""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,345,"assertEquals(new LocalDate(2004, 6, 9, BUDDHIST_PARIS),"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,346,"g.withChronology(BUDDHIST_PARIS).parseLocalDate(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,347,try {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,348,"g.parseDateTime(""ABC"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,349,fail();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,350,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,354,public void testParseLocalTime_simple() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,355,"assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,356,"assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime(""2004-06-09T10:20:30+18:00""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,357,"assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime(""2004-06-09T10:20:30-18:00""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,358,"assertEquals(new LocalTime(10, 20, 30, 0, BUDDHIST_PARIS),"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,359,"g.withChronology(BUDDHIST_PARIS).parseLocalTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,360,try {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,361,"g.parseDateTime(""ABC"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,362,fail();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,363,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,367,public void testParseLocalDateTime_simple() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,368,"assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,369,"assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime(""2004-06-09T10:20:30+18:00""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,370,"assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime(""2004-06-09T10:20:30-18:00""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,371,"assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 0, BUDDHIST_PARIS),"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,372,"g.withChronology(BUDDHIST_PARIS).parseLocalDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,373,try {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,374,"g.parseDateTime(""ABC"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,375,fail();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,376,} catch (IllegalArgumentException ex) {}

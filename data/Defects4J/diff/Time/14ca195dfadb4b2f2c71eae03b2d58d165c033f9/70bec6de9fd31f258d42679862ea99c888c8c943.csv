is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,540,* Gets the values of a period from an interval.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,542,* @param period  the period instant to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,543,* @param startInstant  the start instant of an interval to query
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,544,* @param endInstant  the start instant of an interval to query
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,545,* @return the values of the period extracted from the interval
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,547,"public abstract int[] get(ReadablePeriod period, long startInstant, long endInstant);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,550,* Gets the values of a period from an interval.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,552,* @param period  the period instant to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,553,* @param duration  the duration to query
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,554,* @return the values of the period extracted from the duration
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,556,"public abstract int[] get(ReadablePeriod period, long duration);"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,542, @param instant  the instant to add to
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,562,* @param instant  the instant to add to
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,547,"ublic abstract long add(long instant, ReadablePeriod period, int scalar);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,566,"public abstract long add(ReadablePeriod period, long instant, int scalar);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,622,"ong instant = getChronology().add(getMillis(), period, scalar);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,622,"long instant = getChronology().add(period, getMillis(), scalar);"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,185,* Gets the chronology from the specified instant based interval handling null.
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,186,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,187,"* The chronology is obtained from the start if that is not null, or from the"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,188,"* end if the start is null. The result is additionally checked, and if still"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,189,* null then {@link ISOChronology#getInstance()} will be returned.
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,191,* @param start  the instant to examine and use as the primary source of the chronology
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,192,* @param end  the instant to examine and use as the secondary source of the chronology
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,193,"* @return the chronology, never null"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,195,"public static final Chronology getIntervalChronology(ReadableInstant start, ReadableInstant end) {"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,196,Chronology chrono = null;
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,197,if (start != null) {
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,198,chrono = start.getChronology();
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,199,} else if (end != null) {
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,200,chrono = end.getChronology();
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,202,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,203,chrono = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,205,return chrono;
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,210,* Gets the chronology from the specified interval object handling null.
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,211,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,212,"* If the interval object is <code>null</code>, or the interval's chronology is"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,213,"* <code>null</code>, {@link ISOChronology#getInstance()} will be returned."
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,214,"* Otherwise, the chronology from the object is returned."
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,216,"* @param interval  the interval to examine, null means ISO in the default zone"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,217,"* @return the chronology, never null"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,219,public static final Chronology getIntervalChronology(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,220,if (interval == null) {
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,221,return ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,223,Chronology chrono = interval.getChronology();
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,224,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,225,return ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,227,return chrono;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,503,"etMillis(getChronology().add(getMillis(), period, scalar));  // set via this class not super"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,503,"setMillis(getChronology().add(period, getMillis(), scalar));  // set via this class not super"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,378,"etEndMillis(getChronology().add(getStartMillis(), period, 1));"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,378,"setEndMillis(getChronology().add(period, getStartMillis(), 1));"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,394,"etStartMillis(getChronology().add(getEndMillis(), period, -1));"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,394,"setStartMillis(getChronology().add(period, getEndMillis(), -1));"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,284,* <p>
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,285,"* The chronology of the start instant is used, unless that is null when the"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,286,* chronology of the end instant is used instead.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,297,* <p>
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,298,"* The chronology of the start instant is used, unless that is null when the"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,299,* chronology of the end instant is used instead.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,384,* Sets the value of one of the fields by index.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,386,* @param index  the field index
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,387,* @param value  the new value for the field
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,388,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,390,"public void setValue(int index, int value) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,391,"super.setValue(index, value);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,440,* @throws ArithmeticException if the set exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,425,"etPeriod(interval, null);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,429, Sets all the fields in one go from an interval dividing the
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,430, fields using the period type.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,432," @param interval  the interval to set, null means zero length"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,433," @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,435,"ublic void setPeriod(ReadableInterval interval, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,446,Chronology chrono = DateTimeUtils.getChronology(interval.getChronology());
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,444, Sets all the fields in one go from two instants using
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,445, the ISO chronology and dividing the fields using the period type.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,452,* Sets all the fields in one go from two instants representing an interval.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,453,* <p>
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,454,"* The chronology of the start instant is used, unless that is null when the"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,455,* chronology of the end instant is used instead.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,459,* @throws ArithmeticException if the set exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,451,"etPeriod(start, end, null);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,455, Sets all the fields in one go from two instants using
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,456, the specified chronology and dividing the fields using the period type.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,458," @param start  the start instant, null means now"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,459," @param end  the end instant, null means now"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,460," @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,462,"ublic void setPeriod(ReadableInstant start, ReadableInstant end, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,468,"etPeriod(start, end, chrono);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,467,"Chronology chrono = DateTimeUtils.getIntervalChronology(start, end);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,468,"setPeriod(startMillis, endMillis, chrono);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,478,* @throws ArithmeticException if the set exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,484, Sets all the fields in one go from a millisecond interval dividing the
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,485, fields using the period type.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,485,* Sets all the fields in one go from a millisecond interval.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,489," @param chrono  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,489,"* @param chrono  the chronology to use, not null"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,490,* @throws ArithmeticException if the set exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,492,"uper.setPeriod(startInstant, endInstant, chrono);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,493,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,494,"setValues(chrono.get(this, startInstant, endInstant));"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,506,* @throws ArithmeticException if the set exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,522,* @throws ArithmeticException if the set exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,538,* @throws ArithmeticException if the set exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,540, Sets all the fields in one go from a millisecond duration dividing the
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,541, fields using the period type.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,545,* Sets all the fields in one go from a millisecond duration.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,548," @param chrono  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,552,"* @param chrono  the chronology to use, not null"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,553,* @throws ArithmeticException if the set exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,551,"uper.setPeriod(duration, chrono);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,556,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,557,"setValues(chrono.get(this, duration));"
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,69,* Sets the value of one of the fields by index.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,71,* @param index  the field index
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,72,* @param value  the new value for the field
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,73,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,75,"void setValue(int index, int value);"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,108," @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,110,"oid setPeriod(ReadableInterval interval, Chronology chrono);"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,113, Sets all the fields in one go from a duration dividing the
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,114, fields using the period type.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,115, <p>
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,116," When dividing the duration, only precise fields in the period type will be used."
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,117," For large durations, all the remaining duration will be stored in the largest"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,118, available precise field.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,120," @param duration  the duration to set, null means zero length"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,121," @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,123,"oid setPeriod(ReadableDuration duration, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,118,void setPeriod(ReadableInterval interval);
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,175, Adds a duration to this one by dividing the duration into
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,176, fields and then adding each field in turn.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,177, <p>
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,178," When dividing the duration, only precise fields in the period type will be used."
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,179," For large durations, all the remaining duration will be added to the largest"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,180, available precise field.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,182," @param duration  the duration to add, null means add nothing"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,183, @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,185,oid add(ReadableDuration duration);
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,188,"EndMillis = chrono.add(iStartMillis, period, 1);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,188,"iEndMillis = chrono.add(period, iStartMillis, 1);"
False,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,212,"StartMillis = chrono.add(iEndMillis, period, -1);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,212,"iStartMillis = chrono.add(period, iEndMillis, -1);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,61,mport org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,135,chrono = DateTimeUtils.getChronology(chrono);
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,137,"etPeriodInternal(startInstant, endInstant, chrono); // internal method"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,137,"iValues = chrono.get(this, startInstant, endInstant);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,148,"rotected BasePeriod(ReadableInstant startInstant, ReadableInstant  endInstant, PeriodType type) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,148,"protected BasePeriod(ReadableInstant startInstant, ReadableInstant endInstant, PeriodType type) {"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,155,ong start = DateTimeUtils.getInstantMillis(startInstant);
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,156,ong end = DateTimeUtils.getInstantMillis(endInstant);
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,157,hronology chrono = (startInstant != null ? startInstant.getChronology() : endInstant.getChronology());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,155,long startMillis = DateTimeUtils.getInstantMillis(startInstant);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,156,long endMillis = DateTimeUtils.getInstantMillis(endInstant);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,157,"Chronology chrono = DateTimeUtils.getIntervalChronology(startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,158,chrono = DateTimeUtils.getChronology(chrono);
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,159,"etPeriodInternal(start, end, chrono); // internal method"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,160,"iValues = chrono.get(this, startMillis, endMillis);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,178,"etPeriodInternal(startMillis, endMillis, chrono); // internal method"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,179,"iValues = chrono.get(this, startMillis, endMillis);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,197,chrono = DateTimeUtils.getChronology(chrono);
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,197,"etPeriodInternal(duration, chrono); // internal method"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,199,"iValues = chrono.get(this, duration);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,220,"etPeriodInternal(new MutablePeriod(period, type, chrono));"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,222,"iValues = new MutablePeriod(period, type, chrono).getValues();"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,306,"ong endMillis = chrono.add(startMillis, this, 1);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,308,"long endMillis = chrono.add(this, startMillis, 1);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,340,"etPeriodInternal(0L, null);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,342,setValues(new int[size()]);
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,395, Sets all the fields in one go from a millisecond interval.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,397," @param startInstant  interval start, in milliseconds"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,398," @param endInstant  interval end, in milliseconds"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,399," @param chrono  the chronology to use, not null"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,401,"rotected void setPeriod(long startInstant, long endInstant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,402,"etPeriodInternal(startInstant, endInstant, chrono);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,406, Private method called from constructor.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,408,"rivate void setPeriodInternal(long startInstant, long endInstant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,409,nt[] newValues = new int[size()];
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,410,f (startInstant == endInstant) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,411,Values = newValues;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,412, else {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,413,"or (int i = 0, isize = size(); i < isize; i++) {"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,414,urationField field = getFieldType(i).getField(chrono);
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,415,"nt value = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,416,"tartInstant = field.add(startInstant, value);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,417,ewValues[i] = value;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,419,Values = newValues;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,424, Sets all the fields in one go from a millisecond duration.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,425, <p>
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,426, This calculates the period relative to 1970-01-01 but only sets those
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,427, fields which are precise.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,429," @param duration  the duration, in milliseconds"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,430, @throws ArithmeticException if the set exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,431," @param chrono  the chronology to use, not null"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,433,"rotected void setPeriod(long duration, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,434,"etPeriodInternal(duration, chrono);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,438, Private method called from constructor.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,440,"rivate void setPeriodInternal(long duration, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,441,nt[] newValues = new int[size()];
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,442,f (duration == 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,443,Values = newValues;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,444, else {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,445,ong current = 0;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,446,"or (int i = 0, isize = size(); i < isize; i++) {"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,447,urationField field = getFieldType(i).getField(chrono);
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,448,f (field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,449,"nt value = field.getDifference(duration, current);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,450,"urrent = field.add(current, value);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,451,ewValues[i] = value;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,454,Values = newValues;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,592,f (value != getValue(index)) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,593,Values[index] = value;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,530,iValues[index] = value;
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,252, @return the values of this partial extracted from the instant
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,252,* @return the values of the partial extracted from the instant
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,279,* Gets the values of a period from an interval.
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,281,* @param period  the period instant to use
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,282,* @param startInstant  the start instant of an interval to query
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,283,* @param endInstant  the start instant of an interval to query
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,284,* @return the values of the period extracted from the interval
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,286,"public int[] get(ReadablePeriod period, long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,287,int size = period.size();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,288,int[] values = new int[size];
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,289,if (startInstant != endInstant) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,290,for (int i = 0; i < size; i++) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,291,DurationField field = period.getFieldType(i).getField(this);
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,292,"int value = field.getDifference(endInstant, startInstant);"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,293,"startInstant = field.add(startInstant, value);"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,294,values[i] = value;
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,297,return values;
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,301,* Gets the values of a period from an interval.
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,303,* @param period  the period instant to use
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,304,* @param duration  the duration to query
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,305,* @return the values of the period extracted from the duration
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,307,"public int[] get(ReadablePeriod period, long duration) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,308,int size = period.size();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,309,int[] values = new int[size];
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,310,if (duration != 0) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,311,long current = 0;
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,312,for (int i = 0; i < size; i++) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,313,DurationField field = period.getFieldType(i).getField(this);
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,314,if (field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,315,"int value = field.getDifference(duration, current);"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,316,"current = field.add(current, value);"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,317,values[i] = value;
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,321,return values;
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,281, @param instant  the instant to add to
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,328,* @param instant  the instant to add to
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,286,"ublic long add(long instant, ReadablePeriod period, int scalar) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,332,"public long add(ReadablePeriod period, long instant, int scalar) {"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,57,import org.joda.time.DateTimeUtils;
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,101, @param duration duration to get modified
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,102,* @param writablePeriod  period to get modified
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,108,"ublic void setInto(ReadWritablePeriod duration, Object object, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,109,"uration.setPeriod((ReadableDuration) object, chrono);"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,109,"public void setInto(ReadWritablePeriod writablePeriod, Object object, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,110,ReadableDuration dur = (ReadableDuration) object;
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,111,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,112,long duration = dur.getMillis();
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,113,"int[] values = chrono.get(writablePeriod, duration);"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,114,for (int i = 0; i < values.length; i++) {
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,115,"writablePeriod.setValue(i, values[i]);"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,57,import org.joda.time.DateTimeUtils;
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,102,"ritablePeriod.setPeriod(interval, chrono);"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,103,chrono = (chrono != null ? chrono : DateTimeUtils.getIntervalChronology(interval));
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,104,long start = interval.getStartMillis();
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,105,long end = interval.getEndMillis();
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,106,"int[] values = chrono.get(writablePeriod, start, end);"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,107,for (int i = 0; i < values.length; i++) {
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,108,"writablePeriod.setValue(i, values[i]);"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,249,"ndInstant = chrono.add(startInstant, period, 1);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,249,"endInstant = chrono.add(period, startInstant, 1);"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,256,"tartInstant = chrono.add(endInstant, period, -1);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,256,"startInstant = chrono.add(period, endInstant, -1);"

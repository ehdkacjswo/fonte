is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,646, Compares this ReadablePartial with another returning an integer
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,647, indicating the order.
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,648, <p>
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,649, The specified object must be a ReadablePartial whose field types
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,650, match those of this partial. Normally that means that the partials
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,651, must be the same class.
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,653, @param partial  an object to check against
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,654," @return negative if this is less, zero if equal, positive if greater"
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,655, @throws ClassCastException if the partial is the wrong class
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,656,  or if it has field types that don't match
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,657, @throws NullPointerException if the partial is null
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,659,ublic int compareTo(Object partial) {
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,660,f (this == partial) {
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,661,eturn 0;
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,663,eadablePartial other = (ReadablePartial) partial;
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,664,f (size() != other.size()) {
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,665,"hrow new ClassCastException(""ReadablePartial objects must have matching field types"");"
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,667,"or (int i = 0, isize = size(); i < isize; i++) {"
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,668,f (getFieldType(i) != other.getFieldType(i)) {
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,669,"hrow new ClassCastException(""ReadablePartial objects must have matching field types"");"
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,672,/ fields are ordered largest first
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,673,"or (int i = 0, isize = size(); i < isize; i++) {"
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,674,f (getValue(i) > other.getValue(i)) {
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,675,eturn 1;
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,677,f (getValue(i) < other.getValue(i)) {
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,678,eturn -1;
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,681,eturn 0;
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,685, Is this partial later than the specified partial.
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,686, <p>
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,687, You may not pass null into this method. This is because you need
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,688, a time zone to accurately determine the current date.
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,690," @param date  an date to check against, null means now"
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,691, @return true if this date is after the date passed in
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,692, @throws IllegalArgumentException if the specified partial is null
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,693, @throws ClassCastException if the partial has field types that don't match
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,695,ublic boolean isAfter(ReadablePartial date) {
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,696,f (date == null) {
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,697,"hrow new IllegalArgumentException(""Partial cannot be null"");"
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,699,eturn compareTo(date) > 0;
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,703, Is this partial earlier than the specified partial.
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,704, <p>
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,705, You may not pass null into this method. This is because you need
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,706, a time zone to accurately determine the current date.
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,708," @param date  an date to check against, null means now"
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,709, @return true if this date is before the date passed in
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,710, @throws IllegalArgumentException if the specified partial is null
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,711, @throws ClassCastException if the partial has field types that don't match
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,713,ublic boolean isBefore(ReadablePartial date) {
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,714,f (date == null) {
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,715,"hrow new IllegalArgumentException(""Partial cannot be null"");"
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,717,eturn compareTo(date) < 0;
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,721, Is this partial the same as the specified partial.
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,722, <p>
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,723, You may not pass null into this method. This is because you need
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,724, a time zone to accurately determine the current date.
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,726," @param date  an date to check against, null means now"
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,727, @return true if this date is the same as the date passed in
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,728, @throws IllegalArgumentException if the specified partial is null
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,729, @throws ClassCastException if the partial has field types that don't match
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,731,ublic boolean isEqual(ReadablePartial date) {
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,732,f (date == null) {
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,733,"hrow new IllegalArgumentException(""Partial cannot be null"");"
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,735,eturn compareTo(date) == 0;
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,147,// NOTE: This method should have existed in Joda-Time v1.0.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,148,// We STRONGLY recommend that all implementations of ReadablePartial
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,149,"// implement this method, as per AbstractPartial."
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,150,// The simplest way to do this is to extend AbstractPartial.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,151,// v2.0 of Joda-Time will include this method in this interface.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,154,//     * Compares this partial with another returning an integer
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,155,//     * indicating the order.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,156,//     * <p>
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,157,"//     * The fields are compared in order, from largest to smallest."
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,158,//     * The first field that is non-equal is used to determine the result.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,159,"//     * Thus a YearHour partial will first be compared on the year, and then"
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,160,//     * on the hour.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,161,//     * <p>
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,162,//     * The specified object must be a partial instance whose field types
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,163,//     * match those of this partial. If the parial instance has different
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,164,//     * fields then a ClassCastException is thrown.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,166,//     * @param partial  an object to check against
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,167,"//     * @return negative if this is less, zero if equal, positive if greater"
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,168,//     * @throws ClassCastException if the partial is the wrong class
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,169,//     *  or if it has field types that don't match
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,170,//     * @throws NullPointerException if the partial is null
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,171,//     * @since 2.0
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,173,//    int compareTo(Object partial);
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,838, Is this TimeOfDay later than the specified TimeOfDay.
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,839, <p>
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,840, You may not pass null into this method. This is because you need
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,841, a time zone to accurately determine the current time.
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,843," @param time  a time to check against, null means now"
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,844, @return true if this time is after the time passed in
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,845, @throws IllegalArgumentException if the specified TimeOfDay is null
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,846, @since 1.1
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,848,ublic boolean isAfter(TimeOfDay time) {
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,849,f (time == null) {
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,850,"hrow new IllegalArgumentException(""TimeOfDay cannot be null"");"
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,852,eturn super.compareTo(time) > 0;
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,856, Is this TimeOfDay earlier than the specified TimeOfDay.
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,857, <p>
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,858, You may not pass null into this method. This is because you need
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,859, a time zone to accurately determine the current time.
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,861," @param time  a time to check against, null means now"
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,862, @return true if this time is before the time passed in
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,863, @throws IllegalArgumentException if the specified TimeOfDay is null
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,864, @since 1.1
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,866,ublic boolean isBefore(TimeOfDay time) {
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,867,f (time == null) {
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,868,"hrow new IllegalArgumentException(""TimeOfDay cannot be null"");"
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,870,eturn super.compareTo(time) < 0;
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,874, Is this TimeOfDay the same as the specified TimeOfDay.
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,875, <p>
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,876, You may not pass null into this method. This is because you need
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,877, a time zone to accurately determine the current time.
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,879," @param time  a time to check against, null means now"
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,880, @return true if this time is the same as the time passed in
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,881, @throws IllegalArgumentException if the specified TimeOfDay is null
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,882, @since 1.1
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,884,ublic boolean isEqual(TimeOfDay time) {
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,885,f (time == null) {
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,886,"hrow new IllegalArgumentException(""TimeOfDay cannot be null"");"
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,888,eturn super.compareTo(time) == 0;
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,773, Is this YearMonthDay later than the specified YearMonthDay.
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,774, <p>
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,775, You may not pass null into this method. This is because you need
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,776, a time zone to accurately determine the current date.
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,778," @param date  an date to check against, null means now"
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,779, @return true if this date is after the date passed in
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,780, @throws IllegalArgumentException if the specified YearMonthDay is null
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,781, @since 1.1
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,783,ublic boolean isAfter(YearMonthDay date) {
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,784,f (date == null) {
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,785,"hrow new IllegalArgumentException(""YearMonthDay cannot be null"");"
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,787,eturn super.compareTo(date) > 0;
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,791, Is this YearMonthDay earlier than the specified YearMonthDay.
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,792, <p>
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,793, You may not pass null into this method. This is because you need
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,794, a time zone to accurately determine the current date.
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,796," @param date  an date to check against, null means now"
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,797, @return true if this date is before the date passed in
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,798, @throws IllegalArgumentException if the specified YearMonthDay is null
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,799, @since 1.1
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,801,ublic boolean isBefore(YearMonthDay date) {
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,802,f (date == null) {
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,803,"hrow new IllegalArgumentException(""YearMonthDay cannot be null"");"
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,805,eturn super.compareTo(date) < 0;
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,809, Is this YearMonthDay the same as the specified YearMonthDay.
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,810, <p>
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,811, You may not pass null into this method. This is because you need
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,812, a time zone to accurately determine the current date.
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,814," @param date  an date to check against, null means now"
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,815, @return true if this date is the same as the date passed in
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,816, @throws IllegalArgumentException if the specified YearMonthDay is null
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,817, @since 1.1
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,819,ublic boolean isEqual(YearMonthDay date) {
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,820,f (date == null) {
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,821,"hrow new IllegalArgumentException(""YearMonthDay cannot be null"");"
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,823,eturn super.compareTo(date) == 0;
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,45,ublic abstract class AbstractPartial implements ReadablePartial {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,45,public abstract class AbstractPartial
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,46,"implements ReadablePartial, Comparable {"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,290,* Compares this partial with another returning an integer
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,291,* indicating the order.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,292,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,293,"* The fields are compared in order, from largest to smallest."
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,294,* The first field that is non-equal is used to determine the result.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,295,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,296,* The specified object must be a partial instance whose field types
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,297,* match those of this partial.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,298,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,299,* NOTE: This implementation violates the Comparable contract.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,300,* This method will accept any instance of ReadablePartial as input.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,301,"* However, it is possible that some implementations of ReadablePartial"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,302,"* exist that do not extend AbstractPartial, and thus will throw a"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,303,* ClassCastException if compared in the opposite direction.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,304,* The cause of this problem is that ReadablePartial doesn't define
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,305,"* the compareTo() method, however we can't change that until v2.0."
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,307,* @param partial  an object to check against
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,308,"* @return negative if this is less, zero if equal, positive if greater"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,309,* @throws ClassCastException if the partial is the wrong class
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,310,*  or if it has field types that don't match
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,311,* @throws NullPointerException if the partial is null
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,312,* @since 1.1
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,314,public int compareTo(Object partial) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,315,if (this == partial) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,316,return 0;
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,318,ReadablePartial other = (ReadablePartial) partial;
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,319,if (size() != other.size()) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,320,"throw new ClassCastException(""ReadablePartial objects must have matching field types"");"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,322,"for (int i = 0, isize = size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,323,if (getFieldType(i) != other.getFieldType(i)) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,324,"throw new ClassCastException(""ReadablePartial objects must have matching field types"");"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,327,// fields are ordered largest first
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,328,"for (int i = 0, isize = size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,329,if (getValue(i) > other.getValue(i)) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,330,return 1;
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,332,if (getValue(i) < other.getValue(i)) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,333,return -1;
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,336,return 0;
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,340,* Is this partial later than the specified partial.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,341,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,342,"* The fields are compared in order, from largest to smallest."
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,343,* The first field that is non-equal is used to determine the result.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,344,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,345,* You may not pass null into this method. This is because you need
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,346,* a time zone to accurately determine the current date.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,348,"* @param partial  a partial to check against, must not be null"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,349,* @return true if this date is after the date passed in
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,350,* @throws IllegalArgumentException if the specified partial is null
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,351,* @throws ClassCastException if the partial has field types that don't match
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,352,* @since 1.1
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,354,public boolean isAfter(ReadablePartial partial) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,355,if (partial == null) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,356,"throw new IllegalArgumentException(""Partial cannot be null"");"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,358,return compareTo(partial) > 0;
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,362,* Is this partial earlier than the specified partial.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,363,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,364,"* The fields are compared in order, from largest to smallest."
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,365,* The first field that is non-equal is used to determine the result.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,366,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,367,* You may not pass null into this method. This is because you need
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,368,* a time zone to accurately determine the current date.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,370,"* @param partial  a partial to check against, must not be null"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,371,* @return true if this date is before the date passed in
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,372,* @throws IllegalArgumentException if the specified partial is null
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,373,* @throws ClassCastException if the partial has field types that don't match
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,374,* @since 1.1
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,376,public boolean isBefore(ReadablePartial partial) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,377,if (partial == null) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,378,"throw new IllegalArgumentException(""Partial cannot be null"");"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,380,return compareTo(partial) < 0;
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,384,* Is this partial the same as the specified partial.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,385,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,386,"* The fields are compared in order, from largest to smallest."
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,387,"* If all fields are equal, the result is true."
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,388,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,389,* You may not pass null into this method. This is because you need
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,390,* a time zone to accurately determine the current date.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,392,"* @param partial  a partial to check against, must not be null"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,393,* @return true if this date is the same as the date passed in
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,394,* @throws IllegalArgumentException if the specified partial is null
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,395,* @throws ClassCastException if the partial has field types that don't match
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,396,* @since 1.1
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,398,public boolean isEqual(ReadablePartial partial) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,399,if (partial == null) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,400,"throw new IllegalArgumentException(""Partial cannot be null"");"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,402,return compareTo(partial) == 0;
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,44,"mplements ReadablePartial, Comparable, Serializable {"
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,44,"implements ReadablePartial, Serializable {"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,249, Compares this ReadablePartial with another returning an integer
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,250, indicating the order.
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,251, <p>
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,252, The specified object must be a ReadablePartial whose field types
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,253, match those of this partial. Normally that means that the partials
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,254, must be the same class.
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,256, @param partial  an object to check against
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,257," @return negative if this is less, zero if equal, positive if greater"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,258, @throws ClassCastException if the partial is the wrong class
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,259,  or if it has field types that don't match
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,260, @throws NullPointerException if the partial is null
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,261, @since 1.1
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,263,ublic int compareTo(Object partial) {
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,264,f (this == partial) {
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,265,eturn 0;
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,267,eadablePartial other = (ReadablePartial) partial;
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,268,f (size() != other.size()) {
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,269,"hrow new ClassCastException(""ReadablePartial objects must have matching field types"");"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,271,"or (int i = 0, isize = size(); i < isize; i++) {"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,272,f (getFieldType(i) != other.getFieldType(i)) {
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,273,"hrow new ClassCastException(""ReadablePartial objects must have matching field types"");"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,276,/ fields are ordered largest first
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,277,"or (int i = 0, isize = size(); i < isize; i++) {"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,278,f (getValue(i) > other.getValue(i)) {
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,279,eturn 1;
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,281,f (getValue(i) < other.getValue(i)) {
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,282,eturn -1;
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,285,eturn 0;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,265,"ssertEquals(+1, test2.compareTo(new MockInstant()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,266,"ssertEquals(0, test1.compareTo(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,265,DateTimeFieldType[] types = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,266,"DateTimeFieldType.hourOfDay(),"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,267,"DateTimeFieldType.minuteOfHour(),"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,268,"DateTimeFieldType.secondOfMinute(),"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,269,"DateTimeFieldType.millisOfSecond(),"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,271,"int[] values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,272,"Partial p = new Partial(types, values);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,273,"assertEquals(0, test1.compareTo(p));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,250,"ssertEquals(+1, test2.compareTo(new MockInstant()));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,251,"ssertEquals(0, new YearMonthDay(1970, 6, 9).compareTo(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,250,DateTimeFieldType[] types = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,251,"DateTimeFieldType.year(),"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,252,"DateTimeFieldType.monthOfYear(),"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,253,"DateTimeFieldType.dayOfMonth(),"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,255,"int[] values = new int[] {2005, 6, 2};"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,256,"Partial p = new Partial(types, values);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,257,"assertEquals(0, test1.compareTo(p));"

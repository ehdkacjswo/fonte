is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,2,  Copyright 2001-2009 Stephen Colebourne
True,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,2,*  Copyright 2001-2010 Stephen Colebourne
False,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,1443,"ystem.out.println(""Fixing duplicate name key - "" + nextNameKey);"
False,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,1444,"ystem.out.println(""     - "" + new DateTime(trans[i], chrono) +"
False,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,1445," - "" + new DateTime(trans[i + 1], chrono));"
True,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,1443,if (ZoneInfoCompiler.verbose()) {
True,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,1444,"System.out.println(""Fixing duplicate name key - "" + nextNameKey);"
True,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,1445,"System.out.println(""     - "" + new DateTime(trans[i], chrono) +"
True,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,1446,""" - "" + new DateTime(trans[i + 1], chrono));"
False,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,1458,"ystem.out.println(""Fixing duplicate recurrent name key - "" +"
False,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,1459,ailZone.iStartRecurrence.getNameKey());
True,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,1460,if (ZoneInfoCompiler.verbose()) {
True,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,1461,"System.out.println(""Fixing duplicate recurrent name key - "" +"
True,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,1462,tailZone.iStartRecurrence.getNameKey());
False,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,2,  Copyright 2001-2009 Stephen Colebourne
True,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,2,*  Copyright 2001-2010 Stephen Colebourne
True,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,68,static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();
True,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,69,static {
True,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,70,cVerbose.set(Boolean.FALSE);
True,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,74,* Gets a flag indicating that verbose logging is required.
True,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,75,* @return true to log verbosely
True,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,77,public static boolean verbose() {
True,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,78,return cVerbose.get();
True,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,90,*   -verbose            Output verbosely (default false)
True,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,101,boolean verbose = false;
True,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,110,"} else if (""-verbose"".equals(args[i])) {"
True,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,111,verbose = true;
True,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,134,cVerbose.set(verbose);
True,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,144,"System.out.println(""  -verbose            Output verbosely (default false)"");"
True,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,386,"System.out.println(""Writing zoneinfo files"");"
False,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,375,"ystem.out.println(""Writing "" + tz.getID());"
True,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,396,if (ZoneInfoCompiler.verbose()) {
True,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,397,"System.out.println(""Writing "" + tz.getID());"

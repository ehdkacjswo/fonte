is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,2,*  Copyright 2001-2007 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,508, Converts this LocalDate to a full datetime at midnight using the
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,509, default time zone.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,508,"* Compares this ReadablePartial with another returning true if the chronology,"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,509,* field types and values are equal.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,511,* @param partial  an object to check against
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,512,* @return true if fields and values are equal
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,514,public boolean equals(Object partial) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,515,// override to perform faster
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,516,if (this == partial) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,517,return true;
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,519,if (partial instanceof LocalDate) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,520,LocalDate other = (LocalDate) partial;
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,521,if (iChronology.equals(other.iChronology)) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,522,return iLocalMillis == other.iLocalMillis;
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,525,return super.equals(partial);
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,529,* Compares this partial with another returning an integer
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,530,* indicating the order.
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,511, This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,532,"* The fields are compared in order, from largest to smallest."
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,533,* The first field that is non-equal is used to determine the result.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,534,* <p>
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,535,* The specified object must be a partial instance whose field types
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,536,* match those of this partial.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,537,* <p>
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,538,* NOTE: This implementation violates the Comparable contract.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,539,* This method will accept any instance of ReadablePartial as input.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,540,"* However, it is possible that some implementations of ReadablePartial"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,541,"* exist that do not extend AbstractPartial, and thus will throw a"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,542,* ClassCastException if compared in the opposite direction.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,543,* The cause of this problem is that ReadablePartial doesn't define
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,544,"* the compareTo() method, however we can't change that until v2.0."
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,546,* @param partial  an object to check against
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,547,"* @return negative if this is less, zero if equal, positive if greater"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,548,* @throws ClassCastException if the partial is the wrong class
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,549,*  or if it has field types that don't match
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,550,* @throws NullPointerException if the partial is null
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,552,public int compareTo(Object partial) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,553,// override to perform faster
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,554,if (this == partial) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,555,return 0;
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,557,if (partial instanceof LocalDate) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,558,LocalDate other = (LocalDate) partial;
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,559,if (iChronology.equals(other.iChronology)) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,560,return (iLocalMillis < other.iLocalMillis ? -1 :
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,561,(iLocalMillis == other.iLocalMillis ? 0 : 1));
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,565,return super.compareTo(partial);
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,570,* Converts this LocalDate to a full datetime at midnight using the default
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,571,* time zone.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,572,* <p>
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,573,* This instance is immutable and unaffected by this method call.
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,2,*  Copyright 2001-2007 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,549,"* Compares this ReadablePartial with another returning true if the chronology,"
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,550,* field types and values are equal.
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,552,* @param partial  an object to check against
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,553,* @return true if fields and values are equal
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,555,public boolean equals(Object partial) {
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,556,// override to perform faster
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,557,if (this == partial) {
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,558,return true;
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,560,if (partial instanceof LocalDateTime) {
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,561,LocalDateTime other = (LocalDateTime) partial;
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,562,if (iChronology.equals(other.iChronology)) {
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,563,return iLocalMillis == other.iLocalMillis;
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,566,return super.equals(partial);
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,570,* Compares this partial with another returning an integer
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,571,* indicating the order.
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,572,* <p>
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,573,"* The fields are compared in order, from largest to smallest."
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,574,* The first field that is non-equal is used to determine the result.
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,575,* <p>
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,576,* The specified object must be a partial instance whose field types
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,577,* match those of this partial.
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,578,* <p>
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,579,* NOTE: This implementation violates the Comparable contract.
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,580,* This method will accept any instance of ReadablePartial as input.
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,581,"* However, it is possible that some implementations of ReadablePartial"
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,582,"* exist that do not extend AbstractPartial, and thus will throw a"
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,583,* ClassCastException if compared in the opposite direction.
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,584,* The cause of this problem is that ReadablePartial doesn't define
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,585,"* the compareTo() method, however we can't change that until v2.0."
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,587,* @param partial  an object to check against
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,588,"* @return negative if this is less, zero if equal, positive if greater"
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,589,* @throws ClassCastException if the partial is the wrong class
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,590,*  or if it has field types that don't match
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,591,* @throws NullPointerException if the partial is null
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,593,public int compareTo(Object partial) {
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,594,// override to perform faster
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,595,if (this == partial) {
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,596,return 0;
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,598,if (partial instanceof LocalDateTime) {
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,599,LocalDateTime other = (LocalDateTime) partial;
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,600,if (iChronology.equals(other.iChronology)) {
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,601,return (iLocalMillis < other.iLocalMillis ? -1 :
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,602,(iLocalMillis == other.iLocalMillis ? 0 : 1));
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,606,return super.compareTo(partial);
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,2,*  Copyright 2001-2007 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,571,"* Compares this ReadablePartial with another returning true if the chronology,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,572,* field types and values are equal.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,574,* @param partial  an object to check against
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,575,* @return true if fields and values are equal
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,577,public boolean equals(Object partial) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,578,// override to perform faster
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,579,if (this == partial) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,580,return true;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,582,if (partial instanceof LocalTime) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,583,LocalTime other = (LocalTime) partial;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,584,if (iChronology.equals(other.iChronology)) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,585,return iLocalMillis == other.iLocalMillis;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,588,return super.equals(partial);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,592,* Compares this partial with another returning an integer
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,593,* indicating the order.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,594,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,595,"* The fields are compared in order, from largest to smallest."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,596,* The first field that is non-equal is used to determine the result.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,597,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,598,* The specified object must be a partial instance whose field types
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,599,* match those of this partial.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,600,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,601,* NOTE: This implementation violates the Comparable contract.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,602,* This method will accept any instance of ReadablePartial as input.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,603,"* However, it is possible that some implementations of ReadablePartial"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,604,"* exist that do not extend AbstractPartial, and thus will throw a"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,605,* ClassCastException if compared in the opposite direction.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,606,* The cause of this problem is that ReadablePartial doesn't define
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,607,"* the compareTo() method, however we can't change that until v2.0."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,609,* @param partial  an object to check against
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,610,"* @return negative if this is less, zero if equal, positive if greater"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,611,* @throws ClassCastException if the partial is the wrong class
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,612,*  or if it has field types that don't match
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,613,* @throws NullPointerException if the partial is null
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,615,public int compareTo(Object partial) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,616,// override to perform faster
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,617,if (this == partial) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,618,return 0;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,620,if (partial instanceof LocalTime) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,621,LocalTime other = (LocalTime) partial;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,622,if (iChronology.equals(other.iChronology)) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,623,return (iLocalMillis < other.iLocalMillis ? -1 :
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,624,(iLocalMillis == other.iLocalMillis ? 0 : 1));
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,628,return super.compareTo(partial);
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,2,*  Copyright 2001-2007 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,296,"ssertEquals(false, test1.equals(new YearMonthDay(1970, 6, 9, COPTIC_PARIS)));"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,296,Partial partial = new Partial(
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,297,new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,298,"DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(),"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,299,"DateTimeFieldType.dayOfMonth(), DateTimeFieldType.millisOfDay()},"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,300,"new int[] {1970, 6, 9, MILLIS_OF_DAY_UTC}, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,301,"assertEquals(true, test1.equals(partial));"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,302,"assertEquals(true, test1.hashCode() == partial.hashCode());"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,2,*  Copyright 2001-2007 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,248,"assertEquals(true, test1.hashCode() == new YearMonthDay(1970, 6, 9, COPTIC_PARIS).hashCode());"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,2,*  Copyright 2001-2007 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,288,"assertEquals(true, test1.hashCode() == new TimeOfDay(10, 20, 30, 40, COPTIC_UTC).hashCode());"

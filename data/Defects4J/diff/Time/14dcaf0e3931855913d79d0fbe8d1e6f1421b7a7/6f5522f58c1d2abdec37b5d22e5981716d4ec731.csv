is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,85,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,85,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,66,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,66,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,59,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,59,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,60,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,60,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,56,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,56,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,59,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,59,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,56,mport java.io.Serializable;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,57,mport org.joda.time.chrono.UnsupportedDateTimeField;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,58,mport org.joda.time.chrono.UnsupportedDurationField;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,61, Chronology provides access to the individual date time fields for
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,62, a chronological calendar system.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,63, Various chronologies are supported by subclasses including ISO and
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,64, GregorianJulian.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,57,* Chronology provides access to the individual date time fields for a
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,58,* chronological calendar system. Various chronologies are supported by
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,59,* subclasses including ISO and GregorianJulian.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,70, WeirdChronology subclass. Clearly the GJ and ISO implementations provided
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,71, use the field names as you would expect.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,72, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,73," Chronology is thread-safe and immutable, and all subclasses must be as well."
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,65,* WeirdChronology implementation. Clearly the GJ and ISO implementations
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,66,* provided use the field names as you would expect.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,75, @see org.joda.time.chrono.iso.ISOChronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,76, @see org.joda.time.chrono.gj.GJChronology
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,68,* @see org.joda.time.chrono.ISOChronology
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,69,* @see org.joda.time.chrono.GJChronology
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,70,* @see org.joda.time.chrono.GregorianChronology
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,71,* @see org.joda.time.chrono.JulianChronology
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,72,* @see org.joda.time.chrono.CopticChronology
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,73,* @see org.joda.time.chrono.BuddhistChronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,82,ublic abstract class Chronology implements Serializable {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,79,public interface Chronology {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,84,tatic final long serialVersionUID = -7310865996721419676L;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,87, Restricted constructor
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,89,rotected Chronology() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,90,uper();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,99,ublic abstract DateTimeZone getDateTimeZone();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,87,DateTimeZone getDateTimeZone();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,108,ublic abstract Chronology withUTC();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,96,Chronology withUTC();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,117,ublic abstract Chronology withDateTimeZone(DateTimeZone zone);
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,105,Chronology withDateTimeZone(DateTimeZone zone);
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,130,ublic long getDateOnlyMillis(long instant) {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,131,eturn dayOfYear().roundFloor(instant);
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,118,long getDateOnlyMillis(long instant);
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,148,"ublic long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,149,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,151,"eturn getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,134,"long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,135,throws IllegalArgumentException;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,165,ublic long getTimeOnlyMillis(long instant) {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,166,eturn dayOfYear().remainder(instant);
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,148,long getTimeOnlyMillis(long instant);
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,185,"ublic long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,186,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,187,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,189,"ong instant = hourOfDay().set(0, hourOfDay);"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,190,"nstant = minuteOfHour().set(instant, minuteOfHour);"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,191,"nstant = secondOfMinute().set(instant, secondOfMinute);"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,192,"eturn millisOfSecond().set(instant, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,166,"long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,167,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,168,throws IllegalArgumentException;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,210,"ublic long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,211,nt millisOfDay)
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,212,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,214,"ong instant = year().set(0, year);"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,215,"nstant = monthOfYear().set(instant, monthOfYear);"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,216,"nstant = dayOfMonth().set(instant, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,217,"eturn millisOfDay().set(instant, millisOfDay);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,185,"long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay)"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,186,throws IllegalArgumentException;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,237,"ublic long getDateTimeMillis(long instant,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,238,"nt hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,239,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,240,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,242,"nstant = hourOfDay().set(instant, hourOfDay);"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,243,"nstant = minuteOfHour().set(instant, minuteOfHour);"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,244,"nstant = secondOfMinute().set(instant, secondOfMinute);"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,245,"eturn millisOfSecond().set(instant, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,205,"long getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,206,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,207,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,208,throws IllegalArgumentException;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,267,"ublic long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,268,"nt hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,269,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,270,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,272,"ong instant = year().set(0, year);"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,273,"nstant = monthOfYear().set(instant, monthOfYear);"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,274,"nstant = dayOfMonth().set(instant, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,275,"nstant = hourOfDay().set(instant, hourOfDay);"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,276,"nstant = minuteOfHour().set(instant, minuteOfHour);"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,277,"nstant = secondOfMinute().set(instant, secondOfMinute);"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,278,"eturn millisOfSecond().set(instant, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,229,"long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,230,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,231,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,232,throws IllegalArgumentException;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,288,ublic DurationField millis() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,289,"eturn UnsupportedDurationField.getInstance(""millis"");"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,241,DurationField millis();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,297,ublic DateTimeField millisOfSecond() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,298,"eturn UnsupportedDateTimeField.getInstance(""millisOfSecond"", millis());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,248,DateTimeField millisOfSecond();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,306,ublic DateTimeField millisOfDay() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,307,"eturn UnsupportedDateTimeField.getInstance(""millisOfDay"", millis());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,255,DateTimeField millisOfDay();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,317,ublic DurationField seconds() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,318,"eturn UnsupportedDurationField.getInstance(""seconds"");"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,264,DurationField seconds();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,326,ublic DateTimeField secondOfMinute() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,327,"eturn UnsupportedDateTimeField.getInstance(""secondOfMinute"", seconds());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,271,DateTimeField secondOfMinute();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,335,ublic DateTimeField secondOfDay() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,336,"eturn UnsupportedDateTimeField.getInstance(""secondOfDay"", seconds());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,278,DateTimeField secondOfDay();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,346,ublic DurationField minutes() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,347,"eturn UnsupportedDurationField.getInstance(""minutes"");"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,287,DurationField minutes();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,355,ublic DateTimeField minuteOfHour() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,356,"eturn UnsupportedDateTimeField.getInstance(""minuteOfHour"", minutes());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,294,DateTimeField minuteOfHour();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,364,ublic DateTimeField minuteOfDay() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,365,"eturn UnsupportedDateTimeField.getInstance(""minuteOfDay"", minutes());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,301,DateTimeField minuteOfDay();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,375,ublic DurationField hours() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,376,"eturn UnsupportedDurationField.getInstance(""hours"");"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,310,DurationField hours();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,384,ublic DateTimeField hourOfDay() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,385,"eturn UnsupportedDateTimeField.getInstance(""hourOfDay"", hours());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,317,DateTimeField hourOfDay();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,393,ublic DateTimeField clockhourOfDay() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,394,"eturn UnsupportedDateTimeField.getInstance(""clockhourOfDay"", hours());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,324,DateTimeField clockhourOfDay();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,402,ublic DateTimeField hourOfHalfday() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,403,"eturn UnsupportedDateTimeField.getInstance(""hourOfHalfday"", hours());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,331,DateTimeField hourOfHalfday();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,411,ublic DateTimeField clockhourOfHalfday() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,412,"eturn UnsupportedDateTimeField.getInstance(""clockhourOfHalfday"", hours());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,338,DateTimeField clockhourOfHalfday();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,420,ublic DateTimeField halfdayOfDay() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,421,eturn UnsupportedDateTimeField.getInstance
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,422,"""halfdayOfDay"", UnsupportedDurationField.getInstance(""halfdays""));"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,345,DateTimeField halfdayOfDay();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,432,ublic DurationField days() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,433,"eturn UnsupportedDurationField.getInstance(""days"");"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,354,DurationField days();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,444,ublic DateTimeField dayOfWeek() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,445,"eturn UnsupportedDateTimeField.getInstance(""dayOfWeek"", days());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,364,DateTimeField dayOfWeek();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,453,ublic DateTimeField dayOfMonth() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,454,"eturn UnsupportedDateTimeField.getInstance(""dayOfMonth"", days());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,371,DateTimeField dayOfMonth();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,462,ublic DateTimeField dayOfYear() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,463,"eturn UnsupportedDateTimeField.getInstance(""dayOfYear"", days());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,378,DateTimeField dayOfYear();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,473,ublic DurationField weeks() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,474,"eturn UnsupportedDurationField.getInstance(""weeks"");"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,387,DurationField weeks();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,482,ublic DateTimeField weekOfWeekyear() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,483,"eturn UnsupportedDateTimeField.getInstance(""weekOfWeekyear"", weeks());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,394,DateTimeField weekOfWeekyear();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,491,ublic DurationField weekyears() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,492,"eturn UnsupportedDurationField.getInstance(""weekyears"");"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,401,DurationField weekyears();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,500,ublic DateTimeField weekyear() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,501,"eturn UnsupportedDateTimeField.getInstance(""weekyear"", weekyears());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,408,DateTimeField weekyear();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,511,ublic DurationField months() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,512,"eturn UnsupportedDurationField.getInstance(""months"");"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,417,DurationField months();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,520,ublic DateTimeField monthOfYear() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,521,"eturn UnsupportedDateTimeField.getInstance(""monthOfYear"", months());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,424,DateTimeField monthOfYear();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,531,ublic DurationField years() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,532,"eturn UnsupportedDurationField.getInstance(""years"");"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,433,DurationField years();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,540,ublic DateTimeField year() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,541,"eturn UnsupportedDateTimeField.getInstance(""year"", years());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,440,DateTimeField year();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,549,ublic DateTimeField yearOfEra() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,550,"eturn UnsupportedDateTimeField.getInstance(""yearOfEra"", years());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,447,DateTimeField yearOfEra();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,558,ublic DateTimeField yearOfCentury() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,559,"eturn UnsupportedDateTimeField.getInstance(""yearOfCentury"", years());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,454,DateTimeField yearOfCentury();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,567,ublic DurationField centuries() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,568,"eturn UnsupportedDurationField.getInstance(""centuries"");"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,461,DurationField centuries();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,576,ublic DateTimeField centuryOfEra() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,577,"eturn UnsupportedDateTimeField.getInstance(""centuryOfEra"", centuries());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,468,DateTimeField centuryOfEra();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,585,ublic DurationField eras() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,586,"eturn UnsupportedDurationField.getInstance(""eras"");"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,475,DurationField eras();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,594,ublic DateTimeField era() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,595,"eturn UnsupportedDateTimeField.getInstance(""era"", eras());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,482,DateTimeField era();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,603,ublic abstract String toString();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,489,String toString();
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,58,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,58,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,57,mport org.joda.time.chrono.MillisDurationField;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,58,mport org.joda.time.chrono.PreciseDurationField;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,59,mport org.joda.time.chrono.ScaledDurationField;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,60,mport org.joda.time.chrono.UnsupportedDurationField;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,61,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,57,import org.joda.time.field.MillisDurationField;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,58,import org.joda.time.field.PreciseDurationField;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,59,import org.joda.time.field.ScaledDurationField;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,60,import org.joda.time.field.UnsupportedDurationField;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,61,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,58,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,58,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,58,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,58,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,58,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,58,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,58,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,58,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,58,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,59,// Import for @link support
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,60,import org.joda.time.DateTimeConstants;
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,61,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,62,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,63,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,64,import org.joda.time.field.UnsupportedDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,65,import org.joda.time.field.UnsupportedDurationField;
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,68,* AbstractChronology provides a skeleton implementation for chronology
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,69,"* classes. Many utility methods are defined, but all fields are unsupported."
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,70,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,71,"* AbstractChronology is thread-safe and immutable, and all subclasses must be"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,72,* as well.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,74,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,75,* @since 1.0
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,77,"public abstract class AbstractChronology implements Chronology, Serializable {"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,79,static final long serialVersionUID = -7310865996721419676L;
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,82,* Restricted constructor
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,84,protected AbstractChronology() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,85,super();
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,89,"* Returns the DateTimeZone that this Chronology operates in, or null if"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,90,* unspecified.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,92,* @return DateTimeZone null if unspecified
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,94,public abstract DateTimeZone getDateTimeZone();
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,97,* Returns an instance of this Chronology that operates in the UTC time
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,98,* zone. Chronologies that do not operate in a time zone or are already
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,99,* UTC must return themself.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,101,* @return a version of this chronology that ignores time zones
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,103,public abstract Chronology withUTC();
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,106,* Returns an instance of this Chronology that operates in any time zone.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,108,* @return a version of this chronology with a specific time zone
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,109,"* @param zone to use, or default if null"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,110,* @see org.joda.time.chrono.ZonedChronology
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,112,public abstract Chronology withDateTimeZone(DateTimeZone zone);
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,115,"* Returns a date-only millisecond instant, by clearing the time fields"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,116,* from the given instant.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,117,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,118,* The default implementation simply returns
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,119,* <code>dayOfYear().roundFloor(instant)</code>.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,121,* @param instant the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,122,* @return millisecond instant from 1970-01-01T00:00:00Z with the time part
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,123,* cleared
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,125,public long getDateOnlyMillis(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,126,return dayOfYear().roundFloor(instant);
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,130,"* Returns a date-only millisecond instant, formed from the given year,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,131,"* month, and day values. The set of given values must refer to a valid"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,132,"* date, or else an IllegalArgumentException is thrown."
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,133,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,134,* The default implementation simply returns
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,135,"* <code>getDateTimeMillis(year, monthOfYear, dayOfMonth, 0)</code>."
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,137,* @param year year to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,138,* @param monthOfYear month to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,139,* @param dayOfMonth day of month to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,140,* @return millisecond instant from 1970-01-01T00:00:00Z without any time
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,141,* part
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,143,"public long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,144,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,146,"return getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,150,"* Returns a time-only millisecond instant, by clearing the date fields"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,151,* from the given instant.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,152,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,153,* The default implementation simply returns
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,154,* <code>dayOfYear().remainder(instant)</code>.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,156,* @param instant the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,157,* @return millisecond instant from 1970-01-01T00:00:00Z with the date part
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,158,* cleared
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,160,public long getTimeOnlyMillis(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,161,return dayOfYear().remainder(instant);
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,165,"* Returns a time-only millisecond instant, formed from the given hour,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,166,"* minute, second, and millisecond values. The set of given values must"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,167,"* refer to a valid time, or else an IllegalArgumentException is thrown."
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,168,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,169,* The default implementation calls upon separate DateTimeFields to
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,170,* determine the result. Subclasses are encouraged to provide a more
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,171,* efficient implementation.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,173,* @param hourOfDay hour to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,174,* @param minuteOfHour minute to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,175,* @param secondOfMinute second to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,176,* @param millisOfSecond millisecond to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,177,* @return millisecond instant from 1970-01-01T00:00:00Z without any date
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,178,* part
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,180,"public long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,181,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,182,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,184,"long instant = hourOfDay().set(0, hourOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,185,"instant = minuteOfHour().set(instant, minuteOfHour);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,186,"instant = secondOfMinute().set(instant, secondOfMinute);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,187,"return millisOfSecond().set(instant, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,191,"* Returns a datetime millisecond instant, formed from the given year,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,192,"* month, day, and millisecond values. The set of given values must refer"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,193,"* to a valid datetime, or else an IllegalArgumentException is thrown."
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,194,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,195,* The default implementation calls upon separate DateTimeFields to
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,196,* determine the result. Subclasses are encouraged to provide a more
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,197,* efficient implementation.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,199,* @param year year to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,200,* @param monthOfYear month to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,201,* @param dayOfMonth day of month to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,202,* @param millisOfDay millisecond to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,203,* @return millisecond instant from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,205,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,206,int millisOfDay)
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,207,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,209,"long instant = year().set(0, year);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,210,"instant = monthOfYear().set(instant, monthOfYear);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,211,"instant = dayOfMonth().set(instant, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,212,"return millisOfDay().set(instant, millisOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,216,"* Returns a datetime millisecond instant, from from the given instant,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,217,"* hour, minute, second, and millisecond values. The set of given values"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,218,"* must refer to a valid datetime, or else an IllegalArgumentException is"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,219,* thrown.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,220,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,221,* The default implementation calls upon separate DateTimeFields to
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,222,* determine the result. Subclasses are encouraged to provide a more
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,223,* efficient implementation.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,225,* @param instant instant to start from
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,226,* @param hourOfDay hour to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,227,* @param minuteOfHour minute to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,228,* @param secondOfMinute second to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,229,* @param millisOfSecond millisecond to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,230,* @return millisecond instant from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,232,"public long getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,233,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,234,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,235,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,237,"instant = hourOfDay().set(instant, hourOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,238,"instant = minuteOfHour().set(instant, minuteOfHour);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,239,"instant = secondOfMinute().set(instant, secondOfMinute);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,240,"return millisOfSecond().set(instant, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,244,"* Returns a datetime millisecond instant, formed from the given year,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,245,"* month, day, hour, minute, second, and millisecond values. The set of"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,246,"* given values must refer to a valid datetime, or else an"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,247,* IllegalArgumentException is thrown.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,248,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,249,* The default implementation calls upon separate DateTimeFields to
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,250,* determine the result. Subclasses are encouraged to provide a more
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,251,* efficient implementation.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,253,* @param year year to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,254,* @param monthOfYear month to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,255,* @param dayOfMonth day of month to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,256,* @param hourOfDay hour to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,257,* @param minuteOfHour minute to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,258,* @param secondOfMinute second to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,259,* @param millisOfSecond millisecond to use
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,260,* @return millisecond instant from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,262,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,263,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,264,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,265,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,267,"long instant = year().set(0, year);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,268,"instant = monthOfYear().set(instant, monthOfYear);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,269,"instant = dayOfMonth().set(instant, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,270,"instant = hourOfDay().set(instant, hourOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,271,"instant = minuteOfHour().set(instant, minuteOfHour);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,272,"instant = secondOfMinute().set(instant, secondOfMinute);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,273,"return millisOfSecond().set(instant, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,276,// Millis
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,279,* Get the millis duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,281,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,283,public DurationField millis() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,284,"return UnsupportedDurationField.getInstance(""millis"");"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,288,* Get the millis of second field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,290,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,292,public DateTimeField millisOfSecond() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,293,"return UnsupportedDateTimeField.getInstance(""millisOfSecond"", millis());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,297,* Get the millis of day field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,299,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,301,public DateTimeField millisOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,302,"return UnsupportedDateTimeField.getInstance(""millisOfDay"", millis());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,305,// Second
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,308,* Get the seconds duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,310,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,312,public DurationField seconds() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,313,"return UnsupportedDurationField.getInstance(""seconds"");"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,317,* Get the second of minute field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,319,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,321,public DateTimeField secondOfMinute() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,322,"return UnsupportedDateTimeField.getInstance(""secondOfMinute"", seconds());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,326,* Get the second of day field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,328,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,330,public DateTimeField secondOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,331,"return UnsupportedDateTimeField.getInstance(""secondOfDay"", seconds());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,334,// Minute
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,337,* Get the minutes duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,339,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,341,public DurationField minutes() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,342,"return UnsupportedDurationField.getInstance(""minutes"");"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,346,* Get the minute of hour field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,348,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,350,public DateTimeField minuteOfHour() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,351,"return UnsupportedDateTimeField.getInstance(""minuteOfHour"", minutes());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,355,* Get the minute of day field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,357,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,359,public DateTimeField minuteOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,360,"return UnsupportedDateTimeField.getInstance(""minuteOfDay"", minutes());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,363,// Hour
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,366,* Get the hours duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,368,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,370,public DurationField hours() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,371,"return UnsupportedDurationField.getInstance(""hours"");"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,375,* Get the hour of day (0-23) field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,377,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,379,public DateTimeField hourOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,380,"return UnsupportedDateTimeField.getInstance(""hourOfDay"", hours());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,384,* Get the hour of day (offset to 1-24) field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,386,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,388,public DateTimeField clockhourOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,389,"return UnsupportedDateTimeField.getInstance(""clockhourOfDay"", hours());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,393,* Get the hour of am/pm (0-11) field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,395,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,397,public DateTimeField hourOfHalfday() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,398,"return UnsupportedDateTimeField.getInstance(""hourOfHalfday"", hours());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,402,* Get the hour of am/pm (offset to 1-12) field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,404,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,406,public DateTimeField clockhourOfHalfday() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,407,"return UnsupportedDateTimeField.getInstance(""clockhourOfHalfday"", hours());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,411,* Get the AM(0) PM(1) field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,413,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,415,public DateTimeField halfdayOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,416,return UnsupportedDateTimeField.getInstance
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,417,"(""halfdayOfDay"", UnsupportedDurationField.getInstance(""halfdays""));"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,420,// Day
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,423,* Get the days duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,425,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,427,public DurationField days() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,428,"return UnsupportedDurationField.getInstance(""days"");"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,432,* Get the day of week field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,434,* <p>DayOfWeek values are defined in {@link DateTimeConstants}.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,435,"* They use the ISO definitions, where 1 is Monday and 7 is Sunday."
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,437,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,439,public DateTimeField dayOfWeek() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,440,"return UnsupportedDateTimeField.getInstance(""dayOfWeek"", days());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,444,* Get the day of month field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,446,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,448,public DateTimeField dayOfMonth() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,449,"return UnsupportedDateTimeField.getInstance(""dayOfMonth"", days());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,453,* Get the day of year field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,455,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,457,public DateTimeField dayOfYear() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,458,"return UnsupportedDateTimeField.getInstance(""dayOfYear"", days());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,461,// Week
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,464,* Get the weeks duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,466,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,468,public DurationField weeks() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,469,"return UnsupportedDurationField.getInstance(""weeks"");"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,473,* Get the week of a week based year field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,475,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,477,public DateTimeField weekOfWeekyear() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,478,"return UnsupportedDateTimeField.getInstance(""weekOfWeekyear"", weeks());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,482,* Get the weekyears duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,484,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,486,public DurationField weekyears() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,487,"return UnsupportedDurationField.getInstance(""weekyears"");"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,491,* Get the year of a week based year field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,493,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,495,public DateTimeField weekyear() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,496,"return UnsupportedDateTimeField.getInstance(""weekyear"", weekyears());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,499,// Month
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,502,* Get the months duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,504,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,506,public DurationField months() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,507,"return UnsupportedDurationField.getInstance(""months"");"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,511,* Get the month of year field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,513,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,515,public DateTimeField monthOfYear() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,516,"return UnsupportedDateTimeField.getInstance(""monthOfYear"", months());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,519,// Year
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,522,* Get the years duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,524,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,526,public DurationField years() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,527,"return UnsupportedDurationField.getInstance(""years"");"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,531,* Get the year field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,533,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,535,public DateTimeField year() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,536,"return UnsupportedDateTimeField.getInstance(""year"", years());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,540,* Get the year of era field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,542,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,544,public DateTimeField yearOfEra() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,545,"return UnsupportedDateTimeField.getInstance(""yearOfEra"", years());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,549,* Get the year of century field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,551,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,553,public DateTimeField yearOfCentury() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,554,"return UnsupportedDateTimeField.getInstance(""yearOfCentury"", years());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,558,* Get the centuries duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,560,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,562,public DurationField centuries() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,563,"return UnsupportedDurationField.getInstance(""centuries"");"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,567,* Get the century of era field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,569,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,571,public DateTimeField centuryOfEra() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,572,"return UnsupportedDateTimeField.getInstance(""centuryOfEra"", centuries());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,576,* Get the eras duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,578,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,580,public DurationField eras() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,581,"return UnsupportedDurationField.getInstance(""eras"");"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,585,* Get the era field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,587,* @return DateTimeField or UnsupportedDateTimeField if unsupported
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,589,public DateTimeField era() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,590,"return UnsupportedDateTimeField.getInstance(""era"", eras());"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,594,* Gets a debugging toString.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,596,* @return a debugging string
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,598,public abstract String toString();
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,13,"    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,13,"*    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,21,"    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,21,"*    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,50, individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,50,* individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,54,ackage org.joda.time.chrono.gj;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,61,import org.joda.time.DateTimeZone;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,62,mport org.joda.time.chrono.DividedDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,63,mport org.joda.time.chrono.MillisDurationField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,64,mport org.joda.time.chrono.NonZeroDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,65,mport org.joda.time.chrono.RemainderDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,66,mport org.joda.time.chrono.PreciseDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,67,mport org.joda.time.chrono.PreciseDurationField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,68,mport org.joda.time.chrono.Utils;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,63,import org.joda.time.field.DividedDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,64,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,65,import org.joda.time.field.MillisDurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,66,import org.joda.time.field.NonZeroDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,67,import org.joda.time.field.OffsetDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,68,import org.joda.time.field.PreciseDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,69,import org.joda.time.field.PreciseDurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,70,import org.joda.time.field.RemainderDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,71, ProlepticChronology uses a consistent set of rules for all dates and
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,72, times. Year zero is included.
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,74, @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,76,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,77,* @author Guy Allard
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,78,bstract class ProlepticChronology extends GJChronology {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,80,public abstract class AbstractGJChronology extends AssembledChronology {
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,80,tatic final long serialVersionUID = 541866437970475456L;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,82,static final long serialVersionUID = 8283225332206808863L;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,189,rolepticChronology(int minDaysInFirstWeek) {
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,190,uper();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,191,"AbstractGJChronology(Chronology base, Object param, int minDaysInFirstWeek) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,192,"super(base, param);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,194,if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,195,throw new IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,196,"(""Invalid min days in first week: "" + minDaysInFirstWeek);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,195," = Integer.getInteger(""org.joda.time.gj.ProlepticChronology.yearInfoCacheSize"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,203,"i = Integer.getInteger(getClass().getName().concat("".yearInfoCacheSize""));"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,218,/ First copy fields that are the same for all Gregorian and Julian
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,219,/ chronologies.
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,221,MillisField = cMillisField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,222,SecondsField = cSecondsField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,223,MinutesField = cMinutesField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,224,HoursField = cHoursField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,225,/iHalfdaysField = cHalfdaysField;  Doesn't exist in public interface
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,226,DaysField = cDaysField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,227,WeeksField = cWeeksField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,229,MillisOfSecondField = cMillisOfSecondField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,230,MillisOfDayField = cMillisOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,231,SecondOfMinuteField = cSecondOfMinuteField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,232,SecondOfDayField = cSecondOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,233,MinuteOfHourField = cMinuteOfHourField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,234,MinuteOfDayField = cMinuteOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,235,HourOfDayField = cHourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,236,HourOfHalfdayField = cHourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,237,ClockhourOfDayField = cClockhourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,238,ClockhourOfHalfdayField = cClockhourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,239,HalfdayOfDayField = cHalfdayOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,241,/ Now create fields that have unique behavior for Gregorian and Julian
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,242,/ chronologies.
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,244,YearField = new GJYearDateTimeField(this);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,245,"YearOfEraField = new GJYearOfEraDateTimeField(iYearField, this);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,247,CenturyOfEraField = new DividedDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,248,"iYearOfEraField, ""centuryOfEra"", ""centuries"", 100);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,249,YearOfCenturyField = new RemainderDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,250,"(DividedDateTimeField)iCenturyOfEraField, ""yearOfCentury"");"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,252,EraField = new GJEraDateTimeField(this);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,253,"DayOfWeekField = new GJDayOfWeekDateTimeField(this, iDaysField);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,254,"DayOfMonthField = new GJDayOfMonthDateTimeField(this, iDaysField);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,255,"DayOfYearField = new GJDayOfYearDateTimeField(this, iDaysField);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,256,MonthOfYearField = new GJMonthOfYearDateTimeField(this);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,257,WeekyearField = new GJWeekyearDateTimeField(this);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,258,"WeekOfWeekyearField = new GJWeekOfWeekyearDateTimeField(this, iWeeksField);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,260,/ The remaining (imprecise) durations are available from the newly
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,261,/ created datetime fields.
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,263,YearsField = iYearField.getDurationField();
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,264,CenturiesField = iCenturyOfEraField.getDurationField();
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,265,MonthsField = iMonthOfYearField.getDurationField();
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,266,WeekyearsField = iWeekyearField.getDurationField();
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,269,ublic Chronology withUTC() {
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,270,eturn this;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,227,public DateTimeZone getDateTimeZone() {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,228,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,229,if ((base = getBase()) != null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,230,return base.getDateTimeZone();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,232,return DateTimeZone.UTC;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,274, Override the default implementation
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,276,"ublic final long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,235,"public long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,238,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,239,if ((base = getBase()) != null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,240,"return base.getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,281,"tils.verifyValueBounds(""monthOfYear"", monthOfYear, 1, 12);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,282,"tils.verifyValueBounds(""dayOfMonth"", dayOfMonth, 1,"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,245,"FieldUtils.verifyValueBounds(""monthOfYear"", monthOfYear, 1, 12);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,246,"FieldUtils.verifyValueBounds(""dayOfMonth"", dayOfMonth, 1,"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,302, Override the default implementation
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,304,"ublic final long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,305,"nt secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,265,"public long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,266,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,269,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,270,if ((base = getBase()) != null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,271,"return base.getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,309,"tils.verifyValueBounds(""hourOfDay"", hourOfDay, 0, 23);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,310,"tils.verifyValueBounds(""minuteOfHour"", minuteOfHour, 0, 59);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,311,"tils.verifyValueBounds(""secondOfMinute"", secondOfMinute, 0, 59);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,312,"tils.verifyValueBounds(""millisOfSecond"", millisOfSecond, 0, 999);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,274,"FieldUtils.verifyValueBounds(""hourOfDay"", hourOfDay, 0, 23);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,275,"FieldUtils.verifyValueBounds(""minuteOfHour"", minuteOfHour, 0, 59);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,276,"FieldUtils.verifyValueBounds(""secondOfMinute"", secondOfMinute, 0, 59);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,277,"FieldUtils.verifyValueBounds(""millisOfSecond"", millisOfSecond, 0, 999);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,321, Override the default implementation
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,327,"tils.verifyValueBounds(""millisOfDay"", millisOfDay, 0, DateTimeConstants.MILLIS_PER_DAY);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,289,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,290,if ((base = getBase()) != null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,291,"return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,293,"FieldUtils.verifyValueBounds(""millisOfDay"", millisOfDay, 0, DateTimeConstants.MILLIS_PER_DAY);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,332, Override the default implementation
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,302,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,303,if ((base = getBase()) != null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,304,return base.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,305,"(instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,344, Override the default implementation
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,316,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,317,if ((base = getBase()) != null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,318,"return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,319,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,355,ublic final boolean isCenturyISO() {
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,356,eturn true;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,329,// Output
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,332,* Gets a debugging toString.
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,334,* @return a debugging string
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,336,public String toString() {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,337,StringBuffer sb = new StringBuffer(60);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,338,String name = getClass().getName();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,339,int index = name.lastIndexOf('.');
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,340,if (index >= 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,341,name = name.substring(index + 1);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,343,sb.append(name);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,344,sb.append('[');
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,345,DateTimeZone zone = getDateTimeZone();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,346,if (zone != null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,347,sb.append(zone.getID());
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,348,"sb.append("", "");"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,350,"sb.append(""mdfw="");"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,351,sb.append(getMinimumDaysInFirstWeek());
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,352,sb.append(']');
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,353,return sb.toString();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,356,protected void assemble(Fields fields) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,357,// First copy fields that are the same for all Gregorian and Julian
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,358,// chronologies.
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,360,fields.millis = cMillisField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,361,fields.seconds = cSecondsField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,362,fields.minutes = cMinutesField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,363,fields.hours = cHoursField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,364,//fields.halfdays = cHalfdaysField;  Doesn't exist in public interface
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,365,fields.days = cDaysField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,366,fields.weeks = cWeeksField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,368,fields.millisOfSecond = cMillisOfSecondField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,369,fields.millisOfDay = cMillisOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,370,fields.secondOfMinute = cSecondOfMinuteField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,371,fields.secondOfDay = cSecondOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,372,fields.minuteOfHour = cMinuteOfHourField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,373,fields.minuteOfDay = cMinuteOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,374,fields.hourOfDay = cHourOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,375,fields.hourOfHalfday = cHourOfHalfdayField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,376,fields.clockhourOfDay = cClockhourOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,377,fields.clockhourOfHalfday = cClockhourOfHalfdayField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,378,fields.halfdayOfDay = cHalfdayOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,380,// Now create fields that have unique behavior for Gregorian and Julian
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,381,// chronologies.
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,383,fields.year = new GJYearDateTimeField(this);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,384,"fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,386,// Define one-based centuryOfEra and yearOfCentury.
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,387,"DateTimeField field = new OffsetDateTimeField(fields.yearOfEra, """", 99);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,388,fields.centuryOfEra = new DividedDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,389,"(field, ""centuryOfEra"", ""centuries"", 100);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,391,field = new RemainderDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,392,"((DividedDateTimeField)fields.centuryOfEra, """");"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,393,"fields.yearOfCentury = new OffsetDateTimeField(field, ""yearOfCentury"", 1);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,395,fields.era = new GJEraDateTimeField(this);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,396,"fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,397,"fields.dayOfMonth = new GJDayOfMonthDateTimeField(this, fields.days);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,398,"fields.dayOfYear = new GJDayOfYearDateTimeField(this, fields.days);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,399,fields.monthOfYear = new GJMonthOfYearDateTimeField(this);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,400,fields.weekyear = new GJWeekyearDateTimeField(this);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,401,"fields.weekOfWeekyear = new GJWeekOfWeekyearDateTimeField(this, fields.weeks);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,403,// The remaining (imprecise) durations are available from the newly
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,404,// created datetime fields.
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,406,fields.years = fields.year.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,407,fields.centuries = fields.centuryOfEra.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,408,fields.months = fields.monthOfYear.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,409,fields.weekyears = fields.weekyear.getDurationField();
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,368,ublic final int getDaysInYear(int year) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,417,final int getDaysInYear(int year) {
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,372,"ublic final int getDaysInYearMonth(int year, int month) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,421,"final int getDaysInYearMonth(int year, int month) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,384,"ublic final long getTotalMillisByYearMonth(int year, int month) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,433,"final long getTotalMillisByYearMonth(int year, int month) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,397,ublic final int getWeeksInYear(int year) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,446,final int getWeeksInYear(int year) {
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,408,ublic final long getFirstWeekOfYearMillis(int year) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,457,final long getFirstWeekOfYearMillis(int year) {
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,410,nt jan1dayOfWeek = dayOfWeek().get(jan1millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,459,int jan1dayOfWeek = getDayOfWeek(jan1millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,429,ublic final long getYearMillis(int year) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,478,final long getYearMillis(int year) {
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,441,"ublic final long getYearMonthMillis(int year, int month) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,490,"final long getYearMonthMillis(int year, int month) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,458,"ublic final long getYearMonthDayMillis(int year, int month, int dayOfMonth) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,507,"final long getYearMonthDayMillis(int year, int month, int dayOfMonth) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,518,* @param instant millis from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,520,final int getYear(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,521,"// Get an initial estimate of the year, and the millis value that"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,522,// represents the start of that year. Then verify estimate and fix if
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,523,// necessary.
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,525,long unitMillis = getAverageMillisPerYear();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,526,long i2 = instant + getApproxMillisAtEpoch();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,527,if (i2 < 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,528,i2 = i2 - unitMillis + 1;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,530,int year = (int) (i2 / unitMillis);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,532,long yearStart = getYearMillis(year);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,533,long diff = instant - yearStart;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,535,if (diff < 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,536,if (diff < -DateTimeConstants.MILLIS_PER_DAY * 2L) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,537,"// Too much error, assume operation overflowed."
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,538,return getYearOverflow(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,540,year--;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,541,} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,542,if (diff >= DateTimeConstants.MILLIS_PER_DAY * 367L) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,543,"// Too much error, assume operation overflowed."
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,544,return getYearOverflow(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,546,// One year may need to be added to fix estimate.
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,547,long oneYear;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,548,if (isLeapYear(year)) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,549,oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,550,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,551,oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,554,yearStart += oneYear;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,556,if ((yearStart ^ instant) < 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,557,"// Sign mismatch, operation may have overflowed."
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,558,if ((yearStart <  0 && (yearStart - oneYear) >= 0) ||
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,559,(yearStart >= 0 && (yearStart - oneYear) <  0)   ) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,560,// It overflowed.
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,561,return getYearOverflow(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,565,if (yearStart <= instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,566,"// Didn't go too far, so actually add one year."
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,567,year++;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,571,return year;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,574,private final int getYearOverflow(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,575,if (instant > 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,576,int year = getMaxYear();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,577,long yearStartMillis = getYearMillis(year);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,578,if (isLeapYear(year)) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,579,yearStartMillis += DateTimeConstants.MILLIS_PER_DAY * 366L;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,580,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,581,yearStartMillis += DateTimeConstants.MILLIS_PER_DAY * 365L;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,583,long yearEndMillis = yearStartMillis - 1;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,585,if (instant <= yearEndMillis) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,586,return year;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,589,throw new IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,590,"(""Instant too large: "" + instant + "" > "" + yearEndMillis);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,591,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,592,int year = getMinYear();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,593,long yearStartMillis = getYearMillis(year);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,594,if (instant >= yearStartMillis) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,595,return year;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,598,throw new IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,599,"(""Instant too small: "" + instant + "" < "" + yearStartMillis);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,604,* @param instant millis from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,606,"final long setYear(long instant, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,607,int thisYear = getYear(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,608,"int dayOfYear = getDayOfYear(instant, thisYear);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,609,int millisOfDay = getMillisOfDay(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,611,if (dayOfYear > (31 + 28)) { // after Feb 28
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,612,if (isLeapYear(thisYear)) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,613,// Current date is Feb 29 or later.
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,614,if (!isLeapYear(year)) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,615,"// Moving to a non-leap year, Feb 29 does not exist."
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,616,dayOfYear--;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,618,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,619,// Current date is Mar 01 or later.
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,620,if (isLeapYear(year)) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,621,"// Moving to a leap year, account for Feb 29."
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,622,dayOfYear++;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,627,"instant = getYearMonthDayMillis(year, 1, dayOfYear);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,628,instant += millisOfDay;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,630,return instant;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,471,ublic final int getMonthOfYear(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,472,"eturn getMonthOfYear(millis, year().get(millis));"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,636,final int getMonthOfYear(long millis) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,637,"return getMonthOfYear(millis, getYear(millis));"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,479,"ublic final int getMonthOfYear(long millis, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,644,"final int getMonthOfYear(long millis, int year) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,514,ublic final int getDayOfMonth(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,515,nt year = year().get(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,679,final int getDayOfMonth(long millis) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,680,int year = getYear(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,524,"ublic final int getDayOfMonth(long millis, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,689,"final int getDayOfMonth(long millis, int year) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,534,"ublic final int getDayOfMonth(long millis, int year, int month) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,699,"final int getDayOfMonth(long millis, int year, int month) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,542,ublic abstract boolean isLeapYear(int year);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,708,* @param instant millis from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,710,final int getDayOfYear(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,711,"return getDayOfYear(instant, getYear(instant));"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,715,* @param instant millis from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,716,* @param year precalculated year of millis
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,718,"final int getDayOfYear(long instant, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,719,long yearStart = getYearMillis(year);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,720,return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,724,* @param instant millis from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,726,final int getWeekyear(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,727,int year = getYear(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,728,"int week = getWeekOfWeekyear(instant, year);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,729,if (week == 1) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,730,return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,731,} else if (week > 51) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,732,return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,733,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,734,return year;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,739,* @param instant millis from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,741,final int getWeekOfWeekyear(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,742,"return getWeekOfWeekyear(instant, getYear(instant));"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,746,* @param instant millis from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,747,* @param year precalculated year of millis
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,749,"final int getWeekOfWeekyear(long instant, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,750,long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,751,if (instant < firstWeekMillis1) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,752,return getWeeksInYear(year - 1);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,754,long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,755,if (instant >= firstWeekMillis2) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,756,return 1;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,758,return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,762,* @param instant millis from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,764,final int getDayOfWeek(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,765,"// 1970-01-01 is day of week 4, Thursday."
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,767,long daysSince19700101;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,768,if (instant >= 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,769,daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,770,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,771,daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1))
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,772,/ DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,773,if (daysSince19700101 < -3) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,774,return 7 + (int) ((daysSince19700101 + 4) % 7);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,778,return 1 + (int) ((daysSince19700101 + 3) % 7);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,782,* @param instant millis from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,784,final int getMillisOfDay(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,785,if (instant >= 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,786,return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,787,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,788,return (DateTimeConstants.MILLIS_PER_DAY - 1)
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,789,+ (int) ((instant + 1) % DateTimeConstants.MILLIS_PER_DAY);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,793,abstract boolean isLeapYear(int year);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,544,rotected abstract long calculateFirstDayOfYearMillis(int year);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,795,abstract long calculateFirstDayOfYearMillis(int year);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,546,rotected abstract int getMinYear();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,797,abstract int getMinYear();
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,548,rotected abstract int getMaxYear();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,799,abstract int getMaxYear();
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,550,rotected abstract long getRoughMillisPerYear();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,801,abstract long getAverageMillisPerYear();
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,552,rotected abstract long getRoughMillisPerMonth();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,803,abstract long getAverageMillisPerMonth();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,806,* Returns a constant representing the approximate number of milliseconds
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,807,* elapsed from year 0 of this chronology. This constant <em>must</em> be
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,808,* defined as:
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,809,* <pre>
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,810,*    yearAtEpoch * averageMillisPerYear + millisOfYearAtEpoch
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,811,* <pre>
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,812,* where epoch is 1970-01-01 (Gregorian).
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,814,abstract long getApproxMillisAtEpoch();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,56,import java.io.IOException;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,57,import java.io.ObjectInputStream;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,59,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,60,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,61,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,62,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,65,* Allows chronologies to be assembled from a container of fields.
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,66,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,67,* AssembledChronology is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,69,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,71,public abstract class AssembledChronology extends AbstractChronology {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,73,static final long serialVersionUID = -6728465968995518215L;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,75,private final Chronology iBase;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,76,private final Object iParam;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,78,private transient DurationField iMillis;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,79,private transient DurationField iSeconds;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,80,private transient DurationField iMinutes;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,81,private transient DurationField iHours;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,83,private transient DurationField iDays;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,84,private transient DurationField iWeeks;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,85,private transient DurationField iWeekyears;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,86,private transient DurationField iMonths;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,87,private transient DurationField iYears;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,88,private transient DurationField iCenturies;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,89,private transient DurationField iEras;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,91,private transient DateTimeField iMillisOfSecond;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,92,private transient DateTimeField iMillisOfDay;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,93,private transient DateTimeField iSecondOfMinute;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,94,private transient DateTimeField iSecondOfDay;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,95,private transient DateTimeField iMinuteOfHour;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,96,private transient DateTimeField iMinuteOfDay;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,97,private transient DateTimeField iHourOfDay;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,98,private transient DateTimeField iClockhourOfDay;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,99,private transient DateTimeField iHourOfHalfday;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,100,private transient DateTimeField iClockhourOfHalfday;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,101,private transient DateTimeField iHalfdayOfDay;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,103,private transient DateTimeField iDayOfWeek;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,104,private transient DateTimeField iDayOfMonth;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,105,private transient DateTimeField iDayOfYear;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,106,private transient DateTimeField iWeekOfWeekyear;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,107,private transient DateTimeField iWeekyear;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,108,private transient DateTimeField iMonthOfYear;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,109,private transient DateTimeField iYear;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,110,private transient DateTimeField iYearOfEra;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,111,private transient DateTimeField iYearOfCentury;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,112,private transient DateTimeField iCenturyOfEra;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,113,private transient DateTimeField iEra;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,115,// Bit set determines which base fields are used
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,116,"// bit 1 set: hourOfDay, minuteOfHour, secondOfMinute, and millisOfSecond fields"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,117,// bit 2 set: millisOfDayField
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,118,"// bit 3 set: year, monthOfYear, and dayOfMonth fields"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,119,private transient int iBaseFlags;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,122,"* Constructor calls the assemble method, enabling subclasses to define its"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,123,"* supported fields. If a base chronology is supplied, the field set"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,124,* initially contains references to each base chronlogy field.
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,125,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,126,"* Other methods in this class will delegate to the base chronology, if it"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,127,* can be determined that the base chronology will produce the same results
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,128,* as AbstractChronology.
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,130,* @param base optional base chronology to copy initial fields from
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,131,* @param param optional param object avalable for assemble method
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,133,"protected AssembledChronology(Chronology base, Object param) {"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,134,iBase = base;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,135,iParam = param;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,136,setFields();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,139,public DateTimeZone getDateTimeZone() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,140,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,141,if ((base = iBase) != null) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,142,return base.getDateTimeZone();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,144,return null;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,147,public long getDateOnlyMillis(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,148,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,149,if ((base = iBase) != null) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,150,return base.getDateOnlyMillis(instant);
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,152,return super.getDateOnlyMillis(instant);
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,155,"public long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,156,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,158,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,159,if ((base = iBase) != null && (iBaseFlags & 4) == 4) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,160,// Only call specialized implementation if applicable fields are the same.
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,161,"return base.getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,163,"return super.getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,166,public long getTimeOnlyMillis(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,167,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,168,if ((base = iBase) != null) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,169,return base.getTimeOnlyMillis(instant);
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,171,return super.getTimeOnlyMillis(instant);
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,174,"public long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,175,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,176,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,178,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,179,if ((base = iBase) != null && (iBaseFlags & 1) == 1) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,180,// Only call specialized implementation if applicable fields are the same.
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,181,"return base.getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,183,"return super.getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,186,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,187,int millisOfDay)
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,188,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,190,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,191,if ((base = iBase) != null && (iBaseFlags & 6) == 6) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,192,// Only call specialized implementation if applicable fields are the same.
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,193,"return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,195,"return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,198,"public long getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,199,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,200,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,201,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,203,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,204,if ((base = iBase) != null && (iBaseFlags & 1) == 1) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,205,// Only call specialized implementation if applicable fields are the same.
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,206,return base.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,207,"(instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,209,return super.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,210,"(instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,213,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,214,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,215,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,216,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,218,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,219,if ((base = iBase) != null && (iBaseFlags & 5) == 5) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,220,// Only call specialized implementation if applicable fields are the same.
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,221,"return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,222,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,224,"return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,225,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,228,public final DurationField millis() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,229,return iMillis;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,232,public final DateTimeField millisOfSecond() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,233,return iMillisOfSecond;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,236,public final DateTimeField millisOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,237,return iMillisOfDay;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,240,public final DurationField seconds() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,241,return iSeconds;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,244,public final DateTimeField secondOfMinute() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,245,return iSecondOfMinute;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,248,public final DateTimeField secondOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,249,return iSecondOfDay;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,252,public final DurationField minutes() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,253,return iMinutes;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,256,public final DateTimeField minuteOfHour() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,257,return iMinuteOfHour;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,260,public final DateTimeField minuteOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,261,return iMinuteOfDay;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,264,public final DurationField hours() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,265,return iHours;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,268,public final DateTimeField hourOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,269,return iHourOfDay;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,272,public final DateTimeField clockhourOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,273,return iClockhourOfDay;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,276,public final DateTimeField hourOfHalfday() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,277,return iHourOfHalfday;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,280,public final DateTimeField clockhourOfHalfday() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,281,return iClockhourOfHalfday;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,284,public final DateTimeField halfdayOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,285,return iHalfdayOfDay;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,288,public final DurationField days() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,289,return iDays;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,292,public final DateTimeField dayOfWeek() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,293,return iDayOfWeek;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,296,public final DateTimeField dayOfMonth() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,297,return iDayOfMonth;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,300,public final DateTimeField dayOfYear() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,301,return iDayOfYear;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,304,public final DurationField weeks() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,305,return iWeeks;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,308,public final DateTimeField weekOfWeekyear() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,309,return iWeekOfWeekyear;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,312,public final DurationField weekyears() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,313,return iWeekyears;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,316,public final DateTimeField weekyear() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,317,return iWeekyear;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,320,public final DurationField months() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,321,return iMonths;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,324,public final DateTimeField monthOfYear() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,325,return iMonthOfYear;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,328,public final DurationField years() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,329,return iYears;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,332,public final DateTimeField year() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,333,return iYear;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,336,public final DateTimeField yearOfEra() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,337,return iYearOfEra;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,340,public final DateTimeField yearOfCentury() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,341,return iYearOfCentury;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,344,public final DurationField centuries() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,345,return iCenturies;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,348,public final DateTimeField centuryOfEra() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,349,return iCenturyOfEra;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,352,public final DurationField eras() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,353,return iEras;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,356,public final DateTimeField era() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,357,return iEra;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,361,* Invoked by the constructor and after deserialization to allow subclasses
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,362,* to define all of its supported fields. All unset fields default to
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,363,* unsupported instances.
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,365,* @param fields container of fields
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,367,protected abstract void assemble(Fields fields);
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,370,* Returns the same base chronology as passed into the constructor.
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,372,protected final Chronology getBase() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,373,return iBase;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,377,* Returns the same param object as passed into the constructor.
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,379,protected final Object getParam() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,380,return iParam;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,383,private void setFields() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,384,Fields fields = new Fields();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,385,if (iBase != null) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,386,fields.copyFieldsFrom(iBase);
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,388,assemble(fields);
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,391,DurationField f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,392,iMillis    = (f = fields.millis)    != null ? f : super.millis();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,393,iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,394,iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,395,iHours     = (f = fields.hours)     != null ? f : super.hours();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,396,iDays      = (f = fields.days)      != null ? f : super.days();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,397,iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,398,iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,399,iMonths    = (f = fields.months)    != null ? f : super.months();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,400,iYears     = (f = fields.years)     != null ? f : super.years();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,401,iCenturies = (f = fields.centuries) != null ? f : super.centuries();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,402,iEras      = (f = fields.eras)      != null ? f : super.eras();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,406,DateTimeField f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,407,iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,408,iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,409,iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,410,iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,411,iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,412,iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,413,iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,414,iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,415,iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,416,iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,417,iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,418,iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,419,iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,420,iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,421,iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,422,iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,423,iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,424,iYear               = (f = fields.year)               != null ? f : super.year();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,425,iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,426,iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,427,iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,428,iEra                = (f = fields.era)                != null ? f : super.era();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,431,int flags;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,432,if (iBase == null) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,433,flags = 0;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,434,} else {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,435,flags =
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,436,((iHourOfDay      == iBase.hourOfDay()      &&
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,437,iMinuteOfHour   == iBase.minuteOfHour()   &&
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,438,iSecondOfMinute == iBase.secondOfMinute() &&
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,439,iMillisOfSecond == iBase.millisOfSecond()   ) ? 1 : 0) |
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,441,((iMillisOfDay == iBase.millisOfDay()) ? 2 : 0) |
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,443,((iYear        == iBase.year()        &&
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,444,iMonthOfYear == iBase.monthOfYear() &&
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,445,iDayOfMonth  == iBase.dayOfMonth()    ) ? 4 : 0);
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,448,iBaseFlags = flags;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,451,"private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {"
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,452,in.defaultReadObject();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,453,setFields();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,456,public static final class Fields {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,457,public DurationField millis;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,458,public DurationField seconds;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,459,public DurationField minutes;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,460,public DurationField hours;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,462,public DurationField days;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,463,public DurationField weeks;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,464,public DurationField weekyears;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,465,public DurationField months;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,466,public DurationField years;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,467,public DurationField centuries;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,468,public DurationField eras;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,470,public DateTimeField millisOfSecond;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,471,public DateTimeField millisOfDay;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,472,public DateTimeField secondOfMinute;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,473,public DateTimeField secondOfDay;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,474,public DateTimeField minuteOfHour;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,475,public DateTimeField minuteOfDay;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,476,public DateTimeField hourOfDay;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,477,public DateTimeField clockhourOfDay;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,478,public DateTimeField hourOfHalfday;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,479,public DateTimeField clockhourOfHalfday;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,480,public DateTimeField halfdayOfDay;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,482,public DateTimeField dayOfWeek;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,483,public DateTimeField dayOfMonth;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,484,public DateTimeField dayOfYear;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,485,public DateTimeField weekOfWeekyear;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,486,public DateTimeField weekyear;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,487,public DateTimeField monthOfYear;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,488,public DateTimeField year;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,489,public DateTimeField yearOfEra;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,490,public DateTimeField yearOfCentury;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,491,public DateTimeField centuryOfEra;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,492,public DateTimeField era;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,494,Fields() {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,498,* Copy the supported fields from a chronology into this container.
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,500,public void copyFieldsFrom(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,502,DurationField f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,503,if (isSupported(f = chrono.millis())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,504,millis = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,506,if (isSupported(f = chrono.seconds())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,507,seconds = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,509,if (isSupported(f = chrono.minutes())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,510,minutes = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,512,if (isSupported(f = chrono.hours())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,513,hours = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,515,if (isSupported(f = chrono.days())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,516,days = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,518,if (isSupported(f = chrono.weeks())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,519,weeks = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,521,if (isSupported(f = chrono.weekyears())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,522,weekyears = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,524,if (isSupported(f = chrono.months())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,525,months = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,527,if (isSupported(f = chrono.years())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,528,years = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,530,if (isSupported(f = chrono.centuries())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,531,centuries = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,533,if (isSupported(f = chrono.eras())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,534,eras = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,539,DateTimeField f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,540,if (isSupported(f = chrono.millisOfSecond())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,541,millisOfSecond = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,543,if (isSupported(f = chrono.millisOfDay())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,544,millisOfDay = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,546,if (isSupported(f = chrono.secondOfMinute())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,547,secondOfMinute = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,549,if (isSupported(f = chrono.secondOfDay())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,550,secondOfDay = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,552,if (isSupported(f = chrono.minuteOfHour())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,553,minuteOfHour = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,555,if (isSupported(f = chrono.minuteOfDay())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,556,minuteOfDay = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,558,if (isSupported(f = chrono.hourOfDay())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,559,hourOfDay = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,561,if (isSupported(f = chrono.clockhourOfDay())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,562,clockhourOfDay = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,564,if (isSupported(f = chrono.hourOfHalfday())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,565,hourOfHalfday = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,567,if (isSupported(f = chrono.clockhourOfHalfday())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,568,clockhourOfHalfday = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,570,if (isSupported(f = chrono.halfdayOfDay())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,571,halfdayOfDay = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,573,if (isSupported(f = chrono.dayOfWeek())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,574,dayOfWeek = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,576,if (isSupported(f = chrono.dayOfMonth())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,577,dayOfMonth = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,579,if (isSupported(f = chrono.dayOfYear())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,580,dayOfYear = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,582,if (isSupported(f = chrono.weekOfWeekyear())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,583,weekOfWeekyear = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,585,if (isSupported(f = chrono.weekyear())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,586,weekyear = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,588,if (isSupported(f = chrono.monthOfYear())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,589,monthOfYear = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,591,if (isSupported(f = chrono.year())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,592,year = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,594,if (isSupported(f = chrono.yearOfEra())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,595,yearOfEra = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,597,if (isSupported(f = chrono.yearOfCentury())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,598,yearOfCentury = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,600,if (isSupported(f = chrono.centuryOfEra())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,601,centuryOfEra = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,603,if (isSupported(f = chrono.era())) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,604,era = f;
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,609,private static boolean isSupported(DurationField field) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,610,return field == null ? false : field.isSupported();
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,613,private static boolean isSupported(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,614,return field == null ? false : field.isSupported();
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,56,import java.util.HashMap;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,57,import java.util.Map;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,59,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,60,import org.joda.time.DateTime;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,61,import org.joda.time.DateTimeConstants;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,62,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,63,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,64,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,65,import org.joda.time.field.DividedDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,66,import org.joda.time.field.OffsetDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,67,import org.joda.time.field.RemainderDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,70,* <code>BuddhistChronology</code> provides access to the individual date
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,71,* time fields for the Buddhist chronological calendar system.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,72,* <p>
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,73,* The Buddhist calendar differs from the GregorianJulian calendar only
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,74,* in the year. This class is compatable with the BuddhistCalendar class
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,75,* supplied by Sun.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,76,* <p>
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,77,* BuddhistChronology is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,79,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,80,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,81,* @since 1.0
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,83,public final class BuddhistChronology extends AssembledChronology {
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,85,static final long serialVersionUID = -3474595157769370126L;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,88,"* Constant value for 'Buddhist Era', equivalent to the value returned"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,89,* for AD/CE.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,91,public static final int BE = DateTimeConstants.CE;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,93,/** Number of years difference in calendars. */
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,94,private static final int BUDDHIST_OFFSET = 543;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,96,/** Cache of zone to chronology */
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,97,private static final Map cCache = new HashMap();
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,99,/** UTC instance of the chronology */
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,100,private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,103,"* Standard instance of a Buddhist Chronology, that matches"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,104,* Sun's BuddhistCalendar class. This means that it follows the
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,105,* GregorianJulian calendar rules with a cutover date.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,106,* <p>
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,107,* The time zone of the returned instance is UTC.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,109,public static BuddhistChronology getInstanceUTC() {
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,110,return INSTANCE_UTC;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,114,"* Standard instance of a Buddhist Chronology, that matches"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,115,* Sun's BuddhistCalendar class. This means that it follows the
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,116,* GregorianJulian calendar rules with a cutover date.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,118,public static BuddhistChronology getInstance() {
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,119,return getInstance(DateTimeZone.getDefault());
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,123,"* Standard instance of a Buddhist Chronology, that matches"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,124,* Sun's BuddhistCalendar class. This means that it follows the
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,125,* GregorianJulian calendar rules with a cutover date.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,127,"* @param zone  the time zone to use, null is default"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,129,public static synchronized BuddhistChronology getInstance(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,130,if (zone == null) {
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,131,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,133,BuddhistChronology chrono = (BuddhistChronology) cCache.get(zone);
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,134,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,135,// First create without a lower limit.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,136,"chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,137,// Impose lower limit and make another BuddhistChronology.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,138,"DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,139,"chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,140,"cCache.put(zone, chrono);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,142,return chrono;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,145,// Constructors and instance variables
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,149,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,151,"* @param param if non-null, then don't change the field set"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,153,"private BuddhistChronology(Chronology base, Object param) {"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,154,"super(base, param);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,158,* Serialization singleton
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,160,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,161,return getInstance(getBase().getDateTimeZone());
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,164,// Conversion
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,167,* Gets the Chronology in the UTC time zone.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,169,* @return the chronology in UTC
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,171,public Chronology withUTC() {
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,172,return INSTANCE_UTC;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,176,* Gets the Chronology in a specific time zone.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,178,"* @param zone  the zone to get the chronology in, null is default"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,179,* @return the chronology
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,181,public Chronology withDateTimeZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,182,if (zone == null) {
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,183,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,185,if (zone == getDateTimeZone()) {
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,186,return this;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,188,return getInstance(zone);
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,191,// Output
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,194,* Gets a debugging toString.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,196,* @return a debugging string
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,198,public String toString() {
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,199,"String str = ""BuddhistChronology"";"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,200,DateTimeZone zone = getDateTimeZone();
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,201,if (zone != null) {
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,202,str = str + '[' + zone.getID() + ']';
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,204,return str;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,207,protected void assemble(Fields fields) {
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,208,if (getParam() == null) {
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,209,DateTimeField field = fields.year;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,210,"fields.year = new OffsetDateTimeField(field, field.getName(), BUDDHIST_OFFSET);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,211,fields.yearOfEra = fields.year;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,213,field = fields.weekyear;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,214,"fields.weekyear = new OffsetDateTimeField(field, field.getName(), BUDDHIST_OFFSET);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,216,"field = new OffsetDateTimeField(fields.yearOfEra, """", 99);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,217,"fields.centuryOfEra = new DividedDateTimeField(field, ""centuryOfEra"", ""centuries"", 100);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,219,field = new RemainderDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,220,"((DividedDateTimeField)fields.centuryOfEra, """");"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,221,"fields.yearOfCentury = new OffsetDateTimeField(field, ""yearOfCentury"", 1);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,223,fields.era = BuddhistEraDateTimeField.INSTANCE;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,54,ackage org.joda.time.chrono.buddhist;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,54,package org.joda.time.chrono;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,60,mport org.joda.time.chrono.AbstractDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,61,mport org.joda.time.chrono.UnsupportedDurationField;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,62,mport org.joda.time.chrono.Utils;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,60,import org.joda.time.field.AbstractDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,61,import org.joda.time.field.UnsupportedDurationField;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,62,import org.joda.time.field.FieldUtils;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,76, Singleton instance of BuddhistYearDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,76,* Singleton instance
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,117,"tils.verifyValueBounds(this, era, getMinimumValue(), getMaximumValue());"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,117,"FieldUtils.verifyValueBounds(this, era, getMinimumValue(), getMaximumValue());"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,56,import java.util.HashMap;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,57,import java.util.Map;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,59,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,60,import org.joda.time.DateTime;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,61,import org.joda.time.DateTimeConstants;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,62,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,63,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,64,import org.joda.time.field.PreciseDurationField;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,69,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,71,public final class CopticChronology extends AbstractGJChronology {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,73,static final long serialVersionUID = -5972804258688333942L;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,76,"* Constant value for 'Anno Martyrum' or 'Era of the Martyrs', equivalent"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,77,* to the value returned for AD/CE.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,79,public static final int AM = DateTimeConstants.CE;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,81,private static final long MILLIS_PER_YEAR =
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,82,(long) (365.25 * DateTimeConstants.MILLIS_PER_DAY);
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,84,private static final long MILLIS_PER_MONTH =
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,85,(long) (365.25 * DateTimeConstants.MILLIS_PER_DAY / 12);
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,87,private static final DurationField cMonthsField;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,89,/** Singleton instance of a UTC CopticChronology */
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,90,private static final CopticChronology INSTANCE_UTC;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,92,/** Cache of zone to chronology arrays */
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,93,private static final Map cCache = new HashMap();
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,95,static {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,96,cMonthsField =  new PreciseDurationField
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,97,"(""months"", 30L * DateTimeConstants.MILLIS_PER_DAY);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,98,INSTANCE_UTC = getInstance(DateTimeZone.UTC);
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,102,* Gets an instance of the CopticChronology.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,103,* The time zone of the returned instance is UTC.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,105,* @return a singleton UTC instance of the chronology
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,107,public static CopticChronology getInstanceUTC() {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,108,return INSTANCE_UTC;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,112,* Gets an instance of the CopticChronology in the default time zone.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,114,* @return a chronology in the default time zone
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,116,public static CopticChronology getInstance() {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,117,"return getInstance(DateTimeZone.getDefault(), 4);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,121,* Gets an instance of the CopticChronology in the given time zone.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,123,"* @param zone  the time zone to get the chronology in, null is default"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,124,* @return a chronology in the specified time zone
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,126,public static CopticChronology getInstance(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,127,"return getInstance(zone, 4);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,131,* Gets an instance of the CopticChronology in the given time zone.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,133,"* @param zone  the time zone to get the chronology in, null is default"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,134,* @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,135,* @return a chronology in the specified time zone
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,137,"public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,138,if (zone == null) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,139,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,141,CopticChronology chrono;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,142,synchronized (cCache) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,143,CopticChronology[] chronos = (CopticChronology[]) cCache.get(zone);
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,144,if (chronos == null) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,145,chronos = new CopticChronology[7];
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,146,"cCache.put(zone, chronos);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,148,try {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,149,chrono = chronos[minDaysInFirstWeek - 1];
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,150,} catch (ArrayIndexOutOfBoundsException e) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,151,throw new IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,152,"(""Invalid min days in first week: "" + minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,154,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,155,if (zone == DateTimeZone.UTC) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,156,// First create without a lower limit.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,157,"chrono = new CopticChronology(null, null, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,158,// Impose lower limit and make another CopticChronology.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,159,"DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,160,chrono = new CopticChronology
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,161,"(LimitChronology.getInstance(chrono, lowerLimit, null),"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,162,"null, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,163,} else {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,164,"chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,165,chrono = new CopticChronology
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,166,"(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,168,chronos[minDaysInFirstWeek - 1] = chrono;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,171,return chrono;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,174,// Constructors and instance variables
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,178,* Restricted constructor
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,180,"CopticChronology(Chronology base, Object param, int minDaysInFirstWeek) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,181,"super(base, param, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,185,* Serialization singleton
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,187,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,188,return getInstance(getBase().getDateTimeZone());
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,191,// Conversion
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,194,* Gets the Chronology in the UTC time zone.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,196,* @return the chronology in UTC
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,198,public Chronology withUTC() {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,199,return INSTANCE_UTC;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,203,* Gets the Chronology in a specific time zone.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,205,"* @param zone  the zone to get the chronology in, null is default"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,206,* @return the chronology
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,208,public Chronology withDateTimeZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,209,if (zone == null) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,210,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,212,if (zone == getDateTimeZone()) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,213,return this;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,215,return getInstance(zone);
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,218,boolean isLeapYear(int year) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,219,return (year & 3) == 3;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,222,long calculateFirstDayOfYearMillis(int year) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,223,// Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,224,// Calculate relative to the nearest leap year and account for the
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,225,// difference later.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,227,int relativeYear = year - 1687;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,228,int leapYears;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,229,if (relativeYear <= 0) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,230,// Add 3 before shifting right since /4 and >>2 behave differently
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,231,// on negative numbers.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,232,leapYears = (relativeYear + 3) >> 2;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,233,} else {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,234,leapYears = relativeYear >> 2;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,235,// For post 1687 an adjustment is needed as jan1st is before leap day
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,236,if (!isLeapYear(year)) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,237,leapYears++;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,241,long millis = (relativeYear * 365L + leapYears)
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,242,* (long)DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,244,// Adjust to account for difference between 1687-01-01 and 1686-04-23.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,246,return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,249,int getMinYear() {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,250,// The lowest year that can be fully supported.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,251,return 1;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,254,int getMaxYear() {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,255,// The highest year that can be fully supported.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,256,// TODO
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,257,return 292272992;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,260,long getAverageMillisPerYear() {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,261,return MILLIS_PER_YEAR;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,264,long getAverageMillisPerMonth() {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,265,return MILLIS_PER_MONTH;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,268,long getApproxMillisAtEpoch() {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,269,return 1686L * MILLIS_PER_YEAR + 112L * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,272,protected void assemble(Fields fields) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,273,if (getBase() == null) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,274,super.assemble(fields);
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,275,"// Coptic, like Julian, has no year zero."
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,276,"fields.year = new JulianChronology.NoYearZeroField(this, fields.year);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,277,"fields.weekyear = new JulianChronology.NoWeekyearZeroField(this, fields.weekyear);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,279,fields.era = CopticEraDateTimeField.INSTANCE;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,280,fields.months = cMonthsField;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,281,"fields.monthOfYear = new CopticMonthOfYearDateTimeField(this, cMonthsField);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,282,"fields.dayOfMonth = new CopticDayOfMonthDateTimeField(this, fields.days);"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,56,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,57,import org.joda.time.field.PreciseDurationDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,60,* Provides time calculations for the day of the month component of time.
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,62,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,63,* @since 1.0
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,65,final class CopticDayOfMonthDateTimeField extends PreciseDurationDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,67,static final long serialVersionUID = -5441610762799659434L;
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,69,private final AbstractGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,72,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,74,"CopticDayOfMonthDateTimeField(AbstractGJChronology chronology, DurationField days) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,75,"super(""dayOfMonth"", days);"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,76,iChronology = chronology;
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,79,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,80,return (iChronology.getDayOfYear(instant) - 1) % 30 + 1;
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,83,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,84,return iChronology.months();
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,87,public int getMinimumValue() {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,88,return 1;
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,91,public int getMaximumValue() {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,92,return 30;
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,95,public int getMaximumValue(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,96,if (((iChronology.getDayOfYear(instant) - 1) / 30) < 12) {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,97,return 30;
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,99,return iChronology.isLeapYear(iChronology.getYear(instant)) ? 6 : 5;
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,103,* Serialization singleton
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,105,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,106,return iChronology.dayOfMonth();
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,56,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,58,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,59,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,60,import org.joda.time.field.AbstractDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,61,import org.joda.time.field.UnsupportedDurationField;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,62,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,65,* Provides time calculations for the coptic era component of time.
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,67,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,68,* @since 1.0
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,70,final class CopticEraDateTimeField extends AbstractDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,72,static final long serialVersionUID = 4090856468123006167L;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,75,* Singleton instance
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,77,static final DateTimeField INSTANCE = new CopticEraDateTimeField();
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,80,* Restricted constructor
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,82,private CopticEraDateTimeField() {
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,83,"super(""era"");"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,87,* Serialization singleton
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,89,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,90,return INSTANCE;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,93,public boolean isLenient() {
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,94,return false;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,98,* Get the Era component of the specified time instant.
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,100,* @param millis  the time instant in millis to query.
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,101,* @return the era extracted from the input.
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,103,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,104,return CopticChronology.AM;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,108,* Set the Era component of the specified time instant.
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,110,* @param millis  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,111,* @param era  the era (CopticChronology.AM) to update the time to.
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,112,* @return the updated time instant.
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,113,* @throws IllegalArgumentException  if era is invalid.
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,115,"public long set(long instant, int era) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,116,"FieldUtils.verifyValueBounds(this, era, getMinimumValue(), getMaximumValue());"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,118,return instant;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,122,"* @see org.joda.time.DateTimeField#set(long, String, Locale)"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,124,"public long set(long instant, String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,125,"if (""AM"".equals(text) == false) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,126,"throw new IllegalArgumentException(""Invalid era text: "" + text);"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,128,return instant;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,131,public long roundFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,132,return Long.MIN_VALUE;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,135,public long roundCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,136,return Long.MAX_VALUE;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,139,public long roundHalfFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,140,return Long.MIN_VALUE;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,143,public long roundHalfCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,144,return Long.MIN_VALUE;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,147,public long roundHalfEven(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,148,return Long.MIN_VALUE;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,151,public DurationField getDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,152,return UnsupportedDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,155,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,156,return null;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,159,public int getMinimumValue() {
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,160,return CopticChronology.AM;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,163,public int getMaximumValue() {
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,164,return CopticChronology.AM;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,168,"* @see org.joda.time.DateTimeField#getAsShortText(long, Locale)"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,170,"public String getAsShortText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,171,"return ""AM"";"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,175,* @see org.joda.time.DateTimeField#getMaximumShortTextLength(Locale)
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,177,public int getMaximumShortTextLength(Locale locale) {
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,178,return 2;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,182,"* @see org.joda.time.DateTimeField#getAsShortText(long, Locale)"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,184,"public String getAsText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,185,"return ""AM"";"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,189,* @see org.joda.time.DateTimeField#getMaximumShortTextLength(Locale)
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,191,public int getMaximumTextLength(Locale locale) {
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,192,return 2;
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,56,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,57,import org.joda.time.field.PreciseDurationDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,62,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,64,final class CopticMonthOfYearDateTimeField extends PreciseDurationDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,66,static final long serialVersionUID = 7741038885247700323L;
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,68,private final AbstractGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,71,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,73,"CopticMonthOfYearDateTimeField(AbstractGJChronology chronology, DurationField months) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,74,"super(""monthOfYear"", months);"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,75,iChronology = chronology;
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,78,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,79,return (iChronology.getDayOfYear(instant) - 1) / 30 + 1;
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,82,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,83,return iChronology.years();
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,86,public boolean isLeap(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,87,return get(instant) > 12 && iChronology.isLeapYear(iChronology.getYear(instant));
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,90,public int getLeapAmount(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,91,return isLeap(instant) ? 1 : 0;
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,94,public DurationField getLeapDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,95,return iChronology.days();
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,98,public int getMinimumValue() {
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,99,return 1;
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,102,public int getMaximumValue() {
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,103,return 13;
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,107,* Serialization singleton
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,109,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,110,return iChronology.monthOfYear();
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,10, are met:
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,54,ackage org.joda.time.chrono;
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,56,mport org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,57,mport org.joda.time.DateTimeZone;
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,60," <code>DecoratedChronology</code> extends {@link Chronology}, implementing"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,61, only the minimum required set of methods. These implemented methods delegate
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,62," to a wrapped field. The withUTC, withDateTimeZone, and toString methods are"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,63," exceptions, and are left abstract."
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,64, <p>
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,65, This design allows new Chronology types to be defined that piggyback on top
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,66," of another, inheriting all the safe method implementations from"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,67," Chronology. Should any method require pure delegation to the wrapped field,"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,68, simply override and use the provided getWrappedChronology method.
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,69, <p>
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,70," DecoratedChronology is thread-safe and immutable, and its subclasses must"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,71, be as well.
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,73, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,74, @since 1.0
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,75, @see DelegatedChronology
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,77,ublic abstract class DecoratedChronology extends Chronology {
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,79,tatic final long serialVersionUID = 7094038875466049631L;
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,81,** The Chronology being wrapped */
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,82,rivate final Chronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,85, Create a DecoratedChronology for any chronology.
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,87, @param chrono the chronology
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,88, @throws IllegalArgumentException if chronology is null
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,90,rotected DecoratedChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,91,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,92,"hrow new IllegalArgumentException(""The Chronology must not be null"");"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,94,Chronology = chrono;
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,98, Gets the wrapped chronology.
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,100, @return the wrapped Chronology
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,102,rotected Chronology getWrappedChronology() {
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,103,eturn iChronology;
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,107, Get the Chronology in the UTC time zone.
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,109, @return Chronology in UTC
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,111,ublic abstract Chronology withUTC();
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,114, Get the Chronology in the any time zone.
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,116, @return Chronology in ant time zone
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,118,ublic abstract Chronology withDateTimeZone(DateTimeZone zone);
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,121, Gets the time zone that this chronology is using.
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,123, @return the DateTimeZone
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,125,ublic DateTimeZone getDateTimeZone() {
False,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,126,eturn iChronology.getDateTimeZone();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,10, are met:
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,54,ackage org.joda.time.chrono;
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,56,mport org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,57,mport org.joda.time.DateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,58,mport org.joda.time.DateTimeZone;
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,59,mport org.joda.time.DurationField;
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,62, <code>DelegatedChronology</code> delegates each method call to the
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,63, chronology it wraps.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,64, <p>
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,65," DelegatedChronology is thread-safe and immutable, and its subclasses must"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,66, be as well.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,68, @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,69, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,70, @since 1.0
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,71, @see DecoratedChronology
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,73,ublic abstract class DelegatedChronology extends Chronology {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,75,tatic final long serialVersionUID = 216867504527676612L;
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,77,** The Chronology being wrapped */
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,78,rivate final Chronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,81, Create a DelegatedChronology for any chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,83, @param chrono the chronology
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,84, @throws IllegalArgumentException if chronology is null
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,86,rotected DelegatedChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,87,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,88,"hrow new IllegalArgumentException(""The Chronology must not be null"");"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,90,Chronology = chrono;
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,94, Gets the wrapped chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,96, @return the wrapped Chronology
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,98,rotected Chronology getWrappedChronology() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,99,eturn iChronology;
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,103, Get the Chronology in the UTC time zone.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,105, @return Chronology in UTC
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,107,ublic abstract Chronology withUTC();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,110, Get the Chronology in the any time zone.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,112, @return Chronology in ant time zone
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,114,ublic abstract Chronology withDateTimeZone(DateTimeZone zone);
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,117, Gets the time zone that this chronolog is using.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,119, @return the DateTimeZone
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,121,ublic DateTimeZone getDateTimeZone() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,122,eturn iChronology.getDateTimeZone();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,125,ublic long getDateOnlyMillis(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,126,eturn iChronology.getDateOnlyMillis(instant);
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,129,"ublic long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,130,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,132,"eturn iChronology.getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,135,ublic long getTimeOnlyMillis(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,136,eturn iChronology.getTimeOnlyMillis(instant);
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,139,"ublic long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,140,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,141,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,143,eturn iChronology.getTimeOnlyMillis
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,144,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,147,"ublic long getDateTimeMillis(long instant,"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,148,"nt hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,149,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,150,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,152,eturn iChronology.getDateTimeMillis
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,153,"instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,156,"ublic long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,157,nt millisOfDay)
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,158,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,160,"eturn iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,163,"ublic long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,164,"nt hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,165,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,166,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,168,eturn iChronology.getDateTimeMillis
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,169,"year, monthOfYear, dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,170,"ourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,173,/ Millis
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,177, Get the millis duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,179, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,181,ublic DurationField millis() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,182,eturn iChronology.millis();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,186, Get the millis of second field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,188, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,190,ublic DateTimeField millisOfSecond() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,191,eturn iChronology.millisOfSecond();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,195, Get the millis of day field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,197, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,199,ublic DateTimeField millisOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,200,eturn iChronology.millisOfDay();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,203,/ Seconds
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,207, Get the seconds duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,209, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,211,ublic DurationField seconds() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,212,eturn iChronology.seconds();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,216, Get the second of minute field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,218, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,220,ublic DateTimeField secondOfMinute() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,221,eturn iChronology.secondOfMinute();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,225, Get the second of day field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,227, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,229,ublic DateTimeField secondOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,230,eturn iChronology.secondOfDay();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,233,/ Minutes
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,237, Get the minutes duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,239, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,241,ublic DurationField minutes() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,242,eturn iChronology.minutes();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,246, Get the minute of hour field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,248, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,250,ublic DateTimeField minuteOfHour() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,251,eturn iChronology.minuteOfHour();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,255, Get the minute of day field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,257, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,259,ublic DateTimeField minuteOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,260,eturn iChronology.minuteOfDay();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,263,/ Hours
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,267, Get the hours duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,269, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,271,ublic DurationField hours() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,272,eturn iChronology.hours();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,276, Get the hour of day (0-23) field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,278, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,280,ublic DateTimeField hourOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,281,eturn iChronology.hourOfDay();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,285, Get the hour of day (offset to 1-24) field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,287, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,289,ublic DateTimeField clockhourOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,290,eturn iChronology.clockhourOfDay();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,294, Get the hour of am/pm (0-11) field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,296, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,298,ublic DateTimeField hourOfHalfday() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,299,eturn iChronology.hourOfHalfday();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,303, Get the hour of am/pm (offset to 1-12) field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,305, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,307,ublic DateTimeField clockhourOfHalfday() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,308,eturn iChronology.clockhourOfHalfday();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,312, Get the AM(0) PM(1) field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,314, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,316,ublic DateTimeField halfdayOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,317,eturn iChronology.halfdayOfDay();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,320,/ Day
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,324, Get the days duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,326, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,328,ublic DurationField days() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,329,eturn iChronology.days();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,333, Get the day of week field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,335, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,337,ublic DateTimeField dayOfWeek() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,338,eturn iChronology.dayOfWeek();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,342, Get the day of month field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,344, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,346,ublic DateTimeField dayOfMonth() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,347,eturn iChronology.dayOfMonth();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,351, Get the day of year field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,353, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,355,ublic DateTimeField dayOfYear() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,356,eturn iChronology.dayOfYear();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,359,/ Week
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,363, Get the weeks duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,365, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,367,ublic DurationField weeks() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,368,eturn iChronology.weeks();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,372, Get the week of a week based year field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,374, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,376,ublic DateTimeField weekOfWeekyear() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,377,eturn iChronology.weekOfWeekyear();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,381, Get the weekyears duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,383, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,385,ublic DurationField weekyears() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,386,eturn iChronology.weekyears();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,390, Get the year of a week based year field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,392, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,394,ublic DateTimeField weekyear() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,395,eturn iChronology.weekyear();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,398,/ Month
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,402, Get the months duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,404, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,406,ublic DurationField months() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,407,eturn iChronology.months();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,411, Get the month of year field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,413, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,415,ublic DateTimeField monthOfYear() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,416,eturn iChronology.monthOfYear();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,419,/ Year
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,423, Get the years duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,425, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,427,ublic DurationField years() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,428,eturn iChronology.years();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,432, Get the year field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,434, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,436,ublic DateTimeField year() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,437,eturn iChronology.year();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,441, Get the year of era field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,443, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,445,ublic DateTimeField yearOfEra() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,446,eturn iChronology.yearOfEra();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,450, Get the year field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,452, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,454,ublic DateTimeField yearOfCentury() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,455,eturn iChronology.yearOfCentury();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,459, Get the centuries duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,461, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,463,ublic DurationField centuries() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,464,eturn iChronology.centuries();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,468, Get the century of era field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,470, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,472,ublic DateTimeField centuryOfEra() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,473,eturn iChronology.centuryOfEra();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,477, Get the eras duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,479, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,481,ublic DurationField eras() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,482,eturn iChronology.eras();
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,486, Get the era field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,488, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,490,ublic DateTimeField era() {
False,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,491,eturn iChronology.era();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,13,"    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,13,"*    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,21,"    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,21,"*    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,50, individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,50,* individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,54,ackage org.joda.time.chrono.gj;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,56,import java.util.ArrayList;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,57,import java.util.HashMap;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,59,import java.util.Map;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,62,// Import for @link support
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,63,import org.joda.time.DateTimeConstants;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,62,mport org.joda.time.chrono.AbstractDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,63,mport org.joda.time.chrono.DecoratedDurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,67,import org.joda.time.Instant;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,68,import org.joda.time.ReadableInstant;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,69,import org.joda.time.field.AbstractDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,70,import org.joda.time.field.DecoratedDurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,71,import org.joda.time.format.DateTimePrinter;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,72,import org.joda.time.format.ISODateTimeFormat;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,66, Chronology for supporting the cutover from the Julian calendar to the
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,67, Gregorian calendar.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,75,* GJChronology provides access to the individual date time fields for the
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,76,* Gregorian/Julian defined chronological calendar system.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,77,* <p>
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,78,"* The Gregorian calendar replaced the Julian calendar, and the point in time"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,79,* when this chronology switches can be controlled using the second parameter
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,80,* of the getInstance method. By default this cutover is set to the date the
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,81,"* Gregorian calendar was first instituted, October 15, 1582."
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,82,* <p>
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,83,"* Before this date, this chronology uses the proleptic Julian calendar"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,84,* (proleptic means extending indefinitely). The Julian calendar has leap
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,85,"* years every four years, whereas the Gregorian has special rules for 100"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,86,* and 400 years. A meaningful result will thus be obtained for all input
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,87,"* values. However before March 1, 4 CE, Julian leap years were irregular,"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,88,* and before 45 BCE there was no Julian calendar.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,89,* <p>
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,90,* This chronology differs from {@link java.util.GregorianCalendar
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,91,* java.util.GregorianCalendar} in that years in BCE are returned
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,92,* correctly. Thus year 1 BCE is returned as -1 instead of 1. The yearOfEra
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,93,* field produces results compatible with GregorianCalendar.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,94,* <p>
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,95,"* The Julian calendar does not have a year zero, and so year -1 is followed by"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,96,* year 1. If the Gregorian cutover date is specified at or before year -1
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,97,"* (Julian), year zero is defined. In other words, the proleptic Gregorian"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,98,* chronology implemented by this class has a year zero.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,99,* <p>
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,100,"* To create a pure proleptic Julian chronology, use {@link JulianChronology},"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,101,"* and to create a pure proleptic Gregorian chronology, use"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,102,* {@link GregorianChronology}.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,103,* <p>
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,104,* GJChronology is thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,73,inal class CutoverChronology extends GJChronology {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,110,public final class GJChronology extends AssembledChronology {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,100,rivate static void checkUTC(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,101,f (chrono.getDateTimeZone() != null &&
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,102,hrono.getDateTimeZone() != DateTimeZone.UTC) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,103,hrow new IllegalArgumentException();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,138,* The default GregorianJulian cutover point
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,140,static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,107,rivate final GJChronology iJulianChronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,108,rivate final GJChronology iGregorianChronology;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,142,/** Cache of zone to chronology list */
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,143,private static final Map cCache = new HashMap();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,110,inal long iCutoverInstant;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,111,ransient final long iGapDuration;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,146,* Factory method returns instances of the default GJ cutover
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,147,"* chronology. This uses a cutover date of October 15, 1582 (Gregorian)"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,148,"* 00:00:00 UTC. For this value, October 4, 1582 (Julian) is followed by"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,149,"* October 15, 1582 (Gregorian)."
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,151,* <p>The first day of the week is designated to be
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,152,"* {@link DateTimeConstants#MONDAY Monday}, and the minimum days in the"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,153,* first week of the year is 4.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,155,* <p>The time zone of the returned instance is UTC.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,157,public static GJChronology getInstanceUTC() {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,158,"return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,114, @param julian chronology used before the cutover instant
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,115, @param gregorian chronology used at and after the cutover instant
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,116, @param cutoverInstant instant when the gregorian chronology began
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,162,* Factory method returns instances of the default GJ cutover
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,163,"* chronology. This uses a cutover date of October 15, 1582 (Gregorian)"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,164,"* 00:00:00 UTC. For this value, October 4, 1582 (Julian) is followed by"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,165,"* October 15, 1582 (Gregorian)."
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,167,* <p>The first day of the week is designated to be
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,168,"* {@link DateTimeConstants#MONDAY Monday}, and the minimum days in the"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,169,* first week of the year is 4.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,171,* <p>The returned chronology is in the default time zone.
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,118,"utoverChronology(JulianChronology julian, GregorianChronology gregorian, long cutoverInstant) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,119,heckUTC(julian);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,120,heckUTC(gregorian);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,173,public static GJChronology getInstance() {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,174,"return getInstance(DateTimeZone.getDefault(), DEFAULT_CUTOVER, 4);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,122,f (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,123,hrow new IllegalArgumentException();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,178,* Factory method returns instances of the GJ cutover chronology. This uses
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,179,"* a cutover date of October 15, 1582 (Gregorian) 00:00:00 UTC. For this"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,180,"* value, October 4, 1582 (Julian) is followed by October 15, 1582"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,181,* (Gregorian).
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,183,* <p>The first day of the week is designated to be
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,184,"* {@link DateTimeConstants#MONDAY Monday}, and the minimum days in the"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,185,* first week of the year is 4.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,187,"* @param zone  the time zone to use, null is default"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,189,public static GJChronology getInstance(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,190,"return getInstance(zone, DEFAULT_CUTOVER, 4);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,194,* Factory method returns instances of the GJ cutover chronology. Any
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,195,* cutover date may be specified.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,197,* <p>The first day of the week is designated to be
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,198,"* {@link DateTimeConstants#MONDAY Monday}, and the minimum days in the"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,199,* first week of the year is 4.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,201,"* @param zone  the time zone to use, null is default"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,202,"* @param gregorianCutover  the cutover to use, null means default"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,204,"public static GJChronology getInstance(DateTimeZone zone,"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,205,ReadableInstant gregorianCutover)
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,207,"return getInstance(zone, gregorianCutover, 4);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,211,* Factory method returns instances of the GJ cutover chronology. Any
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,212,* cutover date may be specified.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,214,"* @param zone  the time zone to use, null is default"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,215,"* @param gregorianCutover  the cutover to use, null means default"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,216,* @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,218,"public static synchronized GJChronology getInstance(DateTimeZone zone,"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,219,"ReadableInstant gregorianCutover,"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,220,int minDaysInFirstWeek)
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,222,if (zone == null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,223,zone = DateTimeZone.getDefault();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,125,f (julian.isCenturyISO() != gregorian.isCenturyISO()) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,126,hrow new IllegalArgumentException();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,225,Instant cutoverInstant;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,226,if (gregorianCutover == null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,227,cutoverInstant = DEFAULT_CUTOVER;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,228,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,229,cutoverInstant = gregorianCutover.toInstant();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,129,JulianChronology = julian;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,130,GregorianChronology = gregorian;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,131,CutoverInstant = cutoverInstant;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,133,/ Compute difference between the chronologies at the cutover instant
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,134,GapDuration = cutoverInstant - julianToGregorianByYear(cutoverInstant);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,232,GJChronology chrono;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,234,ArrayList chronos = (ArrayList)cCache.get(zone);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,235,if (chronos == null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,236,chronos = new ArrayList(2);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,237,"cCache.put(zone, chronos);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,238,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,239,for (int i=chronos.size(); --i>=0; ) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,240,chrono = (GJChronology)chronos.get(i);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,241,if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,242,cutoverInstant.equals(chrono.getGregorianCutover())) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,244,return chrono;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,136,/ Begin field definitions.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,249,if (zone == DateTimeZone.UTC) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,250,chrono = new GJChronology
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,251,"(JulianChronology.getInstance(zone, minDaysInFirstWeek),"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,252,"GregorianChronology.getInstance(zone, minDaysInFirstWeek),"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,253,cutoverInstant);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,254,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,255,"chrono = getInstance(DateTimeZone.UTC, gregorianCutover, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,256,"chrono = new GJChronology(ZonedChronology.getInstance(chrono, zone));"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,138,/ First just copy all the Gregorian fields and then override those
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,139,/ that need special attention.
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,140,opyFields(gregorian);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,142,"/ Assuming cutover is at midnight, all time of day fields can be"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,143,/ gregorian since they are unaffected by cutover.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,259,chronos.add(chrono);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,145,/ Verify assumption.
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,146,f (gregorian.millisOfDay().get(cutoverInstant) == 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,147,"/ Cutover is sometime in the day, so cutover fields are required"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,148,/ for time of day.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,261,return chrono;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,150,"MillisOfSecondField = new CutoverField(julian.millisOfSecond(), iMillisOfSecondField);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,151,"MillisOfDayField = new CutoverField(julian.millisOfDay(), iMillisOfDayField);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,152,"SecondOfMinuteField = new CutoverField(julian.secondOfMinute(), iSecondOfMinuteField);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,153,"SecondOfDayField = new CutoverField(julian.secondOfDay(), iSecondOfDayField);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,154,"MinuteOfHourField = new CutoverField(julian.minuteOfHour(), iMinuteOfHourField);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,155,"MinuteOfDayField = new CutoverField(julian.minuteOfDay(), iMinuteOfDayField);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,156,"HourOfDayField = new CutoverField(julian.hourOfDay(), iHourOfDayField);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,157,"HourOfHalfdayField = new CutoverField(julian.hourOfHalfday(), iHourOfHalfdayField);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,158,"ClockhourOfDayField = new CutoverField(julian.clockhourOfDay(), iClockhourOfDayField);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,159,"ClockhourOfHalfdayField = new CutoverField(julian.clockhourOfHalfday(), iClockhourOfHalfdayField);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,160,"HalfdayOfDayField = new CutoverField(julian.halfdayOfDay(), iHalfdayOfDayField);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,265,* Factory method returns instances of the GJ cutover chronology. Any
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,266,* cutover date may be specified.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,268,"* @param zone  the time zone to use, null is default"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,269,* @param gregorianCutover  the cutover to use
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,270,* @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,272,"public static synchronized GJChronology getInstance(DateTimeZone zone,"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,273,"long gregorianCutover,"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,274,int minDaysInFirstWeek)
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,276,Instant cutoverInstant;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,277,if (gregorianCutover == DEFAULT_CUTOVER.getMillis()) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,278,cutoverInstant = null;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,279,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,280,cutoverInstant = new Instant(gregorianCutover);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,282,"return getInstance(zone, cutoverInstant, minDaysInFirstWeek);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,163,/ These fields just require basic cutover support.
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,165,"EraField = new CutoverField(julian.era(), gregorian.era());"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,166,"DayOfMonthField = new CutoverField(julian.dayOfMonth(), gregorian.dayOfMonth());"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,285,private JulianChronology iJulianChronology;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,286,private GregorianChronology iGregorianChronology;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,287,private Instant iCutoverInstant;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,169,/ DayOfYear and weekOfWeekyear require special handling since cutover
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,170,/ year has fewer days and weeks. Extend the cutover to the start of
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,171,/ the next year or weekyear. This keeps the sequence unbroken during
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,172,/ the cutover year.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,289,long iCutoverMillis;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,290,long iGapDuration;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,175,ong cutover = gregorian.year().roundCeiling(iCutoverInstant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,176,DayOfYearField = new CutoverField
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,177,"julian.dayOfYear(), gregorian.dayOfYear(), cutover);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,293,* @param julian chronology used before the cutover instant
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,294,* @param gregorian chronology used at and after the cutover instant
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,295,* @param cutoverInstant instant when the gregorian chronology began
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,297,"private GJChronology(JulianChronology julian,"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,298,"GregorianChronology gregorian,"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,299,Instant cutoverInstant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,300,"super(null, new Object[] {julian, gregorian, cutoverInstant});"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,181,ong cutover = gregorian.weekyear().roundCeiling(iCutoverInstant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,182,WeekOfWeekyearField = new CutoverField
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,183,"julian.weekOfWeekyear(), gregorian.weekOfWeekyear(), cutover, true);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,304,* Called when applying a time zone.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,306,private GJChronology(Chronology base) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,307,"super(base, null);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,186,/ These fields are special because they have imprecise durations. The
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,187,/ family of addition methods need special attention. Override affected
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,188,/ duration fields as well.
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,190,"YearField = new ImpreciseCutoverField(julian.year(), gregorian.year());"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,191,YearsField = iYearField.getDurationField();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,192,YearOfEraField = new ImpreciseCutoverField
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,193,"julian.yearOfEra(), gregorian.yearOfEra(), iYearsField);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,194,YearOfCenturyField = new ImpreciseCutoverField
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,195,"julian.yearOfCentury(), gregorian.yearOfCentury(), iYearsField);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,197,"CenturyOfEraField = new ImpreciseCutoverField(julian.centuryOfEra(), gregorian.centuryOfEra());"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,198,CenturiesField = iCenturyOfEraField.getDurationField();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,200,"MonthOfYearField = new ImpreciseCutoverField(julian.monthOfYear(), gregorian.monthOfYear());"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,201,MonthsField = iMonthOfYearField.getDurationField();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,203,"WeekyearField = new ImpreciseCutoverField(julian.weekyear(), gregorian.weekyear(), true);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,204,WeekyearsField = iWeekyearField.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,311,* Serialization singleton
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,313,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,314,"return getInstance(getDateTimeZone(), iCutoverInstant, getMinimumDaysInFirstWeek());"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,317,public DateTimeZone getDateTimeZone() {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,318,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,319,if ((base = getBase()) != null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,320,return base.getDateTimeZone();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,322,return DateTimeZone.UTC;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,325,// Conversion
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,328,* Gets the Chronology in the UTC time zone.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,330,* @return the chronology in UTC
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,209,eturn this;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,333,return withDateTimeZone(DateTimeZone.UTC);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,337,* Gets the Chronology in a specific time zone.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,339,"* @param zone  the zone to get the chronology in, null is default"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,340,* @return the chronology
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,342,public Chronology withDateTimeZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,343,if (zone == null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,344,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,346,if (zone == getDateTimeZone()) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,347,return this;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,349,"return getInstance(zone, iCutoverInstant, getMinimumDaysInFirstWeek());"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,355,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,356,if ((base = getBase()) != null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,357,"return base.getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,367,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,368,if ((base = getBase()) != null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,369,"return base.getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,381,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,382,if ((base = getBase()) != null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,383,"return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,234,f (instant < iCutoverInstant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,389,if (instant < iCutoverMillis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,238,f (instant >= iCutoverInstant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,393,if (instant >= iCutoverMillis) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,406,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,407,if ((base = getBase()) != null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,408,return base.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,409,"(instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,421,Chronology base;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,422,if ((base = getBase()) != null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,423,return base.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,424,"(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,425,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,264,ublic long getGregorianJulianCutoverMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,265,eturn iCutoverInstant;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,268,ublic boolean isCenturyISO() {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,269,eturn iGregorianChronology.isCenturyISO();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,433,* Gets the cutover instant between Gregorian and Julian chronologies.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,434,* @return the cutover instant
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,436,public Instant getGregorianCutover() {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,437,Instant cutover = iCutoverInstant;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,438,if (cutover == null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,439,iCutoverInstant = cutover = new Instant(iCutoverMillis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,441,return cutover;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,448,// Output
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,451,* Gets a debugging toString.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,453,* @return a debugging string
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,455,public String toString() {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,456,StringBuffer sb = new StringBuffer(60);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,457,"sb.append(""GJCutoverChronology"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,458,sb.append('[');
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,459,sb.append(getDateTimeZone().getID());
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,460,"sb.append("", "");"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,462,"sb.append(""cutover="");"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,463,ISODateTimeFormat format = ISODateTimeFormat.getInstance(withUTC());
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,464,DateTimePrinter printer;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,465,if (withUTC().getTimeOnlyMillis(iCutoverMillis) == 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,466,printer = format.date();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,467,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,468,printer = format.dateTime();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,470,"printer.printTo(sb, iCutoverMillis);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,472,"sb.append("", mdfw="");"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,473,sb.append(getMinimumDaysInFirstWeek());
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,474,sb.append(']');
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,476,return sb.toString();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,479,protected void assemble(Fields fields) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,480,if (getBase() != null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,481,return;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,484,Object[] params = (Object[])getParam();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,486,JulianChronology julian = (JulianChronology)params[0];
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,487,GregorianChronology gregorian = (GregorianChronology)params[1];
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,488,Instant cutoverInstant = (Instant)params[2];
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,489,iCutoverMillis = cutoverInstant.getMillis();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,491,if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,492,throw new IllegalArgumentException();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,495,iJulianChronology = julian;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,496,iGregorianChronology = gregorian;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,497,iCutoverInstant = cutoverInstant;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,499,// Compute difference between the chronologies at the cutover instant
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,500,iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,502,// Begin field definitions.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,504,// First just copy all the Gregorian fields and then override those
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,505,// that need special attention.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,506,fields.copyFieldsFrom(gregorian);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,508,"// Assuming cutover is at midnight, all time of day fields can be"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,509,// gregorian since they are unaffected by cutover.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,511,// Verify assumption.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,512,if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,513,"// Cutover is sometime in the day, so cutover fields are required"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,514,// for time of day.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,516,"fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,517,"fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,518,"fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,519,"fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,520,"fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,521,"fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,522,"fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,523,"fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,524,"fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,525,"fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,526,fields.clockhourOfHalfday);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,527,"fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,530,// These fields just require basic cutover support.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,532,"fields.era = new CutoverField(julian.era(), fields.era);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,533,"fields.dayOfMonth = new CutoverField(julian.dayOfMonth(), fields.dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,536,// DayOfYear and weekOfWeekyear require special handling since cutover
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,537,// year has fewer days and weeks. Extend the cutover to the start of
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,538,// the next year or weekyear. This keeps the sequence unbroken during
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,539,// the cutover year.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,542,long cutover = gregorian.year().roundCeiling(iCutoverMillis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,543,fields.dayOfYear = new CutoverField
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,544,"(julian.dayOfYear(), fields.dayOfYear, cutover);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,548,long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,549,fields.weekOfWeekyear = new CutoverField
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,550,"(julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,553,// These fields are special because they have imprecise durations. The
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,554,// family of addition methods need special attention. Override affected
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,555,// duration fields as well.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,557,"fields.year = new ImpreciseCutoverField(julian.year(), fields.year);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,558,fields.years = fields.year.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,559,fields.yearOfEra = new ImpreciseCutoverField
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,560,"(julian.yearOfEra(), fields.yearOfEra, fields.years);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,561,fields.yearOfCentury = new ImpreciseCutoverField
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,562,"(julian.yearOfCentury(), fields.yearOfCentury, fields.years);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,564,fields.centuryOfEra = new ImpreciseCutoverField
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,565,"(julian.centuryOfEra(), fields.centuryOfEra);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,566,fields.centuries = fields.centuryOfEra.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,568,fields.monthOfYear = new ImpreciseCutoverField
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,569,"(julian.monthOfYear(), fields.monthOfYear);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,570,fields.months = fields.monthOfYear.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,572,"fields.weekyear = new ImpreciseCutoverField(julian.weekyear(), fields.weekyear, true);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,573,fields.weekyears = fields.weekyear.getDurationField();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,311,"his(julianField, gregorianField, iCutoverInstant, false);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,612,"this(julianField, gregorianField, iCutoverMillis, false);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,320,"his(julianField, gregorianField, iCutoverInstant, convertByWeekyear);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,621,"this(julianField, gregorianField, iCutoverMillis, convertByWeekyear);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,323,"utoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverInstant) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,324,"his(julianField, gregorianField, cutoverInstant, false);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,624,"CutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,625,"this(julianField, gregorianField, cutoverMillis, false);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,328,"ong cutoverInstant, boolean convertByWeekyear) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,629,"long cutoverMillis, boolean convertByWeekyear) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,332,Cutover = cutoverInstant;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,633,iCutover = cutoverMillis;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,54,ackage org.joda.time.chrono.gj;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,54,package org.joda.time.chrono;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,57,mport org.joda.time.chrono.PreciseDurationDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,58,mport org.joda.time.chrono.Utils;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,57,import org.joda.time.field.PreciseDurationDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,72,rivate final ProlepticChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,71,private final AbstractGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,77,"JDayOfMonthDateTimeField(ProlepticChronology chronology, DurationField days) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,76,"GJDayOfMonthDateTimeField(AbstractGJChronology chronology, DurationField days) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,105,nt thisYear = iChronology.year().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,104,int thisYear = iChronology.getYear(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,54,ackage org.joda.time.chrono.gj;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,54,package org.joda.time.chrono;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,60,mport org.joda.time.chrono.PreciseDurationDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,61,mport org.joda.time.chrono.Utils;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,60,import org.joda.time.field.PreciseDurationDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,76,rivate final ProlepticChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,75,private final AbstractGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,81,"JDayOfWeekDateTimeField(ProlepticChronology chronology, DurationField days) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,80,"GJDayOfWeekDateTimeField(AbstractGJChronology chronology, DurationField days) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,93,"/ 1970-01-01 is day of week 4, Thursday."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,95,ong daysSince19700101;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,96,f (instant >= 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,97,aysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,98, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,99,aysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1))
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,100, DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,101,f (daysSince19700101 < -3) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,102,eturn 7 + (int) ((daysSince19700101 + 4) % 7);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,106,eturn 1 + (int) ((daysSince19700101 + 3) % 7);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,92,return iChronology.getDayOfWeek(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,54,ackage org.joda.time.chrono.gj;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,54,package org.joda.time.chrono;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,58,mport org.joda.time.chrono.PreciseDurationDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,59,mport org.joda.time.chrono.Utils;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,58,import org.joda.time.field.PreciseDurationDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,73,rivate final ProlepticChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,72,private final AbstractGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,78,"JDayOfYearDateTimeField(ProlepticChronology chronology, DurationField days) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,77,"GJDayOfYearDateTimeField(AbstractGJChronology chronology, DurationField days) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,90,ong dateInstant = iChronology.year().roundFloor(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,91,eturn (int) ((instant - dateInstant) / DateTimeConstants.MILLIS_PER_DAY) + 1;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,89,return iChronology.getDayOfYear(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,107,nt thisYear = iChronology.year().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,105,int thisYear = iChronology.getYear(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,54,ackage org.joda.time.chrono.gj;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,54,package org.joda.time.chrono;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,60,mport org.joda.time.chrono.AbstractDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,61,mport org.joda.time.chrono.UnsupportedDurationField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,62,mport org.joda.time.chrono.Utils;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,60,import org.joda.time.field.AbstractDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,61,import org.joda.time.field.UnsupportedDurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,62,import org.joda.time.field.FieldUtils;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,76,rivate final ProlepticChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,76,private final AbstractGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,81,JEraDateTimeField(ProlepticChronology chronology) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,81,GJEraDateTimeField(AbstractGJChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,96,f (iChronology.year().get(instant) <= 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,96,if (iChronology.getYear(instant) <= 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,116,"tils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,116,"FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,120,nt year = iChronology.year().get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,121,"eturn iChronology.year().set(instant, -year);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,120,int year = iChronology.getYear(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,121,"return iChronology.setYear(instant, -year);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,133,"eturn iChronology.year().set(0, 1);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,133,"return iChronology.setYear(0, 1);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,141,"eturn iChronology.year().set(0, 1);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,141,"return iChronology.setYear(0, 1);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,54,ackage org.joda.time.chrono.gj;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,54,package org.joda.time.chrono;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,62, Utility class used by a few of the DateTimeFields.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,62,* Utility class used by a few of the GJDateTimeFields.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,54,ackage org.joda.time.chrono.gj;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,54,package org.joda.time.chrono;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,61,mport org.joda.time.chrono.ImpreciseDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,62,mport org.joda.time.chrono.Utils;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,61,import org.joda.time.field.ImpreciseDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,62,import org.joda.time.field.FieldUtils;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,80,rivate final ProlepticChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,80,private final AbstractGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,85,JMonthOfYearDateTimeField(ProlepticChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,86,"uper(""monthOfYear"", ""months"", chronology.getRoughMillisPerMonth());"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,85,GJMonthOfYearDateTimeField(AbstractGJChronology chronology) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,86,"super(""monthOfYear"", ""months"", chronology.getAverageMillisPerMonth());"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,136,ong timePart = iChronology.millisOfDay().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,136,long timePart = iChronology.getMillisOfDay(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,141,nt thisYear = iChronology.year().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,141,int thisYear = iChronology.getYear(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,195,ong timePart = iChronology.millisOfDay().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,195,long timePart = iChronology.getMillisOfDay(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,197,nt thisYear = iChronology.year().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,197,int thisYear = iChronology.getYear(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,250,"eturn set(instant, Utils.getWrappedValue(get(instant), months, MIN, MAX));"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,250,"return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, MAX));"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,258,ateTimeField yearField = iChronology.year();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,259,nt minuendYear = yearField.get(minuendInstant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,258,int minuendYear = iChronology.getYear(minuendInstant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,261,nt subtrahendYear = yearField.get(subtrahendInstant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,260,int subtrahendYear = iChronology.getYear(subtrahendInstant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,275,// TODO: Don't depend on other fields
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,307,"tils.verifyValueBounds(this, month, MIN, MAX);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,307,"FieldUtils.verifyValueBounds(this, month, MIN, MAX);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,309,nt thisYear = iChronology.year().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,309,int thisYear = iChronology.getYear(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,319,Chronology.millisOfDay().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,319,iChronology.getMillisOfDay(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,331,nt thisYear = iChronology.year().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,331,int thisYear = iChronology.getYear(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,365,nt year = iChronology.year().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,365,int year = iChronology.getYear(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,54,ackage org.joda.time.chrono.gj;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,54,package org.joda.time.chrono;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,59,mport org.joda.time.chrono.PreciseDurationDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,60,mport org.joda.time.chrono.Utils;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,59,import org.joda.time.field.PreciseDurationDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,75,rivate final ProlepticChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,74,private final AbstractGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,80,"JWeekOfWeekyearDateTimeField(ProlepticChronology chronology, DurationField weeks) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,79,"GJWeekOfWeekyearDateTimeField(AbstractGJChronology chronology, DurationField weeks) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,93,nt year = iChronology.year().get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,95,ong firstWeekMillis1 = iChronology.getFirstWeekOfYearMillis(year);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,96,f (instant < firstWeekMillis1) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,97,eturn iChronology.getWeeksInYear(year - 1);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,99,ong firstWeekMillis2 = iChronology.getFirstWeekOfYearMillis(year + 1);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,100,f (instant >= firstWeekMillis2) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,101,eturn 1;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,103,eturn (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,92,return iChronology.getWeekOfWeekyear(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,136,nt thisYear = iChronology.weekyear().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,125,int thisYear = iChronology.getWeekyear(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,54,ackage org.joda.time.chrono.gj;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,54,package org.joda.time.chrono;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,59,mport org.joda.time.chrono.ImpreciseDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,60,mport org.joda.time.chrono.Utils;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,59,import org.joda.time.field.ImpreciseDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,60,import org.joda.time.field.FieldUtils;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,78,rivate final ProlepticChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,78,private final AbstractGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,83,JWeekyearDateTimeField(ProlepticChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,84,"uper(""weekyear"", ""weekyears"", chronology.getRoughMillisPerYear());"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,83,GJWeekyearDateTimeField(AbstractGJChronology chronology) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,84,"super(""weekyear"", ""weekyears"", chronology.getAverageMillisPerYear());"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,100,nt week = iChronology.weekOfWeekyear().get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,101,f (week == 1) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,102,eturn iChronology.year().get(instant + DateTimeConstants.MILLIS_PER_WEEK);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,103, else if (week > 51) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,104,eturn iChronology.year().get(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,105, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,106,eturn iChronology.year().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,100,return iChronology.getWeekyear(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,126,"eturn add(instant, Utils.safeToInt(value));"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,119,"return add(instant, FieldUtils.safeToInt(value));"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,175,"tils.verifyValueBounds(this, Math.abs(year),"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,176,"Chronology.getMinYear(), iChronology.getMaxYear());"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,168,"FieldUtils.verifyValueBounds(this, Math.abs(year),"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,169,"iChronology.getMinYear(), iChronology.getMaxYear());"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,187,nt thisDow = iChronology.dayOfWeek().get( instant );
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,180,int thisDow = iChronology.getDayOfWeek(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,201,nt setToWeek = iChronology.weekOfWeekyear().get( instant );
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,194,int setToWeek = iChronology.getWeekOfWeekyear(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,215,"orkInstant = iChronology.year().set( workInstant, year );"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,208,"workInstant = iChronology.setYear( workInstant, year );"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,220,nt workWoyYear = iChronology.weekyear().get( workInstant );
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,213,int workWoyYear = get( workInstant );
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,236,nt currentWoyWeek = iChronology.weekOfWeekyear().get( workInstant );
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,229,int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,238,// TODO: Don't depend on other fields
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,257,eturn iChronology.weekOfWeekyear().getMaximumValue(instant) > 52;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,251,return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,261,eturn iChronology.weekOfWeekyear().getMaximumValue(instant) - 52;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,255,return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,277,ateTimeField wowField = iChronology.weekOfWeekyear();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,278,nstant = wowField.roundFloor(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,279,nt wow = wowField.get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,271,// TODO: Don't depend on other fields
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,272,instant = iChronology.weekOfWeekyear().roundFloor(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,273,int wow = iChronology.getWeekOfWeekyear(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,281,"nstant = wowField.add(instant, 1 - wow);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,275,instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,54,ackage org.joda.time.chrono.gj;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,54,package org.joda.time.chrono;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,58,mport org.joda.time.chrono.ImpreciseDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,59,mport org.joda.time.chrono.Utils;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,58,import org.joda.time.field.ImpreciseDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,59,import org.joda.time.field.FieldUtils;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,75,rivate final ProlepticChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,75,private final AbstractGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,80,JYearDateTimeField(ProlepticChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,81,"uper(""year"", ""years"", chronology.getRoughMillisPerYear());"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,80,GJYearDateTimeField(AbstractGJChronology chronology) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,81,"super(""year"", ""years"", chronology.getAverageMillisPerYear());"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,96,"/ Get an initial estimate of the year, and the millis value that"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,97,/ represents the start of that year. Then verify estimate and fix if
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,98,/ necessary.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,100,nt year;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,102,ong unitMillis = getDurationUnitMillis();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,103,f (instant >= 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,104,ear = 1970 + (int) (instant / unitMillis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,105, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,106,ear = 1970 + (int) ((instant - unitMillis + 1) / unitMillis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,109,ong yearStart = iChronology.getYearMillis(year);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,110,f ((yearStart ^ instant) < 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,111,"/ Sign mismatch, operation overflowed."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,112,eturn getOverflow(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,115,ong diff = instant - yearStart;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,117,f (diff < 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,118,/ Subtract one year to fix estimate.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,119,ear--;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,120, else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,121,/ One year may need to be added to fix estimate.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,122,ong oneYear;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,123,f (iChronology.isLeapYear(year)) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,124,neYear = DateTimeConstants.MILLIS_PER_DAY * 366L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,125, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,126,neYear = DateTimeConstants.MILLIS_PER_DAY * 365L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,129,earStart += oneYear;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,130,f ((yearStart ^ instant) < 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,131,"/ Sign mismatch, operation overflowed."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,132,eturn getOverflow(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,135,f (yearStart <= instant) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,136,"/ Didn't go too far, so actually add one year."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,137,ear++;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,141,eturn year;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,144,rivate int getOverflow(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,145,f (instant > 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,146,nt year = iChronology.getMaxYear();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,147,ong yearStartMillis = iChronology.getYearMillis(year);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,148,f (iChronology.isLeapYear(year)) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,149,earStartMillis += DateTimeConstants.MILLIS_PER_DAY * 366L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,150, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,151,earStartMillis += DateTimeConstants.MILLIS_PER_DAY * 365L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,153,ong yearEndMillis = yearStartMillis - 1;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,155,f (instant <= yearEndMillis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,156,eturn year;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,159,hrow new IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,160,"""Instant too large: "" + instant + "" > "" + yearEndMillis);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,161, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,162,nt year = iChronology.getMinYear();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,163,ong yearStartMillis = iChronology.getYearMillis(year);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,164,f (instant >= yearStartMillis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,165,eturn year;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,168,hrow new IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,169,"""Instant too small: "" + instant + "" < "" + yearStartMillis);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,96,return iChronology.getYear(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,191,"eturn add(instant, Utils.safeToInt(years));"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,117,"return add(instant, FieldUtils.safeToInt(years));"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,207,nt thisYear = iChronology.year().get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,208,nt wrappedYear = Utils.getWrappedValue
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,133,int thisYear = iChronology.getYear(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,134,int wrappedYear = FieldUtils.getWrappedValue
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,252,tils.verifyValueBounds
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,178,FieldUtils.verifyValueBounds
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,255,nt dayOfYear = iChronology.dayOfYear().get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,256,nt millisOfDay = iChronology.millisOfDay().get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,258,f (dayOfYear > (31 + 28)) { // after Feb 28
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,259,f (isLeap(instant)) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,260,/ Old date is Feb 29 or later.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,261,f (!iChronology.isLeapYear(year)) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,262,"/ Moving to a non-leap year, Feb 29 does not exist."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,263,ayOfYear--;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,265, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,266,/ Old date is Mar 01 or later.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,267,f (iChronology.isLeapYear(year)) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,268,"/ Moving to a leap year, account for Feb 29."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,269,ayOfYear++;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,274,"nstant = iChronology.getYearMonthDayMillis(year, 1, dayOfYear);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,275,nstant += millisOfDay;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,277,eturn instant;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,180,"return iChronology.setYear(instant, year);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,54,ackage org.joda.time.chrono.gj;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,54,package org.joda.time.chrono;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,58,mport org.joda.time.chrono.DecoratedDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,59,mport org.joda.time.chrono.Utils;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,58,import org.joda.time.field.DecoratedDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,59,import org.joda.time.field.FieldUtils;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,70,rivate final ProlepticChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,70,private final AbstractGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,75,"JYearOfEraDateTimeField(DateTimeField yearField, ProlepticChronology chronology) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,75,"GJYearOfEraDateTimeField(DateTimeField yearField, AbstractGJChronology chronology) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,139,"tils.verifyValueBounds(this, year, 1, getMaximumValue());"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,140,f (iChronology.era().get(instant) == DateTimeConstants.BCE) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,141,"eturn super.set(instant, 1 - year);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,142, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,143,"eturn super.set(instant, year);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,139,"FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,140,if (iChronology.getYear(instant) <= 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,141,year = 1 - year;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,143,"return super.set(instant, year);"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,56,import java.util.HashMap;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,57,import java.util.Map;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,59,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,60,import org.joda.time.DateTimeConstants;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,61,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,62,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,63,import org.joda.time.field.DividedDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,64,import org.joda.time.field.OffsetDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,65,import org.joda.time.field.RemainderDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,69,* @author Guy Allard
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,70,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,71,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,73,public final class GregorianChronology extends AbstractGJChronology {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,75,static final long serialVersionUID = -861407383323710522L;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,77,private static final long MILLIS_PER_YEAR =
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,78,(long) (365.2425 * DateTimeConstants.MILLIS_PER_DAY);
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,80,private static final long MILLIS_PER_MONTH =
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,81,(long) (365.2425 * DateTimeConstants.MILLIS_PER_DAY / 12);
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,83,/** Singleton instance of a UTC GregorianChronology */
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,84,private static final GregorianChronology INSTANCE_UTC;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,86,/** Cache of zone to chronology arrays */
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,87,private static final Map cCache = new HashMap();
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,89,static {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,90,INSTANCE_UTC = getInstance(DateTimeZone.UTC);
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,94,* Gets an instance of the GregorianChronology.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,95,* The time zone of the returned instance is UTC.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,97,* @return a singleton UTC instance of the chronology
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,99,public static GregorianChronology getInstanceUTC() {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,100,return INSTANCE_UTC;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,104,* Gets an instance of the GregorianChronology in the default time zone.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,106,* @return a chronology in the default time zone
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,108,public static GregorianChronology getInstance() {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,109,"return getInstance(DateTimeZone.getDefault(), 4);"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,113,* Gets an instance of the GregorianChronology in the given time zone.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,115,"* @param zone  the time zone to get the chronology in, null is default"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,116,* @return a chronology in the specified time zone
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,118,public static GregorianChronology getInstance(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,119,"return getInstance(zone, 4);"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,123,* Gets an instance of the GregorianChronology in the given time zone.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,125,"* @param zone  the time zone to get the chronology in, null is default"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,126,* @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,127,* @return a chronology in the specified time zone
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,129,"public static GregorianChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,130,if (zone == null) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,131,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,133,GregorianChronology chrono;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,134,synchronized (cCache) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,135,GregorianChronology[] chronos = (GregorianChronology[]) cCache.get(zone);
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,136,if (chronos == null) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,137,chronos = new GregorianChronology[7];
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,138,"cCache.put(zone, chronos);"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,140,try {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,141,chrono = chronos[minDaysInFirstWeek - 1];
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,142,} catch (ArrayIndexOutOfBoundsException e) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,143,throw new IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,144,"(""Invalid min days in first week: "" + minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,146,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,147,if (zone == DateTimeZone.UTC) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,148,"chrono = new GregorianChronology(null, null, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,149,} else {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,150,"chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,151,chrono = new GregorianChronology
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,152,"(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,154,chronos[minDaysInFirstWeek - 1] = chrono;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,157,return chrono;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,160,// Constructors and instance variables
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,164,* Restricted constructor
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,166,"private GregorianChronology(Chronology base, Object param, int minDaysInFirstWeek) {"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,167,"super(base, param, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,171,* Serialization singleton
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,173,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,174,return getInstance(getBase().getDateTimeZone());
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,177,// Conversion
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,180,* Gets the Chronology in the UTC time zone.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,182,* @return the chronology in UTC
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,184,public Chronology withUTC() {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,185,return INSTANCE_UTC;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,189,* Gets the Chronology in a specific time zone.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,191,"* @param zone  the zone to get the chronology in, null is default"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,192,* @return the chronology
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,194,public Chronology withDateTimeZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,195,if (zone == null) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,196,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,198,if (zone == getDateTimeZone()) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,199,return this;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,201,return getInstance(zone);
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,204,protected void assemble(Fields fields) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,205,if (getBase() == null) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,206,super.assemble(fields);
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,210,boolean isLeapYear(int year) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,211,return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,214,long calculateFirstDayOfYearMillis(int year) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,215,// Calculate relative to 2000 as that is on a 400 year boundary
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,216,// and that makes the sum easier
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,217,int relativeYear = year - 2000;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,218,// Initial value is just temporary.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,219,int leapYears = relativeYear / 100;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,220,if (relativeYear <= 0) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,221,// Add 3 before shifting right since /4 and >>2 behave differently
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,222,// on negative numbers. When the expression is written as
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,223,"// (relativeYear / 4) - (relativeYear / 100) + (relativeYear / 400),"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,224,"// it works for both positive and negative values, except this optimization"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,225,// eliminates two divisions.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,226,leapYears = ((relativeYear + 3) >> 2) - leapYears + ((leapYears + 3) >> 2);
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,227,} else {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,228,leapYears = (relativeYear >> 2) - leapYears + (leapYears >> 2);
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,229,// For post 2000 an adjustment is needed as jan1st is before leap day
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,230,if (!isLeapYear(year)) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,231,leapYears++;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,235,long millis = (relativeYear * 365L + leapYears)
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,236,* (long)DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,238,// Previous line was reduced from this to eliminate a multiplication.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,239,// millis = ((relativeYear - leapYears) * 365L + leapYears * 366) * MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,240,// (x - y)*c + y*(c + 1) => x*c - y*c + y*c + y => x*c + y
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,242,return millis + MILLIS_1970_TO_2000;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,245,int getMinYear() {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,246,// The lowest year that can be fully supported.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,247,return -292275054;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,250,int getMaxYear() {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,251,// The highest year that can be fully supported.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,252,return 292278993;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,255,long getAverageMillisPerYear() {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,256,return MILLIS_PER_YEAR;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,259,long getAverageMillisPerMonth() {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,260,return MILLIS_PER_MONTH;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,263,long getApproxMillisAtEpoch() {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,264,return 1970L * MILLIS_PER_YEAR;
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,54,ackage org.joda.time.chrono.iso;
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,54,package org.joda.time.chrono;
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,65,mport org.joda.time.chrono.DelegatedChronology;
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,66,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,65,import org.joda.time.field.DividedDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,66,import org.joda.time.field.RemainderDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,80,ublic final class ISOChronology extends DelegatedChronology {
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,80,public final class ISOChronology extends AssembledChronology {
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,86,"ew ISOChronology(GJChronology.getInstance(DateTimeZone.UTC, Long.MIN_VALUE, true));"
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,86,new ISOChronology(GregorianChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,136,hrono = new ISOChronology
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,137,"GJChronology.getInstance(zone, Long.MIN_VALUE, true));"
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,136,"chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));"
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,148, Restricted constructor
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,150,rivate ISOChronology(GJChronology gjChronology) {
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,151,uper(gjChronology);
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,155, Serialize ISOChronology instances using a small stub. This reduces the
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,156," serialized size, and deserialized instances come from the cache."
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,148,* Restricted constructor
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,158,rivate Object writeReplace() {
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,159,eturn new Stub(getDateTimeZone());
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,150,private ISOChronology(Chronology base) {
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,151,"super(base, null);"
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,197,protected void assemble(Fields fields) {
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,198,if (getBase().getDateTimeZone() == DateTimeZone.UTC) {
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,199,// Use zero based century and year of century.
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,200,fields.centuryOfEra = new DividedDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,201,"(fields.yearOfEra, ""centuryOfEra"", ""centuries"", 100);"
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,202,fields.yearOfCentury = new RemainderDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,203,"((DividedDateTimeField)fields.centuryOfEra, ""yearOfCentury"");"
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,205,fields.centuries = fields.centuryOfEra.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,210,* Serialize ISOChronology instances using a small stub. This reduces the
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,211,"* serialized size, and deserialized instances come from the cache."
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,213,private Object writeReplace() {
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,214,return new Stub(getDateTimeZone());
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,56,import java.util.HashMap;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,57,import java.util.Map;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,59,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,60,import org.joda.time.DateTimeConstants;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,61,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,62,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,63,import org.joda.time.field.DelegatedDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,64,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,68,* @author Guy Allard
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,69,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,70,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,72,public final class JulianChronology extends AbstractGJChronology {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,74,static final long serialVersionUID = -8731039522547897247L;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,76,private static final long MILLIS_PER_YEAR =
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,77,(long) (365.25 * DateTimeConstants.MILLIS_PER_DAY);
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,79,private static final long MILLIS_PER_MONTH =
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,80,(long) (365.25 * DateTimeConstants.MILLIS_PER_DAY / 12);
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,82,/** Singleton instance of a UTC JulianChronology */
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,83,private static final JulianChronology INSTANCE_UTC;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,85,/** Cache of zone to chronology arrays */
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,86,private static final Map cCache = new HashMap();
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,88,static {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,89,INSTANCE_UTC = getInstance(DateTimeZone.UTC);
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,92,static int adjustYearForSet(int year) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,93,if (year <= 0) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,94,if (year == 0) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,95,"throw new IllegalArgumentException(""Invalid year: "" + year);"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,97,year++;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,99,return year;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,103,* Gets an instance of the JulianChronology.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,104,* The time zone of the returned instance is UTC.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,106,* @return a singleton UTC instance of the chronology
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,108,public static JulianChronology getInstanceUTC() {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,109,return INSTANCE_UTC;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,113,* Gets an instance of the JulianChronology in the default time zone.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,115,* @return a chronology in the default time zone
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,117,public static JulianChronology getInstance() {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,118,"return getInstance(DateTimeZone.getDefault(), 4);"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,122,* Gets an instance of the JulianChronology in the given time zone.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,124,"* @param zone  the time zone to get the chronology in, null is default"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,125,* @return a chronology in the specified time zone
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,127,public static JulianChronology getInstance(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,128,"return getInstance(zone, 4);"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,132,* Gets an instance of the JulianChronology in the given time zone.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,134,"* @param zone  the time zone to get the chronology in, null is default"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,135,* @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,136,* @return a chronology in the specified time zone
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,138,"public static JulianChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,139,if (zone == null) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,140,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,142,JulianChronology chrono;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,143,synchronized (cCache) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,144,JulianChronology[] chronos = (JulianChronology[]) cCache.get(zone);
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,145,if (chronos == null) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,146,chronos = new JulianChronology[7];
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,147,"cCache.put(zone, chronos);"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,149,try {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,150,chrono = chronos[minDaysInFirstWeek - 1];
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,151,} catch (ArrayIndexOutOfBoundsException e) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,152,throw new IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,153,"(""Invalid min days in first week: "" + minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,155,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,156,if (zone == DateTimeZone.UTC) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,157,"chrono = new JulianChronology(null, null, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,158,} else {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,159,"chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,160,chrono = new JulianChronology
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,161,"(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,163,chronos[minDaysInFirstWeek - 1] = chrono;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,166,return chrono;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,169,// Constructors and instance variables
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,173,* Restricted constructor
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,175,"JulianChronology(Chronology base, Object param, int minDaysInFirstWeek) {"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,176,"super(base, param, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,180,* Serialization singleton
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,182,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,183,return getInstance(getBase().getDateTimeZone());
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,186,// Conversion
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,189,* Gets the Chronology in the UTC time zone.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,191,* @return the chronology in UTC
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,193,public Chronology withUTC() {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,194,return INSTANCE_UTC;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,198,* Gets the Chronology in a specific time zone.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,200,"* @param zone  the zone to get the chronology in, null is default"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,201,* @return the chronology
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,203,public Chronology withDateTimeZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,204,if (zone == null) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,205,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,207,if (zone == getDateTimeZone()) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,208,return this;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,210,return getInstance(zone);
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,213,"public long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,214,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,216,"return super.getDateOnlyMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,219,boolean isLeapYear(int year) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,220,return (year & 3) == 0;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,223,long calculateFirstDayOfYearMillis(int year) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,224,// Java epoch is 1970-01-01 Gregorian which is 1969-12-19 Julian.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,225,// Calculate relative to the nearest leap year and account for the
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,226,// difference later.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,228,int relativeYear = year - 1968;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,229,int leapYears;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,230,if (relativeYear <= 0) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,231,// Add 3 before shifting right since /4 and >>2 behave differently
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,232,// on negative numbers.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,233,leapYears = (relativeYear + 3) >> 2;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,234,} else {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,235,leapYears = relativeYear >> 2;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,236,// For post 1968 an adjustment is needed as jan1st is before leap day
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,237,if (!isLeapYear(year)) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,238,leapYears++;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,242,long millis = (relativeYear * 365L + leapYears)
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,243,* (long)DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,245,// Adjust to account for difference between 1968-01-01 and 1969-12-19.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,247,return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,250,int getMinYear() {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,251,// The lowest year that can be fully supported.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,252,return -292269053;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,255,int getMaxYear() {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,256,// The highest year that can be fully supported.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,257,return 292272992;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,260,long getAverageMillisPerYear() {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,261,return MILLIS_PER_YEAR;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,264,long getAverageMillisPerMonth() {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,265,return MILLIS_PER_MONTH;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,268,long getApproxMillisAtEpoch() {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,269,return 1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,272,protected void assemble(Fields fields) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,273,if (getBase() == null) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,274,super.assemble(fields);
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,275,// Julian chronology has no year zero.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,276,"fields.year = new NoYearZeroField(this, fields.year);"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,277,"fields.weekyear = new NoWeekyearZeroField(this, fields.weekyear);"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,281,static class NoYearZeroField extends DelegatedDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,282,static final long serialVersionUID = -8869148464118507846L;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,284,final AbstractGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,285,private transient int iMinYear;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,287,"NoYearZeroField(AbstractGJChronology chronology, DateTimeField field) {"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,288,super(field);
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,289,iChronology = chronology;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,290,int min = super.getMinimumValue();
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,291,if (min < 0) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,292,iMinYear = min - 1;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,293,} else if (min == 0) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,294,iMinYear = 1;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,295,} else {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,296,iMinYear = min;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,300,public int get(long millis) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,301,int year = super.get(millis);
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,302,if (year <= 0) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,303,year--;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,305,return year;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,308,"public long set(long millis, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,309,"FieldUtils.verifyValueBounds(this, year, iMinYear, getMaximumValue());"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,310,"return super.set(millis, adjustYearForSet(year));"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,313,public int getMinimumValue() {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,314,return iMinYear;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,317,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,318,return iChronology.year();
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,322,static class NoWeekyearZeroField extends NoYearZeroField {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,323,static final long serialVersionUID = -5013429014495501104L;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,325,"NoWeekyearZeroField(AbstractGJChronology chronology, DateTimeField field) {"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,326,"super(chronology, field);"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,329,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,330,return iChronology.weekyear();
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,59,import org.joda.time.field.LenientDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,69,ublic class LenientChronology extends DelegatedChronology {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,70,public final class LenientChronology extends AssembledChronology {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,73,rivate transient DateTimeField iYearField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,74,rivate transient DateTimeField iYearOfEraField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,75,rivate transient DateTimeField iYearOfCenturyField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,76,rivate transient DateTimeField iCenturyOfEraField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,77,rivate transient DateTimeField iEraField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,78,rivate transient DateTimeField iDayOfWeekField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,79,rivate transient DateTimeField iDayOfMonthField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,80,rivate transient DateTimeField iDayOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,81,rivate transient DateTimeField iMonthOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,82,rivate transient DateTimeField iWeekOfWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,83,rivate transient DateTimeField iWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,85,rivate transient DateTimeField iMillisOfSecondField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,86,rivate transient DateTimeField iMillisOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,87,rivate transient DateTimeField iSecondOfMinuteField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,88,rivate transient DateTimeField iSecondOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,89,rivate transient DateTimeField iMinuteOfHourField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,90,rivate transient DateTimeField iMinuteOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,91,rivate transient DateTimeField iHourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,92,rivate transient DateTimeField iHourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,93,rivate transient DateTimeField iClockhourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,94,rivate transient DateTimeField iClockhourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,95,rivate transient DateTimeField iHalfdayOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,97,rivate transient Chronology iWithUTC;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,102, @param chrono the chronology
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,77,* @param base the chronology to wrap
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,105,ublic LenientChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,106,uper(chrono);
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,109,ublic Chronology withUTC() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,110,f (iWithUTC == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,111,WithUTC = new LenientChronology(getWrappedChronology().withUTC());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,80,public static LenientChronology getInstance(Chronology base) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,81,if (base == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,82,"throw new IllegalArgumentException(""Must supply a chronology"");"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,113,eturn iWithUTC;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,116,ublic Chronology withDateTimeZone(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,117,eturn new LenientChronology(getWrappedChronology().withDateTimeZone(zone));
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,121, Overridden to ensure lenient fields are used.
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,123,"ublic long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,124,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,126,"eturn getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,130, Overridden to ensure lenient fields are used.
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,132,"ublic long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,133,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,134,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,136,"ong instant = hourOfDay().set(0, hourOfDay);"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,137,"nstant = minuteOfHour().set(instant, minuteOfHour);"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,138,"nstant = secondOfMinute().set(instant, secondOfMinute);"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,139,"eturn millisOfSecond().set(instant, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,143, Overridden to ensure lenient fields are used.
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,145,"ublic long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,146,nt millisOfDay)
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,147,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,149,"ong instant = year().set(0, year);"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,150,"nstant = monthOfYear().set(instant, monthOfYear);"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,151,"nstant = dayOfMonth().set(instant, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,152,"eturn millisOfDay().set(instant, millisOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,84,return new LenientChronology(base);
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,156, Overridden to ensure lenient fields are used.
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,158,"ublic long getDateTimeMillis(long instant,"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,159,"nt hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,160,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,161,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,163,"nstant = hourOfDay().set(instant, hourOfDay);"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,164,"nstant = minuteOfHour().set(instant, minuteOfHour);"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,165,"nstant = secondOfMinute().set(instant, secondOfMinute);"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,166,"eturn millisOfSecond().set(instant, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,87,private transient Chronology iWithUTC;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,170, Overridden to ensure lenient fields are used.
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,90,* Create a LenientChronology for any chronology.
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,92,* @param base the chronology to wrap
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,172,"ublic long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,173,"nt hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,174,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,175,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,177,"ong instant = year().set(0, year);"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,178,"nstant = monthOfYear().set(instant, monthOfYear);"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,179,"nstant = dayOfMonth().set(instant, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,180,"nstant = hourOfDay().set(instant, hourOfDay);"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,181,"nstant = minuteOfHour().set(instant, minuteOfHour);"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,182,"nstant = secondOfMinute().set(instant, secondOfMinute);"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,183,"eturn millisOfSecond().set(instant, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,186,/ Milliseconds
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,189,ublic DateTimeField millisOfSecond() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,190,f (iMillisOfDayField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,191,MillisOfSecondField = LenientDateTimeField.getInstance(super.millisOfSecond());
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,193,eturn iMillisOfSecondField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,196,ublic DateTimeField millisOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,197,f (iMillisOfDayField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,198,MillisOfDayField = LenientDateTimeField.getInstance(super.millisOfDay());
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,200,eturn iMillisOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,203,/ Seconds
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,206,ublic DateTimeField secondOfMinute() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,207,f (iSecondOfMinuteField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,208,SecondOfMinuteField = LenientDateTimeField.getInstance(super.secondOfMinute());
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,210,eturn iSecondOfMinuteField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,213,ublic DateTimeField secondOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,214,f (iSecondOfDayField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,215,SecondOfDayField = LenientDateTimeField.getInstance(super.secondOfDay());
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,217,eturn iSecondOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,220,/ Minutes
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,223,ublic DateTimeField minuteOfHour() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,224,f (iMinuteOfHourField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,225,MinuteOfHourField = LenientDateTimeField.getInstance(super.minuteOfHour());
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,227,eturn iMinuteOfHourField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,94,private LenientChronology(Chronology base) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,95,"super(base, null);"
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,230,ublic DateTimeField minuteOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,231,f (iMinuteOfDayField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,232,MinuteOfDayField = LenientDateTimeField.getInstance(super.minuteOfDay());
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,234,eturn iMinuteOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,237,/ Hours
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,240,ublic DateTimeField hourOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,241,f (iHourOfDayField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,242,HourOfDayField = LenientDateTimeField.getInstance(super.hourOfDay());
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,244,eturn iHourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,247,ublic DateTimeField clockhourOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,248,f (iClockhourOfDayField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,249,ClockhourOfDayField = LenientDateTimeField.getInstance(super.clockhourOfDay());
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,251,eturn iClockhourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,254,ublic DateTimeField hourOfHalfday() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,255,f (iHourOfHalfdayField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,256,HourOfHalfdayField = LenientDateTimeField.getInstance(super.hourOfHalfday());
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,258,eturn iHourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,261,ublic DateTimeField clockhourOfHalfday() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,262,f (iClockhourOfHalfdayField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,263,ClockhourOfHalfdayField =
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,264,enientDateTimeField.getInstance(super.clockhourOfHalfday());
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,266,eturn iClockhourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,269,ublic DateTimeField halfdayOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,270,f (iHalfdayOfDayField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,271,HalfdayOfDayField = LenientDateTimeField.getInstance(super.halfdayOfDay());
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,273,eturn iHalfdayOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,276,/ Day
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,279,ublic DateTimeField dayOfWeek() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,280,f (iDayOfWeekField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,281,DayOfWeekField = LenientDateTimeField.getInstance(super.dayOfWeek());
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,283,eturn iDayOfWeekField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,286,ublic DateTimeField dayOfMonth() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,287,f (iDayOfMonthField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,288,DayOfMonthField = LenientDateTimeField.getInstance(super.dayOfMonth());
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,290,eturn iDayOfMonthField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,293,ublic DateTimeField dayOfYear() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,294,f (iDayOfYearField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,295,DayOfYearField = LenientDateTimeField.getInstance(super.dayOfYear());
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,297,eturn iDayOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,300,/ Week
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,303,ublic DateTimeField weekOfWeekyear() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,304,f (iWeekOfWeekyearField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,305,WeekOfWeekyearField = LenientDateTimeField.getInstance(super.weekOfWeekyear());
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,307,eturn iWeekOfWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,310,ublic DateTimeField weekyear() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,311,f (iWeekyearField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,312,WeekyearField = LenientDateTimeField.getInstance(super.weekyear());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,98,public Chronology withUTC() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,99,if (iWithUTC == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,100,if (getDateTimeZone() == DateTimeZone.UTC) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,101,iWithUTC = this;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,102,} else {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,103,iWithUTC = LenientChronology.getInstance(getBase().withUTC());
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,314,eturn iWeekyearField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,106,return iWithUTC;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,317,/ Month
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,320,ublic DateTimeField monthOfYear() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,321,f (iMonthOfYearField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,322,MonthOfYearField = LenientDateTimeField.getInstance(super.monthOfYear());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,109,public Chronology withDateTimeZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,110,if (zone == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,111,zone = DateTimeZone.getDefault();
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,324,eturn iMonthOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,327,/ Year
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,330,ublic DateTimeField year() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,331,f (iYearField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,332,YearField = LenientDateTimeField.getInstance(super.year());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,113,if (zone == DateTimeZone.UTC) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,114,return withUTC();
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,334,eturn iYearField;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,337,ublic DateTimeField yearOfEra() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,338,f (iYearOfEraField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,339,YearOfEraField = LenientDateTimeField.getInstance(super.yearOfEra());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,116,if (zone == getDateTimeZone()) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,117,return this;
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,341,eturn iYearOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,119,return LenientChronology.getInstance(getBase().withDateTimeZone(zone));
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,344,ublic DateTimeField yearOfCentury() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,345,f (iYearOfCenturyField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,346,YearOfCenturyField = LenientDateTimeField.getInstance(super.yearOfCentury());
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,348,eturn iYearOfCenturyField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,122,protected void assemble(Fields fields) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,123,fields.year = convertField(fields.year);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,124,fields.yearOfEra = convertField(fields.yearOfEra);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,125,fields.yearOfCentury = convertField(fields.yearOfCentury);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,126,fields.centuryOfEra = convertField(fields.centuryOfEra);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,127,fields.era = convertField(fields.era);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,128,fields.dayOfWeek = convertField(fields.dayOfWeek);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,129,fields.dayOfMonth = convertField(fields.dayOfMonth);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,130,fields.dayOfYear = convertField(fields.dayOfYear);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,131,fields.monthOfYear = convertField(fields.monthOfYear);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,132,fields.weekOfWeekyear = convertField(fields.weekOfWeekyear);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,133,fields.weekyear = convertField(fields.weekyear);
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,351,ublic DateTimeField centuryOfEra() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,352,f (iCenturyOfEraField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,353,CenturyOfEraField = LenientDateTimeField.getInstance(super.centuryOfEra());
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,355,eturn iCenturyOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,135,fields.millisOfSecond = convertField(fields.millisOfSecond);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,136,fields.millisOfDay = convertField(fields.millisOfDay);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,137,fields.secondOfMinute = convertField(fields.secondOfMinute);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,138,fields.secondOfDay = convertField(fields.secondOfDay);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,139,fields.minuteOfHour = convertField(fields.minuteOfHour);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,140,fields.minuteOfDay = convertField(fields.minuteOfDay);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,141,fields.hourOfDay = convertField(fields.hourOfDay);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,142,fields.hourOfHalfday = convertField(fields.hourOfHalfday);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,143,fields.clockhourOfDay = convertField(fields.clockhourOfDay);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,144,fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,145,fields.halfdayOfDay = convertField(fields.halfdayOfDay);
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,358,ublic DateTimeField era() {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,359,f (iEraField == null) {
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,360,EraField = LenientDateTimeField.getInstance(super.era());
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,362,eturn iEraField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,148,private static final DateTimeField convertField(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,149,return LenientDateTimeField.getInstance(field);
False,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,366,"eturn ""LenientChronology["" + getWrappedChronology().toString() + ']';"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,153,"return ""LenientChronology["" + getBase().toString() + ']';"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,70,import org.joda.time.field.DecoratedDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,71,import org.joda.time.field.DecoratedDurationField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,88,ublic class LimitChronology extends Chronology {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,90,public final class LimitChronology extends AssembledChronology {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,92,rivate final Chronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,94,inal DateTime iLowerLimit;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,95,inal DateTime iUpperLimit;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,97,rivate transient LimitChronology iWithUTC;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,99,rivate transient DurationField iErasField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,100,rivate transient DurationField iCenturiesField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,101,rivate transient DurationField iYearsField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,102,rivate transient DurationField iMonthsField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,103,rivate transient DurationField iWeekyearsField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,104,rivate transient DurationField iWeeksField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,105,rivate transient DurationField iDaysField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,107,rivate transient DurationField iHoursField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,108,rivate transient DurationField iMinutesField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,109,rivate transient DurationField iSecondsField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,110,rivate transient DurationField iMillisField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,112,rivate transient DateTimeField iYearField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,113,rivate transient DateTimeField iYearOfEraField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,114,rivate transient DateTimeField iYearOfCenturyField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,115,rivate transient DateTimeField iCenturyOfEraField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,116,rivate transient DateTimeField iEraField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,117,rivate transient DateTimeField iDayOfWeekField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,118,rivate transient DateTimeField iDayOfMonthField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,119,rivate transient DateTimeField iDayOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,120,rivate transient DateTimeField iMonthOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,121,rivate transient DateTimeField iWeekOfWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,122,rivate transient DateTimeField iWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,124,rivate transient DateTimeField iMillisOfSecondField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,125,rivate transient DateTimeField iMillisOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,126,rivate transient DateTimeField iSecondOfMinuteField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,127,rivate transient DateTimeField iSecondOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,128,rivate transient DateTimeField iMinuteOfHourField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,129,rivate transient DateTimeField iMinuteOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,130,rivate transient DateTimeField iHourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,131,rivate transient DateTimeField iHourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,132,rivate transient DateTimeField iClockhourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,133,rivate transient DateTimeField iClockhourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,134,rivate transient DateTimeField iHalfdayOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,99,* @param base base chronology to wrap
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,145,"ublic LimitChronology(Chronology chrono,"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,146,"eadableDateTime lowerLimit, ReadableDateTime upperLimit) {"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,147,f (chrono == null) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,104,"public static LimitChronology getInstance(Chronology base,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,105,"ReadableDateTime lowerLimit,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,106,ReadableDateTime upperLimit) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,107,if (base == null) {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,151,Chronology = chrono;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,153,LowerLimit = lowerLimit == null ? null : lowerLimit.toDateTime();
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,154,UpperLimit = upperLimit == null ? null : upperLimit.toDateTime();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,111,lowerLimit = lowerLimit == null ? null : lowerLimit.toDateTime();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,112,upperLimit = upperLimit == null ? null : upperLimit.toDateTime();
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,156,f (iLowerLimit != null && iUpperLimit != null) {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,157,f (!iLowerLimit.isBefore(iUpperLimit)) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,114,if (lowerLimit != null && upperLimit != null) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,115,if (!lowerLimit.isBefore(upperLimit)) {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,163,etFields();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,121,"return new LimitChronology(base, (DateTime)lowerLimit, (DateTime)upperLimit);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,166,rivate void setFields() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,167,hronology c = iChronology;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,169,/ Keep a local cache of converted fields so as not to create redundant
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,170,/ objects.
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,171,ashMap converted = new HashMap();
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,173,/ Convert duration fields...
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,175,"ErasField = convertField(c.eras(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,176,"CenturiesField = convertField(c.centuries(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,177,"YearsField = convertField(c.years(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,178,"MonthsField = convertField(c.months(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,179,"WeekyearsField = convertField(c.weekyears(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,180,"WeeksField = convertField(c.weeks(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,181,"DaysField = convertField(c.days(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,183,"HoursField = convertField(c.hours(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,184,"MinutesField = convertField(c.minutes(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,185,"SecondsField = convertField(c.seconds(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,186,"MillisField = convertField(c.millis(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,188,/ Convert datetime fields...
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,190,"YearField = convertField(c.year(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,191,"YearOfEraField = convertField(c.yearOfEra(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,192,"YearOfCenturyField = convertField(c.yearOfCentury(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,193,"CenturyOfEraField = convertField(c.centuryOfEra(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,194,"EraField = convertField(c.era(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,195,"DayOfWeekField = convertField(c.dayOfWeek(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,196,"DayOfMonthField = convertField(c.dayOfMonth(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,197,"DayOfYearField = convertField(c.dayOfYear(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,198,"MonthOfYearField = convertField(c.monthOfYear(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,199,"WeekOfWeekyearField = convertField(c.weekOfWeekyear(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,200,"WeekyearField = convertField(c.weekyear(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,202,"MillisOfSecondField = convertField(c.millisOfSecond(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,203,"MillisOfDayField = convertField(c.millisOfDay(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,204,"SecondOfMinuteField = convertField(c.secondOfMinute(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,205,"SecondOfDayField = convertField(c.secondOfDay(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,206,"MinuteOfHourField = convertField(c.minuteOfHour(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,207,"MinuteOfDayField = convertField(c.minuteOfDay(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,208,"HourOfDayField = convertField(c.hourOfDay(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,209,"HourOfHalfdayField = convertField(c.hourOfHalfday(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,210,"ClockhourOfDayField = convertField(c.clockhourOfDay(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,211,"ClockhourOfHalfdayField = convertField(c.clockhourOfHalfday(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,212,"HalfdayOfDayField = convertField(c.halfdayOfDay(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,124,final DateTime iLowerLimit;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,125,final DateTime iUpperLimit;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,215,"rivate DurationField convertField(DurationField field, HashMap converted) {"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,216,f (field == null || !field.isSupported()) {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,217,eturn field;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,219,f (converted.containsKey(field)) {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,220,eturn (DurationField)converted.get(field);
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,222,imitDurationField limitField = new LimitDurationField(field);
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,223,"onverted.put(field, limitField);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,224,eturn limitField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,127,private transient LimitChronology iWithUTC;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,227,"rivate DateTimeField convertField(DateTimeField field, HashMap converted) {"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,228,f (field == null || !field.isSupported()) {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,229,eturn field;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,231,f (converted.containsKey(field)) {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,232,eturn (DateTimeField)converted.get(field);
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,234,imitDateTimeField limitField =
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,235,"ew LimitDateTimeField(field,"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,236,"onvertField(field.getDurationField(), converted),"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,237,"onvertField(field.getRangeDurationField(), converted),"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,238,"onvertField(field.getLeapDurationField(), converted));"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,239,"onverted.put(field, limitField);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,240,eturn limitField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,130,"* Wraps another chronology, with datetime limits. When withUTC or"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,131,"* withDateTimeZone is called, the returned LimitChronology instance has"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,132,"* the same limits, except they are time zone adjusted."
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,134,"* @param lowerLimit  inclusive lower limit, or null if none"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,135,"* @param upperLimit  exclusive upper limit, or null if none"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,137,"private LimitChronology(Chronology base,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,138,"DateTime lowerLimit, DateTime upperLimit) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,139,"super(base, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,140,// These can be set after assembly.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,141,iLowerLimit = lowerLimit;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,142,iUpperLimit = upperLimit;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,257,ublic DateTime getUpperBound() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,159,public DateTime getUpperLimit() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,262, Gets the wrapped chronology.
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,264, @return the wrapped Chronology
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,266,rotected Chronology getWrappedChronology() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,267,eturn iChronology;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,310,imitChronology chrono = new LimitChronology
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,311,"iChronology.withDateTimeZone(zone), lowerLimit, upperLimit);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,203,LimitChronology chrono = getInstance
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,204,"(getBase().withDateTimeZone(zone), lowerLimit, upperLimit);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,320,ublic DateTimeZone getDateTimeZone() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,321,eturn iChronology.getDateTimeZone();
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,326,nstant = iChronology.getDateOnlyMillis(instant);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,215,instant = getBase().getDateOnlyMillis(instant);
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,334,"ong instant = iChronology.getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,223,"long instant = getBase().getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,341,nstant = iChronology.getTimeOnlyMillis(instant);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,230,instant = getBase().getTimeOnlyMillis(instant);
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,350,ong instant = iChronology.getTimeOnlyMillis
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,239,long instant = getBase().getTimeOnlyMillis
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,360,"ong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,249,"long instant = getBase().getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,371,nstant = iChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,260,instant = getBase().getDateTimeMillis
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,382,ong instant = iChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,271,long instant = getBase().getDateTimeMillis
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,389,/ Milliseconds
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,392,ublic DurationField millis() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,393,eturn iMillisField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,396,ublic DateTimeField millisOfSecond() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,397,eturn iMillisOfSecondField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,400,ublic DateTimeField millisOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,401,eturn iMillisOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,404,/ Seconds
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,407,ublic DurationField seconds() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,408,eturn iSecondsField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,411,ublic DateTimeField secondOfMinute() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,412,eturn iSecondOfMinuteField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,415,ublic DateTimeField secondOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,416,eturn iSecondOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,419,/ Minutes
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,422,ublic DurationField minutes() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,423,eturn iMinutesField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,426,ublic DateTimeField minuteOfHour() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,427,eturn iMinuteOfHourField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,430,ublic DateTimeField minuteOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,431,eturn iMinuteOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,434,/ Hours
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,437,ublic DurationField hours() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,438,eturn iHoursField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,441,ublic DateTimeField hourOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,442,eturn iHourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,445,ublic DateTimeField clockhourOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,446,eturn iClockhourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,449,ublic DateTimeField hourOfHalfday() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,450,eturn iHourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,453,ublic DateTimeField clockhourOfHalfday() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,454,eturn iClockhourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,457,ublic DateTimeField halfdayOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,458,eturn iHalfdayOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,461,/ Day
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,464,ublic DurationField days() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,465,eturn iDaysField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,468,ublic DateTimeField dayOfWeek() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,469,eturn iDayOfWeekField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,472,ublic DateTimeField dayOfMonth() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,473,eturn iDayOfMonthField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,476,ublic DateTimeField dayOfYear() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,477,eturn iDayOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,480,/ Week
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,483,ublic DurationField weeks() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,484,eturn iWeeksField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,487,ublic DateTimeField weekOfWeekyear() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,488,eturn iWeekOfWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,491,ublic DurationField weekyears() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,492,eturn iWeekyearsField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,495,ublic DateTimeField weekyear() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,496,eturn iWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,499,/ Month
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,502,ublic DurationField months() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,503,eturn iMonthsField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,506,ublic DateTimeField monthOfYear() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,507,eturn iMonthOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,510,/ Year
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,513,ublic DurationField years() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,514,eturn iYearsField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,278,protected void assemble(Fields fields) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,279,// Keep a local cache of converted fields so as not to create redundant
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,280,// objects.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,281,HashMap converted = new HashMap();
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,517,ublic DateTimeField year() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,518,eturn iYearField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,283,// Convert duration fields...
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,521,ublic DateTimeField yearOfEra() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,522,eturn iYearOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,285,"fields.eras = convertField(fields.eras, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,286,"fields.centuries = convertField(fields.centuries, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,287,"fields.years = convertField(fields.years, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,288,"fields.months = convertField(fields.months, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,289,"fields.weekyears = convertField(fields.weekyears, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,290,"fields.weeks = convertField(fields.weeks, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,291,"fields.days = convertField(fields.days, converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,525,ublic DateTimeField yearOfCentury() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,526,eturn iYearOfCenturyField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,293,"fields.hours = convertField(fields.hours, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,294,"fields.minutes = convertField(fields.minutes, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,295,"fields.seconds = convertField(fields.seconds, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,296,"fields.millis = convertField(fields.millis, converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,529,ublic DurationField centuries() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,530,eturn iCenturiesField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,298,// Convert datetime fields...
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,533,ublic DateTimeField centuryOfEra() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,534,eturn iCenturyOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,300,"fields.year = convertField(fields.year, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,301,"fields.yearOfEra = convertField(fields.yearOfEra, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,302,"fields.yearOfCentury = convertField(fields.yearOfCentury, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,303,"fields.centuryOfEra = convertField(fields.centuryOfEra, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,304,"fields.era = convertField(fields.era, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,305,"fields.dayOfWeek = convertField(fields.dayOfWeek, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,306,"fields.dayOfMonth = convertField(fields.dayOfMonth, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,307,"fields.dayOfYear = convertField(fields.dayOfYear, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,308,"fields.monthOfYear = convertField(fields.monthOfYear, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,309,"fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,310,"fields.weekyear = convertField(fields.weekyear, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,312,"fields.millisOfSecond = convertField(fields.millisOfSecond, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,313,"fields.millisOfDay = convertField(fields.millisOfDay, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,314,"fields.secondOfMinute = convertField(fields.secondOfMinute, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,315,"fields.secondOfDay = convertField(fields.secondOfDay, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,316,"fields.minuteOfHour = convertField(fields.minuteOfHour, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,317,"fields.minuteOfDay = convertField(fields.minuteOfDay, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,318,"fields.hourOfDay = convertField(fields.hourOfDay, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,319,"fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,320,"fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,321,"fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,322,"fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,537,ublic DurationField eras() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,538,eturn iErasField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,325,"private DurationField convertField(DurationField field, HashMap converted) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,326,if (field == null || !field.isSupported()) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,327,return field;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,329,if (converted.containsKey(field)) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,330,return (DurationField)converted.get(field);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,332,LimitDurationField limitField = new LimitDurationField(field);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,333,"converted.put(field, limitField);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,334,return limitField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,541,ublic DateTimeField era() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,542,eturn iEraField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,337,"private DateTimeField convertField(DateTimeField field, HashMap converted) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,338,if (field == null || !field.isSupported()) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,339,return field;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,341,if (converted.containsKey(field)) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,342,return (DateTimeField)converted.get(field);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,344,LimitDateTimeField limitField =
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,345,"new LimitDateTimeField(field,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,346,"convertField(field.getDurationField(), converted),"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,347,"convertField(field.getRangeDurationField(), converted),"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,348,"convertField(field.getLeapDurationField(), converted));"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,349,"converted.put(field, limitField);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,350,return limitField;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,546,eturn iChronology.toString();
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,549,rivate void readObject(ObjectInputStream in)
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,550,"hrows IOException, ClassNotFoundException"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,552,n.defaultReadObject();
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,553,etFields();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,354,return getBase().toString();
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,590,ateTimePrinter p = ISODateTimeFormat.getInstance(getWrappedChronology()).dateTime();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,391,DateTimePrinter p = ISODateTimeFormat.getInstance(getBase()).dateTime();
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,594,".printTo(buf, iLowerLimit);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,395,"p.printTo(buf, getLowerLimit());"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,597,".printTo(buf, iUpperLimit);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,398,"p.printTo(buf, getUpperLimit());"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,601,uf.append(getWrappedChronology());
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,402,buf.append(getBase());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,59,import org.joda.time.field.StrictDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,69,ublic class StrictChronology extends DelegatedChronology {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,70,public final class StrictChronology extends AssembledChronology {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,73,rivate transient DateTimeField iYearField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,74,rivate transient DateTimeField iYearOfEraField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,75,rivate transient DateTimeField iYearOfCenturyField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,76,rivate transient DateTimeField iCenturyOfEraField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,77,rivate transient DateTimeField iEraField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,78,rivate transient DateTimeField iDayOfWeekField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,79,rivate transient DateTimeField iDayOfMonthField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,80,rivate transient DateTimeField iDayOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,81,rivate transient DateTimeField iMonthOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,82,rivate transient DateTimeField iWeekOfWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,83,rivate transient DateTimeField iWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,85,rivate transient DateTimeField iMillisOfSecondField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,86,rivate transient DateTimeField iMillisOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,87,rivate transient DateTimeField iSecondOfMinuteField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,88,rivate transient DateTimeField iSecondOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,89,rivate transient DateTimeField iMinuteOfHourField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,90,rivate transient DateTimeField iMinuteOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,91,rivate transient DateTimeField iHourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,92,rivate transient DateTimeField iHourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,93,rivate transient DateTimeField iClockhourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,94,rivate transient DateTimeField iClockhourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,95,rivate transient DateTimeField iHalfdayOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,97,rivate transient Chronology iWithUTC;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,102, @param chrono the chronology
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,77,* @param base the chronology to wrap
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,105,ublic StrictChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,106,uper(chrono);
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,109,ublic Chronology withUTC() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,110,f (iWithUTC == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,111,WithUTC = new StrictChronology(getWrappedChronology().withUTC());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,80,public static StrictChronology getInstance(Chronology base) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,81,if (base == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,82,"throw new IllegalArgumentException(""Must supply a chronology"");"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,113,eturn iWithUTC;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,116,ublic Chronology withDateTimeZone(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,117,eturn new StrictChronology(getWrappedChronology().withDateTimeZone(zone));
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,121, Overridden to ensure strict fields are used.
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,123,"ublic long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,124,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,126,"eturn getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,130, Overridden to ensure strict fields are used.
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,132,"ublic long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,133,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,134,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,136,"ong instant = hourOfDay().set(0, hourOfDay);"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,137,"nstant = minuteOfHour().set(instant, minuteOfHour);"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,138,"nstant = secondOfMinute().set(instant, secondOfMinute);"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,139,"eturn millisOfSecond().set(instant, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,143, Overridden to ensure strict fields are used.
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,145,"ublic long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,146,nt millisOfDay)
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,147,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,149,"ong instant = year().set(0, year);"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,150,"nstant = monthOfYear().set(instant, monthOfYear);"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,151,"nstant = dayOfMonth().set(instant, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,152,"eturn millisOfDay().set(instant, millisOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,84,return new StrictChronology(base);
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,156, Overridden to ensure strict fields are used.
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,158,"ublic long getDateTimeMillis(long instant,"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,159,"nt hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,160,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,161,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,163,"nstant = hourOfDay().set(instant, hourOfDay);"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,164,"nstant = minuteOfHour().set(instant, minuteOfHour);"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,165,"nstant = secondOfMinute().set(instant, secondOfMinute);"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,166,"eturn millisOfSecond().set(instant, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,87,private transient Chronology iWithUTC;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,170, Overridden to ensure strict fields are used.
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,90,* Create a StrictChronology for any chronology.
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,92,* @param base the chronology to wrap
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,172,"ublic long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,173,"nt hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,174,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,175,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,177,"ong instant = year().set(0, year);"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,178,"nstant = monthOfYear().set(instant, monthOfYear);"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,179,"nstant = dayOfMonth().set(instant, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,180,"nstant = hourOfDay().set(instant, hourOfDay);"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,181,"nstant = minuteOfHour().set(instant, minuteOfHour);"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,182,"nstant = secondOfMinute().set(instant, secondOfMinute);"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,183,"eturn millisOfSecond().set(instant, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,186,/ Milliseconds
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,189,ublic DateTimeField millisOfSecond() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,190,f (iMillisOfDayField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,191,MillisOfSecondField = StrictDateTimeField.getInstance(super.millisOfSecond());
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,193,eturn iMillisOfSecondField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,196,ublic DateTimeField millisOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,197,f (iMillisOfDayField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,198,MillisOfDayField = StrictDateTimeField.getInstance(super.millisOfDay());
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,200,eturn iMillisOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,203,/ Seconds
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,206,ublic DateTimeField secondOfMinute() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,207,f (iSecondOfMinuteField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,208,SecondOfMinuteField = StrictDateTimeField.getInstance(super.secondOfMinute());
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,210,eturn iSecondOfMinuteField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,213,ublic DateTimeField secondOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,214,f (iSecondOfDayField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,215,SecondOfDayField = StrictDateTimeField.getInstance(super.secondOfDay());
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,217,eturn iSecondOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,220,/ Minutes
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,223,ublic DateTimeField minuteOfHour() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,224,f (iMinuteOfHourField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,225,MinuteOfHourField = StrictDateTimeField.getInstance(super.minuteOfHour());
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,227,eturn iMinuteOfHourField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,94,private StrictChronology(Chronology base) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,95,"super(base, null);"
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,230,ublic DateTimeField minuteOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,231,f (iMinuteOfDayField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,232,MinuteOfDayField = StrictDateTimeField.getInstance(super.minuteOfDay());
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,234,eturn iMinuteOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,237,/ Hours
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,240,ublic DateTimeField hourOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,241,f (iHourOfDayField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,242,HourOfDayField = StrictDateTimeField.getInstance(super.hourOfDay());
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,244,eturn iHourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,247,ublic DateTimeField clockhourOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,248,f (iClockhourOfDayField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,249,ClockhourOfDayField = StrictDateTimeField.getInstance(super.clockhourOfDay());
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,251,eturn iClockhourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,254,ublic DateTimeField hourOfHalfday() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,255,f (iHourOfHalfdayField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,256,HourOfHalfdayField = StrictDateTimeField.getInstance(super.hourOfHalfday());
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,258,eturn iHourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,261,ublic DateTimeField clockhourOfHalfday() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,262,f (iClockhourOfHalfdayField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,263,ClockhourOfHalfdayField =
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,264,trictDateTimeField.getInstance(super.clockhourOfHalfday());
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,266,eturn iClockhourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,269,ublic DateTimeField halfdayOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,270,f (iHalfdayOfDayField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,271,HalfdayOfDayField = StrictDateTimeField.getInstance(super.halfdayOfDay());
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,273,eturn iHalfdayOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,276,/ Day
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,279,ublic DateTimeField dayOfWeek() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,280,f (iDayOfWeekField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,281,DayOfWeekField = StrictDateTimeField.getInstance(super.dayOfWeek());
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,283,eturn iDayOfWeekField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,286,ublic DateTimeField dayOfMonth() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,287,f (iDayOfMonthField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,288,DayOfMonthField = StrictDateTimeField.getInstance(super.dayOfMonth());
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,290,eturn iDayOfMonthField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,293,ublic DateTimeField dayOfYear() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,294,f (iDayOfYearField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,295,DayOfYearField = StrictDateTimeField.getInstance(super.dayOfYear());
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,297,eturn iDayOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,300,/ Week
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,303,ublic DateTimeField weekOfWeekyear() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,304,f (iWeekOfWeekyearField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,305,WeekOfWeekyearField = StrictDateTimeField.getInstance(super.weekOfWeekyear());
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,307,eturn iWeekOfWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,310,ublic DateTimeField weekyear() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,311,f (iWeekyearField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,312,WeekyearField = StrictDateTimeField.getInstance(super.weekyear());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,98,public Chronology withUTC() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,99,if (iWithUTC == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,100,if (getDateTimeZone() == DateTimeZone.UTC) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,101,iWithUTC = this;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,102,} else {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,103,iWithUTC = StrictChronology.getInstance(getBase().withUTC());
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,314,eturn iWeekyearField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,106,return iWithUTC;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,317,/ Month
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,320,ublic DateTimeField monthOfYear() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,321,f (iMonthOfYearField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,322,MonthOfYearField = StrictDateTimeField.getInstance(super.monthOfYear());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,109,public Chronology withDateTimeZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,110,if (zone == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,111,zone = DateTimeZone.getDefault();
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,324,eturn iMonthOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,327,/ Year
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,330,ublic DateTimeField year() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,331,f (iYearField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,332,YearField = StrictDateTimeField.getInstance(super.year());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,113,if (zone == DateTimeZone.UTC) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,114,return withUTC();
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,334,eturn iYearField;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,337,ublic DateTimeField yearOfEra() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,338,f (iYearOfEraField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,339,YearOfEraField = StrictDateTimeField.getInstance(super.yearOfEra());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,116,if (zone == getDateTimeZone()) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,117,return this;
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,341,eturn iYearOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,119,return StrictChronology.getInstance(getBase().withDateTimeZone(zone));
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,344,ublic DateTimeField yearOfCentury() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,345,f (iYearOfCenturyField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,346,YearOfCenturyField = StrictDateTimeField.getInstance(super.yearOfCentury());
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,348,eturn iYearOfCenturyField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,122,protected void assemble(Fields fields) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,123,fields.year = convertField(fields.year);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,124,fields.yearOfEra = convertField(fields.yearOfEra);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,125,fields.yearOfCentury = convertField(fields.yearOfCentury);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,126,fields.centuryOfEra = convertField(fields.centuryOfEra);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,127,fields.era = convertField(fields.era);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,128,fields.dayOfWeek = convertField(fields.dayOfWeek);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,129,fields.dayOfMonth = convertField(fields.dayOfMonth);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,130,fields.dayOfYear = convertField(fields.dayOfYear);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,131,fields.monthOfYear = convertField(fields.monthOfYear);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,132,fields.weekOfWeekyear = convertField(fields.weekOfWeekyear);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,133,fields.weekyear = convertField(fields.weekyear);
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,351,ublic DateTimeField centuryOfEra() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,352,f (iCenturyOfEraField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,353,CenturyOfEraField = StrictDateTimeField.getInstance(super.centuryOfEra());
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,355,eturn iCenturyOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,135,fields.millisOfSecond = convertField(fields.millisOfSecond);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,136,fields.millisOfDay = convertField(fields.millisOfDay);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,137,fields.secondOfMinute = convertField(fields.secondOfMinute);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,138,fields.secondOfDay = convertField(fields.secondOfDay);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,139,fields.minuteOfHour = convertField(fields.minuteOfHour);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,140,fields.minuteOfDay = convertField(fields.minuteOfDay);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,141,fields.hourOfDay = convertField(fields.hourOfDay);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,142,fields.hourOfHalfday = convertField(fields.hourOfHalfday);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,143,fields.clockhourOfDay = convertField(fields.clockhourOfDay);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,144,fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,145,fields.halfdayOfDay = convertField(fields.halfdayOfDay);
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,358,ublic DateTimeField era() {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,359,f (iEraField == null) {
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,360,EraField = StrictDateTimeField.getInstance(super.era());
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,362,eturn iEraField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,148,private static final DateTimeField convertField(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,149,return StrictDateTimeField.getInstance(field);
False,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,366,"eturn ""StrictChronology["" + getWrappedChronology().toString() + ']';"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,153,"return ""StrictChronology["" + getBase().toString() + ']';"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,56,mport java.io.IOException;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,57,mport java.io.ObjectInputStream;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,64,import org.joda.time.field.AbstractDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,65,import org.joda.time.field.AbstractDurationField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,77,ublic class ZonedChronology extends Chronology {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,79,tatic final long serialVersionUID = -1079258847191166848L;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,81,tatic boolean useTimeArithmetic(DurationField field) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,82,/ Use time of day arithmetic rules for unit durations less than
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,83,/ typical time zone offsets.
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,84,eturn field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,87,rivate final Chronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,88,rivate final DateTimeZone iZone;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,90,rivate transient DurationField iErasField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,91,rivate transient DurationField iCenturiesField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,92,rivate transient DurationField iYearsField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,93,rivate transient DurationField iMonthsField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,94,rivate transient DurationField iWeekyearsField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,95,rivate transient DurationField iWeeksField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,96,rivate transient DurationField iDaysField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,98,rivate transient DurationField iHoursField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,99,rivate transient DurationField iMinutesField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,100,rivate transient DurationField iSecondsField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,101,rivate transient DurationField iMillisField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,103,rivate transient DateTimeField iYearField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,104,rivate transient DateTimeField iYearOfEraField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,105,rivate transient DateTimeField iYearOfCenturyField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,106,rivate transient DateTimeField iCenturyOfEraField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,107,rivate transient DateTimeField iEraField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,108,rivate transient DateTimeField iDayOfWeekField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,109,rivate transient DateTimeField iDayOfMonthField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,110,rivate transient DateTimeField iDayOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,111,rivate transient DateTimeField iMonthOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,112,rivate transient DateTimeField iWeekOfWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,113,rivate transient DateTimeField iWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,115,rivate transient DateTimeField iMillisOfSecondField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,116,rivate transient DateTimeField iMillisOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,117,rivate transient DateTimeField iSecondOfMinuteField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,118,rivate transient DateTimeField iSecondOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,119,rivate transient DateTimeField iMinuteOfHourField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,120,rivate transient DateTimeField iMinuteOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,121,rivate transient DateTimeField iHourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,122,rivate transient DateTimeField iHourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,123,rivate transient DateTimeField iClockhourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,124,rivate transient DateTimeField iClockhourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,125,rivate transient DateTimeField iHalfdayOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,76,public final class ZonedChronology extends AssembledChronology {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,131, @param chrono the chronology
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,82,* @param base base chronology to wrap
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,135,"ublic ZonedChronology(Chronology chrono, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,136,f (chrono == null) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,86,"public static ZonedChronology getInstance(Chronology base, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,87,if (base == null) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,139,hrono = chrono.withUTC();
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,140,f (chrono == null) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,90,base = base.withUTC();
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,91,if (base == null) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,147,Chronology = chrono;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,148,Zone = zone;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,149,etFields();
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,97,"return new ZonedChronology(base, zone);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,152,rivate void setFields() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,153,hronology c = iChronology;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,155,/ Keep a local cache of converted fields so as not to create redundant
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,156,/ objects.
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,157,ashMap converted = new HashMap();
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,159,/ Convert duration fields...
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,161,"ErasField = convertField(c.eras(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,162,"CenturiesField = convertField(c.centuries(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,163,"YearsField = convertField(c.years(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,164,"MonthsField = convertField(c.months(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,165,"WeekyearsField = convertField(c.weekyears(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,166,"WeeksField = convertField(c.weeks(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,167,"DaysField = convertField(c.days(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,169,"HoursField = convertField(c.hours(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,170,"MinutesField = convertField(c.minutes(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,171,"SecondsField = convertField(c.seconds(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,172,"MillisField = convertField(c.millis(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,174,/ Convert datetime fields...
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,176,"YearField = convertField(c.year(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,177,"YearOfEraField = convertField(c.yearOfEra(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,178,"YearOfCenturyField = convertField(c.yearOfCentury(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,179,"CenturyOfEraField = convertField(c.centuryOfEra(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,180,"EraField = convertField(c.era(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,181,"DayOfWeekField = convertField(c.dayOfWeek(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,182,"DayOfMonthField = convertField(c.dayOfMonth(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,183,"DayOfYearField = convertField(c.dayOfYear(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,184,"MonthOfYearField = convertField(c.monthOfYear(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,185,"WeekOfWeekyearField = convertField(c.weekOfWeekyear(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,186,"WeekyearField = convertField(c.weekyear(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,188,"MillisOfSecondField = convertField(c.millisOfSecond(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,189,"MillisOfDayField = convertField(c.millisOfDay(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,190,"SecondOfMinuteField = convertField(c.secondOfMinute(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,191,"SecondOfDayField = convertField(c.secondOfDay(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,192,"MinuteOfHourField = convertField(c.minuteOfHour(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,193,"MinuteOfDayField = convertField(c.minuteOfDay(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,194,"HourOfDayField = convertField(c.hourOfDay(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,195,"HourOfHalfdayField = convertField(c.hourOfHalfday(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,196,"ClockhourOfDayField = convertField(c.clockhourOfDay(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,197,"ClockhourOfHalfdayField = convertField(c.clockhourOfHalfday(), converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,198,"HalfdayOfDayField = convertField(c.halfdayOfDay(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,100,static final long serialVersionUID = -1079258847191166848L;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,201,"rivate DurationField convertField(DurationField field, HashMap converted) {"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,202,f (field == null || !field.isSupported()) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,203,eturn field;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,205,f (converted.containsKey(field)) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,206,eturn (DurationField)converted.get(field);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,208,"onedDurationField zonedField = new ZonedDurationField(field, iZone);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,209,"onverted.put(field, zonedField);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,210,eturn zonedField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,102,static boolean useTimeArithmetic(DurationField field) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,103,// Use time of day arithmetic rules for unit durations less than
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,104,// typical time zone offsets.
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,105,return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,213,"rivate DateTimeField convertField(DateTimeField field, HashMap converted) {"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,214,f (field == null || !field.isSupported()) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,215,eturn field;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,217,f (converted.containsKey(field)) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,218,eturn (DateTimeField)converted.get(field);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,220,onedDateTimeField zonedField =
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,221,"ew ZonedDateTimeField(field, iZone,"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,222,"onvertField(field.getDurationField(), converted),"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,223,"onvertField(field.getRangeDurationField(), converted),"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,224,"onvertField(field.getLeapDurationField(), converted));"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,225,"onverted.put(field, zonedField);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,226,eturn zonedField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,109,* Restricted constructor
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,111,* @param base base chronology to wrap
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,112,* @param zone the time zone
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,114,"private ZonedChronology(Chronology base, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,115,"super(base, zone);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,230,eturn iZone;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,119,return (DateTimeZone)getParam();
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,234,eturn iChronology;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,123,return getBase();
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,241,f (zone == iZone) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,130,if (zone == getParam()) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,245,eturn iChronology;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,134,return getBase();
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,247,"eturn new ZonedChronology(iChronology, zone);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,136,"return new ZonedChronology(getBase(), zone);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,253,eturn localToUTC(iChronology.getDateOnlyMillis
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,142,return localToUTC(getBase().getDateOnlyMillis
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,261,eturn localToUTC(iChronology.getTimeOnlyMillis
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,150,return localToUTC(getBase().getTimeOnlyMillis
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,269,eturn localToUTC(iChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,158,return localToUTC(getBase().getDateTimeMillis
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,278,eturn localToUTC(iChronology.getDateTimeMillis
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,279,"instant + iZone.getOffset(instant),"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,167,return localToUTC(getBase().getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,168,"(instant + getDateTimeZone().getOffset(instant),"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,288,eturn localToUTC(iChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,177,return localToUTC(getBase().getDateTimeMillis
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,297,nt offset = iZone.getOffsetFromLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,186,DateTimeZone zone = getDateTimeZone();
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,187,int offset = zone.getOffsetFromLocal(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,299,f (offset != iZone.getOffset(instant)) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,189,if (offset != zone.getOffset(instant)) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,306,/ Milliseconds
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,309,ublic DurationField millis() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,310,eturn iMillisField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,313,ublic DateTimeField millisOfSecond() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,314,eturn iMillisOfSecondField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,317,ublic DateTimeField millisOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,318,eturn iMillisOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,321,/ Seconds
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,324,ublic DurationField seconds() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,325,eturn iSecondsField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,328,ublic DateTimeField secondOfMinute() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,329,eturn iSecondOfMinuteField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,332,ublic DateTimeField secondOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,333,eturn iSecondOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,336,/ Minutes
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,339,ublic DurationField minutes() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,340,eturn iMinutesField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,343,ublic DateTimeField minuteOfHour() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,344,eturn iMinuteOfHourField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,347,ublic DateTimeField minuteOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,348,eturn iMinuteOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,351,/ Hours
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,354,ublic DurationField hours() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,355,eturn iHoursField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,358,ublic DateTimeField hourOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,359,eturn iHourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,362,ublic DateTimeField clockhourOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,363,eturn iClockhourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,366,ublic DateTimeField hourOfHalfday() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,367,eturn iHourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,370,ublic DateTimeField clockhourOfHalfday() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,371,eturn iClockhourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,374,ublic DateTimeField halfdayOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,375,eturn iHalfdayOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,378,/ Day
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,381,ublic DurationField days() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,382,eturn iDaysField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,385,ublic DateTimeField dayOfWeek() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,386,eturn iDayOfWeekField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,389,ublic DateTimeField dayOfMonth() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,390,eturn iDayOfMonthField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,393,ublic DateTimeField dayOfYear() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,394,eturn iDayOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,397,/ Week
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,400,ublic DurationField weeks() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,401,eturn iWeeksField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,404,ublic DateTimeField weekOfWeekyear() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,405,eturn iWeekOfWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,408,ublic DurationField weekyears() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,409,eturn iWeekyearsField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,412,ublic DateTimeField weekyear() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,413,eturn iWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,416,/ Month
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,419,ublic DurationField months() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,420,eturn iMonthsField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,423,ublic DateTimeField monthOfYear() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,424,eturn iMonthOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,427,/ Year
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,430,ublic DurationField years() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,431,eturn iYearsField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,196,protected void assemble(Fields fields) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,197,// Keep a local cache of converted fields so as not to create redundant
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,198,// objects.
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,199,HashMap converted = new HashMap();
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,434,ublic DateTimeField year() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,435,eturn iYearField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,201,// Convert duration fields...
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,438,ublic DateTimeField yearOfEra() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,439,eturn iYearOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,203,"fields.eras = convertField(fields.eras, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,204,"fields.centuries = convertField(fields.centuries, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,205,"fields.years = convertField(fields.years, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,206,"fields.months = convertField(fields.months, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,207,"fields.weekyears = convertField(fields.weekyears, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,208,"fields.weeks = convertField(fields.weeks, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,209,"fields.days = convertField(fields.days, converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,442,ublic DateTimeField yearOfCentury() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,443,eturn iYearOfCenturyField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,211,"fields.hours = convertField(fields.hours, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,212,"fields.minutes = convertField(fields.minutes, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,213,"fields.seconds = convertField(fields.seconds, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,214,"fields.millis = convertField(fields.millis, converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,446,ublic DurationField centuries() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,447,eturn iCenturiesField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,216,// Convert datetime fields...
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,450,ublic DateTimeField centuryOfEra() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,451,eturn iCenturyOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,218,"fields.year = convertField(fields.year, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,219,"fields.yearOfEra = convertField(fields.yearOfEra, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,220,"fields.yearOfCentury = convertField(fields.yearOfCentury, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,221,"fields.centuryOfEra = convertField(fields.centuryOfEra, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,222,"fields.era = convertField(fields.era, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,223,"fields.dayOfWeek = convertField(fields.dayOfWeek, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,224,"fields.dayOfMonth = convertField(fields.dayOfMonth, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,225,"fields.dayOfYear = convertField(fields.dayOfYear, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,226,"fields.monthOfYear = convertField(fields.monthOfYear, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,227,"fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,228,"fields.weekyear = convertField(fields.weekyear, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,230,"fields.millisOfSecond = convertField(fields.millisOfSecond, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,231,"fields.millisOfDay = convertField(fields.millisOfDay, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,232,"fields.secondOfMinute = convertField(fields.secondOfMinute, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,233,"fields.secondOfDay = convertField(fields.secondOfDay, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,234,"fields.minuteOfHour = convertField(fields.minuteOfHour, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,235,"fields.minuteOfDay = convertField(fields.minuteOfDay, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,236,"fields.hourOfDay = convertField(fields.hourOfDay, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,237,"fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,238,"fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,239,"fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,240,"fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,454,ublic DurationField eras() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,455,eturn iErasField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,243,"private DurationField convertField(DurationField field, HashMap converted) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,244,if (field == null || !field.isSupported()) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,245,return field;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,247,if (converted.containsKey(field)) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,248,return (DurationField)converted.get(field);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,250,"ZonedDurationField zonedField = new ZonedDurationField(field, getDateTimeZone());"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,251,"converted.put(field, zonedField);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,252,return zonedField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,458,ublic DateTimeField era() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,459,eturn iEraField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,255,"private DateTimeField convertField(DateTimeField field, HashMap converted) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,256,if (field == null || !field.isSupported()) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,257,return field;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,259,if (converted.containsKey(field)) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,260,return (DateTimeField)converted.get(field);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,262,ZonedDateTimeField zonedField =
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,263,"new ZonedDateTimeField(field, getDateTimeZone(),"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,264,"convertField(field.getDurationField(), converted),"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,265,"convertField(field.getRangeDurationField(), converted),"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,266,"convertField(field.getLeapDurationField(), converted));"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,267,"converted.put(field, zonedField);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,268,return zonedField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,463,eturn iChronology.toString();
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,466,rivate void readObject(ObjectInputStream in)
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,467,"hrows IOException, ClassNotFoundException"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,469,n.defaultReadObject();
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,470,etFields();
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,272,"return ""ZonedChronology["" + getBase() + "", "" + getDateTimeZone().getID() + ']';"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,10, are met:
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,54,ackage org.joda.time.chrono.buddhist;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,56,mport java.util.HashMap;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,57,mport java.util.Map;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,59,mport org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,60,mport org.joda.time.DateTime;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,61,mport org.joda.time.DateTimeConstants;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,62,mport org.joda.time.DateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,63,mport org.joda.time.DateTimeZone;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,64,mport org.joda.time.DurationField;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,65,mport org.joda.time.chrono.DecoratedChronology;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,66,mport org.joda.time.chrono.DividedDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,67,mport org.joda.time.chrono.LimitChronology;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,68,mport org.joda.time.chrono.OffsetDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,69,mport org.joda.time.chrono.RemainderDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,70,mport org.joda.time.chrono.gj.GJChronology;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,73, <code>BuddhistChronology</code> provides access to the individual date
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,74, time fields for the Buddhist chronological calendar system.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,75, <p>
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,76, The Buddhist calendar differs from the GregorianJulian calendar only
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,77, in the year. This class is compatable with the BuddhistCalendar class
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,78, supplied by Sun.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,79, <p>
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,80, BuddhistChronology is thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,82, @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,83, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,84, @since 1.0
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,86,ublic final class BuddhistChronology extends DecoratedChronology {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,88,tatic final long serialVersionUID = -3474595157769370126L;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,91," Constant value for 'Buddhist Era', equivalent to the value returned"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,92, for AD/CE.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,94,ublic static final int BE = DateTimeConstants.CE;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,96,** Number of years difference in calendars. */
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,97,rivate static final int BUDDHIST_OFFSET = 543;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,99,** Cache of zone to chronology */
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,100,rivate static final Map cCache = new HashMap();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,102,** UTC instance of the chronology */
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,103,rivate static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,106," Standard instance of a Buddhist Chronology, that matches"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,107, Sun's BuddhistCalendar class. This means that it follows the
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,108, GregorianJulian calendar rules with a cutover date.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,109, <p>
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,110, The time zone of the returned instance is UTC.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,112,ublic static BuddhistChronology getInstanceUTC() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,113,eturn INSTANCE_UTC;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,117," Standard instance of a Buddhist Chronology, that matches"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,118, Sun's BuddhistCalendar class. This means that it follows the
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,119, GregorianJulian calendar rules with a cutover date.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,121,ublic static BuddhistChronology getInstance() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,122,eturn getInstance(DateTimeZone.getDefault());
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,126," Standard instance of a Buddhist Chronology, that matches"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,127, Sun's BuddhistCalendar class. This means that it follows the
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,128, GregorianJulian calendar rules with a cutover date.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,130," @param zone  the time zone to use, null is default"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,132,ublic static synchronized BuddhistChronology getInstance(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,133,f (zone == null) {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,134,one = DateTimeZone.getDefault();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,136,uddhistChronology chrono = (BuddhistChronology) cCache.get(zone);
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,137,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,138,"hrono = new BuddhistChronology(GJChronology.getInstance(zone, null, false));"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,139,"Cache.put(zone, chrono);"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,141,eturn chrono;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,144,/ Constructors and instance variables
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,146,/ Fields are transient because readResolve will always return a cached instance.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,147,rivate transient DateTimeField iYearField;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,148,rivate transient DateTimeField iWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,149,rivate transient DateTimeField iYearOfCenturyField;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,150,rivate transient DateTimeField iCenturyOfEraField;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,153, Restricted constructor.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,155,rivate BuddhistChronology(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,156,"his(chronology, false);"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,160, Restricted constructor.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,162,"rivate BuddhistChronology(Chronology chronology, boolean unlimited) {"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,163,/ BuddhistChronology is constructed in three magic steps:
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,165,"/ 1. Wrap a BuddhistChronology with proper offset, but no range limits"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,166,"/ 2. Wrap a LimitChronology, which will copy and wrap all the fields"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,167,/ 3. Wrap a BuddhistChronology which purely delegates to LimitChronology
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,169,/ Why is it done this way? So that the LimitChronology error message
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,170,/ shows the limit printed using BuddhistChronology fields. This extra
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,171,/ wrapping does not impose any additional overhead when accessing
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,172,/ fields because LimitChronology copies them.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,174,/ Is this a good design? No.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,176,uper(unlimited ? chronology : limitChronology(chronology));
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,178,ateTimeField field = getWrappedChronology().year();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,179,f (unlimited) {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,180,"ield = new OffsetDateTimeField(field, field.getName(), BUDDHIST_OFFSET);"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,182,YearField = field;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,184,ield = getWrappedChronology().weekyear();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,185,f (unlimited) {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,186,"ield = new OffsetDateTimeField(field, field.getName(), BUDDHIST_OFFSET);"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,188,WeekyearField = field;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,190,/ All other fields delegated to GJ
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,194, Returns a LimitChronology that wraps an unlimited BuddhistChronology
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,195, that wraps the given Chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,197,rivate static Chronology limitChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,198,"hrono = new BuddhistChronology(chrono, true);"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,199,"ateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,200,"eturn new LimitChronology(chrono, lowerLimit, null);"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,204, Serialization singleton
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,206,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,207,eturn getInstance(getWrappedChronology().getDateTimeZone());
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,210,/ Conversion
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,213, Gets the Chronology in the UTC time zone.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,215, @return the chronology in UTC
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,217,ublic Chronology withUTC() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,218,eturn INSTANCE_UTC;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,222, Gets the Chronology in a specific time zone.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,224," @param zone  the zone to get the chronology in, null is default"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,225, @return the chronology
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,227,ublic Chronology withDateTimeZone(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,228,f (zone == null) {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,229,one = DateTimeZone.getDefault();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,231,f (zone == getDateTimeZone()) {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,232,eturn this;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,234,eturn getInstance(zone);
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,237,/ Millis
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,241, Get the millis duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,243, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,245,ublic DurationField millis() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,246,eturn getWrappedChronology().millis();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,250, Get the millis of second field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,252, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,254,ublic DateTimeField millisOfSecond() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,255,eturn getWrappedChronology().millisOfSecond();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,259, Get the millis of day field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,261, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,263,ublic DateTimeField millisOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,264,eturn getWrappedChronology().millisOfDay();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,267,/ Seconds
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,271, Get the seconds duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,273, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,275,ublic DurationField seconds() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,276,eturn getWrappedChronology().seconds();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,280, Get the second of minute field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,282, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,284,ublic DateTimeField secondOfMinute() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,285,eturn getWrappedChronology().secondOfMinute();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,289, Get the second of day field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,291, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,293,ublic DateTimeField secondOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,294,eturn getWrappedChronology().secondOfDay();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,297,/ Minutes
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,301, Get the minutes duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,303, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,305,ublic DurationField minutes() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,306,eturn getWrappedChronology().minutes();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,310, Get the minute of hour field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,312, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,314,ublic DateTimeField minuteOfHour() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,315,eturn getWrappedChronology().minuteOfHour();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,319, Get the minute of day field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,321, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,323,ublic DateTimeField minuteOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,324,eturn getWrappedChronology().minuteOfDay();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,327,/ Hours
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,331, Get the hours duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,333, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,335,ublic DurationField hours() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,336,eturn getWrappedChronology().hours();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,340, Get the hour of day (0-23) field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,342, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,344,ublic DateTimeField hourOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,345,eturn getWrappedChronology().hourOfDay();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,349, Get the hour of day (offset to 1-24) field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,351, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,353,ublic DateTimeField clockhourOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,354,eturn getWrappedChronology().clockhourOfDay();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,358, Get the hour of am/pm (0-11) field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,360, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,362,ublic DateTimeField hourOfHalfday() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,363,eturn getWrappedChronology().hourOfHalfday();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,367, Get the hour of am/pm (offset to 1-12) field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,369, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,371,ublic DateTimeField clockhourOfHalfday() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,372,eturn getWrappedChronology().clockhourOfHalfday();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,376, Get the AM(0) PM(1) field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,378, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,380,ublic DateTimeField halfdayOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,381,eturn getWrappedChronology().halfdayOfDay();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,384,/ Day
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,388, Get the days duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,390, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,392,ublic DurationField days() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,393,eturn getWrappedChronology().days();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,397, Get the day of week field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,399, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,401,ublic DateTimeField dayOfWeek() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,402,eturn getWrappedChronology().dayOfWeek();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,406, Get the day of month field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,408, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,410,ublic DateTimeField dayOfMonth() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,411,eturn getWrappedChronology().dayOfMonth();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,415, Get the day of year field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,417, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,419,ublic DateTimeField dayOfYear() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,420,eturn getWrappedChronology().dayOfYear();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,423,/ Week
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,427, Get the weeks duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,429, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,431,ublic DurationField weeks() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,432,eturn getWrappedChronology().weeks();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,436, Get the week of a week based year field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,438, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,440,ublic DateTimeField weekOfWeekyear() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,441,eturn getWrappedChronology().weekOfWeekyear();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,445, Get the weekyears duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,447, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,449,ublic DurationField weekyears() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,450,eturn getWrappedChronology().weekyears();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,454, Get the year of a week based year field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,456, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,458,ublic DateTimeField weekyear() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,459,eturn iWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,462,/ Month
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,466, Get the months duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,468, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,470,ublic DurationField months() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,471,eturn getWrappedChronology().months();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,475, Get the month of year field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,477, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,479,ublic DateTimeField monthOfYear() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,480,eturn getWrappedChronology().monthOfYear();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,483,/ Year
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,487, Get the years duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,489, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,491,ublic DurationField years() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,492,eturn getWrappedChronology().years();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,496, Get the year field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,498, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,500,ublic DateTimeField year() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,501,eturn iYearField;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,505, Get the year of era field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,507, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,509,ublic DateTimeField yearOfEra() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,510,eturn iYearField;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,514, Get the year of century field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,516, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,518,ublic DateTimeField yearOfCentury() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,519,f (iYearOfCenturyField == null) {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,520,ateTimeField tempField = new RemainderDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,521,"(DividedDateTimeField)centuryOfEra(), """");"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,522,"YearOfCenturyField = new OffsetDateTimeField(tempField, ""yearOfCentury"", 1);"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,524,eturn iYearOfCenturyField;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,528, Get the centuries duration field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,530, @return DurationField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,532,ublic DurationField centuries() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,533,eturn getWrappedChronology().centuries();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,537, Get the century of era field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,539, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,541,ublic DateTimeField centuryOfEra() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,542,f (iCenturyOfEraField == null) {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,543,"ateTimeField tempField = new OffsetDateTimeField(yearOfEra(), """", 99);"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,544,CenturyOfEraField = new DividedDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,545,"tempField, ""centuryOfEra"", ""centuries"", 100);"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,547,eturn iCenturyOfEraField;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,551, Get the era field for this chronology.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,553, @return DateTimeField
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,555,ublic DateTimeField era() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,556,eturn BuddhistEraDateTimeField.INSTANCE;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,559,/ Output
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,562, Gets a debugging toString.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,564, @return a debugging string
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,566,ublic String toString() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,567,"tring str = ""BuddhistChronology"";"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,568,ateTimeZone zone = getDateTimeZone();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,569,f (zone != null) {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,570,tr = str + '[' + zone.getID() + ']';
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,572,eturn str;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,10, are met:
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,54,ackage org.joda.time.chrono.gj;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,56,mport org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,57,mport org.joda.time.DateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,58,mport org.joda.time.DateTimeZone;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,59,mport org.joda.time.chrono.OffsetDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,60,mport org.joda.time.chrono.DividedDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,61,mport org.joda.time.chrono.RemainderDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,64," Chronology for supporting GJ style centuries. Century 1 begin on year 1, and"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,65, year of century ranges from 1 to 100.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,67, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,68, @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,69, @since 1.0
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,71,lass GJCenturyChronology extends GJChronology {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,73,tatic final long serialVersionUID = -8572000567534692411L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,75,rivate final GJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,78, @param chrono wrapped chronology
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,80,ublic GJCenturyChronology(GJChronology chrono) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,81,f (chrono.getDateTimeZone() != null &&
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,82,hrono.getDateTimeZone() != DateTimeZone.UTC) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,83,hrow new IllegalArgumentException();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,85,f (!chrono.isCenturyISO()) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,86,hrow new IllegalArgumentException();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,89,Chronology = chrono;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,90,opyFields(chrono);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,92,"ateTimeField tempField = new OffsetDateTimeField(iYearOfEraField, """", 99);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,93,CenturyOfEraField = new DividedDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,94,"tempField, ""centuryOfEra"", ""centuries"", 100);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,96,empField = new RemainderDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,97,"(DividedDateTimeField)iCenturyOfEraField, """");"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,98,"YearOfCenturyField = new OffsetDateTimeField(tempField, ""yearOfCentury"", 1);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,101,ublic Chronology withUTC() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,102,eturn this;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,105,"ublic long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,106,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,108,"eturn iChronology.getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,111,"ublic long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,112,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,113,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,115,eturn iChronology.getTimeOnlyMillis
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,116,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,119,"ublic long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,120,nt millisOfDay)
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,121,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,123,"eturn iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,126,"ublic long getDateTimeMillis(long instant,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,127,"nt hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,128,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,129,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,131,eturn iChronology.getDateTimeMillis
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,132,"instant,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,133,"ourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,136,"ublic long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,137,"nt hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,138,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,139,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,141,eturn iChronology.getDateTimeMillis
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,142,"year, monthOfYear, dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,143,"ourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,146,ublic long getGregorianJulianCutoverMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,147,eturn iChronology.getGregorianJulianCutoverMillis();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,150,ublic boolean isCenturyISO() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,151,eturn false;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,154,ublic final int getMinimumDaysInFirstWeek() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,155,eturn iChronology.getMinimumDaysInFirstWeek();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,10, are met:
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,54,ackage org.joda.time.chrono.gj;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,56,mport java.io.IOException;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,57,mport java.io.ObjectInputStream;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,58,mport java.io.ObjectOutputStream;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,59,mport java.io.Serializable;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,60,mport java.lang.ref.SoftReference;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,61,mport java.util.ArrayList;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,62,mport java.util.HashMap;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,64,mport org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,65,/ Import for @link support
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,66,mport org.joda.time.DateTimeConstants;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,67,mport org.joda.time.DateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,68,mport org.joda.time.DateTimeZone;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,69,mport org.joda.time.DurationField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,70,mport org.joda.time.Instant;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,71,mport org.joda.time.ReadableInstant;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,72,mport org.joda.time.format.DateTimePrinter;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,73,mport org.joda.time.format.ISODateTimeFormat;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,76, GJChronology provides access to the individual date time fields
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,77, for the Gregorian/Julian defined chronological calendar system.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,78, <p>
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,79," The Gregorian calendar replaced the Julian calendar, and the point in time"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,80, when this chronology switches can be controlled using the second parameter
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,81, of the getInstance method. By default this cutover is set to the date the
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,82," Gregorian calendar was first instituted, October 15, 1582."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,83, <p>
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,84," Before this date, this chronology uses the proleptic Julian calendar"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,85, (proleptic means extending indefinitely). The Julian calendar has leap
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,86," years every four years, whereas the Gregorian has special rules for 100"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,87, and 400 years. A meaningful result will thus be obtained for all input
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,88," values. However before March 1, 4 CE, Julian leap years were irregular,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,89, and before 45 BCE there was no Julian calendar.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,90, <p>
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,91, This chronology differs from {@link java.util.GregorianCalendar
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,92, java.util.GregorianCalendar} in that years in BCE are returned
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,93, correctly. Thus year 1 BCE is returned as -1 instead of 1. The yearOfEra
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,94, field produces results compatible with GregorianCalendar.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,95, <p>
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,96," The Julian calendar does not have a year zero, and so year -1 is followed by"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,97, year 1. If the Gregorian cutover date is specified at or before year -1
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,98," (Julian), year zero is defined. In other words, the proleptic Gregorian"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,99, chronology implemented by this class has a year zero.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,100, <p>
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,101, A pure proleptic Gregorian chronology is obtained by specifying a cutover of
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,102," Long.MIN_VALUE. Likewise, a pure Julian chronology is obtained with a"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,103, cutover of Long.MAX_VALUE.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,104, <p>
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,105, GJChronology is thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,107, @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,108, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,109, @since 1.0
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,111,ublic abstract class GJChronology extends Chronology {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,113,tatic final long serialVersionUID = 3258844765135550418L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,116, The default GregorianJulian cutover point
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,118,tatic final long DEFAULT_CUTOVER = -12219292800000L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,120,/ Cache that maps DateTimeZones to Factory instances.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,121,rivate static HashMap cZonesToFactories = new HashMap();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,123,ransient DurationField iYearsField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,124,ransient DurationField iCenturiesField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,125,ransient DurationField iMonthsField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,126,ransient DurationField iWeekyearsField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,128,ransient DurationField iMillisField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,129,ransient DurationField iSecondsField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,130,ransient DurationField iMinutesField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,131,ransient DurationField iHoursField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,132,ransient DurationField iDaysField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,133,ransient DurationField iWeeksField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,135,ransient DateTimeField iYearField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,136,ransient DateTimeField iYearOfEraField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,137,ransient DateTimeField iYearOfCenturyField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,138,ransient DateTimeField iCenturyOfEraField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,139,ransient DateTimeField iEraField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,140,ransient DateTimeField iDayOfWeekField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,141,ransient DateTimeField iDayOfMonthField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,142,ransient DateTimeField iDayOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,143,ransient DateTimeField iMonthOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,144,ransient DateTimeField iWeekOfWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,145,ransient DateTimeField iWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,147,ransient DateTimeField iMillisOfSecondField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,148,ransient DateTimeField iMillisOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,149,ransient DateTimeField iSecondOfMinuteField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,150,ransient DateTimeField iSecondOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,151,ransient DateTimeField iMinuteOfHourField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,152,ransient DateTimeField iMinuteOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,153,ransient DateTimeField iHourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,154,ransient DateTimeField iHourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,155,ransient DateTimeField iClockhourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,156,ransient DateTimeField iClockhourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,157,ransient DateTimeField iHalfdayOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,160, Factory method returns instances of the default GJ chronology. This uses
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,161," a cutover date of October 15, 1582 (Gregorian) 00:00:00 UTC. For this"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,162," value, October 4, 1582 (Julian) is followed by October 15, 1582"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,163, (Gregorian).
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,165, <p>The first day of the week is designated to be
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,166," {@link DateTimeConstants#MONDAY Monday}, and the minimum days in the"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,167, first week of the year is 4.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,169, <p>The time zone of the returned instance is UTC.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,171,ublic static GJChronology getInstanceUTC() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,172,"eturn getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, false);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,176, Factory method returns instances of the default GJ chronology. This uses
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,177," a cutover date of October 15, 1582 (Gregorian) 00:00:00 UTC. For this"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,178," value, October 4, 1582 (Julian) is followed by October 15, 1582"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,179, (Gregorian).
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,181, <p>The first day of the week is designated to be
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,182," {@link DateTimeConstants#MONDAY Monday}, and the minimum days in the"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,183, first week of the year is 4.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,185, <p>The returned chronology is in the default time zone.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,187,ublic static GJChronology getInstance() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,188,"eturn getInstance(DateTimeZone.getDefault(), DEFAULT_CUTOVER, false);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,192, Factory method returns instances of the default GJ chronology. This uses
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,193," a cutover date of October 15, 1582 (Gregorian) 00:00:00 UTC. For this"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,194," value, October 4, 1582 (Julian) is followed by October 15, 1582"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,195, (Gregorian).
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,197, <p>The first day of the week is designated to be
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,198," {@link DateTimeConstants#MONDAY Monday}, and the minimum days in the"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,199, first week of the year is 4.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,201," @param zone  the time zone to use, null is default"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,203,ublic static GJChronology getInstance(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,204,"eturn getInstance(zone, DEFAULT_CUTOVER, false);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,208, Factory method allowing the Gregorian cutover point and year zero
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,209," handling to be set. If the cutover millis is Long.MIN_VALUE, a proleptic"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,210," Gregorian calendar is returned. If the cutover millis is Long.MAX_VALUE,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,211, a proleptic Julian calendar is returned.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,213, <p>The first day of the week is designated to be
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,214," {@link DateTimeConstants#MONDAY Monday}, and the minimum days in the"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,215, first week of the year is 4.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,217," @param zone  the time zone to use, null is default"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,218," @param gregorianCutover  the cutover as a ReadableInstant, null means default"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,219," @param centuryISO  when true, century related fields follow ISO rules"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,221,"ublic static GJChronology getInstance(DateTimeZone zone,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,222,"eadableInstant gregorianCutover,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,223,oolean centuryISO)
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,225,"eturn getInstance(zone, gregorianCutover, centuryISO, 4);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,229, Factory method allowing the Gregorian cutover point and year zero
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,230," handling to be set.  If the cutover is Long.MIN_VALUE, a proleptic"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,231," Gregorian calendar is returned. If the cutover is Long.MAX_VALUE, a"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,232, proleptic Julian calendar is returned.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,234, <p>The first day of the week is designated to be
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,235," {@link DateTimeConstants#MONDAY Monday}, and the minimum days in the"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,236, first week of the year is 4.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,238," @param zone  the time zone to use, null is default"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,239, @param gregorianCutover  the cutover as milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,240," @param centuryISO  when true, century related fields follow ISO rules"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,242,"ublic static synchronized GJChronology getInstance(DateTimeZone zone,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,243,"ong gregorianCutover,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,244,oolean centuryISO)
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,246,"eturn getInstance(zone, gregorianCutover, centuryISO, 4);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,250, Factory method allowing the Gregorian cutover point and year zero
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,251," handling to be set.  If the cutover is Long.MIN_VALUE, a proleptic"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,252," Gregorian calendar is returned. If the cutover is Long.MAX_VALUE, a"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,253, proleptic Julian calendar is returned.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,255," @param zone  the time zone to use, null is default"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,256," @param gregorianCutover  the cutover as a ReadableInstant, null means default"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,257," @param centuryISO  when true, century related fields follow ISO rules"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,258, @param minDaysInFirstWeek  minimum number of days in first week of the year; ISO is 4
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,260,"ublic static synchronized GJChronology getInstance(DateTimeZone zone,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,261,"eadableInstant gregorianCutover,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,262,"oolean centuryISO,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,263,nt minDaysInFirstWeek)
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,265,ong cutover;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,266,f (gregorianCutover != null) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,267,utover = gregorianCutover.getMillis();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,268, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,269,utover = DEFAULT_CUTOVER;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,271,"eturn getInstance(zone, cutover, centuryISO, minDaysInFirstWeek);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,275, Factory method allowing the Gregorian cutover point and year zero
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,276," handling to be set.  If the cutover is Long.MIN_VALUE, a proleptic"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,277," Gregorian calendar is returned. If the cutover is Long.MAX_VALUE, a"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,278, proleptic Julian calendar is returned.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,280," @param zone  the time zone to use, null is default"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,281, @param gregorianCutover  the cutover as milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,282," @param centuryISO  when true, century related fields follow ISO rules"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,283, @param minDaysInFirstWeek  minimum number of days in first week of the year; ISO is 4
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,285,"ublic static synchronized GJChronology getInstance(DateTimeZone zone,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,286,"ong gregorianCutover,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,287,"oolean centuryISO,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,288,nt minDaysInFirstWeek)
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,290,f (zone == null) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,291,one = DateTimeZone.getDefault();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,294,f (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,295,"hrow new IllegalArgumentException(""Invalid min days in first week: "" + minDaysInFirstWeek);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,298,actory factory;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,299,etFactory: {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,300,oftReference ref = (SoftReference)cZonesToFactories.get(zone);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,301,f (ref != null) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,302,actory = (Factory)ref.get();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,303,f (factory != null) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,304,reak getFactory;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,307,actory = new Factory(zone);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,308,"ZonesToFactories.put(zone, new SoftReference(factory));"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,311,"eturn factory.getInstance(gregorianCutover, centuryISO, minDaysInFirstWeek);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,314,JChronology() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,315,uper();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,318,ublic Chronology withDateTimeZone(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,319,f (zone == null) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,320,one = DateTimeZone.getDefault();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,322,f (zone == getDateTimeZone()) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,323,eturn this;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,325,f (zone == DateTimeZone.UTC) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,326,eturn withUTC();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,328,"eturn getInstance(zone, getGregorianJulianCutoverMillis(),"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,329,"sCenturyISO(), getMinimumDaysInFirstWeek());"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,332,/ This method is overridden by GJZonedChronology.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,333,ublic DateTimeZone getDateTimeZone() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,334,eturn DateTimeZone.UTC;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,338, Gets the cutover instant between Gregorian and Julian chronologies.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,339, @return the cutover instant
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,341,ublic Instant getGregorianJulianCutover() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,342,eturn new Instant(getGregorianJulianCutoverMillis());
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,346, Gets the cutover millis between Gregorian and Julian chronologies.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,347, @return the cutover millis
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,349,ublic abstract long getGregorianJulianCutoverMillis();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,352," Returns true when century fields follow ISO rules. In ISO rules, the"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,353," century is simply the year divided by 100, and the year of century is"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,354, the remainder.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,355, <p>
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,356," When false is returned, the first century is defined to start on year"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,357," one, and the year of century can range from 1 to 100."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,359,ublic abstract boolean isCenturyISO();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,361,ublic abstract int getMinimumDaysInFirstWeek();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,363,/ Milliseconds
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,366,ublic DurationField millis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,367,eturn iMillisField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,370,ublic DateTimeField millisOfSecond() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,371,eturn iMillisOfSecondField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,374,ublic DateTimeField millisOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,375,eturn iMillisOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,378,/ Seconds
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,381,ublic DurationField seconds() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,382,eturn iSecondsField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,385,ublic DateTimeField secondOfMinute() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,386,eturn iSecondOfMinuteField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,389,ublic DateTimeField secondOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,390,eturn iSecondOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,393,/ Minutes
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,396,ublic DurationField minutes() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,397,eturn iMinutesField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,400,ublic DateTimeField minuteOfHour() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,401,eturn iMinuteOfHourField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,404,ublic DateTimeField minuteOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,405,eturn iMinuteOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,408,/ Hours
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,411,ublic DurationField hours() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,412,eturn iHoursField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,415,ublic DateTimeField hourOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,416,eturn iHourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,419,ublic DateTimeField clockhourOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,420,eturn iClockhourOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,423,ublic DateTimeField hourOfHalfday() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,424,eturn iHourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,427,ublic DateTimeField clockhourOfHalfday() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,428,eturn iClockhourOfHalfdayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,431,ublic DateTimeField halfdayOfDay() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,432,eturn iHalfdayOfDayField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,435,/ Day
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,438,ublic DurationField days() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,439,eturn iDaysField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,442,ublic DateTimeField dayOfWeek() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,443,eturn iDayOfWeekField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,446,ublic DateTimeField dayOfMonth() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,447,eturn iDayOfMonthField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,450,ublic DateTimeField dayOfYear() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,451,eturn iDayOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,454,/ Week
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,457,ublic DurationField weeks() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,458,eturn iWeeksField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,461,ublic DateTimeField weekOfWeekyear() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,462,eturn iWeekOfWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,465,ublic DurationField weekyears() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,466,eturn iWeekyearsField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,469,ublic DateTimeField weekyear() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,470,eturn iWeekyearField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,473,/ Month
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,476,ublic DurationField months() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,477,eturn iMonthsField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,480,ublic DateTimeField monthOfYear() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,481,eturn iMonthOfYearField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,484,/ Year
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,487,ublic DurationField years() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,488,eturn iYearsField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,491,ublic DateTimeField year() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,492,eturn iYearField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,495,ublic DateTimeField yearOfEra() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,496,eturn iYearOfEraField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,499,ublic DateTimeField yearOfCentury() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,500,eturn iYearOfCenturyField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,503,ublic DurationField centuries() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,504,eturn iCenturiesField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,507,ublic DateTimeField centuryOfEra() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,508,eturn iCenturyOfEraField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,511,ublic DateTimeField era() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,512,eturn iEraField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,515,/ Output
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,518, Gets a debugging toString.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,520, @return a debugging string
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,522,ublic String toString() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,523,tringBuffer sb = new StringBuffer(50);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,524,"b.append(""GJChronology"");"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,525,b.append('[');
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,526,b.append(getDateTimeZone().getID());
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,527,"b.append("", "");"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,529,ong cutover = getGregorianJulianCutoverMillis();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,530,f (cutover == Long.MAX_VALUE) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,531,"b.append(""julian"");"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,532, else if (cutover == Long.MIN_VALUE) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,533,"b.append(""gregorian"");"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,534, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,535,"b.append(""cutover="");"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,536,SODateTimeFormat format = ISODateTimeFormat.getInstance(withUTC());
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,537,ateTimePrinter printer;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,538,f (withUTC().getTimeOnlyMillis(cutover) == 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,539,rinter = format.date();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,540, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,541,rinter = format.dateTime();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,543,"rinter.printTo(sb, cutover);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,546,"b.append("", century="");"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,547,"b.append(isCenturyISO() ? ""iso"" : ""gj"");"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,549,"b.append("", mdfw="");"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,550,b.append(getMinimumDaysInFirstWeek());
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,551,b.append(']');
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,553,eturn sb.toString();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,557, Serialize GJChronology instances using a small stub. This reduces the
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,558," serialized size, and deserialized instances come from the cache."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,560, <p>This method is intentionally package-private in order for sub-classes
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,561, to inherit this method.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,563,bject writeReplace() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,564,"eturn new Stub(getDateTimeZone(),"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,565,"etGregorianJulianCutoverMillis(),"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,566,"sCenturyISO(),"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,567,etMinimumDaysInFirstWeek());
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,571, Used by subclass constructors to copy all the fields of another
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,572, chronology into this one.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,574,oid copyFields(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,575,YearsField = chrono.years();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,576,CenturiesField = chrono.centuries();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,577,MonthsField = chrono.months();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,578,WeekyearsField = chrono.weekyears();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,580,MillisField = chrono.millis();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,581,SecondsField = chrono.seconds();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,582,MinutesField = chrono.minutes();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,583,HoursField = chrono.hours();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,584,DaysField = chrono.days();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,585,WeeksField = chrono.weeks();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,587,YearField = chrono.year();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,588,YearOfEraField = chrono.yearOfEra();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,589,YearOfCenturyField = chrono.yearOfCentury();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,590,CenturyOfEraField = chrono.centuryOfEra();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,591,EraField = chrono.era();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,592,DayOfWeekField = chrono.dayOfWeek();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,593,DayOfMonthField = chrono.dayOfMonth();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,594,DayOfYearField = chrono.dayOfYear();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,595,MonthOfYearField = chrono.monthOfYear();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,596,WeekOfWeekyearField = chrono.weekOfWeekyear();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,597,WeekyearField = chrono.weekyear();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,599,MillisOfSecondField = chrono.millisOfSecond();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,600,MillisOfDayField = chrono.millisOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,601,SecondOfMinuteField = chrono.secondOfMinute();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,602,SecondOfDayField = chrono.secondOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,603,MinuteOfHourField = chrono.minuteOfHour();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,604,MinuteOfDayField = chrono.minuteOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,605,HourOfDayField = chrono.hourOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,606,HourOfHalfdayField = chrono.hourOfHalfday();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,607,ClockhourOfDayField = chrono.clockhourOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,608,ClockhourOfHalfdayField = chrono.clockhourOfHalfday();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,609,HalfdayOfDayField = chrono.halfdayOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,612,rivate static final class Stub implements Serializable {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,613,tatic final long serialVersionUID = -1220272966668670015L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,615,rivate transient DateTimeZone iZone;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,616,rivate transient long iCutover;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,617,rivate transient boolean iCenturyISO;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,618,rivate transient byte iMinDaysInFirstWeek;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,620,"tub(DateTimeZone zone, long gregorianCutover,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,621,"oolean centuryISO, int minDaysInFirstWeek)"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,623,Zone = zone;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,624,Cutover = gregorianCutover;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,625,CenturyISO = centuryISO;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,626,MinDaysInFirstWeek = (byte)minDaysInFirstWeek;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,629,bject readResolve() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,630,"eturn GJChronology.getInstance(iZone,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,631,"Cutover,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,632,"CenturyISO,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,633,MinDaysInFirstWeek);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,636,rivate void writeObject(ObjectOutputStream out) throws IOException {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,637,ut.writeBoolean(iCenturyISO);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,638,ut.writeObject(iZone);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,639,ut.writeLong(iCutover);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,640,ut.writeByte(iMinDaysInFirstWeek);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,643,"rivate void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,644,CenturyISO = in.readBoolean();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,645,Zone = (DateTimeZone)in.readObject();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,646,Cutover = in.readLong();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,647,MinDaysInFirstWeek = in.readByte();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,652, Creates instances for a specific time zone.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,654,rivate static final class Factory {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,655,rivate final DateTimeZone iZone;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,657,/ A simple cache that performs in O(n) time.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,658,rivate ArrayList iCache;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,660,actory(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,661,Zone = zone;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,662,Cache = new ArrayList();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,665,"ublic synchronized GJChronology getInstance(long gregorianCutover,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,666,"oolean centuryISO,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,667,nt minDaysInFirstWeek)
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,669,JChronology chrono;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,670,rrayList cache = iCache;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,672,or (int i=cache.size(); --i>=0; ) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,673,hrono = (GJChronology)((SoftReference)cache.get(i)).get();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,674,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,675,ache.remove(i);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,676,ontinue;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,679,f (chrono.getGregorianJulianCutoverMillis() == gregorianCutover &&
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,680,hrono.isCenturyISO() == centuryISO &&
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,681,hrono.getMinimumDaysInFirstWeek() == minDaysInFirstWeek) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,683,eturn chrono;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,687,f (iZone != DateTimeZone.UTC) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,688,hrono = GJChronology.getInstance
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,689,"DateTimeZone.UTC, gregorianCutover, centuryISO, minDaysInFirstWeek);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,690,"hrono = new GJZonedChronology(chrono, iZone);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,691, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,692,f (gregorianCutover == Long.MAX_VALUE) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,693,hrono = new JulianChronology(minDaysInFirstWeek);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,694, else if (gregorianCutover == Long.MIN_VALUE) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,695,hrono = new GregorianChronology(minDaysInFirstWeek);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,696, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,697,ulianChronology julian_utc = (JulianChronology)GJChronology.getInstance
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,698,"DateTimeZone.UTC, Long.MAX_VALUE, true, minDaysInFirstWeek);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,699,regorianChronology gregorian_utc = (GregorianChronology)GJChronology.getInstance
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,700,"DateTimeZone.UTC, Long.MIN_VALUE, true, minDaysInFirstWeek);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,702,"hrono = new CutoverChronology(julian_utc, gregorian_utc, gregorianCutover);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,705,f (!centuryISO) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,706,hrono = new GJCenturyChronology(chrono);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,710,ache.add(new SoftReference(chrono));
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,711,eturn chrono;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,10, are met:
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,54,ackage org.joda.time.chrono.gj;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,56,mport org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,57,mport org.joda.time.DateTimeZone;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,58,mport org.joda.time.chrono.ZonedChronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,61, A special zoned chronology for the GJ chronology.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,63, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,64, @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,65, @since 1.0
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,67,inal class GJZonedChronology extends GJChronology {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,69,tatic final long serialVersionUID = -4148749408058922172L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,71,rivate final GJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,72,rivate final DateTimeZone iZone;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,73,rivate final ZonedChronology iZonedChronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,75,"JZonedChronology(GJChronology chrono, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,76,Chronology = chrono;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,77,Zone = zone;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,78,"opyFields(iZonedChronology = new ZonedChronology(chrono, zone));"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,81,ublic DateTimeZone getDateTimeZone() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,82,eturn iZone;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,85,ublic Chronology withUTC() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,86,eturn iChronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,89,"ublic long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,90,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,92,"eturn iZonedChronology.getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,95,"ublic long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,96,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,97,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,99,eturn iZonedChronology.getTimeOnlyMillis
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,100,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,103,"ublic long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,104,nt millisOfDay)
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,105,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,107,"eturn iZonedChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,110,"ublic long getDateTimeMillis(long instant,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,111,"nt hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,112,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,113,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,115,eturn iZonedChronology.getDateTimeMillis
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,116,"instant,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,117,"ourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,120,"ublic long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,121,"nt hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,122,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,123,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,125,eturn iZonedChronology.getDateTimeMillis
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,126,"year, monthOfYear, dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,127,"ourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,130,ublic long getGregorianJulianCutoverMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,131,eturn iChronology.getGregorianJulianCutoverMillis();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,134,ublic boolean isCenturyISO() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,135,eturn iChronology.isCenturyISO();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,138,ublic int getMinimumDaysInFirstWeek() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,139,eturn iChronology.getMinimumDaysInFirstWeek();
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,10, are met:
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,54,ackage org.joda.time.chrono.gj;
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,56,mport org.joda.time.DateTimeConstants;
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,60, @author Guy Allard
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,61, @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,62, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,64,inal class GregorianChronology extends ProlepticChronology {
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,66,tatic final long serialVersionUID = 3691407383323710523L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,68,regorianChronology(int minDaysInFirstWeek) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,69,uper(minDaysInFirstWeek);
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,72,ublic long getGregorianJulianCutoverMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,73,eturn Long.MIN_VALUE;
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,76,ublic boolean isLeapYear(int year) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,77,eturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,80,rotected long calculateFirstDayOfYearMillis(int year) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,81,/ Calculate relative to 2000 as that is on a 400 year boundary
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,82,/ and that makes the sum easier
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,83,nt relativeYear = year - 2000;
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,84,/ Initial value is just temporary.
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,85,nt leapYears = relativeYear / 100;
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,86,f (relativeYear <= 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,87,/ Add 3 before shifting right since /4 and >>2 behave differently
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,88,/ on negative numbers. When the expression is written as
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,89,"/ (relativeYear / 4) - (relativeYear / 100) + (relativeYear / 400),"
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,90,"/ it works for both positive and negative values, except this optimization"
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,91,/ eliminates two divisions.
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,92,eapYears = ((relativeYear + 3) >> 2) - leapYears + ((leapYears + 3) >> 2);
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,93, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,94,eapYears = (relativeYear >> 2) - leapYears + (leapYears >> 2);
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,95,/ For post 2000 an adjustment is needed as jan1st is before leap day
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,96,f (!isLeapYear(year)) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,97,eapYears++;
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,101,ong millis = (relativeYear * 365L + leapYears)
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,102, (long)DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,104,/ Previous line was reduced from this to eliminate a multiplication.
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,105,/ millis = ((relativeYear - leapYears) * 365L + leapYears * 366) * MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,106,/ (x - y)*c + y*(c + 1) => x*c - y*c + y*c + y => x*c + y
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,108,eturn millis + MILLIS_1970_TO_2000;
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,111,rotected int getMinYear() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,112,/ The lowest year that can be fully supported.
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,113,eturn -292275054;
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,116,rotected int getMaxYear() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,117,/ The highest year that can be fully supported.
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,118,eturn 292278993;
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,121,rotected long getRoughMillisPerYear() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,122,eturn (long) (365.2425 * DateTimeConstants.MILLIS_PER_DAY);
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,125,rotected long getRoughMillisPerMonth() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,126,eturn (long) (365.2425 * DateTimeConstants.MILLIS_PER_DAY / 12);
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,10, are met:
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,54,ackage org.joda.time.chrono.gj;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,56,mport org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,57,mport org.joda.time.DateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,58,mport org.joda.time.chrono.DelegatedDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,59,mport org.joda.time.chrono.Utils;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,62, Year zero is dropped from the year and weekyear fields.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,64, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,66,inal class JulianChronology extends GJChronology {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,68,tatic final long serialVersionUID = -8731039522547897247L;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,70,rivate final JulianWithYearZeroChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,73, @param chrono wrapped chronology
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,75,ulianChronology(int minDaysInFirstWeek) {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,76,ulianWithYearZeroChronology chrono =
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,77,ew JulianWithYearZeroChronology(minDaysInFirstWeek);
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,78,Chronology = chrono;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,79,opyFields(chrono);
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,81,/ Override only the fields that differ.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,83,YearField = new NoYearZeroField(chrono.year());
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,84,WeekyearField = new NoWeekyearZeroField(chrono.weekyear());
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,87,ublic Chronology withUTC() {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,88,eturn this;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,91,"ublic long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,92,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,94,ear = adjustYearForSet(year);
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,95,"eturn iChronology.getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,98,"ublic long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,99,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,100,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,102,eturn iChronology.getTimeOnlyMillis
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,103,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,106,"ublic long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,107,nt millisOfDay)
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,108,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,110,ear = adjustYearForSet(year);
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,111,"eturn iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,114,"ublic long getDateTimeMillis(long instant,"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,115,"nt hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,116,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,117,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,119,eturn iChronology.getDateTimeMillis
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,120,"instant,"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,121,"ourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,124,"ublic long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,125,"nt hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,126,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,127,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,129,ear = adjustYearForSet(year);
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,130,eturn iChronology.getDateTimeMillis
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,131,"year, monthOfYear, dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,132,"ourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,135,ublic long getGregorianJulianCutoverMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,136,eturn iChronology.getGregorianJulianCutoverMillis();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,139,ublic boolean isCenturyISO() {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,140,eturn iChronology.isCenturyISO();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,143,ublic int getMinimumDaysInFirstWeek() {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,144,eturn iChronology.getMinimumDaysInFirstWeek();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,147,nt adjustYearForSet(int year) {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,148,f (year <= 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,149,f (year == 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,150,"hrow new IllegalArgumentException(""Invalid year: "" + year);"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,152,ear++;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,154,eturn year;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,157,rivate class NoYearZeroField extends DelegatedDateTimeField {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,158,tatic final long serialVersionUID = -8869148464118507846L;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,160,rivate transient int iMinYear;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,162,oYearZeroField(DateTimeField field) {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,163,uper(field);
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,164,MinYear = super.getMinimumValue() - 1;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,167,ublic int get(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,168,nt year = super.get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,169,f (year <= 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,170,ear--;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,172,eturn year;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,175,"ublic long set(long millis, int year) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,176,"tils.verifyValueBounds(this, year, iMinYear, getMaximumValue());"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,177,"eturn super.set(millis, adjustYearForSet(year));"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,180,ublic int getMinimumValue() {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,181,eturn iMinYear;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,184,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,185,eturn JulianChronology.this.year();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,189,rivate final class NoWeekyearZeroField extends NoYearZeroField {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,190,tatic final long serialVersionUID = -5013429014495501104L;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,192,oWeekyearZeroField(DateTimeField field) {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,193,uper(field);
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,196,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,197,eturn JulianChronology.this.weekyear();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,10, are met:
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,54,ackage org.joda.time.chrono.gj;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,56,mport org.joda.time.DateTimeConstants;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,59, JulianWithZeroChronology includes year zero to simplify implementation.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,61, @author Guy Allard
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,62, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,63, @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,65,inal class JulianWithYearZeroChronology extends ProlepticChronology {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,67,tatic final long serialVersionUID = 9044685826106463217L;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,69,ulianWithYearZeroChronology(int minDaysInFirstWeek) {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,70,uper(minDaysInFirstWeek);
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,73,ublic long getGregorianJulianCutoverMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,74,eturn Long.MAX_VALUE;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,77,ublic boolean isLeapYear(int year) {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,78,eturn (year & 3) == 0;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,81,rotected long calculateFirstDayOfYearMillis(int year) {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,82,/ Java epoch is 1970-01-01 Gregorian which is 1969-12-19 Julian.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,83,/ Calculate relative to the nearest leap year and account for the
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,84,/ difference later.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,86,nt relativeYear = year - 1968;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,87,nt leapYears;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,88,f (relativeYear <= 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,89,/ Add 3 before shifting right since /4 and >>2 behave differently
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,90,/ on negative numbers.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,91,eapYears = (relativeYear + 3) >> 2;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,92, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,93,eapYears = relativeYear >> 2;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,94,/ For post 1968 an adjustment is needed as jan1st is before leap day
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,95,f (!isLeapYear(year)) {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,96,eapYears++;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,100,ong millis = (relativeYear * 365L + leapYears)
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,101, (long)DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,103,/ Adjust to account for difference between 1968-01-01 and 1969-12-19.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,105,eturn millis - (366L + 365 - 13) * DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,108,rotected int getMinYear() {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,109,/ The lowest year that can be fully supported.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,110,eturn -292269053;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,113,rotected int getMaxYear() {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,114,/ The highest year that can be fully supported.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,115,eturn 292272992;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,118,rotected long getRoughMillisPerYear() {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,119,eturn (long) (365.25 * DateTimeConstants.MILLIS_PER_DAY);
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,122,rotected long getRoughMillisPerMonth() {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,123,eturn (long) (365.25 * DateTimeConstants.MILLIS_PER_DAY / 12);
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,58,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,58,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,61,mport org.joda.time.chrono.buddhist.BuddhistChronology;
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,62,mport org.joda.time.chrono.gj.GJChronology;
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,63,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,61,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,62,import org.joda.time.chrono.GJChronology;
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,63,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,64,import org.joda.time.chrono.JulianChronology;
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,65,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,129,"eturn GJChronology.getInstance(zone, gc.getGregorianChange().getTime(), false);"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,131,long cutover = gc.getGregorianChange().getTime();
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,132,if (cutover == Long.MIN_VALUE) {
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,133,return GregorianChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,134,} else if (cutover == Long.MAX_VALUE) {
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,135,return JulianChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,136,} else {
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,137,"return GJChronology.getInstance(zone, cutover, 4);"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,59,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,59,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,59,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,59,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,62,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,62,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,54,package org.joda.time.field;
False,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,239,nt wrapped = Utils.getWrappedValue
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,239,int wrapped = FieldUtils.getWrappedValue
False,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/field/AbstractDurationField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/field/AbstractDurationField.java,54,package org.joda.time.field;
False,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/field/AbstractDurationField.java,109,eturn Utils.safeToInt(getValueAsLong(duration));
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/field/AbstractDurationField.java,109,return FieldUtils.safeToInt(getValueAsLong(duration));
False,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/field/AbstractDurationField.java,141,"eturn Utils.safeToInt(getValueAsLong(duration, instant));"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/field/AbstractDurationField.java,141,"return FieldUtils.safeToInt(getValueAsLong(duration, instant));"
False,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/field/AbstractDurationField.java,171,"eturn Utils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/field/AbstractDurationField.java,171,"return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));"
False,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DecoratedDateTimeField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DecoratedDateTimeField.java,54,package org.joda.time.field;
False,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/field/DecoratedDurationField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/field/DecoratedDurationField.java,54,package org.joda.time.field;
False,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,54,package org.joda.time.field;
False,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/field/DelegatedDurationField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/field/DelegatedDurationField.java,54,package org.joda.time.field;
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,54,package org.joda.time.field;
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,190,"eturn set(instant, Utils.getWrappedValue(get(instant), amount, iMin, iMax));"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,190,"return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,210,"tils.verifyValueBounds(this, value, iMin, iMax);"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java,210,"FieldUtils.verifyValueBounds(this, value, iMin, iMax);"
False,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,54,package org.joda.time.field;
False,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,66,ublic class Utils {
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,66,public class FieldUtils {
False,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,71,rivate Utils() {
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,71,private FieldUtils() {
False,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java,54,package org.joda.time.field;
False,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java,127,"eturn Utils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java,127,"return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));"
False,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,54,package org.joda.time.field;
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,65,* @see org.joda.time.chrono.LenientChronology
False,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,54,package org.joda.time.field;
False,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,108,eturn Utils.safeToInt(duration);
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,108,return FieldUtils.safeToInt(duration);
False,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,116,eturn Utils.safeToInt(duration);
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,116,return FieldUtils.safeToInt(duration);
False,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,148,eturn Utils.safeToInt(minuendInstant - subtrahendInstant);
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,148,return FieldUtils.safeToInt(minuendInstant - subtrahendInstant);
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,54,package org.joda.time.field;
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,114,"tils.verifyValueBounds(this, value, 1, max);"
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,114,"FieldUtils.verifyValueBounds(this, value, 1, max);"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,54,package org.joda.time.field;
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,139,"tils.verifyValueBounds(this, get(instant), iMin, iMax);"
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,139,"FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,153,"tils.verifyValueBounds(this, get(instant), iMin, iMax);"
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,153,"FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,166,"eturn set(instant, Utils.getWrappedValue(get(instant), amount, iMin, iMax));"
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,166,"return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,178,"tils.verifyValueBounds(this, value, iMin, iMax);"
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java,178,"FieldUtils.verifyValueBounds(this, value, iMin, iMax);"
False,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,54,package org.joda.time.field;
False,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,133,nt wrappedValue = Utils.getWrappedValue
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,133,int wrappedValue = FieldUtils.getWrappedValue
False,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,148,"tils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java,148,"FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());"
False,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,54,package org.joda.time.field;
False,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,130,"eturn Utils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,130,"return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));"
False,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,146,"tils.verifyValueBounds(this, value, getMinimumValue(),"
False,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,147,"etMaximumValueForSet(instant, value));"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,146,"FieldUtils.verifyValueBounds(this, value, getMinimumValue(),"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationDateTimeField.java,147,"getMaximumValueForSet(instant, value));"
False,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,54,package org.joda.time.field;
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,54,package org.joda.time.field;
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,144,"eturn set(instant, Utils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));"
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,144,"return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));"
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,156,"tils.verifyValueBounds(this, value, 0, iDivisor - 1);"
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java,156,"FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);"
False,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,54,package org.joda.time.field;
False,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/field/StrictDateTimeField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/field/StrictDateTimeField.java,54,package org.joda.time.field;
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/field/StrictDateTimeField.java,65,* @see org.joda.time.chrono.StrictChronology
False,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/field/StrictDateTimeField.java,103,tils.verifyValueBounds
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/field/StrictDateTimeField.java,104,FieldUtils.verifyValueBounds
False,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,54,package org.joda.time.field;
False,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,54,ackage org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,54,package org.joda.time.field;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,71,mport org.joda.time.chrono.RemainderDateTimeField;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,72,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,71,import org.joda.time.field.RemainderDateTimeField;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,72,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,65,mport org.joda.time.chrono.MillisDurationField;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,66,mport org.joda.time.chrono.PreciseDateTimeField;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,67,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,65,import org.joda.time.field.MillisDurationField;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,66,import org.joda.time.field.PreciseDateTimeField;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,67,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,61,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,61,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,71,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,71,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,83,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,83,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,101,tatic final DateTimeOfYear START_OF_YEAR = new DateTimeOfYear();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,101,static DateTimeOfYear cStartOfYear;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,103,static Chronology cLenientISO;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,164,static DateTimeOfYear getStartOfYear() {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,165,if (cStartOfYear == null) {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,166,cStartOfYear = new DateTimeOfYear();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,168,return cStartOfYear;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,171,static Chronology getLenientISOChronology() {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,172,if (cLenientISO == null) {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,173,cLenientISO = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,175,return cLenientISO;
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,262,hronology chrono = new LenientChronology(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,264,getInstance(chrono)
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,279,.getInstance(getLenientISOChronology())
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,266,"utableDateTime mdt = new MutableDateTime(0, chrono);"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,281,"MutableDateTime mdt = new MutableDateTime(0, getLenientISOChronology());"
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,771,ateTimeOfYear dtOfYear = START_OF_YEAR;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,786,DateTimeOfYear dtOfYear = getStartOfYear();
False,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeCommon.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeCommon.java,64,mport org.joda.time.chrono.gj.GJChronology;
False,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeCommon.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeCommon.java,65,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeCommon.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeCommon.java,64,import org.joda.time.chrono.GJChronology;
True,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeCommon.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeCommon.java,65,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/AbstractTestReadableInstant.java,JodaTime/src/test/org/joda/test/time/AbstractTestReadableInstant.java,70,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/AbstractTestReadableInstant.java,JodaTime/src/test/org/joda/test/time/AbstractTestReadableInstant.java,70,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/BulkMDTTests.java,JodaTime/src/test/org/joda/test/time/BulkMDTTests.java,63,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/BulkMDTTests.java,JodaTime/src/test/org/joda/test/time/BulkMDTTests.java,63,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,70,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,70,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/TestBuddhistChronology.java,JodaTime/src/test/org/joda/test/time/TestBuddhistChronology.java,60,mport org.joda.time.chrono.buddhist.BuddhistChronology;
True,JodaTime/src/test/org/joda/test/time/TestBuddhistChronology.java,JodaTime/src/test/org/joda/test/time/TestBuddhistChronology.java,60,import org.joda.time.chrono.BuddhistChronology;
False,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,70,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,70,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/TestDateTimeCtors.java,JodaTime/src/test/org/joda/test/time/TestDateTimeCtors.java,61,mport org.joda.time.chrono.gj.GJChronology;
False,JodaTime/src/test/org/joda/test/time/TestDateTimeCtors.java,JodaTime/src/test/org/joda/test/time/TestDateTimeCtors.java,62,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/TestDateTimeCtors.java,JodaTime/src/test/org/joda/test/time/TestDateTimeCtors.java,61,import org.joda.time.chrono.GJChronology;
True,JodaTime/src/test/org/joda/test/time/TestDateTimeCtors.java,JodaTime/src/test/org/joda/test/time/TestDateTimeCtors.java,62,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,69,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,69,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,69,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,69,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,68,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,68,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,71,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,71,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/TestMutableDateTime.java,JodaTime/src/test/org/joda/test/time/TestMutableDateTime.java,66,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/TestMutableDateTime.java,JodaTime/src/test/org/joda/test/time/TestMutableDateTime.java,66,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/TestMutableDateTimeCtors.java,JodaTime/src/test/org/joda/test/time/TestMutableDateTimeCtors.java,62,mport org.joda.time.chrono.gj.GJChronology;
False,JodaTime/src/test/org/joda/test/time/TestMutableDateTimeCtors.java,JodaTime/src/test/org/joda/test/time/TestMutableDateTimeCtors.java,63,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/TestMutableDateTimeCtors.java,JodaTime/src/test/org/joda/test/time/TestMutableDateTimeCtors.java,62,import org.joda.time.chrono.GJChronology;
True,JodaTime/src/test/org/joda/test/time/TestMutableDateTimeCtors.java,JodaTime/src/test/org/joda/test/time/TestMutableDateTimeCtors.java,63,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/buddhist/TestBuddhistEraDateTimeField.java,JodaTime/src/test/org/joda/test/time/buddhist/TestBuddhistEraDateTimeField.java,65,mport org.joda.time.chrono.buddhist.BuddhistChronology;
True,JodaTime/src/test/org/joda/test/time/buddhist/TestBuddhistEraDateTimeField.java,JodaTime/src/test/org/joda/test/time/buddhist/TestBuddhistEraDateTimeField.java,65,import org.joda.time.chrono.BuddhistChronology;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,62,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,62,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,63,import org.joda.time.chrono.JulianChronology;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,206,"Actual = GJChronology.getInstance(DateTimeZone.UTC, Long.MIN_VALUE, true);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,207,iActual = GregorianChronology.getInstanceUTC();
False,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,209,"Actual = GJChronology.getInstance(DateTimeZone.UTC, Long.MAX_VALUE, true);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,210,iActual = JulianChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,60,import org.joda.time.chrono.AbstractChronology;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,84,bstract class TestGJChronology extends Chronology {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,85,abstract class TestGJChronology extends AbstractChronology {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,56,mport org.joda.time.chrono.ImpreciseDateTimeField;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,57,mport org.joda.time.chrono.Utils;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,56,import org.joda.time.field.ImpreciseDateTimeField;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,56,mport org.joda.time.chrono.Utils;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,56,import org.joda.time.field.FieldUtils;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,69,nt wrapped = Utils.getWrappedValue
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,69,int wrapped = FieldUtils.getWrappedValue
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,76,nt newWeekyear = weekyear + Utils.safeToInt(value);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,76,int newWeekyear = weekyear + FieldUtils.safeToInt(value);
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,56,mport org.joda.time.chrono.Utils;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,56,import org.joda.time.field.FieldUtils;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,69,nt wrapped = Utils.getWrappedValue
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,69,int wrapped = FieldUtils.getWrappedValue
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,76,nt newYear = year + Utils.safeToInt(value);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,76,int newYear = year + FieldUtils.safeToInt(value);
False,JodaTime/src/test/org/joda/test/time/gj/AbstractTestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/AbstractTestGJDateTimeField.java,57,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/gj/AbstractTestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/AbstractTestGJDateTimeField.java,57,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/test/time/gj/AbstractTestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/AbstractTestGJDateTimeField.java,71,rotected static final long GJ_CUTOVER_MILLIS = GJChronology.getInstanceUTC().getGregorianJulianCutoverMillis();
True,JodaTime/src/test/org/joda/test/time/gj/AbstractTestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/AbstractTestGJDateTimeField.java,71,protected static final long GJ_CUTOVER_MILLIS = GJChronology.getInstanceUTC().getGregorianCutover().getMillis();
False,JodaTime/src/test/org/joda/test/time/gj/TestGJClockhourOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJClockhourOfDayDateTimeField.java,60,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJClockhourOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJClockhourOfDayDateTimeField.java,60,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/test/time/gj/TestGJClockhourOfHalfdayDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJClockhourOfHalfdayDateTimeField.java,60,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJClockhourOfHalfdayDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJClockhourOfHalfdayDateTimeField.java,60,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/test/time/gj/TestGJDayOfMonthDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJDayOfMonthDateTimeField.java,59,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJDayOfMonthDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJDayOfMonthDateTimeField.java,59,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/test/time/gj/TestGJDayOfWeekDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJDayOfWeekDateTimeField.java,65,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJDayOfWeekDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJDayOfWeekDateTimeField.java,65,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/test/time/gj/TestGJDayOfYearDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJDayOfYearDateTimeField.java,59,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJDayOfYearDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJDayOfYearDateTimeField.java,59,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/test/time/gj/TestGJHalfdayOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJHalfdayOfDayDateTimeField.java,63,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJHalfdayOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJHalfdayOfDayDateTimeField.java,63,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/test/time/gj/TestGJHourOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJHourOfDayDateTimeField.java,60,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJHourOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJHourOfDayDateTimeField.java,60,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/test/time/gj/TestGJHourOfHalfdayDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJHourOfHalfdayDateTimeField.java,60,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJHourOfHalfdayDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJHourOfHalfdayDateTimeField.java,60,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/test/time/gj/TestGJMillisOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJMillisOfDayDateTimeField.java,60,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJMillisOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJMillisOfDayDateTimeField.java,60,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/test/time/gj/TestGJMillisOfSecondDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJMillisOfSecondDateTimeField.java,60,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJMillisOfSecondDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJMillisOfSecondDateTimeField.java,60,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/test/time/gj/TestGJMinuteOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJMinuteOfDayDateTimeField.java,60,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJMinuteOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJMinuteOfDayDateTimeField.java,60,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/test/time/gj/TestGJMinuteOfHourDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJMinuteOfHourDateTimeField.java,60,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJMinuteOfHourDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJMinuteOfHourDateTimeField.java,60,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/test/time/gj/TestGJMonthOfYearDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJMonthOfYearDateTimeField.java,62,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJMonthOfYearDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJMonthOfYearDateTimeField.java,62,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/test/time/gj/TestGJSecondOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJSecondOfDayDateTimeField.java,60,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJSecondOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJSecondOfDayDateTimeField.java,60,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/test/time/gj/TestGJSecondOfMinuteDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJSecondOfMinuteDateTimeField.java,60,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJSecondOfMinuteDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJSecondOfMinuteDateTimeField.java,60,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/test/time/gj/TestGJYearDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJYearDateTimeField.java,64,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJYearDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJYearDateTimeField.java,64,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/test/time/gj/TestGJYearOfCenturyDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJYearOfCenturyDateTimeField.java,62,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJYearOfCenturyDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJYearOfCenturyDateTimeField.java,62,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/test/time/gj/TestGJYearOfEraDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJYearOfEraDateTimeField.java,62,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJYearOfEraDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJYearOfEraDateTimeField.java,62,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/test/time/iso/TestISOClockhourOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOClockhourOfDayDateTimeField.java,60,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/iso/TestISOClockhourOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOClockhourOfDayDateTimeField.java,60,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/iso/TestISOClockhourOfHalfdayDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOClockhourOfHalfdayDateTimeField.java,60,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/iso/TestISOClockhourOfHalfdayDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOClockhourOfHalfdayDateTimeField.java,60,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/iso/TestISODayOfMonthDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISODayOfMonthDateTimeField.java,60,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/iso/TestISODayOfMonthDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISODayOfMonthDateTimeField.java,60,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/iso/TestISODayOfWeekDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISODayOfWeekDateTimeField.java,60,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/iso/TestISODayOfWeekDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISODayOfWeekDateTimeField.java,60,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/iso/TestISODayOfYearDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISODayOfYearDateTimeField.java,60,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/iso/TestISODayOfYearDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISODayOfYearDateTimeField.java,60,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/iso/TestISOHalfdayOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOHalfdayOfDayDateTimeField.java,60,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/iso/TestISOHalfdayOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOHalfdayOfDayDateTimeField.java,60,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/iso/TestISOHourOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOHourOfDayDateTimeField.java,60,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/iso/TestISOHourOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOHourOfDayDateTimeField.java,60,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/iso/TestISOHourOfHalfdayDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOHourOfHalfdayDateTimeField.java,60,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/iso/TestISOHourOfHalfdayDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOHourOfHalfdayDateTimeField.java,60,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/iso/TestISOMillisOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOMillisOfDayDateTimeField.java,60,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/iso/TestISOMillisOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOMillisOfDayDateTimeField.java,60,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/iso/TestISOMillisOfSecondDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOMillisOfSecondDateTimeField.java,60,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/iso/TestISOMillisOfSecondDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOMillisOfSecondDateTimeField.java,60,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/iso/TestISOMinuteOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOMinuteOfDayDateTimeField.java,60,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/iso/TestISOMinuteOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOMinuteOfDayDateTimeField.java,60,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/iso/TestISOMinuteOfHourDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOMinuteOfHourDateTimeField.java,60,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/iso/TestISOMinuteOfHourDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOMinuteOfHourDateTimeField.java,60,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/iso/TestISOMonthOfYearDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOMonthOfYearDateTimeField.java,60,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/iso/TestISOMonthOfYearDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOMonthOfYearDateTimeField.java,60,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/iso/TestISOSecondOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOSecondOfDayDateTimeField.java,60,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/iso/TestISOSecondOfDayDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOSecondOfDayDateTimeField.java,60,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/iso/TestISOSecondOfMinuteDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOSecondOfMinuteDateTimeField.java,60,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/iso/TestISOSecondOfMinuteDateTimeField.java,JodaTime/src/test/org/joda/test/time/iso/TestISOSecondOfMinuteDateTimeField.java,60,import org.joda.time.chrono.ISOChronology;

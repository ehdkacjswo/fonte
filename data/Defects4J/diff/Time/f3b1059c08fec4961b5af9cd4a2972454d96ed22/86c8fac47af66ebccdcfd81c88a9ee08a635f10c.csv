is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,76,suite.addTest(org.joda.time.chrono.TestAll.suite());
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,10,* are met:
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,54,package org.joda.time.chrono;
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,56,import junit.framework.Test;
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,57,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,58,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,61,* Entry point for all tests in this package.
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,63,* @version $Revision$ $Date$
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,65,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,67,public class TestAll extends TestCase {
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,69,public TestAll(String testName) {
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,70,super(testName);
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,73,public static Test suite() {
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,74,TestSuite suite = new TestSuite();
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,75,suite.addTest(TestISOChronology.suite());
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,76,return suite;
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,79,public static void main(String args[]) {
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,80,String[] testCaseName = {
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,81,TestAll.class.getName()
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,83,junit.textui.TestRunner.main(testCaseName);
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,10,* are met:
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,54,package org.joda.time.chrono;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,56,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,57,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,59,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,60,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,62,import org.joda.time.DateTimeConstants;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,63,import org.joda.time.DateTimeUtils;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,64,import org.joda.time.DateTimeZone;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,67,* This class is a Junit unit test for Instant.
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,69,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,71,public class TestISOChronology extends TestCase {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,73,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,74,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,75,"private static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,77,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,78,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,79,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,80,366 + 365;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,81,// 2002-06-09
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,82,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,83,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,85,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,86,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,87,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,89,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,90,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,93,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,94,return new TestSuite(TestISOChronology.class);
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,97,public TestISOChronology(String name) {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,98,super(name);
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,101,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,102,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,103,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,104,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,105,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,106,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,107,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,108,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,111,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,112,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,113,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,114,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,115,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,116,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,117,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,118,originalLocale = null;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,122,public void testFactoryUTC() {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,123,"assertEquals(DateTimeZone.UTC, ISOChronology.getInstanceUTC().getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,126,public void testFactory() {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,127,"assertEquals(LONDON, ISOChronology.getInstance().getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,130,public void testFactory_Zone() {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,131,"assertEquals(TOKYO, ISOChronology.getInstance(TOKYO).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,132,"assertEquals(PARIS, ISOChronology.getInstance(PARIS).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,133,"assertEquals(LONDON, ISOChronology.getInstance(null).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,136,public void testEquality() {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,137,"assertSame(ISOChronology.getInstance(TOKYO), ISOChronology.getInstance(TOKYO));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,138,"assertSame(ISOChronology.getInstance(LONDON), ISOChronology.getInstance(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,139,"assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,140,"assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,141,"assertSame(ISOChronology.getInstance(), ISOChronology.getInstance(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,144,public void testWithUTC() {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,145,"assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstance(LONDON).withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,146,"assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstance(TOKYO).withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,147,"assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,148,"assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstance().withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,151,public void testWithZone() {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,152,"assertSame(ISOChronology.getInstance(TOKYO), ISOChronology.getInstance(TOKYO).withZone(TOKYO));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,153,"assertSame(ISOChronology.getInstance(LONDON), ISOChronology.getInstance(TOKYO).withZone(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,154,"assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstance(TOKYO).withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,155,"assertSame(ISOChronology.getInstance(LONDON), ISOChronology.getInstance(TOKYO).withZone(null));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,156,"assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstance().withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,157,"assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstanceUTC().withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,160,public void testToString() {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,161,"assertEquals(""ISOChronology[Europe/London]"", ISOChronology.getInstance(LONDON).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,162,"assertEquals(""ISOChronology[Asia/Tokyo]"", ISOChronology.getInstance(TOKYO).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,163,"assertEquals(""ISOChronology[Europe/London]"", ISOChronology.getInstance().toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,164,"assertEquals(""ISOChronology[UTC]"", ISOChronology.getInstanceUTC().toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,167,public void testDurationFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,168,"assertEquals(""eras"", ISOChronology.getInstance().eras().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,169,"assertEquals(""centuries"", ISOChronology.getInstance().centuries().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,170,"assertEquals(""years"", ISOChronology.getInstance().years().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,171,"assertEquals(""weekyears"", ISOChronology.getInstance().weekyears().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,172,"assertEquals(""months"", ISOChronology.getInstance().months().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,173,"assertEquals(""weeks"", ISOChronology.getInstance().weeks().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,174,"assertEquals(""days"", ISOChronology.getInstance().days().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,175,"assertEquals(""hours"", ISOChronology.getInstance().hours().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,176,"assertEquals(""minutes"", ISOChronology.getInstance().minutes().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,177,"assertEquals(""seconds"", ISOChronology.getInstance().seconds().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,178,"assertEquals(""millis"", ISOChronology.getInstance().millis().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,180,"assertEquals(false, ISOChronology.getInstance().eras().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,181,"assertEquals(true, ISOChronology.getInstance().centuries().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,182,"assertEquals(true, ISOChronology.getInstance().years().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,183,"assertEquals(true, ISOChronology.getInstance().weekyears().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,184,"assertEquals(true, ISOChronology.getInstance().months().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,185,"assertEquals(true, ISOChronology.getInstance().weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,186,"assertEquals(true, ISOChronology.getInstance().days().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,187,"assertEquals(true, ISOChronology.getInstance().hours().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,188,"assertEquals(true, ISOChronology.getInstance().minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,189,"assertEquals(true, ISOChronology.getInstance().seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,190,"assertEquals(true, ISOChronology.getInstance().millis().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,192,"assertEquals(false, ISOChronology.getInstance().centuries().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,193,"assertEquals(false, ISOChronology.getInstance().years().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,194,"assertEquals(false, ISOChronology.getInstance().weekyears().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,195,"assertEquals(false, ISOChronology.getInstance().months().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,196,"assertEquals(false, ISOChronology.getInstance().weeks().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,197,"assertEquals(false, ISOChronology.getInstance().days().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,198,"assertEquals(true, ISOChronology.getInstance().hours().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,199,"assertEquals(true, ISOChronology.getInstance().minutes().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,200,"assertEquals(true, ISOChronology.getInstance().seconds().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,201,"assertEquals(true, ISOChronology.getInstance().millis().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,203,"assertEquals(false, ISOChronology.getInstanceUTC().centuries().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,204,"assertEquals(false, ISOChronology.getInstanceUTC().years().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,205,"assertEquals(false, ISOChronology.getInstanceUTC().weekyears().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,206,"assertEquals(false, ISOChronology.getInstanceUTC().months().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,207,"assertEquals(true, ISOChronology.getInstanceUTC().weeks().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,208,"assertEquals(true, ISOChronology.getInstanceUTC().days().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,209,"assertEquals(true, ISOChronology.getInstanceUTC().hours().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,210,"assertEquals(true, ISOChronology.getInstanceUTC().minutes().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,211,"assertEquals(true, ISOChronology.getInstanceUTC().seconds().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,212,"assertEquals(true, ISOChronology.getInstanceUTC().millis().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,215,public void testDateFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,216,"assertEquals(""era"", ISOChronology.getInstance().era().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,217,"assertEquals(""centuryOfEra"", ISOChronology.getInstance().centuryOfEra().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,218,"assertEquals(""yearOfCentury"", ISOChronology.getInstance().yearOfCentury().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,219,"assertEquals(""yearOfEra"", ISOChronology.getInstance().yearOfEra().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,220,"assertEquals(""year"", ISOChronology.getInstance().year().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,221,"assertEquals(""monthOfYear"", ISOChronology.getInstance().monthOfYear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,222,"assertEquals(""weekyear"", ISOChronology.getInstance().weekyear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,223,"assertEquals(""weekOfWeekyear"", ISOChronology.getInstance().weekOfWeekyear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,224,"assertEquals(""dayOfYear"", ISOChronology.getInstance().dayOfYear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,225,"assertEquals(""dayOfMonth"", ISOChronology.getInstance().dayOfMonth().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,226,"assertEquals(""dayOfWeek"", ISOChronology.getInstance().dayOfWeek().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,228,"assertEquals(true, ISOChronology.getInstance().era().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,229,"assertEquals(true, ISOChronology.getInstance().centuryOfEra().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,230,"assertEquals(true, ISOChronology.getInstance().yearOfCentury().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,231,"assertEquals(true, ISOChronology.getInstance().yearOfEra().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,232,"assertEquals(true, ISOChronology.getInstance().year().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,233,"assertEquals(true, ISOChronology.getInstance().monthOfYear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,234,"assertEquals(true, ISOChronology.getInstance().weekyear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,235,"assertEquals(true, ISOChronology.getInstance().weekOfWeekyear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,236,"assertEquals(true, ISOChronology.getInstance().dayOfYear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,237,"assertEquals(true, ISOChronology.getInstance().dayOfMonth().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,238,"assertEquals(true, ISOChronology.getInstance().dayOfWeek().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,241,public void testTimeFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,242,"assertEquals(""halfdayOfDay"", ISOChronology.getInstance().halfdayOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,243,"assertEquals(""clockhourOfHalfday"", ISOChronology.getInstance().clockhourOfHalfday().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,244,"assertEquals(""hourOfHalfday"", ISOChronology.getInstance().hourOfHalfday().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,245,"assertEquals(""clockhourOfDay"", ISOChronology.getInstance().clockhourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,246,"assertEquals(""hourOfDay"", ISOChronology.getInstance().hourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,247,"assertEquals(""minuteOfDay"", ISOChronology.getInstance().minuteOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,248,"assertEquals(""minuteOfHour"", ISOChronology.getInstance().minuteOfHour().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,249,"assertEquals(""secondOfDay"", ISOChronology.getInstance().secondOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,250,"assertEquals(""secondOfMinute"", ISOChronology.getInstance().secondOfMinute().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,251,"assertEquals(""millisOfDay"", ISOChronology.getInstance().millisOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,252,"assertEquals(""millisOfSecond"", ISOChronology.getInstance().millisOfSecond().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,254,"assertEquals(true, ISOChronology.getInstance().halfdayOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,255,"assertEquals(true, ISOChronology.getInstance().clockhourOfHalfday().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,256,"assertEquals(true, ISOChronology.getInstance().hourOfHalfday().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,257,"assertEquals(true, ISOChronology.getInstance().clockhourOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,258,"assertEquals(true, ISOChronology.getInstance().hourOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,259,"assertEquals(true, ISOChronology.getInstance().minuteOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,260,"assertEquals(true, ISOChronology.getInstance().minuteOfHour().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,261,"assertEquals(true, ISOChronology.getInstance().secondOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,262,"assertEquals(true, ISOChronology.getInstance().secondOfMinute().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,263,"assertEquals(true, ISOChronology.getInstance().millisOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,264,"assertEquals(true, ISOChronology.getInstance().millisOfSecond().isSupported());"

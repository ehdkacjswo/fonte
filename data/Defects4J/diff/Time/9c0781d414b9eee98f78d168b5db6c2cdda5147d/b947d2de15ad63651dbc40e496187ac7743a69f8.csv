is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,42," BaseGJChronology is thread-safe and immutable, and all subclasses must"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,42,"* BasicChronology is thread-safe and immutable, and all subclasses must"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,48, @since 1.0
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,48,"* @since 1.2, renamed from BaseGJChronology"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,50,bstract class BaseGJChronology extends AssembledChronology {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,50,abstract class BasicChronology extends AssembledChronology {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,130,"aseGJChronology(Chronology base, Object param, int minDaysInFirstWeek) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicChronology.java,130,"BasicChronology(Chronology base, Object param, int minDaysInFirstWeek) {"
False,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,35,rivate final BaseGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,35,private final BasicChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,40,"asicDayOfMonthDateTimeField(BaseGJChronology chronology, DurationField days) {"
True,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,40,"BasicDayOfMonthDateTimeField(BasicChronology chronology, DurationField days) {"
False,JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java,35,rivate final BaseGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java,35,private final BasicChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java,40,"asicDayOfYearDateTimeField(BaseGJChronology chronology, DurationField days) {"
True,JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java,40,"BasicDayOfYearDateTimeField(BasicChronology chronology, DurationField days) {"
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,35,bstract class BasicFixedMonthChronology extends BaseGJChronology {
True,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,35,abstract class BasicFixedMonthChronology extends BasicChronology {
False,JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java,34,bstract class BasicGJChronology extends BaseGJChronology {
True,JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java,34,abstract class BasicGJChronology extends BasicChronology {
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,39,rivate final BaseGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,39,private final BasicChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,48,"asicMonthOfYearDateTimeField(BaseGJChronology chronology, int leapMonth) {"
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,48,"BasicMonthOfYearDateTimeField(BasicChronology chronology, int leapMonth) {"
False,JodaTime/src/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java,36,rivate final BaseGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java,36,private final BasicChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java,41,"asicWeekOfWeekyearDateTimeField(BaseGJChronology chronology, DurationField weeks) {"
True,JodaTime/src/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java,41,"BasicWeekOfWeekyearDateTimeField(BasicChronology chronology, DurationField weeks) {"
False,JodaTime/src/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,38,rivate final BaseGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,38,private final BasicChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,43,asicWeekyearDateTimeField(BaseGJChronology chronology) {
True,JodaTime/src/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,43,BasicWeekyearDateTimeField(BasicChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,37,rotected final BaseGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,37,protected final BasicChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,44,asicYearDateTimeField(BaseGJChronology chronology) {
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,44,BasicYearDateTimeField(BasicChronology chronology) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,174,int minDays = getMinimumDaysInFirstWeek();
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,175,minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,175,"etInstance(DateTimeZone.UTC, getMinimumDaysInFirstWeek()) :"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,176,"etInstance(base.getZone(), getMinimumDaysInFirstWeek());"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,177,"getInstance(DateTimeZone.UTC, minDays) :"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,178,"getInstance(base.getZone(), minDays);"
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,39,rivate final BaseGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,39,private final BasicChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,44,"JDayOfWeekDateTimeField(BaseGJChronology chronology, DurationField days) {"
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,44,"GJDayOfWeekDateTimeField(BasicChronology chronology, DurationField days) {"
False,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,40,rivate final BaseGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,40,private final BasicChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,45,JEraDateTimeField(BaseGJChronology chronology) {
True,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,45,GJEraDateTimeField(BasicChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,36,JMonthOfYearDateTimeField(BaseGJChronology chronology) {
True,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,36,GJMonthOfYearDateTimeField(BasicChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,34,rivate final BaseGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,34,private final BasicChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,39,"JYearOfEraDateTimeField(DateTimeField yearField, BaseGJChronology chronology) {"
True,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,39,"GJYearOfEraDateTimeField(DateTimeField yearField, BasicChronology chronology) {"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,159,int minDays = getMinimumDaysInFirstWeek();
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,160,minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,160,"etInstance(DateTimeZone.UTC, getMinimumDaysInFirstWeek()) :"
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,161,"etInstance(base.getZone(), getMinimumDaysInFirstWeek());"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,162,"getInstance(DateTimeZone.UTC, minDays) :"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,163,"getInstance(base.getZone(), minDays);"
False,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,66,ublic final class IslamicChronology extends BaseGJChronology {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,66,public final class IslamicChronology extends BasicChronology {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,173,int minDays = getMinimumDaysInFirstWeek();
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,174,minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,174,"etInstance(DateTimeZone.UTC, getMinimumDaysInFirstWeek()) :"
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,175,"etInstance(base.getZone(), getMinimumDaysInFirstWeek());"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,176,"getInstance(DateTimeZone.UTC, minDays) :"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,177,"getInstance(base.getZone(), minDays);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,21,import java.io.FileOutputStream;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,217,public void testSerializedGJChronologyChangedInternals() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,218,"GJChronology test = GJChronology.getInstance(PARIS, 123L, 2);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,219,"loadAndCompare(test, ""GJChronologyChangedInternals.dat"", true);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,220,"inlineCompare(test, true);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,357,//    // Format changed in v1.2 - min days in first week not deserialized in v1.0/1.1
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,358,//    public void testStoreSerializedGJChronologyChangedInternals() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,359,"//        GJChronology test = GJChronology.getInstance(PARIS, 123L, 2);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,360,"//        store(test, ""GJChronologyChangedInternals.dat"");"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,418,"/    private void store(Serializable test, String filename) throws Exception {"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,419,"/        FileOutputStream fos = new FileOutputStream(""src/testdata/"" + filename);"
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,420,/        ObjectOutputStream oos = new ObjectOutputStream(fos);
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,421,/        try {
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,422,/            oos.writeObject(test);
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,423,/        } finally {
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,424,/            oos.close();
False,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,426,/        oos.close();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,431,"private void store(Serializable test, String filename) throws Exception {"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,432,"FileOutputStream fos = new FileOutputStream(""src/testdata/"" + filename);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,433,ObjectOutputStream oos = new ObjectOutputStream(fos);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,434,try {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,435,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,436,} finally {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,437,oos.close();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,439,oos.close();

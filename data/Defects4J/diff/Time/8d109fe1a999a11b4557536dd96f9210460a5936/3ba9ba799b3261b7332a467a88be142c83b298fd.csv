is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,2,  Copyright 2001-2010 Stephen Colebourne
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,640,"etMillis(type.getField(getChronology()).add(getMillis(), amount));"
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,639,if (amount != 0) {
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,640,"setMillis(type.getField(getChronology()).add(getMillis(), amount));"
False,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,661,"etMillis(getChronology().years().add(getMillis(), years));"
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,662,if (years != 0) {
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,663,"setMillis(getChronology().years().add(getMillis(), years));"
False,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,682,"etMillis(getChronology().weekyears().add(getMillis(), weekyears));"
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,685,if (weekyears != 0) {
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,686,"setMillis(getChronology().weekyears().add(getMillis(), weekyears));"
False,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,703,"etMillis(getChronology().months().add(getMillis(), months));"
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,708,if (months != 0) {
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,709,"setMillis(getChronology().months().add(getMillis(), months));"
False,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,724,"etMillis(getChronology().weeks().add(getMillis(), weeks));"
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,731,if (weeks != 0) {
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,732,"setMillis(getChronology().weeks().add(getMillis(), weeks));"
False,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,765,"etMillis(getChronology().days().add(getMillis(), days));"
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,774,if (days != 0) {
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,775,"setMillis(getChronology().days().add(getMillis(), days));"
False,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,786,"etMillis(getChronology().hours().add(getMillis(), hours));"
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,797,if (hours != 0) {
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,798,"setMillis(getChronology().hours().add(getMillis(), hours));"
False,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,817,"etMillis(getChronology().minutes().add(getMillis(), minutes));"
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,830,if (minutes != 0) {
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,831,"setMillis(getChronology().minutes().add(getMillis(), minutes));"
False,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,848,"etMillis(getChronology().seconds().add(getMillis(), seconds));"
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,863,if (seconds != 0) {
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,864,"setMillis(getChronology().seconds().add(getMillis(), seconds));"
False,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,881,"etMillis(getChronology().millis().add(getMillis(), millis));"
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,898,if (millis != 0) {
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,899,"setMillis(getChronology().millis().add(getMillis(), millis));"
False,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,35,"rivate static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,175,public void testAdd_DurationFieldType_int_dstOverlapSummer_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,176,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,177,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,178,"test.add(DurationFieldType.years(), 0);"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,179,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,182,public void testAdd_DurationFieldType_int_dstOverlapWinter_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,183,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,184,test.addHours(1);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,185,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,186,"test.add(DurationFieldType.years(), 0);"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,187,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,215,public void testAddYears_int_dstOverlapSummer_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,216,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,217,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,218,test.addYears(0);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,219,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,222,public void testAddYears_int_dstOverlapWinter_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,223,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,224,test.addHours(1);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,225,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,226,test.addYears(0);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,227,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,237,public void testAddMonths_int_dstOverlapSummer_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,238,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,239,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,240,test.addMonths(0);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,241,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,244,public void testAddMonths_int_dstOverlapWinter_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,245,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,246,test.addHours(1);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,247,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,248,test.addMonths(0);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,249,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,259,public void testAddDays_int_dstOverlapSummer_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,260,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,261,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,262,test.addDays(0);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,263,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,266,public void testAddDays_int_dstOverlapWinter_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,267,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,268,test.addHours(1);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,269,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,270,test.addDays(0);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,271,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,288,public void testAddWeeks_int_dstOverlapSummer_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,289,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,290,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,291,test.addWeeks(0);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,292,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,295,public void testAddWeeks_int_dstOverlapWinter_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,296,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,297,test.addHours(1);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,298,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,299,test.addWeeks(0);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,300,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,310,public void testAddHours_int_dstOverlapSummer_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,311,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,312,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,313,test.addHours(0);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,314,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,317,public void testAddHours_int_dstOverlapWinter_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,318,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,319,test.addHours(1);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,320,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,321,test.addHours(0);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,322,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,332,public void testAddMinutes_int_dstOverlapSummer_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,333,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,334,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,335,test.addMinutes(0);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,336,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,339,public void testAddMinutes_int_dstOverlapWinter_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,340,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,341,test.addHours(1);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,342,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,343,test.addMinutes(0);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,344,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,354,public void testAddSeconds_int_dstOverlapSummer_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,355,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,356,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,357,test.addSeconds(0);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,358,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,361,public void testAddSeconds_int_dstOverlapWinter_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,362,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,363,test.addHours(1);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,364,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,365,test.addSeconds(0);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,366,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,376,public void testAddMillis_int_dstOverlapSummer_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,377,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,378,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,379,test.addMillis(0);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,380,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,383,public void testAddMillis_int_dstOverlapWinter_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,384,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,385,test.addHours(1);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,386,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,387,test.addMillis(0);
True,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,src/test/java/org/joda/time/TestMutableDateTime_Adds.java,388,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
False,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,430,public void testSetMonthOfYear_int_dstOverlapSummer_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,431,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,432,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,433,test.setMonthOfYear(10);
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,434,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,437,public void testSetMonthOfYear_int_dstOverlapWinter_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,438,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,439,test.addHours(1);
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,440,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,441,test.setMonthOfYear(10);
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,442,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,470,public void testSetDayOfMonth_int_dstOverlapSummer_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,471,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,472,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,473,test.setDayOfMonth(30);
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,474,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,477,public void testSetDayOfMonth_int_dstOverlapWinter_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,478,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,479,test.addHours(1);
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,480,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,481,test.setDayOfMonth(30);
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,482,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,492,public void testSetDayOfYear_int_dstOverlapSummer_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,493,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,494,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,495,test.setDayOfYear(303);
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,496,"assertEquals(""2011-10-30T02:30:00.000+02:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,499,public void testSetDayOfYear_int_dstOverlapWinter_addZero() {
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,500,"MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));"
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,501,test.addHours(1);
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,502,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,503,test.setDayOfYear(303);
True,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,src/test/java/org/joda/time/TestMutableDateTime_Sets.java,504,"assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());"

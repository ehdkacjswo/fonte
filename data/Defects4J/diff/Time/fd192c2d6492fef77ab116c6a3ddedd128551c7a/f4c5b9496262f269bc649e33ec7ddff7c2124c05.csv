is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,10,* are met:
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,54,package org.joda.time.partial;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,57,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,59,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,60,import org.joda.time.DateTime;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,61,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,62,import org.joda.time.DateTimeUtils;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,63,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,64,import org.joda.time.ReadWritableInstant;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,65,import org.joda.time.ReadableInstant;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,66,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,67,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,68,import org.joda.time.convert.InstantConverter;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,71,* DayOfWeek is an immutable partial instant supporting the dayOfWeek field.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,72,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,73,* The day of week field is restricted to seven values for the ISO chronology.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,74,* These are provided as constants.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,75,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,76,* Calculations on DayOfWeek are performed using a {@link Chronology}.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,77,* This chronology is set to be in the UTC time zone for all calculations.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,78,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,79,* The day of week field can be queried in two ways:
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,80,* <ul>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,81,* <li><code>getDayOfWeek()</code>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,82,* <li><code>dayOfWeek().get()</code>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,83,* </ul>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,84,* The second technique also provides access to other useful methods on the field:
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,85,* <ul>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,86,* <li>numeric value - <code>dayOfWeek().get()</code>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,87,* <li>text value - <code>dayOfWeek().getAsText()</code>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,88,* <li>short text value - <code>dayOfWeek().getAsShortText()</code>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,89,* <li>maximum/minimum values - <code>dayOfWeek().getMaximumValue()</code>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,90,* <li>add/subtract - <code>dayOfWeek().addToCopy()</code>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,91,* <li>set - <code>dayOfWeek().setCopy()</code>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,92,* </ul>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,93,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,94,"* DayOfWeek is thread-safe and immutable, provided that the Chronology is as well."
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,95,* All standard Chronology classes supplied are thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,97,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,98,* @since 1.0
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,100,"public final class DayOfWeek implements PartialInstant, Serializable {"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,102,/** Serialization version */
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,103,private static final long serialVersionUID = 65294869236483L;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,105,/** The index of the dayOfWeek field in the field array. */
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,106,public static final int DAY_OF_WEEK = 0;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,108,/** A day of week constant for Monday in the ISOChronology. */
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,109,"public static final DayOfWeek MONDAY = new DayOfWeek(1, null);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,110,/** A day of week constant for Monday in the ISOChronology. */
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,111,"public static final DayOfWeek TUESDAY = new DayOfWeek(2, null);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,112,/** A day of week constant for Monday in the ISOChronology. */
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,113,"public static final DayOfWeek WEDNESDAY = new DayOfWeek(3, null);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,114,/** A day of week constant for Monday in the ISOChronology. */
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,115,"public static final DayOfWeek THURSDAY = new DayOfWeek(4, null);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,116,/** A day of week constant for Monday in the ISOChronology. */
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,117,"public static final DayOfWeek FRIDAY = new DayOfWeek(5, null);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,118,/** A day of week constant for Monday in the ISOChronology. */
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,119,"public static final DayOfWeek SATURDAY = new DayOfWeek(6, null);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,120,/** A day of week constant for Monday in the ISOChronology. */
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,121,"public static final DayOfWeek SUNDAY = new DayOfWeek(7, null);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,123,/** The chronology. */
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,124,private final Chronology iChronology;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,125,/** The value. */
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,126,private final int iValue;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,128,// Factories
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,131,* Obtains a DayOfWeek by day value in the <code>ISOChronology</code>.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,133,"* @param dayOfWeek  the ISO day of the week, 1 (Monday) - 7 (Sunday)"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,134,* @return a DayOfWeek constant
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,136,public static DayOfWeek getInstance(int dayOfWeek) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,137,switch (dayOfWeek) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,138,case 1:
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,139,return MONDAY;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,140,case 2:
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,141,return TUESDAY;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,142,case 3:
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,143,return WEDNESDAY;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,144,case 4:
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,145,return THURSDAY;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,146,case 5:
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,147,return FRIDAY;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,148,case 6:
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,149,return SATURDAY;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,150,case 7:
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,151,return SUNDAY;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,153,"throw new IllegalArgumentException(""Invalid day of week: "" + dayOfWeek);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,157,* Constructs a DayOfWeek with specified day value and chronology.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,159,"* @param dayOfWeek  the ISO day of the week, 1 (Monday) - 7 (Sunday)"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,160,"* @param chronology  the chronology, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,161,* @return a DayOfWeek
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,163,"public static DayOfWeek getInstance(int dayOfWeek, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,164,if (chronology == null || chronology instanceof ISOChronology) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,165,return getInstance(dayOfWeek);
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,167,"return new DayOfWeek(dayOfWeek, chronology);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,171,"* Obtains a DayOfWeek with the current time, using ISOChronology in"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,172,* the default zone to extract the fields.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,173,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,174,"* The constructor uses the default time zone, resulting in the local time"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,175,"* being initialised. Once the constructor is complete, all further calculations"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,176,* are performed without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,178,* @return a DayOfWeek constant
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,180,public static DayOfWeek getInstanceNow() {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,181,return getInstance(DateTimeUtils.currentTimeMillis());
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,185,"* Obtains a DayOfWeek with the current time, using the specified chronology"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,186,* and zone to extract the fields.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,187,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,188,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,189,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,190,* without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,192,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,193,* @return a DayOfWeek
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,195,public static DayOfWeek getInstanceNow(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,196,"return getInstance(DateTimeUtils.currentTimeMillis(), chronology);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,200,* Obtains a DayOfWeek by millisecond in the <code>ISOChronology</code>.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,202,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,203,* @return a DayOfWeek constant
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,205,public static DayOfWeek getInstance(long instant) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,206,int dayOfWeek = ISOChronology.getInstance().dayOfWeek().get(instant);
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,207,return getInstance(dayOfWeek);
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,211,* Obtains a DayOfWeek extracting the partial fields from the specified
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,212,* milliseconds using the chronology provided.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,213,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,214,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,215,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,216,* without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,218,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,219,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,220,* @return a DayOfWeek
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,222,"public static DayOfWeek getInstance(long instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,223,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,224,chronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,226,int dayOfWeek = chronology.dayOfWeek().get(instant);
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,227,"return getInstance(dayOfWeek, chronology);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,231,* Obtains a DayOfWeek from an Object that represents a time.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,232,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,233,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,234,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,235,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,237,"* @param instant  the datetime object, null means now"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,238,* @throws IllegalArgumentException if the date is invalid
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,239,* @return a DayOfWeek
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,241,public static DayOfWeek getInstance(Object instant) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,242,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,243,long millis = converter.getInstantMillis(instant);
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,244,Chronology chronology = converter.getChronology(instant);
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,245,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,246,chronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,248,"return getInstance(millis, chronology);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,252,"* Obtains a DayOfWeek from an Object that represents a time, using the"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,253,* specified chronology.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,254,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,255,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,256,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,257,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,258,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,259,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,260,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,261,* without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,263,"* @param instant  the datetime object, null means now"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,264,"* @param chronology  the chronology, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,265,* @throws IllegalArgumentException if the date is invalid
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,266,* @return a DayOfWeek
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,268,"public static DayOfWeek getInstance(Object instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,269,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,270,"long millis = converter.getInstantMillis(instant, chronology);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,271,"chronology = converter.getChronology(instant, chronology);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,272,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,273,chronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,275,"return getInstance(millis, chronology);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,278,// Constructors
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,281,* Constructs a DayOfWeek with specified day value and chronology.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,283,"* @param dayOfWeek  the ISO day of the week, 1 (Monday) - 7 (Sunday)"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,284,"* @param chronology  the chronology, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,286,"private DayOfWeek(int dayOfWeek, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,287,super();
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,288,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,289,chronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,291,iChronology = chronology.withUTC();
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,292,iValue = dayOfWeek;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,293,chronology.validate(this);
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,298,* Gets the number of fields in this instant.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,300,* @return the field count
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,302,public int getFieldSize() {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,303,return 1;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,307,* Gets the field at the specifed index.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,309,* @param index  the index
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,310,* @return the field
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,311,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,313,public DateTimeField getField(int index) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,314,if (index != 0) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,315,throw new IllegalArgumentException(Integer.toString(index));
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,317,return iChronology.dayOfWeek();
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,321,* Gets the value of the field at the specifed index.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,323,* @param index  the index
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,324,* @return the value
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,325,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,327,public int getValue(int index) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,328,if (index != 0) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,329,throw new IllegalArgumentException(Integer.toString(index));
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,331,return iValue;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,336,* Gets an array containing the day of week field.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,338,* @return the fields supported (cloned)
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,340,public DateTimeField[] getFields() {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,341,return new DateTimeField[] {iChronology.dayOfWeek()};
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,345,* Gets an array containing the day of week value.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,347,* @return the current values of each field (cloned)
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,349,public int[] getValues() {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,350,return new int[] {iValue};
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,354,* Gets the chronology of the partial which is never null.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,355,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,356,* The {@link Chronology} is the calculation engine behind the partial and
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,357,* provides conversion and validation of the fields in a particular calendar system.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,359,* @return the chronology
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,361,public Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,362,return iChronology;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,367,* Get the value of one of the fields of this partial.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,368,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,369,* The field specified must be one of those that is supported by the partial instant.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,371,* @param field  a DateTimeField instance that is supported by this partial
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,372,* @return the value of that field
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,373,* @throws IllegalArgumentException if the field is null or not supported
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,375,public int get(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,376,if (iChronology.dayOfWeek() == field) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,377,return iValue;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,379,"throw new IllegalArgumentException(""Field '"" + field + ""' is not supported"");"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,383,* Checks whether the field specified is supported by this partial instant.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,385,"* @param field  the field to check, may be null which returns false"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,386,* @return true if the field is supported
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,388,public boolean isSupported(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,389,if (iChronology.dayOfWeek() == field) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,390,return true;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,392,return false;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,397,* Resolves this partial against another complete instant to create a new
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,398,* full instant specifying values as milliseconds since 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,399,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,400,"* For example, if this partial represents a time, then the result of this method"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,401,* will be the date from the specified base plus the time from this instant.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,403,* @param baseMillis  source of missing fields
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,404,"* @param zone  the zone to use, null means default"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,405,* @return the combined instant in milliseconds
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,407,"public long resolve(long baseMillis, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,408,Chronology chrono = iChronology.withZone(zone);
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,409,"return resolve(baseMillis, chrono);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,413,* Resolves this partial into another complete instant setting the relevant fields
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,414,* on the writable instant. The combination is performed using the chronology of the
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,415,* specified instant.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,416,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,417,"* For example, if this partial represents a time, then the input writable instant"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,418,* will be updated with the time from this instant.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,420,"* @param base  the instant to set into, must not be null"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,421,* @throws IllegalArgumentException if the base instant is null
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,423,public void resolveInto(ReadWritableInstant base) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,424,if (base == null) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,425,"throw new IllegalArgumentException(""The instant must not be null"");"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,427,Chronology chrono = base.getChronology();
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,428,"long resolved = resolve(base.getMillis(), chrono);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,429,base.setMillis(resolved);
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,433,* Resolves this partial against another complete instant to create a new
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,434,* full instant. The combination is performed using the chronology of the
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,435,* specified instant.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,436,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,437,"* For example, if this partial represents a time, then the result of this method"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,438,* will be the date from the specified base plus the time from this instant.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,440,"* @param base  the instant that provides the missing fields, null means now"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,441,* @return the combined datetime
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,443,public DateTime resolveDateTime(ReadableInstant base) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,444,long resolved;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,445,Chronology chrono;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,446,if (base == null) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,447,chrono = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,448,"resolved = resolve(DateTimeUtils.currentTimeMillis(), chrono);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,449,} else {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,450,chrono = base.getChronology();
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,451,"resolved = resolve(base.getMillis(), chrono);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,453,"return new DateTime(resolved, chrono);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,457,* Resolve this partial instant into the base millis using the specified chronology.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,459,* @param baseMillis  the base millis
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,460,* @param chrono  the chronology
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,461,* @return the new resolved millis
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,463,"protected long resolve(long baseMillis, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,464,"return iChronology.dayOfWeek().set(baseMillis, iValue);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,469,"* Compares this PartialInstant with another returning true if the chronology,"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,470,* fields and values are equal.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,472,* @param instant  an object to check against
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,473,* @return true if fields and values are equal
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,475,public boolean equals(Object instant) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,476,if (instant instanceof PartialInstant) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,477,PartialInstant other = (PartialInstant) instant;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,478,return other.getFieldSize() == 1 &&
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,479,other.isSupported(iChronology.dayOfWeek()) &&
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,480,iValue == other.get(iChronology.dayOfWeek()) &&
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,481,iChronology == other.getChronology();
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,483,return false;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,487,* Gets a hash code for the PartialInstant that is compatible with the
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,488,* equals method.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,490,* @return a suitable hash code
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,492,public int hashCode() {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,493,int total = 157;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,494,total = 23 * total + iValue;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,495,total = 23 * total + iChronology.dayOfWeek().hashCode();
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,496,total += iChronology.hashCode();
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,497,return total;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,501,* Output the time in an ISO8601 format.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,503,* @return ISO8601 formatted string
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,505,public String toString() {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,506,// TODO
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,507,"return """";"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,512,* Get the ISO day of week (1-7) field value.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,514,"* @return the ISO day of the week, 1 (Monday) - 7 (Sunday)"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,516,public int getDayOfWeek() {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,517,return iValue;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,522,* Get the ISO day of week (1-7) field property
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,524,* @return the ISO day of week property
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,526,public Property dayOfWeek() {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,527,return new Property(this);
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,532,* The property class for DayOfWeek.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,534,public static class Property extends AbstractPartialFieldProperty {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,536,/** The instant */
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,537,private final DayOfWeek iInstant;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,540,* Constructs a property.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,542,* @param instant  the partial instant
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,544,Property(DayOfWeek instant) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,545,super();
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,546,iInstant = instant;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,550,* Gets the field that this property uses.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,552,* @return the field
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,554,public DateTimeField getField() {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,555,return iInstant.iChronology.dayOfWeek();
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,559,* Gets the instant that this property belongs to.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,561,* @return the partial instant
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,563,public PartialInstant getPartialInstant() {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,564,return iInstant;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,568,* Gets the instant that this property belongs to.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,570,* @return the partial instant
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,572,public DayOfWeek getDayOfWeek() {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,573,return iInstant;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,577,* Gets the value of the field that the partial instant is set to.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,579,* @return the field value
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,581,public int get() {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,582,return iInstant.iValue;
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,587,* Adds to the value of this field in a copy of this DayOfWeek.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,588,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,589,* The value will be added to this field. If the result is too large
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,590,* (more than 7) or too small (less than 1) then an exception is thrown.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,591,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,592,* The DayOfWeek attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,593,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,595,* @param valueToAdd  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,596,* @return a copy of the DayOfWeek with the field value changed
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,597,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,599,public DayOfWeek addCopy(int valueToAdd) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,600,int[] newValues = iInstant.getValues();
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,601,"getField().add(iInstant, 0, newValues, valueToAdd);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,602,"return DayOfWeek.getInstance(newValues[0], iInstant.getChronology());"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,606,* Adds to the value of this field in a copy of this DayOfWeek wrapping
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,607,* within this field if the maximum value is reached.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,608,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,609,* The value will be added to this field. If the result is too large
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,610,* (more than 7) or too small (less than 1) then it will wrap.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,611,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,612,* The DayOfWeek attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,613,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,615,* @param valueToAdd  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,616,* @return a copy of the DayOfWeek with the field value changed
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,617,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,619,public DayOfWeek addInFieldCopy(int valueToAdd) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,620,int[] newValues = iInstant.getValues();
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,621,"getField().addInField(iInstant, 0, newValues, valueToAdd);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,622,"return DayOfWeek.getInstance(newValues[0], iInstant.getChronology());"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,627,* Sets this field in a copy of the DayOfWeek.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,628,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,629,* The DayOfWeek attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,630,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,632,* @param value  the value to set the field in the copy to
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,633,* @return a copy of the DayOfWeek with the field value changed
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,634,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,636,public DayOfWeek setCopy(int value) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,637,int[] newValues = iInstant.getValues();
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,638,"getField().set(iInstant, 0, newValues, value);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,639,"return DayOfWeek.getInstance(newValues[0], iInstant.getChronology());"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,643,* Sets this field in a copy of the DayOfWeek to a parsed text value.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,644,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,645,* The DayOfWeek attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,646,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,648,* @param text  the text value to set
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,649,* @param locale  optional locale to use for selecting a text symbol
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,650,* @return a copy of the DayOfWeek with the field value changed
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,651,* @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,653,"public DayOfWeek setCopy(String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,654,int[] newValues = iInstant.getValues();
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,655,"getField().set(iInstant, 0, newValues, text, locale);"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,656,"return DayOfWeek.getInstance(newValues[0], iInstant.getChronology());"
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,660,* Sets this field in a copy of the DayOfWeek to a parsed text value.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,661,* <p>
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,662,* The DayOfWeek attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,663,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,665,* @param text  the text value to set
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,666,* @return a copy of the DayOfWeek with the field value changed
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,667,* @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,669,public DayOfWeek setCopy(String text) {
True,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,670,"return setCopy(text, null);"

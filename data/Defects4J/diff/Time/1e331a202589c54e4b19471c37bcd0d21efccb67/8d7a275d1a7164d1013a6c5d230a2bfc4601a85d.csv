is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/test/org/joda/time/field/TestAll.java,JodaTime/src/test/org/joda/time/field/TestAll.java,83,suite.addTest(TestBaseDateTimeField.suite());
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,10,* are met:
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,54,package org.joda.time.field;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,56,import java.util.Arrays;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,57,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,59,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,60,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,62,import org.joda.time.DateTimeFieldType;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,63,import org.joda.time.DurationField;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,64,import org.joda.time.DurationFieldType;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,65,import org.joda.time.TimeOfDay;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,68,* This class is a Junit unit test for BaseDateTimeField.
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,70,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,72,public class TestBaseDateTimeField extends TestCase {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,74,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,75,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,78,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,79,return new TestSuite(TestBaseDateTimeField.class);
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,82,public TestBaseDateTimeField(String name) {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,83,super(name);
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,86,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,89,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,93,public void test_constructor() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,94,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,95,"assertEquals(DateTimeFieldType.secondOfMinute(), field.getType());"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,96,try {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,97,field = new MockBaseDateTimeField(null);
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,98,fail();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,99,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,102,public void test_getType() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,103,BaseDateTimeField field = new MockBaseDateTimeField(DateTimeFieldType.secondOfDay());
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,104,"assertEquals(DateTimeFieldType.secondOfDay(), field.getType());"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,107,public void test_getName() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,108,BaseDateTimeField field = new MockBaseDateTimeField(DateTimeFieldType.secondOfDay());
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,109,"assertEquals(""secondOfDay"", field.getName());"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,112,public void test_toString() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,113,BaseDateTimeField field = new MockBaseDateTimeField(DateTimeFieldType.secondOfDay());
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,114,"assertEquals(""DateTimeField[secondOfDay]"", field.toString());"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,117,public void test_isSupported() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,118,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,119,"assertEquals(true, field.isSupported());"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,122,public void test_get() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,123,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,124,"assertEquals(0, field.get(0));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,125,"assertEquals(1, field.get(60));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,126,"assertEquals(2, field.get(123));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,130,public void test_getAsText_long_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,131,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,132,"assertEquals(""29"", field.getAsText(60L * 29, Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,133,"assertEquals(""29"", field.getAsText(60L * 29, null));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,136,public void test_getAsText_long() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,137,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,138,"assertEquals(""29"", field.getAsText(60L * 29));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,141,public void test_getAsText_RP_int_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,142,"// ReadablePartial partial, int fieldValue, Locale locale"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,143,// TODO
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,146,public void test_getAsText_RP_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,147,"// ReadablePartial partial, Locale locale"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,148,// TODO
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,151,public void test_getAsText_int_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,152,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,153,"assertEquals(""80"", field.getAsText(80, Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,154,"assertEquals(""80"", field.getAsText(80, null));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,158,public void test_getAsShortText_long_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,159,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,160,"assertEquals(""29"", field.getAsShortText(60L * 29, Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,161,"assertEquals(""29"", field.getAsShortText(60L * 29, null));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,164,public void test_getAsShortText_long() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,165,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,166,"assertEquals(""29"", field.getAsShortText(60L * 29));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,169,public void test_getAsShortText_RP_int_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,170,"// ReadablePartial partial, int fieldValue, Locale locale"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,171,// TODO
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,174,public void test_getAsShortText_RP_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,175,"// ReadablePartial partial, Locale locale"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,176,// TODO
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,179,public void test_getAsShortText_int_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,180,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,181,"assertEquals(""80"", field.getAsShortText(80, Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,182,"assertEquals(""80"", field.getAsShortText(80, null));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,186,public void test_add_long_int() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,187,MockCountingDurationField.add_int = 0;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,188,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,189,"assertEquals(61, field.add(1L, 1));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,190,"assertEquals(1, MockCountingDurationField.add_int);"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,193,public void test_add_long_long() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,194,MockCountingDurationField.add_long = 0;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,195,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,196,"assertEquals(61, field.add(1L, 1L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,197,"assertEquals(1, MockCountingDurationField.add_long);"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,200,public void test_add_RP_int_intarray_int() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,201,"int[] values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,202,"int[] expected = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,203,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,204,"int[] result = field.add(new TimeOfDay(), 2, values, 0);"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,205,"assertEquals(true, Arrays.equals(expected, result));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,207,"values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,208,"expected = new int[] {10, 20, 31, 40};"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,209,"result = field.add(new TimeOfDay(), 2, values, 1);"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,210,"assertEquals(true, Arrays.equals(expected, result));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,212,"values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,213,"expected = new int[] {10, 21, 0, 40};"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,214,"result = field.add(new TimeOfDay(), 2, values, 30);"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,215,"assertEquals(true, Arrays.equals(expected, result));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,217,"values = new int[] {23, 59, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,218,try {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,219,"field.add(new TimeOfDay(), 2, values, 30);"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,220,fail();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,221,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,223,"values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,224,"expected = new int[] {10, 20, 29, 40};"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,225,"result = field.add(new TimeOfDay(), 2, values, -1);"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,226,"assertEquals(true, Arrays.equals(expected, result));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,228,"values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,229,"expected = new int[] {10, 19, 59, 40};"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,230,"result = field.add(new TimeOfDay(), 2, values, -31);"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,231,"assertEquals(true, Arrays.equals(expected, result));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,233,"values = new int[] {0, 0, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,234,try {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,235,"field.add(new TimeOfDay(), 2, values, -31);"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,236,fail();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,237,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,241,public void test_addWrapField_long_int() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,242,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,243,"assertEquals(1029, field.addWrapField(60L * 29, 0));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,244,"assertEquals(1059, field.addWrapField(60L * 29, 30));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,245,"assertEquals(1000, field.addWrapField(60L * 29, 31));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,248,public void test_addWrapField_RP_int_intarray_int() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,249,// TODO
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,253,public void test_getDifference_long_long() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,254,MockCountingDurationField.difference_long = 0;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,255,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,256,"assertEquals(30, field.getDifference(0L, 0L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,257,"assertEquals(1, MockCountingDurationField.difference_long);"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,260,public void test_getDifferenceAsLong_long_long() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,261,MockCountingDurationField.difference_long = 0;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,262,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,263,"assertEquals(30, field.getDifferenceAsLong(0L, 0L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,264,"assertEquals(1, MockCountingDurationField.difference_long);"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,268,public void test_set_long_int() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,269,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,270,"assertEquals(1000, field.set(0L, 0));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,271,"assertEquals(1029, field.set(0L, 29));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,274,public void test_set_RP_int_intarray_int() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,275,// TODO
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,278,public void test_set_long_String_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,279,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,280,"assertEquals(0, field.set(0L, ""0"", null));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,281,"assertEquals(29, field.set(0L, ""29"", Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,284,public void test_set_long_String() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,285,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,286,"assertEquals(0, field.set(0L, ""0""));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,287,"assertEquals(29, field.set(0L, ""29""));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,290,public void test_set_RP_int_intarray_String_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,291,// TODO
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,294,public void test_convertText() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,295,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,296,"assertEquals(0, field.convertText(""0"", null));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,297,"assertEquals(29, field.convertText(""29"", null));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,298,try {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,299,"field.convertText(""2A"", null);"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,300,fail();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,301,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,302,try {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,303,"field.convertText(null, null);"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,304,fail();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,305,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,309,//    public abstract DurationField getDurationField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,311,//    public abstract DurationField getRangeDurationField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,313,public void test_isLeap_long() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,314,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,315,"assertEquals(false, field.isLeap(0L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,318,public void test_getLeapAmount_long() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,319,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,320,"assertEquals(0, field.getLeapAmount(0L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,323,public void test_getLeapDurationField() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,324,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,325,"assertEquals(null, field.getLeapDurationField());"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,329,public void test_getMinimumValue() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,330,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,331,"assertEquals(0, field.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,334,public void test_getMinimumValue_long() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,335,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,336,"assertEquals(0, field.getMinimumValue(0L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,339,public void test_getMinimumValue_RP() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,340,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,341,"assertEquals(0, field.getMinimumValue(new TimeOfDay()));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,344,public void test_getMinimumValue_RP_intarray() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,345,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,346,"assertEquals(0, field.getMinimumValue(new TimeOfDay(), new int[4]));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,349,public void test_getMaximumValue() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,350,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,351,"assertEquals(59, field.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,354,public void test_getMaximumValue_long() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,355,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,356,"assertEquals(59, field.getMaximumValue(0L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,359,public void test_getMaximumValue_RP() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,360,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,361,"assertEquals(59, field.getMaximumValue(new TimeOfDay()));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,364,public void test_getMaximumValue_RP_intarray() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,365,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,366,"assertEquals(59, field.getMaximumValue(new TimeOfDay(), new int[4]));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,370,public void test_getMaximumTextLength_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,371,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,372,"assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,374,field = new MockBaseDateTimeField() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,375,public int getMaximumValue() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,376,return 5;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,379,"assertEquals(1, field.getMaximumTextLength(Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,381,field = new MockBaseDateTimeField() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,382,public int getMaximumValue() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,383,return 555;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,386,"assertEquals(3, field.getMaximumTextLength(Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,388,field = new MockBaseDateTimeField() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,389,public int getMaximumValue() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,390,return 5555;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,393,"assertEquals(4, field.getMaximumTextLength(Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,395,field = new MockBaseDateTimeField() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,396,public int getMaximumValue() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,397,return -1;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,400,"assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,403,public void test_getMaximumShortTextLength_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,404,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,405,"assertEquals(2, field.getMaximumShortTextLength(Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,409,public void test_roundFloor_long() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,410,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,411,"assertEquals(0L, field.roundFloor(0L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,412,"assertEquals(0L, field.roundFloor(29L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,413,"assertEquals(0L, field.roundFloor(30L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,414,"assertEquals(0L, field.roundFloor(31L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,415,"assertEquals(60L, field.roundFloor(60L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,418,public void test_roundCeiling_long() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,419,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,420,"assertEquals(0L, field.roundCeiling(0L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,421,"assertEquals(60L, field.roundCeiling(29L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,422,"assertEquals(60L, field.roundCeiling(30L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,423,"assertEquals(60L, field.roundCeiling(31L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,424,"assertEquals(60L, field.roundCeiling(60L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,427,public void test_roundHalfFloor_long() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,428,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,429,"assertEquals(0L, field.roundHalfFloor(0L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,430,"assertEquals(0L, field.roundHalfFloor(29L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,431,"assertEquals(0L, field.roundHalfFloor(30L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,432,"assertEquals(60L, field.roundHalfFloor(31L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,433,"assertEquals(60L, field.roundHalfFloor(60L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,436,public void test_roundHalfCeiling_long() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,437,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,438,"assertEquals(0L, field.roundHalfCeiling(0L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,439,"assertEquals(0L, field.roundHalfCeiling(29L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,440,"assertEquals(60L, field.roundHalfCeiling(30L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,441,"assertEquals(60L, field.roundHalfCeiling(31L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,442,"assertEquals(60L, field.roundHalfCeiling(60L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,445,public void test_roundHalfEven_long() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,446,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,447,"assertEquals(0L, field.roundHalfEven(0L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,448,"assertEquals(0L, field.roundHalfEven(29L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,449,"assertEquals(0L, field.roundHalfEven(30L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,450,"assertEquals(60L, field.roundHalfEven(31L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,451,"assertEquals(60L, field.roundHalfEven(60L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,452,"assertEquals(60L, field.roundHalfEven(89L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,453,"assertEquals(120L, field.roundHalfEven(90L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,454,"assertEquals(120L, field.roundHalfEven(91L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,457,public void test_remainder_long() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,458,BaseDateTimeField field = new MockBaseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,459,"assertEquals(0L, field.remainder(0L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,460,"assertEquals(29L, field.remainder(29L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,461,"assertEquals(30L, field.remainder(30L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,462,"assertEquals(31L, field.remainder(31L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,463,"assertEquals(0L, field.remainder(60L));"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,467,static class MockBaseDateTimeField extends BaseDateTimeField {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,468,protected MockBaseDateTimeField() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,469,super(DateTimeFieldType.secondOfMinute());
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,471,protected MockBaseDateTimeField(DateTimeFieldType type) {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,472,super(type);
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,474,public int get(long instant) {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,475,return (int) (instant / 60L);
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,477,"public long set(long instant, int value) {"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,478,return 1000 + value;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,480,public DurationField getDurationField() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,481,return new MockCountingDurationField(DurationFieldType.seconds());
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,483,public DurationField getRangeDurationField() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,484,return new MockCountingDurationField(DurationFieldType.minutes());
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,486,public int getMinimumValue() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,487,return 0;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,489,public int getMaximumValue() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,490,return 59;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,492,public long roundFloor(long instant) {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,493,return (instant / 60L) * 60L;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,495,public boolean isLenient() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,496,return false;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,501,static class MockCountingDurationField extends BaseDurationField {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,502,static int add_int = 0;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,503,static int add_long = 0;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,504,static int difference_long = 0;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,506,protected MockCountingDurationField(DurationFieldType type) {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,507,super(type);
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,509,public boolean isPrecise() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,510,return false;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,512,public long getUnitMillis() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,513,return 0;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,515,"public long getValueAsLong(long duration, long instant) {"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,516,return 0;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,518,"public long getMillis(int value, long instant) {"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,519,return 0;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,521,"public long getMillis(long value, long instant) {"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,522,return 0;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,524,"public long add(long instant, int value) {"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,525,add_int++;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,526,return instant + (value * 60L);
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,528,"public long add(long instant, long value) {"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,529,add_long++;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,530,return instant + (value * 60L);
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,532,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,533,difference_long++;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,534,return 30;

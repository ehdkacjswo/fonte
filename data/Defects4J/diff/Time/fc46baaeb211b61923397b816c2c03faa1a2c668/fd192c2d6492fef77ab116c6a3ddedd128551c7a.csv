is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,10, are met:
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,54,ackage org.joda.time.partial;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,56,mport java.io.Serializable;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,57,mport java.util.Locale;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,59,mport org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,60,mport org.joda.time.DateTime;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,61,mport org.joda.time.DateTimeField;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,62,mport org.joda.time.DateTimeUtils;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,63,mport org.joda.time.DateTimeZone;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,64,mport org.joda.time.ReadWritableInstant;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,65,mport org.joda.time.ReadableInstant;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,66,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,67,mport org.joda.time.convert.ConverterManager;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,68,mport org.joda.time.convert.InstantConverter;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,71, DayOfWeek is an immutable partial instant supporting the dayOfWeek field.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,72, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,73, The day of week field is restricted to seven values for the ISO chronology.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,74, These are provided as constants.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,75, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,76, Calculations on DayOfWeek are performed using a {@link Chronology}.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,77, This chronology is set to be in the UTC time zone for all calculations.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,78, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,79, The day of week field can be queried in two ways:
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,80, <ul>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,81, <li><code>getDayOfWeek()</code>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,82, <li><code>dayOfWeek().get()</code>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,83, </ul>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,84, The second technique also provides access to other useful methods on the field:
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,85, <ul>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,86, <li>numeric value - <code>dayOfWeek().get()</code>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,87, <li>text value - <code>dayOfWeek().getAsText()</code>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,88, <li>short text value - <code>dayOfWeek().getAsShortText()</code>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,89, <li>maximum/minimum values - <code>dayOfWeek().getMaximumValue()</code>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,90, <li>add/subtract - <code>dayOfWeek().addToCopy()</code>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,91, <li>set - <code>dayOfWeek().setCopy()</code>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,92, </ul>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,93, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,94," DayOfWeek is thread-safe and immutable, provided that the Chronology is as well."
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,95, All standard Chronology classes supplied are thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,97, @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,98, @since 1.0
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,100,"ublic final class DayOfWeek implements PartialInstant, Serializable {"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,102,** Serialization version */
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,103,rivate static final long serialVersionUID = 65294869236483L;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,105,** The index of the dayOfWeek field in the field array. */
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,106,ublic static final int DAY_OF_WEEK = 0;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,108,** A day of week constant for Monday in the ISOChronology. */
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,109,"ublic static final DayOfWeek MONDAY = new DayOfWeek(1, null);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,110,** A day of week constant for Monday in the ISOChronology. */
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,111,"ublic static final DayOfWeek TUESDAY = new DayOfWeek(2, null);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,112,** A day of week constant for Monday in the ISOChronology. */
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,113,"ublic static final DayOfWeek WEDNESDAY = new DayOfWeek(3, null);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,114,** A day of week constant for Monday in the ISOChronology. */
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,115,"ublic static final DayOfWeek THURSDAY = new DayOfWeek(4, null);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,116,** A day of week constant for Monday in the ISOChronology. */
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,117,"ublic static final DayOfWeek FRIDAY = new DayOfWeek(5, null);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,118,** A day of week constant for Monday in the ISOChronology. */
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,119,"ublic static final DayOfWeek SATURDAY = new DayOfWeek(6, null);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,120,** A day of week constant for Monday in the ISOChronology. */
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,121,"ublic static final DayOfWeek SUNDAY = new DayOfWeek(7, null);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,123,** The chronology. */
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,124,rivate final Chronology iChronology;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,125,** The value. */
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,126,rivate final int iValue;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,128,/ Factories
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,131, Obtains a DayOfWeek by day value in the <code>ISOChronology</code>.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,133," @param dayOfWeek  the ISO day of the week, 1 (Monday) - 7 (Sunday)"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,134, @return a DayOfWeek constant
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,136,ublic static DayOfWeek getInstance(int dayOfWeek) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,137,witch (dayOfWeek) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,138,ase 1:
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,139,eturn MONDAY;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,140,ase 2:
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,141,eturn TUESDAY;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,142,ase 3:
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,143,eturn WEDNESDAY;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,144,ase 4:
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,145,eturn THURSDAY;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,146,ase 5:
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,147,eturn FRIDAY;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,148,ase 6:
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,149,eturn SATURDAY;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,150,ase 7:
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,151,eturn SUNDAY;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,153,"hrow new IllegalArgumentException(""Invalid day of week: "" + dayOfWeek);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,157, Constructs a DayOfWeek with specified day value and chronology.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,159," @param dayOfWeek  the ISO day of the week, 1 (Monday) - 7 (Sunday)"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,160," @param chronology  the chronology, null means ISOChronology"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,161, @return a DayOfWeek
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,163,"ublic static DayOfWeek getInstance(int dayOfWeek, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,164,f (chronology == null || chronology instanceof ISOChronology) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,165,eturn getInstance(dayOfWeek);
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,167,"eturn new DayOfWeek(dayOfWeek, chronology);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,171," Obtains a DayOfWeek with the current time, using ISOChronology in"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,172, the default zone to extract the fields.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,173, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,174," The constructor uses the default time zone, resulting in the local time"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,175," being initialised. Once the constructor is complete, all further calculations"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,176, are performed without reference to a timezone (by switching to UTC).
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,178, @return a DayOfWeek constant
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,180,ublic static DayOfWeek getInstanceNow() {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,181,eturn getInstance(DateTimeUtils.currentTimeMillis());
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,185," Obtains a DayOfWeek with the current time, using the specified chronology"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,186, and zone to extract the fields.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,187, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,188, The constructor uses the time zone of the chronology specified.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,189," Once the constructor is complete, all further calculations are performed"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,190, without reference to a timezone (by switching to UTC).
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,192," @param chronology  the chronology, null means ISOChronology in the default zone"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,193, @return a DayOfWeek
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,195,ublic static DayOfWeek getInstanceNow(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,196,"eturn getInstance(DateTimeUtils.currentTimeMillis(), chronology);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,200, Obtains a DayOfWeek by millisecond in the <code>ISOChronology</code>.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,202, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,203, @return a DayOfWeek constant
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,205,ublic static DayOfWeek getInstance(long instant) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,206,nt dayOfWeek = ISOChronology.getInstance().dayOfWeek().get(instant);
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,207,eturn getInstance(dayOfWeek);
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,211, Obtains a DayOfWeek extracting the partial fields from the specified
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,212, milliseconds using the chronology provided.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,213, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,214, The constructor uses the time zone of the chronology specified.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,215," Once the constructor is complete, all further calculations are performed"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,216, without reference to a timezone (by switching to UTC).
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,218, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,219," @param chronology  the chronology, null means ISOChronology in the default zone"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,220, @return a DayOfWeek
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,222,"ublic static DayOfWeek getInstance(long instant, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,223,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,224,hronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,226,nt dayOfWeek = chronology.dayOfWeek().get(instant);
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,227,"eturn getInstance(dayOfWeek, chronology);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,231, Obtains a DayOfWeek from an Object that represents a time.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,232, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,233, The recognised object types are defined in
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,234, {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,235," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,237," @param instant  the datetime object, null means now"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,238, @throws IllegalArgumentException if the date is invalid
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,239, @return a DayOfWeek
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,241,ublic static DayOfWeek getInstance(Object instant) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,242,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,243,ong millis = converter.getInstantMillis(instant);
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,244,hronology chronology = converter.getChronology(instant);
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,245,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,246,hronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,248,"eturn getInstance(millis, chronology);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,252," Obtains a DayOfWeek from an Object that represents a time, using the"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,253, specified chronology.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,254, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,255, The recognised object types are defined in
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,256, {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,257," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,258, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,259, The constructor uses the time zone of the chronology specified.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,260," Once the constructor is complete, all further calculations are performed"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,261, without reference to a timezone (by switching to UTC).
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,263," @param instant  the datetime object, null means now"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,264," @param chronology  the chronology, null means ISOChronology"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,265, @throws IllegalArgumentException if the date is invalid
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,266, @return a DayOfWeek
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,268,"ublic static DayOfWeek getInstance(Object instant, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,269,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,270,"ong millis = converter.getInstantMillis(instant, chronology);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,271,"hronology = converter.getChronology(instant, chronology);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,272,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,273,hronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,275,"eturn getInstance(millis, chronology);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,278,/ Constructors
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,281, Constructs a DayOfWeek with specified day value and chronology.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,283," @param dayOfWeek  the ISO day of the week, 1 (Monday) - 7 (Sunday)"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,284," @param chronology  the chronology, null means ISOChronology"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,286,"rivate DayOfWeek(int dayOfWeek, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,287,uper();
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,288,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,289,hronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,291,Chronology = chronology.withUTC();
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,292,Value = dayOfWeek;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,293,hronology.validate(this);
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,298, Gets the number of fields in this instant.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,300, @return the field count
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,302,ublic int getFieldSize() {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,303,eturn 1;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,307, Gets the field at the specifed index.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,309, @param index  the index
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,310, @return the field
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,311, @throws IndexOutOfBoundsException if the index is invalid
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,313,ublic DateTimeField getField(int index) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,314,f (index != 0) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,315,hrow new IllegalArgumentException(Integer.toString(index));
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,317,eturn iChronology.dayOfWeek();
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,321, Gets the value of the field at the specifed index.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,323, @param index  the index
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,324, @return the value
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,325, @throws IndexOutOfBoundsException if the index is invalid
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,327,ublic int getValue(int index) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,328,f (index != 0) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,329,hrow new IllegalArgumentException(Integer.toString(index));
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,331,eturn iValue;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,336, Gets an array containing the day of week field.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,338, @return the fields supported (cloned)
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,340,ublic DateTimeField[] getFields() {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,341,eturn new DateTimeField[] {iChronology.dayOfWeek()};
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,345, Gets an array containing the day of week value.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,347, @return the current values of each field (cloned)
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,349,ublic int[] getValues() {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,350,eturn new int[] {iValue};
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,354, Gets the chronology of the partial which is never null.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,355, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,356, The {@link Chronology} is the calculation engine behind the partial and
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,357, provides conversion and validation of the fields in a particular calendar system.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,359, @return the chronology
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,361,ublic Chronology getChronology() {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,362,eturn iChronology;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,367, Get the value of one of the fields of this partial.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,368, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,369, The field specified must be one of those that is supported by the partial instant.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,371, @param field  a DateTimeField instance that is supported by this partial
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,372, @return the value of that field
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,373, @throws IllegalArgumentException if the field is null or not supported
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,375,ublic int get(DateTimeField field) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,376,f (iChronology.dayOfWeek() == field) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,377,eturn iValue;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,379,"hrow new IllegalArgumentException(""Field '"" + field + ""' is not supported"");"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,383, Checks whether the field specified is supported by this partial instant.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,385," @param field  the field to check, may be null which returns false"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,386, @return true if the field is supported
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,388,ublic boolean isSupported(DateTimeField field) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,389,f (iChronology.dayOfWeek() == field) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,390,eturn true;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,392,eturn false;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,397, Resolves this partial against another complete instant to create a new
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,398, full instant specifying values as milliseconds since 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,399, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,400," For example, if this partial represents a time, then the result of this method"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,401, will be the date from the specified base plus the time from this instant.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,403, @param baseMillis  source of missing fields
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,404," @param zone  the zone to use, null means default"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,405, @return the combined instant in milliseconds
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,407,"ublic long resolve(long baseMillis, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,408,hronology chrono = iChronology.withZone(zone);
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,409,"eturn resolve(baseMillis, chrono);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,413, Resolves this partial into another complete instant setting the relevant fields
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,414, on the writable instant. The combination is performed using the chronology of the
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,415, specified instant.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,416, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,417," For example, if this partial represents a time, then the input writable instant"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,418, will be updated with the time from this instant.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,420," @param base  the instant to set into, must not be null"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,421, @throws IllegalArgumentException if the base instant is null
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,423,ublic void resolveInto(ReadWritableInstant base) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,424,f (base == null) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,425,"hrow new IllegalArgumentException(""The instant must not be null"");"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,427,hronology chrono = base.getChronology();
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,428,"ong resolved = resolve(base.getMillis(), chrono);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,429,ase.setMillis(resolved);
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,433, Resolves this partial against another complete instant to create a new
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,434, full instant. The combination is performed using the chronology of the
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,435, specified instant.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,436, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,437," For example, if this partial represents a time, then the result of this method"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,438, will be the date from the specified base plus the time from this instant.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,440," @param base  the instant that provides the missing fields, null means now"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,441, @return the combined datetime
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,443,ublic DateTime resolveDateTime(ReadableInstant base) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,444,ong resolved;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,445,hronology chrono;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,446,f (base == null) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,447,hrono = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,448,"esolved = resolve(DateTimeUtils.currentTimeMillis(), chrono);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,449, else {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,450,hrono = base.getChronology();
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,451,"esolved = resolve(base.getMillis(), chrono);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,453,"eturn new DateTime(resolved, chrono);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,457, Resolve this partial instant into the base millis using the specified chronology.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,459, @param baseMillis  the base millis
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,460, @param chrono  the chronology
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,461, @return the new resolved millis
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,463,"rotected long resolve(long baseMillis, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,464,"eturn iChronology.dayOfWeek().set(baseMillis, iValue);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,469," Compares this PartialInstant with another returning true if the chronology,"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,470, fields and values are equal.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,472, @param instant  an object to check against
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,473, @return true if fields and values are equal
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,475,ublic boolean equals(Object instant) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,476,f (instant instanceof PartialInstant) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,477,artialInstant other = (PartialInstant) instant;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,478,eturn other.getFieldSize() == 1 &&
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,479,ther.isSupported(iChronology.dayOfWeek()) &&
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,480,Value == other.get(iChronology.dayOfWeek()) &&
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,481,Chronology == other.getChronology();
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,483,eturn false;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,487, Gets a hash code for the PartialInstant that is compatible with the
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,488, equals method.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,490, @return a suitable hash code
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,492,ublic int hashCode() {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,493,nt total = 157;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,494,otal = 23 * total + iValue;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,495,otal = 23 * total + iChronology.dayOfWeek().hashCode();
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,496,otal += iChronology.hashCode();
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,497,eturn total;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,501, Output the time in an ISO8601 format.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,503, @return ISO8601 formatted string
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,505,ublic String toString() {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,506,/ TODO
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,507,"eturn """";"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,512, Get the ISO day of week (1-7) field value.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,514," @return the ISO day of the week, 1 (Monday) - 7 (Sunday)"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,516,ublic int getDayOfWeek() {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,517,eturn iValue;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,522, Get the ISO day of week (1-7) field property
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,524, @return the ISO day of week property
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,526,ublic Property dayOfWeek() {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,527,eturn new Property(this);
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,532, The property class for DayOfWeek.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,534,ublic static class Property extends AbstractPartialFieldProperty {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,536,** The instant */
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,537,rivate final DayOfWeek iInstant;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,540, Constructs a property.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,542, @param instant  the partial instant
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,544,roperty(DayOfWeek instant) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,545,uper();
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,546,Instant = instant;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,550, Gets the field that this property uses.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,552, @return the field
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,554,ublic DateTimeField getField() {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,555,eturn iInstant.iChronology.dayOfWeek();
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,559, Gets the instant that this property belongs to.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,561, @return the partial instant
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,563,ublic PartialInstant getPartialInstant() {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,564,eturn iInstant;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,568, Gets the instant that this property belongs to.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,570, @return the partial instant
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,572,ublic DayOfWeek getDayOfWeek() {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,573,eturn iInstant;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,577, Gets the value of the field that the partial instant is set to.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,579, @return the field value
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,581,ublic int get() {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,582,eturn iInstant.iValue;
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,587, Adds to the value of this field in a copy of this DayOfWeek.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,588, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,589, The value will be added to this field. If the result is too large
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,590, (more than 7) or too small (less than 1) then an exception is thrown.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,591, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,592, The DayOfWeek attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,593," Instead, a new instance is returned."
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,595, @param valueToAdd  the value to add to the field in the copy
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,596, @return a copy of the DayOfWeek with the field value changed
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,597, @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,599,ublic DayOfWeek addCopy(int valueToAdd) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,600,nt[] newValues = iInstant.getValues();
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,601,"etField().add(iInstant, 0, newValues, valueToAdd);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,602,"eturn DayOfWeek.getInstance(newValues[0], iInstant.getChronology());"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,606, Adds to the value of this field in a copy of this DayOfWeek wrapping
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,607, within this field if the maximum value is reached.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,608, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,609, The value will be added to this field. If the result is too large
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,610, (more than 7) or too small (less than 1) then it will wrap.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,611, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,612, The DayOfWeek attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,613," Instead, a new instance is returned."
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,615, @param valueToAdd  the value to add to the field in the copy
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,616, @return a copy of the DayOfWeek with the field value changed
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,617, @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,619,ublic DayOfWeek addInFieldCopy(int valueToAdd) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,620,nt[] newValues = iInstant.getValues();
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,621,"etField().addInField(iInstant, 0, newValues, valueToAdd);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,622,"eturn DayOfWeek.getInstance(newValues[0], iInstant.getChronology());"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,627, Sets this field in a copy of the DayOfWeek.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,628, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,629, The DayOfWeek attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,630," Instead, a new instance is returned."
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,632, @param value  the value to set the field in the copy to
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,633, @return a copy of the DayOfWeek with the field value changed
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,634, @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,636,ublic DayOfWeek setCopy(int value) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,637,nt[] newValues = iInstant.getValues();
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,638,"etField().set(iInstant, 0, newValues, value);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,639,"eturn DayOfWeek.getInstance(newValues[0], iInstant.getChronology());"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,643, Sets this field in a copy of the DayOfWeek to a parsed text value.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,644, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,645, The DayOfWeek attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,646," Instead, a new instance is returned."
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,648, @param text  the text value to set
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,649, @param locale  optional locale to use for selecting a text symbol
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,650, @return a copy of the DayOfWeek with the field value changed
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,651, @throws IllegalArgumentException if the text value isn't valid
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,653,"ublic DayOfWeek setCopy(String text, Locale locale) {"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,654,nt[] newValues = iInstant.getValues();
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,655,"etField().set(iInstant, 0, newValues, text, locale);"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,656,"eturn DayOfWeek.getInstance(newValues[0], iInstant.getChronology());"
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,660, Sets this field in a copy of the DayOfWeek to a parsed text value.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,661, <p>
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,662, The DayOfWeek attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,663," Instead, a new instance is returned."
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,665, @param text  the text value to set
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,666, @return a copy of the DayOfWeek with the field value changed
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,667, @throws IllegalArgumentException if the text value isn't valid
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,669,ublic DayOfWeek setCopy(String text) {
False,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,JodaTime/src/java/org/joda/time/partial/DayOfWeek.java,670,"eturn setCopy(text, null);"

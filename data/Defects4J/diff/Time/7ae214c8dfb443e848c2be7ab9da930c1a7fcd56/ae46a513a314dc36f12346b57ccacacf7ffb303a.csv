is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,137, Resolves this partial against another complete instant to create a new
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,138, full instant. The combination is performed using the chronology of the
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,139, specified instant.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,137,* Converts this partial to a full datetime using the specified time zone and
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,138,* filing in any gaps using the current datetime.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,139,* <p>
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,140,"* This method obtains the current datetime, creates a chronology from that"
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,141,"* on this instance plus the time zone specified, and then sets the fields"
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,142,* from this instant on top.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,143,* <p>
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,144,"* For example, if this partial represents a time, then the result of this"
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,145,* method will be the datetime from the specified base instant plus the
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,146,* time from this partial.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,148,"* @param zone  the zone to use, null means default"
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,149,* @return the combined datetime
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,151,DateTime toDateTime(DateTimeZone zone);
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,154,* Converts this partial to a full datetime by resolving it against another
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,155,* datetime.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,156,* <p>
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,157,* This method takes the specified datetime and sets the fields from this
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,158,* instant on top. The chronology from the base instant is used.
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,148,ateTime toDateTimeUsing(ReadableInstant baseInstant);
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,167,DateTime toDateTime(ReadableInstant baseInstant);
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,96,// NOTE: No toDateTime(YearMonthDay) as semantics are confusing when
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,97,// different chronologies
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,109,/** Constant for midnight. */
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,110,"public static final TimeOfDay MIDNIGHT = new TimeOfDay(0, 0, 0, 0);"
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,337," Constructs a TimeOfDay with specified fields, values and chronology."
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,342,* Constructs a TimeOfDay with chronology from this instance and new values.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,352,* Constructs a TimeOfDay with values from this instance and a new chronology.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,354,* @param partial  the partial to base this new instance on
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,355,* @param chrono  the new chronology
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,357,"TimeOfDay(TimeOfDay partial, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,358,"super(partial, chrono);"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,420,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,421,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,422,"* This method retains the values of the fields, thus the result will"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,423,* typically refer to a different instant.
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,406, This period instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,425,"* The time zone of the specified chronology is ignored, as TimeOfDay"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,426,* operates without a time zone.
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,411,ublic TimeOfDay withChronology(Chronology newChronology) {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,431,public TimeOfDay withChronologyRetainFields(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,236," Constructs a YearMonthDay with specified fields, values and chronology."
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,236,* Constructs a YearMonthDay with chronology from this instance and new values.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,246,* Constructs a YearMonthDay with values from this instance and a new chronology.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,248,* @param partial  the partial to base this new instance on
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,249,* @param chrono  the new chronology
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,251,"YearMonthDay(YearMonthDay partial, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,252,"super(partial, chrono);"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,312,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,313,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,314,"* This method retains the values of the fields, thus the result will"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,315,* typically refer to a different instant.
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,303, This period instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,317,"* The time zone of the specified chronology is ignored, as TimeOfDay"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,318,* operates without a time zone.
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,308,ublic YearMonthDay withChronology(Chronology newChronology) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,323,public YearMonthDay withChronologyRetainFields(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,346,"eturn new DateMidnight(getYear(), getMonthOfYear(), getDayOfMonth(), zone);"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,361,Chronology chrono = getChronology().withZone(zone);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,362,"return new DateMidnight(getYear(), getMonthOfYear(), getDayOfMonth(), chrono);"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,366,* Converts this object to a DateTime using a TimeOfDay to fill in the
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,367,* missing fields and using the default time zone.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,368,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,369,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,370,* The resulting chronology is determined by the chronology of this
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,371,* YearMonthDay plus the time zone.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,372,* The chronology of the time is ignored - only the field values are used.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,374,"* @param time  the time of day to use, null means current time"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,375,* @return the DateTime instance
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,377,public DateTime toDateTime(TimeOfDay time) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,378,"return toDateTime(time, null);"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,382,* Converts this object to a DateTime using a TimeOfDay to fill in the
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,383,* missing fields.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,384,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,385,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,386,* The resulting chronology is determined by the chronology of this
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,387,* YearMonthDay plus the time zone.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,388,* The chronology of the time is ignored - only the field values are used.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,390,"* @param time  the time of day to use, null means current time"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,391,"* @param zone  the zone to get the DateTime in, null means default"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,392,* @return the DateTime instance
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,394,"public DateTime toDateTime(TimeOfDay time, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,395,Chronology chrono = getChronology().withZone(zone);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,396,long instant = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,397,"instant = chrono.set(this, instant);"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,398,if (time != null) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,399,"instant = chrono.set(time, instant);"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,401,"return new DateTime(instant, chrono);"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,61,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,230,* Converts this partial to a full datetime using the specified time zone and
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,231,* filing in any gaps using the current datetime.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,232,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,233,"* This method obtains the current datetime, creates a chronology from that"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,234,"* on this instance plus the time zone specified, and then sets the fields"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,235,* from this instant on top.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,236,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,237,"* For example, if this partial represents a time, then the result of this"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,238,* method will be the datetime from the specified base instant plus the
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,239,* time from this partial.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,241,"* @param zone  the zone to use, null means default"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,242,* @return the combined datetime
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,244,public DateTime toDateTime(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,245,Chronology chrono = getChronology().withZone(zone);
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,246,long instantMillis = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,247,"long resolved = chrono.set(this, instantMillis);"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,248,"return new DateTime(resolved, chrono);"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,240,ublic DateTime toDateTimeUsing(ReadableInstant baseInstant) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,263,public DateTime toDateTime(ReadableInstant baseInstant) {
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,59,import org.joda.time.DateTime;
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,62,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,309,* Converts this object to a DateTime using the current date to fill in the
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,310,* missing fields and using the default time zone.
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,312,* @return the DateTime instance
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,314,public DateTime toDateTime() {
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,315,return toDateTime((DateTimeZone) null);
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,315,* Compares this property to another.
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,317,* @param object  the object to compare to
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,318,* @return true if equal
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,320,public boolean equals(Object object) {
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,321,if (this == object) {
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,322,return true;
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,324,if (object instanceof AbstractPartialFieldProperty) {
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,325,AbstractPartialFieldProperty other = (AbstractPartialFieldProperty) object;
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,326,if (get() == other.get() &&
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,327,getFieldType() == other.getFieldType() &&
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,328,getReadablePartial().getChronology() == other.getReadablePartial().getChronology()) {
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,329,return true;
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,332,return false;
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,398,* Compares this property to another.
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,400,* @param object  the object to compare to
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,401,* @return true if equal
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,403,public boolean equals(Object object) {
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,404,if (this == object) {
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,405,return true;
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,407,if (object instanceof AbstractReadableInstantFieldProperty) {
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,408,AbstractReadableInstantFieldProperty other = (AbstractReadableInstantFieldProperty) object;
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,409,if (get() == other.get() &&
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,410,getFieldType() == other.getFieldType() &&
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,411,getReadableInstant().getChronology() == other.getReadableInstant().getChronology()) {
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,412,return true;
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,415,return false;
False,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,68,eturn ISOChronology.getInstance();
True,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,68,return ISOChronology.getInstanceUTC();
False,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,88,ublic DateTime toDateTimeUsing(ReadableInstant base) {
True,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,88,public DateTime toDateTime(DateTimeZone zone) {
True,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,89,return null;
True,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,91,public DateTime toDateTime(ReadableInstant base) {
False,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,60,mport org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,60,import org.joda.time.field.AbstractPartialFieldProperty;
False,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,136,"ssertEquals(BuddhistChronology.getInstance().year(), mock.getField(0));"
False,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,137,"ssertEquals(BuddhistChronology.getInstance().monthOfYear(), mock.getField(1));"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,136,"assertEquals(Chronology.getBuddhistUTC().year(), mock.getField(0));"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,137,"assertEquals(Chronology.getBuddhistUTC().monthOfYear(), mock.getField(1));"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,172,public void testGetPropertyEquals() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,173,MockPartial mock = new MockPartial();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,174,"YearMonthDay ymd = new YearMonthDay(1970, 2, 1, Chronology.getBuddhist());"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,176,MockProperty0 prop0 = new MockProperty0();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,177,"assertEquals(true, prop0.equals(prop0));"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,178,"assertEquals(true, prop0.equals(new MockProperty0()));"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,179,"assertEquals(false, prop0.equals(new MockProperty1()));"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,180,"assertEquals(false, prop0.equals(new MockProperty0Val()));"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,181,"assertEquals(false, prop0.equals(new MockProperty0Field()));"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,182,"assertEquals(false, prop0.equals(new MockProperty0Chrono()));"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,183,"assertEquals(false, prop0.equals(""""));"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,184,"assertEquals(false, prop0.equals(null));"
False,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,205,eturn BuddhistChronology.getInstance();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,220,return Chronology.getBuddhistUTC();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,224,static class MockProperty0 extends AbstractPartialFieldProperty {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,225,MockPartial partial = new MockPartial();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,226,public DateTimeField getField() {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,227,return partial.getField(0);
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,229,public ReadablePartial getReadablePartial() {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,230,return partial;
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,232,public int get() {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,233,return partial.getValue(0);
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,236,static class MockProperty1 extends AbstractPartialFieldProperty {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,237,MockPartial partial = new MockPartial();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,238,public DateTimeField getField() {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,239,return partial.getField(1);
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,241,public ReadablePartial getReadablePartial() {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,242,return partial;
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,244,public int get() {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,245,return partial.getValue(1);
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,248,static class MockProperty0Field extends MockProperty0 {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,249,public DateTimeField getField() {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,250,return Chronology.getBuddhistUTC().hourOfDay();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,253,static class MockProperty0Val extends MockProperty0 {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,254,public int get() {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,255,return 99;
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,258,static class MockProperty0Chrono extends MockProperty0 {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,259,public ReadablePartial getReadablePartial() {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,260,return new MockPartial() {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,261,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,262,return Chronology.getISOUTC();
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,112,suite.addTest(TestTimeOfDay_Basics.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,113,suite.addTest(TestTimeOfDay_Constructors.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,114,suite.addTest(TestTimeOfDay_Properties.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,116,suite.addTest(TestYearMonthDay_Basics.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,117,suite.addTest(TestYearMonthDay_Constructors.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,118,suite.addTest(TestYearMonthDay_Properties.suite());
False,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,114,uite.addTest(TestTimeOfDay.suite());
False,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,115,uite.addTest(TestYearMonthDay.suite());
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,6, All rights reserved.
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,10, are met:
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,18,    distribution.
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,33,    permission of the Joda project.
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,46, SUCH DAMAGE.
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,54,ackage org.joda.time;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,56,mport java.io.ByteArrayInputStream;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,57,mport java.io.ByteArrayOutputStream;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,58,mport java.io.ObjectInputStream;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,59,mport java.io.ObjectOutputStream;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,60,mport java.util.Arrays;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,61,mport java.util.Date;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,62,mport java.util.Locale;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,64,mport junit.framework.TestCase;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,65,mport junit.framework.TestSuite;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,67,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,68,mport org.joda.time.chrono.JulianChronology;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,69,mport org.joda.time.convert.ConverterManager;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,70,mport org.joda.time.convert.MockZeroNullIntegerConverter;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,73, This class is a Junit unit test for TimeOfDay.
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,75, @author Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,77,ublic class TestTimeOfDay extends TestCase {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,79,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,81,rivate long TEST_TIME_NOW =
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,82,0L * DateTimeConstants.MILLIS_PER_HOUR
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,83, 20L * DateTimeConstants.MILLIS_PER_MINUTE
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,84, 30L * DateTimeConstants.MILLIS_PER_SECOND
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,85, 40L;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,87,rivate long TEST_TIME1 =
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,88,L * DateTimeConstants.MILLIS_PER_HOUR
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,89, 2L * DateTimeConstants.MILLIS_PER_MINUTE
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,90, 3L * DateTimeConstants.MILLIS_PER_SECOND
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,91, 4L;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,93,rivate long TEST_TIME2 =
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,94,L * DateTimeConstants.MILLIS_PER_DAY
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,95, 5L * DateTimeConstants.MILLIS_PER_HOUR
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,96, 6L * DateTimeConstants.MILLIS_PER_MINUTE
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,97, 7L * DateTimeConstants.MILLIS_PER_SECOND
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,98, 8L;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,100,rivate DateTimeZone zone = null;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,102,ublic static void main(String[] args) {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,103,unit.textui.TestRunner.run(suite());
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,106,ublic static TestSuite suite() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,107,eturn new TestSuite(TestTimeOfDay.class);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,110,ublic TestTimeOfDay(String name) {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,111,uper(name);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,114,rotected void setUp() throws Exception {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,115,ateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,116,one = DateTimeZone.getDefault();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,117,ateTimeZone.setDefault(DateTimeZone.UTC);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,120,rotected void tearDown() throws Exception {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,121,ateTimeUtils.setCurrentMillisSystem();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,122,ateTimeZone.setDefault(zone);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,123,one = null;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,128, Test constructor ()
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,130,ublic void testConstructor() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,131,imeOfDay test = new TimeOfDay();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,132,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,133,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,134,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,135,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,136,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,140, Test constructor (Chronology)
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,142,ublic void testConstructor_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,143,imeOfDay test = new TimeOfDay(JulianChronology.getInstance());
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,144,"ssertEquals(JulianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,145,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,146,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,147,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,148,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,152, Test constructor (Chronology=null)
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,154,ublic void testConstructor_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,155,imeOfDay test = new TimeOfDay((Chronology) null);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,156,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,157,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,158,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,159,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,160,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,165, Test constructor (long)
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,167,ublic void testConstructor_long1() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,168,imeOfDay test = new TimeOfDay(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,169,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,170,"ssertEquals(1, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,171,"ssertEquals(2, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,172,"ssertEquals(3, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,173,"ssertEquals(4, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,177, Test constructor (long)
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,179,ublic void testConstructor_long2() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,180,imeOfDay test = new TimeOfDay(TEST_TIME2);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,181,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,182,"ssertEquals(5, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,183,"ssertEquals(6, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,184,"ssertEquals(7, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,185,"ssertEquals(8, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,189," Test constructor (long, Chronology)"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,191,ublic void testConstructor_long1_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,192,"imeOfDay test = new TimeOfDay(TEST_TIME1, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,193,"ssertEquals(JulianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,194,"ssertEquals(1, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,195,"ssertEquals(2, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,196,"ssertEquals(3, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,197,"ssertEquals(4, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,201," Test constructor (long, Chronology)"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,203,ublic void testConstructor_long2_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,204,"imeOfDay test = new TimeOfDay(TEST_TIME2, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,205,"ssertEquals(JulianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,206,"ssertEquals(5, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,207,"ssertEquals(6, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,208,"ssertEquals(7, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,209,"ssertEquals(8, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,213," Test constructor (long, Chronology=null)"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,215,ublic void testConstructor_long_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,216,"imeOfDay test = new TimeOfDay(TEST_TIME1, null);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,217,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,218,"ssertEquals(1, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,219,"ssertEquals(2, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,220,"ssertEquals(3, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,221,"ssertEquals(4, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,226, Test constructor (Object)
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,228,ublic void testConstructor_Object() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,229,ate date = new Date(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,230,imeOfDay test = new TimeOfDay(date);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,231,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,232,"ssertEquals(1, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,233,"ssertEquals(2, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,234,"ssertEquals(3, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,235,"ssertEquals(4, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,239, Test constructor (Object=null)
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,241,ublic void testConstructor_nullObject() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,242,imeOfDay test = new TimeOfDay(null);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,243,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,244,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,245,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,246,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,247,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,251, Test constructor (Object=null)
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,253,ublic void testConstructor_badconverterObject() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,254,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,255,onverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,256,imeOfDay test = new TimeOfDay(new Integer(0));
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,257,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,258,"ssertEquals(0, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,259,"ssertEquals(0, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,260,"ssertEquals(0, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,261,"ssertEquals(0, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,262, finally {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,263,onverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,268," Test constructor (Object, Chronology)"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,270,ublic void testConstructor_Object_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,271,ate date = new Date(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,272,"imeOfDay test = new TimeOfDay(date, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,273,"ssertEquals(JulianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,274,"ssertEquals(1, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,275,"ssertEquals(2, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,276,"ssertEquals(3, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,277,"ssertEquals(4, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,281," Test constructor (Object=null, Chronology)"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,283,ublic void testConstructor_nullObject_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,284,"imeOfDay test = new TimeOfDay((Object) null, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,285,"ssertEquals(JulianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,286,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,287,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,288,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,289,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,293," Test constructor (Object, Chronology=null)"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,295,ublic void testConstructor_Object_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,296,ate date = new Date(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,297,"imeOfDay test = new TimeOfDay(date, null);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,298,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,299,"ssertEquals(1, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,300,"ssertEquals(2, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,301,"ssertEquals(3, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,302,"ssertEquals(4, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,306," Test constructor (Object=null, Chronology=null)"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,308,ublic void testConstructor_nullObject_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,309,"imeOfDay test = new TimeOfDay((Object) null, null);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,310,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,311,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,312,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,313,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,314,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,318, Test constructor (Object=null)
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,320,ublic void testConstructor_badconverterObject_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,321,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,322,onverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,323,"imeOfDay test = new TimeOfDay(new Integer(0), JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,324,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,325,"ssertEquals(0, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,326,"ssertEquals(0, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,327,"ssertEquals(0, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,328,"ssertEquals(0, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,329, finally {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,330,onverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,336," Test constructor (int, int)"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,338,ublic void testConstructor_int_int() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,339,"imeOfDay test = new TimeOfDay(10, 20);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,340,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,341,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,342,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,343,"ssertEquals(0, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,344,"ssertEquals(0, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,345,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,346,"ew TimeOfDay(-1, 20);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,347,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,348, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,349,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,350,"ew TimeOfDay(24, 20);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,351,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,352, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,353,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,354,"ew TimeOfDay(10, -1);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,355,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,356, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,357,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,358,"ew TimeOfDay(10, 60);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,359,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,360, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,364," Test constructor (int, int, int, Chronology)"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,366,ublic void testConstructor_int_int_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,367,"imeOfDay test = new TimeOfDay(10, 20, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,368,"ssertEquals(JulianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,369,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,370,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,371,"ssertEquals(0, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,372,"ssertEquals(0, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,373,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,374,"ew TimeOfDay(-1, 20, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,375,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,376, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,377,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,378,"ew TimeOfDay(24, 20, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,379,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,380, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,381,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,382,"ew TimeOfDay(10, -1, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,383,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,384, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,385,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,386,"ew TimeOfDay(10, 60, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,387,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,388, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,392," Test constructor (int, int, int, Chronology=null)"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,394,ublic void testConstructor_int_int_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,395,"imeOfDay test = new TimeOfDay(10, 20, null);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,396,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,397,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,398,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,399,"ssertEquals(0, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,400,"ssertEquals(0, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,404," Test constructor (int, int, int)"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,406,ublic void testConstructor_int_int_int() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,407,"imeOfDay test = new TimeOfDay(10, 20, 30);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,408,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,409,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,410,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,411,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,412,"ssertEquals(0, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,413,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,414,"ew TimeOfDay(-1, 20, 30);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,415,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,416, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,417,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,418,"ew TimeOfDay(24, 20, 30);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,419,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,420, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,421,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,422,"ew TimeOfDay(10, -1, 30);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,423,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,424, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,425,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,426,"ew TimeOfDay(10, 60, 30);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,427,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,428, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,429,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,430,"ew TimeOfDay(10, 20, -1);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,431,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,432, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,433,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,434,"ew TimeOfDay(10, 20, 60);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,435,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,436, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,440," Test constructor (int, int, int, Chronology)"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,442,ublic void testConstructor_int_int_int_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,443,"imeOfDay test = new TimeOfDay(10, 20, 30, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,444,"ssertEquals(JulianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,445,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,446,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,447,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,448,"ssertEquals(0, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,449,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,450,"ew TimeOfDay(-1, 20, 30, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,451,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,452, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,453,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,454,"ew TimeOfDay(24, 20, 30, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,455,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,456, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,457,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,458,"ew TimeOfDay(10, -1, 30, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,459,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,460, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,461,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,462,"ew TimeOfDay(10, 60, 30, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,463,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,464, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,465,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,466,"ew TimeOfDay(10, 20, -1, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,467,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,468, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,469,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,470,"ew TimeOfDay(10, 20, 60, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,471,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,472, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,476," Test constructor (int, int, int, Chronology=null)"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,478,ublic void testConstructor_int_int_int_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,479,"imeOfDay test = new TimeOfDay(10, 20, 30, null);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,480,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,481,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,482,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,483,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,484,"ssertEquals(0, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,488," Test constructor (int, int, int, int)"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,490,ublic void testConstructor_int_int_int_int() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,491,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,492,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,493,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,494,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,495,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,496,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,497,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,498,"ew TimeOfDay(-1, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,499,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,500, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,501,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,502,"ew TimeOfDay(24, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,503,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,504, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,505,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,506,"ew TimeOfDay(10, -1, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,507,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,508, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,509,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,510,"ew TimeOfDay(10, 60, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,511,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,512, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,513,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,514,"ew TimeOfDay(10, 20, -1, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,515,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,516, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,517,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,518,"ew TimeOfDay(10, 20, 60, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,519,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,520, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,521,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,522,"ew TimeOfDay(10, 20, 30, -1);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,523,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,524, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,525,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,526,"ew TimeOfDay(10, 20, 30, 1000);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,527,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,528, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,532," Test constructor (int, int, int, int, Chronology)"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,534,ublic void testConstructor_int_int_int_int_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,535,"imeOfDay test = new TimeOfDay(10, 20, 30, 40, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,536,"ssertEquals(JulianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,537,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,538,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,539,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,540,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,541,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,542,"ew TimeOfDay(-1, 20, 30, 40, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,543,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,544, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,545,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,546,"ew TimeOfDay(24, 20, 30, 40, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,547,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,548, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,549,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,550,"ew TimeOfDay(10, -1, 30, 40, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,551,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,552, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,553,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,554,"ew TimeOfDay(10, 60, 30, 40, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,555,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,556, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,557,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,558,"ew TimeOfDay(10, 20, -1, 40, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,559,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,560, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,561,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,562,"ew TimeOfDay(10, 20, 60, 40, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,563,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,564, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,565,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,566,"ew TimeOfDay(10, 20, 30, -1, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,567,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,568, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,569,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,570,"ew TimeOfDay(10, 20, 30, 1000, JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,571,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,572, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,576," Test constructor (int, int, int, int, Chronology=null)"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,578,ublic void testConstructor_int_int_int_int_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,579,"imeOfDay test = new TimeOfDay(10, 20, 30, 40, null);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,580,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,581,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,582,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,583,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,584,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,588,ublic void testGet() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,589,imeOfDay test = new TimeOfDay();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,590,"ssertEquals(10, test.get(DateTimeFieldType.hourOfDay()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,591,"ssertEquals(20, test.get(DateTimeFieldType.minuteOfHour()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,592,"ssertEquals(30, test.get(DateTimeFieldType.secondOfMinute()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,593,"ssertEquals(40, test.get(DateTimeFieldType.millisOfSecond()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,594,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,595,est.get(null);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,596,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,597, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,598,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,599,est.get(DateTimeFieldType.dayOfMonth());
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,600,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,601, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,604,ublic void testSize() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,605,imeOfDay test = new TimeOfDay();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,606,"ssertEquals(4, test.size());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,609,ublic void testGetFieldType() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,610,imeOfDay test = new TimeOfDay();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,611,"ssertSame(DateTimeFieldType.hourOfDay(), test.getFieldType(0));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,612,"ssertSame(DateTimeFieldType.minuteOfHour(), test.getFieldType(1));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,613,"ssertSame(DateTimeFieldType.secondOfMinute(), test.getFieldType(2));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,614,"ssertSame(DateTimeFieldType.millisOfSecond(), test.getFieldType(3));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,615,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,616,est.getFieldType(-1);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,617, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,618,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,619,est.getFieldType(5);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,620, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,623,ublic void testGetFieldTypes() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,624,imeOfDay test = new TimeOfDay();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,625,ateTimeFieldType[] fields = test.getFieldTypes();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,626,"ssertSame(DateTimeFieldType.hourOfDay(), fields[0]);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,627,"ssertSame(DateTimeFieldType.minuteOfHour(), fields[1]);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,628,"ssertSame(DateTimeFieldType.secondOfMinute(), fields[2]);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,629,"ssertSame(DateTimeFieldType.millisOfSecond(), fields[3]);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,630,"ssertNotSame(test.getFieldTypes(), test.getFieldTypes());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,633,ublic void testGetField() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,634,imeOfDay test = new TimeOfDay();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,635,"ssertSame(ISOChronology.getInstance().hourOfDay(), test.getField(0));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,636,"ssertSame(ISOChronology.getInstance().minuteOfHour(), test.getField(1));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,637,"ssertSame(ISOChronology.getInstance().secondOfMinute(), test.getField(2));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,638,"ssertSame(ISOChronology.getInstance().millisOfSecond(), test.getField(3));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,639,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,640,est.getField(-1);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,641, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,642,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,643,est.getField(5);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,644, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,647,ublic void testGetFields() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,648,imeOfDay test = new TimeOfDay();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,649,ateTimeField[] fields = test.getFields();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,650,"ssertSame(ISOChronology.getInstance().hourOfDay(), fields[0]);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,651,"ssertSame(ISOChronology.getInstance().minuteOfHour(), fields[1]);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,652,"ssertSame(ISOChronology.getInstance().secondOfMinute(), fields[2]);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,653,"ssertSame(ISOChronology.getInstance().millisOfSecond(), fields[3]);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,654,"ssertNotSame(test.getFields(), test.getFields());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,657,ublic void testGetValue() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,658,imeOfDay test = new TimeOfDay();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,659,"ssertEquals(10, test.getValue(0));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,660,"ssertEquals(20, test.getValue(1));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,661,"ssertEquals(30, test.getValue(2));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,662,"ssertEquals(40, test.getValue(3));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,663,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,664,est.getValue(-1);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,665, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,666,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,667,est.getValue(5);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,668, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,671,ublic void testGetValues() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,672,imeOfDay test = new TimeOfDay();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,673,nt[] values = test.getValues();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,674,"ssertEquals(10, values[0]);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,675,"ssertEquals(20, values[1]);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,676,"ssertEquals(30, values[2]);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,677,"ssertEquals(40, values[3]);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,678,"ssertNotSame(test.getValues(), test.getValues());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,681,ublic void testIsSupported() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,682,imeOfDay test = new TimeOfDay();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,683,"ssertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,684,"ssertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,685,"ssertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,686,"ssertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,687,"ssertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,690,ublic void testEqualsHashCode() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,691,"imeOfDay test1 = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,692,"imeOfDay test2 = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,693,"ssertEquals(true, test1.equals(test2));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,694,"ssertEquals(true, test2.equals(test1));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,695,"ssertEquals(true, test1.equals(test1));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,696,"ssertEquals(true, test2.equals(test2));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,697,"ssertEquals(true, test1.hashCode() == test2.hashCode());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,698,"ssertEquals(true, test1.hashCode() == test1.hashCode());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,699,"ssertEquals(true, test2.hashCode() == test2.hashCode());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,701,"imeOfDay test3 = new TimeOfDay(11, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,702,"ssertEquals(false, test1.equals(test3));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,703,"ssertEquals(false, test2.equals(test3));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,704,"ssertEquals(false, test3.equals(test1));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,705,"ssertEquals(false, test3.equals(test2));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,706,"ssertEquals(false, test1.hashCode() == test3.hashCode());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,707,"ssertEquals(false, test2.hashCode() == test3.hashCode());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,709,"ssertEquals(false, test1.equals(""Hello""));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,710,"ssertEquals(true, test1.equals(new MockInstant()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,711,"ssertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,714,lass MockInstant extends MockPartial {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,715,ublic DateTimeField[] getFields() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,716,eturn new DateTimeField[] {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,717,"SOChronology.getInstance().hourOfDay(),"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,718,"SOChronology.getInstance().minuteOfHour(),"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,719,"SOChronology.getInstance().secondOfMinute(),"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,720,"SOChronology.getInstance().millisOfSecond(),"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,723,ublic int[] getValues() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,724,"eturn new int[] {10, 20, 30, 40};"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,729,ublic void testResolveDateTime_RI() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,730,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,731,ateTime dt = new DateTime(0L);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,732,"ssertEquals(""1970-01-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,734,ateTime result = test.toDateTimeUsing(dt);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,735,"ssertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,736,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,737,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,738,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,739,"ssertEquals(""1970-01-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,740,"ssertEquals(""1970-01-01T10:20:30.040Z"", result.toString());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,743,ublic void testResolveDateTime_nullRI() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,744,"imeOfDay test = new TimeOfDay(1, 2, 3, 4);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,745,ateTimeUtils.setCurrentMillisFixed(TEST_TIME2);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,747,ateTime result = test.toDateTimeUsing(null);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,748,"ssertEquals(1, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,749,"ssertEquals(2, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,750,"ssertEquals(3, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,751,"ssertEquals(4, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,752,"ssertEquals(""1970-01-02T01:02:03.004Z"", result.toString());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,756,ublic void testSerialization() throws Exception {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,757,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,759,yteArrayOutputStream baos = new ByteArrayOutputStream();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,760,bjectOutputStream oos = new ObjectOutputStream(baos);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,761,os.writeObject(test);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,762,yte[] bytes = baos.toByteArray();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,763,os.close();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,765,yteArrayInputStream bais = new ByteArrayInputStream(bytes);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,766,bjectInputStream ois = new ObjectInputStream(bais);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,767,imeOfDay result = (TimeOfDay) ois.readObject();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,768,is.close();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,770,"ssertEquals(test, result);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,771,"ssertTrue(Arrays.equals(test.getValues(), result.getValues()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,772,"ssertTrue(Arrays.equals(test.getFields(), result.getFields()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,773,"ssertEquals(test.getChronology(), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,777,ublic void testToString() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,778,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,779,"ssertEquals(""T10:20:30.040"", test.toString());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,783,ublic void testPropertyGetHour() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,784,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,785,"ssertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,786,"ssertEquals(""hourOfDay"", test.hourOfDay().getName());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,787,"ssertEquals(""Property[hourOfDay]"", test.hourOfDay().toString());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,788,"ssertSame(test, test.hourOfDay().getReadablePartial());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,789,"ssertSame(test, test.hourOfDay().getTimeOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,790,"ssertEquals(10, test.hourOfDay().get());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,791,"ssertEquals(""10"", test.hourOfDay().getAsText());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,792,"ssertEquals(""10"", test.hourOfDay().getAsText(Locale.FRENCH));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,793,"ssertEquals(""10"", test.hourOfDay().getAsShortText());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,794,"ssertEquals(""10"", test.hourOfDay().getAsShortText(Locale.FRENCH));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,795,"ssertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,796,"ssertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,797,"ssertEquals(2, test.hourOfDay().getMaximumTextLength(null));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,798,"ssertEquals(2, test.hourOfDay().getMaximumShortTextLength(null));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,801,ublic void testPropertyGetMaxMinValuesHour() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,802,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,803,"ssertEquals(0, test.hourOfDay().getMinimumValue());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,804,"ssertEquals(0, test.hourOfDay().getMinimumValueOverall());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,805,"ssertEquals(23, test.hourOfDay().getMaximumValue());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,806,"ssertEquals(23, test.hourOfDay().getMaximumValueOverall());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,809,ublic void testPropertyAddHour() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,810,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,811,imeOfDay copy = test.hourOfDay().addToCopy(9);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,812,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,813,"heck(copy, 19, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,815,opy = test.hourOfDay().addToCopy(0);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,816,"heck(copy, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,818,opy = test.hourOfDay().addToCopy(13);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,819,"heck(copy, 23, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,821,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,822,est.hourOfDay().addToCopy(14);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,823,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,824, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,825,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,827,opy = test.hourOfDay().addToCopy(-10);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,828,"heck(copy, 0, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,830,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,831,est.hourOfDay().addToCopy(-11);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,832,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,833, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,834,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,837,ublic void testPropertyAddWrapFieldHour() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,838,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,839,imeOfDay copy = test.hourOfDay().addWrapFieldToCopy(9);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,840,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,841,"heck(copy, 19, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,843,opy = test.hourOfDay().addWrapFieldToCopy(0);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,844,"heck(copy, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,846,opy = test.hourOfDay().addWrapFieldToCopy(18);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,847,"heck(copy, 4, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,849,opy = test.hourOfDay().addWrapFieldToCopy(-15);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,850,"heck(copy, 19, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,853,ublic void testPropertySetHour() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,854,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,855,imeOfDay copy = test.hourOfDay().setCopy(12);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,856,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,857,"heck(copy, 12, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,859,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,860,est.hourOfDay().setCopy(24);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,861,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,862, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,863,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,864,est.hourOfDay().setCopy(-1);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,865,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,866, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,869,ublic void testPropertySetTextHour() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,870,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,871,"imeOfDay copy = test.hourOfDay().setCopy(""12"");"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,872,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,873,"heck(copy, 12, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,876,ublic void testPropertyCompareToHour() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,877,imeOfDay test1 = new TimeOfDay(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,878,imeOfDay test2 = new TimeOfDay(TEST_TIME2);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,879,"ssertEquals(true, test1.hourOfDay().compareTo(test2) < 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,880,"ssertEquals(true, test2.hourOfDay().compareTo(test1) > 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,881,"ssertEquals(true, test1.hourOfDay().compareTo(test1) == 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,882,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,883,est1.hourOfDay().compareTo((ReadablePartial) null);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,884,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,885, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,887,ateTime dt1 = new DateTime(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,888,ateTime dt2 = new DateTime(TEST_TIME2);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,889,"ssertEquals(true, test1.hourOfDay().compareTo(dt2) < 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,890,"ssertEquals(true, test2.hourOfDay().compareTo(dt1) > 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,891,"ssertEquals(true, test1.hourOfDay().compareTo(dt1) == 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,892,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,893,est1.hourOfDay().compareTo((ReadableInstant) null);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,894,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,895, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,899,ublic void testPropertyGetMinute() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,900,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,901,"ssertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,902,"ssertEquals(""minuteOfHour"", test.minuteOfHour().getName());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,903,"ssertEquals(""Property[minuteOfHour]"", test.minuteOfHour().toString());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,904,"ssertSame(test, test.minuteOfHour().getReadablePartial());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,905,"ssertSame(test, test.minuteOfHour().getTimeOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,906,"ssertEquals(20, test.minuteOfHour().get());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,907,"ssertEquals(""20"", test.minuteOfHour().getAsText());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,908,"ssertEquals(""20"", test.minuteOfHour().getAsText(Locale.FRENCH));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,909,"ssertEquals(""20"", test.minuteOfHour().getAsShortText());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,910,"ssertEquals(""20"", test.minuteOfHour().getAsShortText(Locale.FRENCH));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,911,"ssertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,912,"ssertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,913,"ssertEquals(2, test.minuteOfHour().getMaximumTextLength(null));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,914,"ssertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,917,ublic void testPropertyGetMaxMinValuesMinute() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,918,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,919,"ssertEquals(0, test.minuteOfHour().getMinimumValue());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,920,"ssertEquals(0, test.minuteOfHour().getMinimumValueOverall());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,921,"ssertEquals(59, test.minuteOfHour().getMaximumValue());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,922,"ssertEquals(59, test.minuteOfHour().getMaximumValueOverall());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,925,ublic void testPropertyAddMinute() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,926,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,927,imeOfDay copy = test.minuteOfHour().addToCopy(9);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,928,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,929,"heck(copy, 10, 29, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,931,opy = test.minuteOfHour().addToCopy(39);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,932,"heck(copy, 10, 59, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,934,opy = test.minuteOfHour().addToCopy(40);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,935,"heck(copy, 11, 0, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,937,opy = test.minuteOfHour().addToCopy(1 * 60 + 45);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,938,"heck(copy, 12, 5, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,940,opy = test.minuteOfHour().addToCopy(13 * 60 + 39);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,941,"heck(copy, 23, 59, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,943,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,944,est.minuteOfHour().addToCopy(13 * 60 + 40);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,945,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,946, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,947,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,949,opy = test.minuteOfHour().addToCopy(-9);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,950,"heck(copy, 10, 11, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,952,opy = test.minuteOfHour().addToCopy(-19);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,953,"heck(copy, 10, 1, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,955,opy = test.minuteOfHour().addToCopy(-20);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,956,"heck(copy, 10, 0, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,958,opy = test.minuteOfHour().addToCopy(-21);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,959,"heck(copy, 9, 59, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,961,opy = test.minuteOfHour().addToCopy(-(10 * 60 + 20));
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,962,"heck(copy, 0, 0, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,964,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,965,est.minuteOfHour().addToCopy(-(10 * 60 + 21));
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,966,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,967, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,968,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,971,ublic void testPropertyAddWrapFieldMinute() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,972,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,973,imeOfDay copy = test.minuteOfHour().addWrapFieldToCopy(9);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,974,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,975,"heck(copy, 10, 29, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,977,opy = test.minuteOfHour().addWrapFieldToCopy(49);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,978,"heck(copy, 10, 9, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,980,opy = test.minuteOfHour().addWrapFieldToCopy(-47);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,981,"heck(copy, 10, 33, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,984,ublic void testPropertySetMinute() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,985,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,986,imeOfDay copy = test.minuteOfHour().setCopy(12);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,987,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,988,"heck(copy, 10, 12, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,990,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,991,est.minuteOfHour().setCopy(60);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,992,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,993, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,994,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,995,est.minuteOfHour().setCopy(-1);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,996,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,997, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1000,ublic void testPropertySetTextMinute() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1001,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1002,"imeOfDay copy = test.minuteOfHour().setCopy(""12"");"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1003,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1004,"heck(copy, 10, 12, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1007,ublic void testPropertyCompareToMinute() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1008,imeOfDay test1 = new TimeOfDay(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1009,imeOfDay test2 = new TimeOfDay(TEST_TIME2);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1010,"ssertEquals(true, test1.minuteOfHour().compareTo(test2) < 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1011,"ssertEquals(true, test2.minuteOfHour().compareTo(test1) > 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1012,"ssertEquals(true, test1.minuteOfHour().compareTo(test1) == 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1013,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1014,est1.minuteOfHour().compareTo((ReadablePartial) null);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1015,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1016, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1018,ateTime dt1 = new DateTime(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1019,ateTime dt2 = new DateTime(TEST_TIME2);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1020,"ssertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1021,"ssertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1022,"ssertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1023,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1024,est1.minuteOfHour().compareTo((ReadableInstant) null);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1025,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1026, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1030,ublic void testPropertyGetSecond() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1031,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1032,"ssertSame(test.getChronology().secondOfMinute(), test.secondOfMinute().getField());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1033,"ssertEquals(""secondOfMinute"", test.secondOfMinute().getName());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1034,"ssertEquals(""Property[secondOfMinute]"", test.secondOfMinute().toString());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1035,"ssertSame(test, test.secondOfMinute().getReadablePartial());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1036,"ssertSame(test, test.secondOfMinute().getTimeOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1037,"ssertEquals(30, test.secondOfMinute().get());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1038,"ssertEquals(""30"", test.secondOfMinute().getAsText());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1039,"ssertEquals(""30"", test.secondOfMinute().getAsText(Locale.FRENCH));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1040,"ssertEquals(""30"", test.secondOfMinute().getAsShortText());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1041,"ssertEquals(""30"", test.secondOfMinute().getAsShortText(Locale.FRENCH));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1042,"ssertEquals(test.getChronology().seconds(), test.secondOfMinute().getDurationField());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1043,"ssertEquals(test.getChronology().minutes(), test.secondOfMinute().getRangeDurationField());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1044,"ssertEquals(2, test.secondOfMinute().getMaximumTextLength(null));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1045,"ssertEquals(2, test.secondOfMinute().getMaximumShortTextLength(null));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1048,ublic void testPropertyGetMaxMinValuesSecond() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1049,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1050,"ssertEquals(0, test.secondOfMinute().getMinimumValue());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1051,"ssertEquals(0, test.secondOfMinute().getMinimumValueOverall());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1052,"ssertEquals(59, test.secondOfMinute().getMaximumValue());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1053,"ssertEquals(59, test.secondOfMinute().getMaximumValueOverall());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1056,ublic void testPropertyAddSecond() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1057,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1058,imeOfDay copy = test.secondOfMinute().addToCopy(9);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1059,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1060,"heck(copy, 10, 20, 39, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1062,opy = test.secondOfMinute().addToCopy(29);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1063,"heck(copy, 10, 20, 59, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1065,opy = test.secondOfMinute().addToCopy(30);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1066,"heck(copy, 10, 21, 0, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1068,opy = test.secondOfMinute().addToCopy(39 * 60 + 29);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1069,"heck(copy, 10, 59, 59, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1071,opy = test.secondOfMinute().addToCopy(39 * 60 + 30);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1072,"heck(copy, 11, 0, 0, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1074,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1075,est.secondOfMinute().addToCopy(13 * 60 * 60 + 39 * 60 + 30);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1076,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1077, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1078,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1080,opy = test.secondOfMinute().addToCopy(-9);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1081,"heck(copy, 10, 20, 21, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1083,opy = test.secondOfMinute().addToCopy(-30);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1084,"heck(copy, 10, 20, 0, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1086,opy = test.secondOfMinute().addToCopy(-31);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1087,"heck(copy, 10, 19, 59, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1089,opy = test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 30));
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1090,"heck(copy, 0, 0, 0, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1092,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1093,est.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 31));
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1094,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1095, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1096,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1099,ublic void testPropertyAddWrapFieldSecond() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1100,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1101,imeOfDay copy = test.secondOfMinute().addWrapFieldToCopy(9);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1102,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1103,"heck(copy, 10, 20, 39, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1105,opy = test.secondOfMinute().addWrapFieldToCopy(49);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1106,"heck(copy, 10, 20, 19, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1108,opy = test.secondOfMinute().addWrapFieldToCopy(-47);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1109,"heck(copy, 10, 20, 43, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1112,ublic void testPropertySetSecond() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1113,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1114,imeOfDay copy = test.secondOfMinute().setCopy(12);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1115,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1116,"heck(copy, 10, 20, 12, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1118,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1119,est.secondOfMinute().setCopy(60);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1120,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1121, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1122,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1123,est.secondOfMinute().setCopy(-1);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1124,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1125, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1128,ublic void testPropertySetTextSecond() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1129,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1130,"imeOfDay copy = test.secondOfMinute().setCopy(""12"");"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1131,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1132,"heck(copy, 10, 20, 12, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1135,ublic void testPropertyCompareToSecond() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1136,imeOfDay test1 = new TimeOfDay(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1137,imeOfDay test2 = new TimeOfDay(TEST_TIME2);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1138,"ssertEquals(true, test1.secondOfMinute().compareTo(test2) < 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1139,"ssertEquals(true, test2.secondOfMinute().compareTo(test1) > 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1140,"ssertEquals(true, test1.secondOfMinute().compareTo(test1) == 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1141,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1142,est1.secondOfMinute().compareTo((ReadablePartial) null);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1143,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1144, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1146,ateTime dt1 = new DateTime(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1147,ateTime dt2 = new DateTime(TEST_TIME2);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1148,"ssertEquals(true, test1.secondOfMinute().compareTo(dt2) < 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1149,"ssertEquals(true, test2.secondOfMinute().compareTo(dt1) > 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1150,"ssertEquals(true, test1.secondOfMinute().compareTo(dt1) == 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1151,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1152,est1.secondOfMinute().compareTo((ReadableInstant) null);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1153,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1154, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1158,ublic void testPropertyGetMilli() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1159,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1160,"ssertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1161,"ssertEquals(""millisOfSecond"", test.millisOfSecond().getName());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1162,"ssertEquals(""Property[millisOfSecond]"", test.millisOfSecond().toString());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1163,"ssertSame(test, test.millisOfSecond().getReadablePartial());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1164,"ssertSame(test, test.millisOfSecond().getTimeOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1165,"ssertEquals(40, test.millisOfSecond().get());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1166,"ssertEquals(""40"", test.millisOfSecond().getAsText());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1167,"ssertEquals(""40"", test.millisOfSecond().getAsText(Locale.FRENCH));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1168,"ssertEquals(""40"", test.millisOfSecond().getAsShortText());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1169,"ssertEquals(""40"", test.millisOfSecond().getAsShortText(Locale.FRENCH));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1170,"ssertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1171,"ssertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1172,"ssertEquals(3, test.millisOfSecond().getMaximumTextLength(null));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1173,"ssertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1176,ublic void testPropertyGetMaxMinValuesMilli() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1177,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1178,"ssertEquals(0, test.millisOfSecond().getMinimumValue());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1179,"ssertEquals(0, test.millisOfSecond().getMinimumValueOverall());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1180,"ssertEquals(999, test.millisOfSecond().getMaximumValue());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1181,"ssertEquals(999, test.millisOfSecond().getMaximumValueOverall());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1184,ublic void testPropertyAddMilli() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1185,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1186,imeOfDay copy = test.millisOfSecond().addToCopy(9);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1187,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1188,"heck(copy, 10, 20, 30, 49);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1190,opy = test.millisOfSecond().addToCopy(959);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1191,"heck(copy, 10, 20, 30, 999);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1193,opy = test.millisOfSecond().addToCopy(960);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1194,"heck(copy, 10, 20, 31, 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1196,opy = test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1197,"heck(copy, 23, 59, 59, 999);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1199,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1200,est.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1201,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1202, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1203,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1205,opy = test.millisOfSecond().addToCopy(-9);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1206,"heck(copy, 10, 20, 30, 31);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1208,opy = test.millisOfSecond().addToCopy(-40);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1209,"heck(copy, 10, 20, 30, 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1211,opy = test.millisOfSecond().addToCopy(-41);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1212,"heck(copy, 10, 20, 29, 999);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1214,opy = test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1215,"heck(copy, 0, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1217,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1218,est.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1219,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1220, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1221,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1224,ublic void testPropertyAddWrapFieldMilli() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1225,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1226,imeOfDay copy = test.millisOfSecond().addWrapFieldToCopy(9);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1227,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1228,"heck(copy, 10, 20, 30, 49);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1230,opy = test.millisOfSecond().addWrapFieldToCopy(995);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1231,"heck(copy, 10, 20, 30, 35);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1233,opy = test.millisOfSecond().addWrapFieldToCopy(-47);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1234,"heck(copy, 10, 20, 30, 993);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1237,ublic void testPropertySetMilli() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1238,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1239,imeOfDay copy = test.millisOfSecond().setCopy(12);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1240,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1241,"heck(copy, 10, 20, 30, 12);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1243,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1244,est.millisOfSecond().setCopy(1000);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1245,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1246, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1247,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1248,est.millisOfSecond().setCopy(-1);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1249,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1250, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1253,ublic void testPropertySetTextMilli() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1254,"imeOfDay test = new TimeOfDay(10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1255,"imeOfDay copy = test.millisOfSecond().setCopy(""12"");"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1256,"heck(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1257,"heck(copy, 10, 20, 30, 12);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1260,ublic void testPropertyCompareToMilli() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1261,imeOfDay test1 = new TimeOfDay(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1262,imeOfDay test2 = new TimeOfDay(TEST_TIME2);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1263,"ssertEquals(true, test1.millisOfSecond().compareTo(test2) < 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1264,"ssertEquals(true, test2.millisOfSecond().compareTo(test1) > 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1265,"ssertEquals(true, test1.millisOfSecond().compareTo(test1) == 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1266,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1267,est1.millisOfSecond().compareTo((ReadablePartial) null);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1268,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1269, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1271,ateTime dt1 = new DateTime(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1272,ateTime dt2 = new DateTime(TEST_TIME2);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1273,"ssertEquals(true, test1.millisOfSecond().compareTo(dt2) < 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1274,"ssertEquals(true, test2.millisOfSecond().compareTo(dt1) > 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1275,"ssertEquals(true, test1.millisOfSecond().compareTo(dt1) == 0);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1276,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1277,est1.millisOfSecond().compareTo((ReadableInstant) null);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1278,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1279, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1283,"rivate void check(TimeOfDay test, int hour, int min, int sec, int milli) {"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1284,"ssertEquals(hour, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1285,"ssertEquals(min, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1286,"ssertEquals(sec, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,1287,"ssertEquals(milli, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,56,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,57,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,58,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,59,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,60,import java.util.Arrays;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,62,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,63,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,66,* This class is a Junit unit test for TimeOfDay.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,68,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,70,public class TestTimeOfDay_Basics extends TestCase {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,72,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,73,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,74,"private static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,75,private static final int OFFSET = 1;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,76,private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,77,private static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,78,private static final Chronology COPTIC_TOKYO = Chronology.getCoptic(TOKYO);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,79,private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,80,private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,81,private static final Chronology ISO_LONDON = Chronology.getISO(LONDON);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,82,private static final Chronology ISO_TOKYO = Chronology.getISO(TOKYO);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,83,private static final Chronology ISO_UTC = Chronology.getISOUTC();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,84,private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,85,private static final Chronology BUDDHIST_LONDON = Chronology.getBuddhist(LONDON);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,86,private static final Chronology BUDDHIST_TOKYO = Chronology.getBuddhist(TOKYO);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,87,private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,89,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,90,10L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,91,+ 20L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,92,+ 30L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,93,+ 40L;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,95,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,96,1L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,97,+ 2L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,98,+ 3L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,99,+ 4L;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,101,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,102,1L * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,103,+ 5L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,104,+ 6L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,105,+ 7L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,106,+ 8L;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,108,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,110,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,111,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,114,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,115,return new TestSuite(TestTimeOfDay_Basics.class);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,118,public TestTimeOfDay_Basics(String name) {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,119,super(name);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,122,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,123,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,124,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,125,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,128,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,129,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,130,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,131,zone = null;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,135,public void testGet() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,136,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,137,"assertEquals(10 + OFFSET, test.get(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,138,"assertEquals(20, test.get(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,139,"assertEquals(30, test.get(DateTimeFieldType.secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,140,"assertEquals(40, test.get(DateTimeFieldType.millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,141,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,142,test.get(null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,143,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,144,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,145,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,146,test.get(DateTimeFieldType.dayOfMonth());
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,147,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,148,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,151,public void testSize() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,152,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,153,"assertEquals(4, test.size());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,156,public void testGetFieldType() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,157,TimeOfDay test = new TimeOfDay(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,158,"assertSame(DateTimeFieldType.hourOfDay(), test.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,159,"assertSame(DateTimeFieldType.minuteOfHour(), test.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,160,"assertSame(DateTimeFieldType.secondOfMinute(), test.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,161,"assertSame(DateTimeFieldType.millisOfSecond(), test.getFieldType(3));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,162,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,163,test.getFieldType(-1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,164,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,165,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,166,test.getFieldType(5);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,167,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,170,public void testGetFieldTypes() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,171,TimeOfDay test = new TimeOfDay(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,172,DateTimeFieldType[] fields = test.getFieldTypes();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,173,"assertSame(DateTimeFieldType.hourOfDay(), fields[0]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,174,"assertSame(DateTimeFieldType.minuteOfHour(), fields[1]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,175,"assertSame(DateTimeFieldType.secondOfMinute(), fields[2]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,176,"assertSame(DateTimeFieldType.millisOfSecond(), fields[3]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,177,"assertNotSame(test.getFieldTypes(), test.getFieldTypes());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,180,public void testGetField() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,181,TimeOfDay test = new TimeOfDay(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,182,"assertSame(Chronology.getCopticUTC().hourOfDay(), test.getField(0));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,183,"assertSame(Chronology.getCopticUTC().minuteOfHour(), test.getField(1));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,184,"assertSame(Chronology.getCopticUTC().secondOfMinute(), test.getField(2));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,185,"assertSame(Chronology.getCopticUTC().millisOfSecond(), test.getField(3));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,186,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,187,test.getField(-1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,188,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,189,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,190,test.getField(5);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,191,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,194,public void testGetFields() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,195,TimeOfDay test = new TimeOfDay(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,196,DateTimeField[] fields = test.getFields();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,197,"assertSame(Chronology.getCopticUTC().hourOfDay(), fields[0]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,198,"assertSame(Chronology.getCopticUTC().minuteOfHour(), fields[1]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,199,"assertSame(Chronology.getCopticUTC().secondOfMinute(), fields[2]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,200,"assertSame(Chronology.getCopticUTC().millisOfSecond(), fields[3]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,201,"assertNotSame(test.getFields(), test.getFields());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,204,public void testGetValue() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,205,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,206,"assertEquals(10, test.getValue(0));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,207,"assertEquals(20, test.getValue(1));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,208,"assertEquals(30, test.getValue(2));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,209,"assertEquals(40, test.getValue(3));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,210,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,211,test.getValue(-1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,212,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,213,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,214,test.getValue(5);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,215,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,218,public void testGetValues() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,219,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,220,int[] values = test.getValues();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,221,"assertEquals(10, values[0]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,222,"assertEquals(20, values[1]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,223,"assertEquals(30, values[2]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,224,"assertEquals(40, values[3]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,225,"assertNotSame(test.getValues(), test.getValues());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,228,public void testIsSupported() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,229,TimeOfDay test = new TimeOfDay(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,230,"assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,231,"assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,232,"assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,233,"assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,234,"assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,237,public void testEqualsHashCode() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,238,"TimeOfDay test1 = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,239,"TimeOfDay test2 = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,240,"assertEquals(true, test1.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,241,"assertEquals(true, test2.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,242,"assertEquals(true, test1.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,243,"assertEquals(true, test2.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,244,"assertEquals(true, test1.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,245,"assertEquals(true, test1.hashCode() == test1.hashCode());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,246,"assertEquals(true, test2.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,248,"TimeOfDay test3 = new TimeOfDay(15, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,249,"assertEquals(false, test1.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,250,"assertEquals(false, test2.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,251,"assertEquals(false, test3.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,252,"assertEquals(false, test3.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,253,"assertEquals(false, test1.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,254,"assertEquals(false, test2.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,256,"assertEquals(false, test1.equals(""Hello""));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,257,"assertEquals(true, test1.equals(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,258,"assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,261,class MockInstant extends MockPartial {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,262,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,263,return Chronology.getCopticUTC();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,265,public DateTimeField[] getFields() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,266,return new DateTimeField[] {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,267,"Chronology.getCopticUTC().hourOfDay(),"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,268,"Chronology.getCopticUTC().minuteOfHour(),"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,269,"Chronology.getCopticUTC().secondOfMinute(),"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,270,"Chronology.getCopticUTC().millisOfSecond(),"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,273,public int[] getValues() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,274,"return new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,279,public void testWithChronologyRetainFields_Chrono() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,280,"TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,281,TimeOfDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,282,"check(base, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,283,"assertEquals(COPTIC_UTC, base.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,284,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,285,"assertEquals(BUDDHIST_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,288,public void testWithChronologyRetainFields_sameChrono() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,289,"TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,290,TimeOfDay test = base.withChronologyRetainFields(COPTIC_TOKYO);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,291,"assertSame(base, test);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,294,public void testWithChronologyRetainFields_nullChrono() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,295,"TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,296,TimeOfDay test = base.withChronologyRetainFields(null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,297,"check(base, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,298,"assertEquals(COPTIC_UTC, base.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,299,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,300,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,304,public void testToDateTime() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,305,"TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,306,"DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,307,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,309,DateTime test = base.toDateTime();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,310,"check(base, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,311,"DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,312,expected = expected.hourOfDay().setCopy(10);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,313,expected = expected.minuteOfHour().setCopy(20);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,314,expected = expected.secondOfMinute().setCopy(30);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,315,expected = expected.millisOfSecond().setCopy(40);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,316,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,320,public void testToDateTime_Zone() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,321,"TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,322,"DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,323,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,325,DateTime test = base.toDateTime(TOKYO);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,326,"check(base, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,327,"DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,328,expected = expected.hourOfDay().setCopy(10);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,329,expected = expected.minuteOfHour().setCopy(20);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,330,expected = expected.secondOfMinute().setCopy(30);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,331,expected = expected.millisOfSecond().setCopy(40);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,332,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,335,public void testToDateTime_nullZone() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,336,"TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,337,"DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,338,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,340,DateTime test = base.toDateTime((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,341,"check(base, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,342,"DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,343,expected = expected.hourOfDay().setCopy(10);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,344,expected = expected.minuteOfHour().setCopy(20);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,345,expected = expected.secondOfMinute().setCopy(30);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,346,expected = expected.millisOfSecond().setCopy(40);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,347,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,350,// Removed as too complex
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,352,"//     * Merges two partial together, taking account of the different chronologies."
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,354,//     * @param main  the main partial
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,355,//     * @param base  the partial to use as a base to merge on top of
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,356,//     * @param instant  the instant to start from and to use for missing fields
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,357,//     * @return the merged instant
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,359,"//    public long merge(ReadablePartial main, ReadablePartial base, long instant) {"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,360,//        DateTimeZone zone = main.getChronology().getZone();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,361,"//        instant = base.getChronology().withZone(zone).set(base, instant);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,362,"//        return set(main, instant);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,367,//     * Converts this object to a DateTime using a YearMonthDay to fill in the
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,368,//     * missing fields and using the default time zone.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,369,//     * This instance is immutable and unaffected by this method call.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,370,//     * <p>
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,371,//     * The resulting chronology is determined by the chronology of this
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,372,//     * TimeOfDay plus the time zone.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,373,//     * <p>
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,374,//     * This method makes use of the chronology of the specified YearMonthDay
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,375,//     * in the calculation. This can be significant when mixing chronologies.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,376,//     * If the YearMonthDay is in the same chronology as this instance the
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,377,//     * method will perform exactly as you might expect.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,378,//     * <p>
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,379,"//     * If the chronologies differ, then both this TimeOfDay and the YearMonthDay"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,380,//     * are converted to the destination chronology and then merged. As a result
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,381,"//     * it may be the case that the year, monthOfYear and dayOfMonth fields on"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,382,//     * the result are different from the values returned by the methods on the
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,383,//     * YearMonthDay.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,384,//     * <p>
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,385,//     * See {@link DateTime#withFields(ReadablePartial)} for an algorithm that
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,386,//     * ignores the chronology.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,388,"//     * @param date  the date to use, null means today"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,389,//     * @return the DateTime instance
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,391,//    public DateTime toDateTime(YearMonthDay date) {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,392,"//        return toDateTime(date, null);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,396,//     * Converts this object to a DateTime using a YearMonthDay to fill in the
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,397,//     * missing fields.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,398,//     * This instance is immutable and unaffected by this method call.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,399,//     * <p>
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,400,//     * The resulting chronology is determined by the chronology of this
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,401,//     * TimeOfDay plus the time zone.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,402,//     * <p>
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,403,//     * This method makes use of the chronology of the specified YearMonthDay
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,404,//     * in the calculation. This can be significant when mixing chronologies.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,405,//     * If the YearMonthDay is in the same chronology as this instance the
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,406,//     * method will perform exactly as you might expect.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,407,//     * <p>
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,408,"//     * If the chronologies differ, then both this TimeOfDay and the YearMonthDay"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,409,//     * are converted to the destination chronology and then merged. As a result
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,410,"//     * it may be the case that the year, monthOfYear and dayOfMonth fields on"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,411,//     * the result are different from the values returned by the methods on the
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,412,//     * YearMonthDay.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,413,//     * <p>
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,414,//     * See {@link DateTime#withFields(ReadablePartial)} for an algorithm that
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,415,//     * ignores the chronology and just assigns the fields.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,417,"//     * @param date  the date to use, null means today"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,418,"//     * @param zone  the zone to get the DateTime in, null means default"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,419,//     * @return the DateTime instance
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,421,"//    public DateTime toDateTime(YearMonthDay date, DateTimeZone zone) {"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,422,//        Chronology chrono = getChronology().withZone(zone);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,423,//        if (date == null) {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,424,//            DateTime dt = new DateTime(chrono);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,425,//            return dt.withFields(this);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,426,//        } else {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,427,"//            long millis = chrono.merge(this, date, DateTimeUtils.currentTimeMillis());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,428,"//            return new DateTime(millis, chrono);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,433,//    public void testToDateTime_YMD() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,434,"//        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,435,"//        YearMonthDay ymd = new YearMonthDay(new DateMidnight(2004, 6, 9), BUDDHIST_TOKYO);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,437,//        DateTime test = base.toDateTime(ymd);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,438,"//        check(base, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,439,"//        DateTime expected = new DateTime(ymd.toDateMidnight(LONDON), COPTIC_LONDON);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,440,//        expected = expected.hourOfDay().setCopy(10);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,441,//        expected = expected.minuteOfHour().setCopy(20);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,442,//        expected = expected.secondOfMinute().setCopy(30);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,443,//        expected = expected.millisOfSecond().setCopy(40);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,444,"//        assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,447,//    public void testToDateTime_nullYMD() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,448,"//        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,450,//        DateTime test = base.toDateTime((YearMonthDay) null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,451,"//        check(base, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,452,//        DateTime expected = new DateTime(COPTIC_LONDON);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,453,//        expected = expected.hourOfDay().setCopy(10);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,454,//        expected = expected.minuteOfHour().setCopy(20);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,455,//        expected = expected.secondOfMinute().setCopy(30);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,456,//        expected = expected.millisOfSecond().setCopy(40);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,457,"//        assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,461,//    public void testToDateTime_YMD_Zone() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,462,"//        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,463,"//        YearMonthDay ymd = new YearMonthDay(new DateMidnight(2004, 6, 9), BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,465,"//        DateTime test = base.toDateTime(ymd, TOKYO);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,466,"//        check(base, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,467,"//        DateTime expected = new DateTime(ymd.toDateMidnight(TOKYO), COPTIC_TOKYO);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,468,//        expected = expected.hourOfDay().setCopy(10);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,469,//        expected = expected.minuteOfHour().setCopy(20);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,470,//        expected = expected.secondOfMinute().setCopy(30);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,471,//        expected = expected.millisOfSecond().setCopy(40);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,472,"//        assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,475,//    public void testToDateTime_YMD_nullZone() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,476,"//        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,477,"//        YearMonthDay ymd = new YearMonthDay(new DateMidnight(2004, 6, 9), BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,479,"//        DateTime test = base.toDateTime(ymd, null);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,480,"//        check(base, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,481,"//        DateTime expected = new DateTime(ymd.toDateMidnight(LONDON), COPTIC_LONDON);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,482,//        expected = expected.hourOfDay().setCopy(10);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,483,//        expected = expected.minuteOfHour().setCopy(20);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,484,//        expected = expected.secondOfMinute().setCopy(30);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,485,//        expected = expected.millisOfSecond().setCopy(40);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,486,"//        assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,489,//    public void testToDateTime_nullYMD_Zone() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,490,"//        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,492,"//        DateTime test = base.toDateTime((YearMonthDay) null, TOKYO);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,493,"//        check(base, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,494,//        DateTime expected = new DateTime(COPTIC_TOKYO);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,495,//        expected = expected.hourOfDay().setCopy(10);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,496,//        expected = expected.minuteOfHour().setCopy(20);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,497,//        expected = expected.secondOfMinute().setCopy(30);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,498,//        expected = expected.millisOfSecond().setCopy(40);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,499,"//        assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,503,public void testToDateTime_RI() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,504,"TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,505,DateTime dt = new DateTime(0L); // LONDON zone
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,506,"assertEquals(""1970-01-01T01:00:00.000+01:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,508,DateTime test = base.toDateTime(dt);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,509,"check(base, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,510,"assertEquals(""1970-01-01T01:00:00.000+01:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,511,"assertEquals(""1970-01-01T10:20:30.040+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,514,public void testToDateTime_nullRI() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,515,"TimeOfDay base = new TimeOfDay(1, 2, 3, 4);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,516,DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,518,DateTime test = base.toDateTime((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,519,"check(base, 1, 2, 3, 4);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,520,"assertEquals(""1970-01-02T01:02:03.004+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,524,public void testProperty() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,525,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,526,"assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,527,"assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,528,"assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,529,"assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,530,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,531,test.property(DateTimeFieldType.millisOfDay());
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,532,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,533,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,537,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,538,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,540,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,541,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,542,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,543,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,544,oos.close();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,546,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,547,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,548,TimeOfDay result = (TimeOfDay) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,549,ois.close();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,551,"assertEquals(test, result);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,552,"assertTrue(Arrays.equals(test.getValues(), result.getValues()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,553,"assertTrue(Arrays.equals(test.getFields(), result.getFields()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,554,"assertEquals(test.getChronology(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,558,public void testToString() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,559,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,560,"assertEquals(""T10:20:30.040"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,564,"private void check(TimeOfDay test, int hour, int min, int sec, int milli) {"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,565,"assertEquals(hour, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,566,"assertEquals(min, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,567,"assertEquals(sec, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,568,"assertEquals(milli, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,56,import java.util.Date;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,58,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,59,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,61,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,62,import org.joda.time.chrono.JulianChronology;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,63,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,64,import org.joda.time.convert.MockZeroNullIntegerConverter;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,67,* This class is a Junit unit test for TimeOfDay.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,69,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,71,public class TestTimeOfDay_Constructors extends TestCase {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,73,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,74,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,75,private static final int OFFSET = 1;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,77,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,78,10L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,79,+ 20L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,80,+ 30L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,81,+ 40L;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,83,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,84,1L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,85,+ 2L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,86,+ 3L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,87,+ 4L;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,89,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,90,1L * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,91,+ 5L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,92,+ 6L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,93,+ 7L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,94,+ 8L;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,96,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,98,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,99,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,102,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,103,return new TestSuite(TestTimeOfDay_Constructors.class);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,106,public TestTimeOfDay_Constructors(String name) {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,107,super(name);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,110,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,111,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,112,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,113,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,116,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,117,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,118,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,119,zone = null;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,124,* Test constructor ()
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,126,public void testConstantMidnight() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,127,TimeOfDay test = TimeOfDay.MIDNIGHT;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,128,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,129,"assertEquals(0, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,130,"assertEquals(0, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,131,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,132,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,137,* Test constructor ()
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,139,public void testConstructor() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,140,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,141,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,142,"assertEquals(10 + OFFSET, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,143,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,144,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,145,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,149,* Test constructor (Chronology)
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,151,public void testConstructor_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,152,TimeOfDay test = new TimeOfDay(JulianChronology.getInstance());
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,153,"assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,154,"assertEquals(10 + OFFSET, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,155,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,156,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,157,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,161,* Test constructor (Chronology=null)
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,163,public void testConstructor_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,164,TimeOfDay test = new TimeOfDay((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,165,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,166,"assertEquals(10 + OFFSET, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,167,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,168,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,169,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,174,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,176,public void testConstructor_long1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,177,TimeOfDay test = new TimeOfDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,178,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,179,"assertEquals(1 + OFFSET, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,180,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,181,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,182,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,186,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,188,public void testConstructor_long2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,189,TimeOfDay test = new TimeOfDay(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,190,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,191,"assertEquals(5 + OFFSET, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,192,"assertEquals(6, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,193,"assertEquals(7, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,194,"assertEquals(8, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,198,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,200,public void testConstructor_long1_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,201,"TimeOfDay test = new TimeOfDay(TEST_TIME1, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,202,"assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,203,"assertEquals(1 + OFFSET, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,204,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,205,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,206,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,210,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,212,public void testConstructor_long2_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,213,"TimeOfDay test = new TimeOfDay(TEST_TIME2, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,214,"assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,215,"assertEquals(5 + OFFSET, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,216,"assertEquals(6, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,217,"assertEquals(7, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,218,"assertEquals(8, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,222,"* Test constructor (long, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,224,public void testConstructor_long_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,225,"TimeOfDay test = new TimeOfDay(TEST_TIME1, null);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,226,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,227,"assertEquals(1 + OFFSET, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,228,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,229,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,230,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,235,* Test constructor (Object)
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,237,public void testConstructor_Object() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,238,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,239,TimeOfDay test = new TimeOfDay(date);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,240,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,241,"assertEquals(1 + OFFSET, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,242,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,243,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,244,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,248,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,250,public void testConstructor_nullObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,251,TimeOfDay test = new TimeOfDay(null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,252,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,253,"assertEquals(10 + OFFSET, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,254,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,255,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,256,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,260,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,262,public void testConstructor_badconverterObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,263,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,264,ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,265,TimeOfDay test = new TimeOfDay(new Integer(0));
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,266,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,267,"assertEquals(0 + OFFSET, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,268,"assertEquals(0, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,269,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,270,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,271,} finally {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,272,ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,278,"* Test constructor (Object, Chronology)"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,280,public void testConstructor_Object_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,281,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,282,"TimeOfDay test = new TimeOfDay(date, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,283,"assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,284,"assertEquals(1 + OFFSET, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,285,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,286,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,287,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,291,"* Test constructor (Object=null, Chronology)"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,293,public void testConstructor_nullObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,294,"TimeOfDay test = new TimeOfDay((Object) null, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,295,"assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,296,"assertEquals(10 + OFFSET, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,297,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,298,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,299,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,303,"* Test constructor (Object, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,305,public void testConstructor_Object_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,306,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,307,"TimeOfDay test = new TimeOfDay(date, null);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,308,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,309,"assertEquals(1 + OFFSET, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,310,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,311,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,312,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,316,"* Test constructor (Object=null, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,318,public void testConstructor_nullObject_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,319,"TimeOfDay test = new TimeOfDay((Object) null, null);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,320,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,321,"assertEquals(10 + OFFSET, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,322,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,323,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,324,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,328,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,330,public void testConstructor_badconverterObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,331,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,332,ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,333,"TimeOfDay test = new TimeOfDay(new Integer(0), JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,334,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,335,"assertEquals(0 + OFFSET, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,336,"assertEquals(0, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,337,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,338,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,339,} finally {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,340,ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,346,"* Test constructor (int, int)"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,348,public void testConstructor_int_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,349,"TimeOfDay test = new TimeOfDay(10, 20);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,350,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,351,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,352,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,353,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,354,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,355,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,356,"new TimeOfDay(-1, 20);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,357,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,358,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,359,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,360,"new TimeOfDay(24, 20);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,361,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,362,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,363,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,364,"new TimeOfDay(10, -1);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,365,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,366,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,367,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,368,"new TimeOfDay(10, 60);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,369,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,370,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,374,"* Test constructor (int, int, int, Chronology)"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,376,public void testConstructor_int_int_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,377,"TimeOfDay test = new TimeOfDay(10, 20, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,378,"assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,379,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,380,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,381,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,382,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,383,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,384,"new TimeOfDay(-1, 20, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,385,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,386,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,387,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,388,"new TimeOfDay(24, 20, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,389,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,390,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,391,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,392,"new TimeOfDay(10, -1, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,393,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,394,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,395,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,396,"new TimeOfDay(10, 60, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,397,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,398,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,402,"* Test constructor (int, int, int, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,404,public void testConstructor_int_int_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,405,"TimeOfDay test = new TimeOfDay(10, 20, null);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,406,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,407,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,408,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,409,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,410,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,414,"* Test constructor (int, int, int)"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,416,public void testConstructor_int_int_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,417,"TimeOfDay test = new TimeOfDay(10, 20, 30);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,418,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,419,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,420,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,421,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,422,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,423,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,424,"new TimeOfDay(-1, 20, 30);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,425,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,426,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,427,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,428,"new TimeOfDay(24, 20, 30);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,429,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,430,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,431,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,432,"new TimeOfDay(10, -1, 30);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,433,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,434,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,435,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,436,"new TimeOfDay(10, 60, 30);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,437,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,438,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,439,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,440,"new TimeOfDay(10, 20, -1);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,441,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,442,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,443,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,444,"new TimeOfDay(10, 20, 60);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,445,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,446,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,450,"* Test constructor (int, int, int, Chronology)"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,452,public void testConstructor_int_int_int_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,453,"TimeOfDay test = new TimeOfDay(10, 20, 30, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,454,"assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,455,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,456,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,457,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,458,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,459,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,460,"new TimeOfDay(-1, 20, 30, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,461,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,462,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,463,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,464,"new TimeOfDay(24, 20, 30, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,465,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,466,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,467,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,468,"new TimeOfDay(10, -1, 30, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,469,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,470,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,471,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,472,"new TimeOfDay(10, 60, 30, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,473,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,474,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,475,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,476,"new TimeOfDay(10, 20, -1, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,477,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,478,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,479,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,480,"new TimeOfDay(10, 20, 60, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,481,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,482,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,486,"* Test constructor (int, int, int, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,488,public void testConstructor_int_int_int_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,489,"TimeOfDay test = new TimeOfDay(10, 20, 30, null);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,490,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,491,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,492,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,493,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,494,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,498,"* Test constructor (int, int, int, int)"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,500,public void testConstructor_int_int_int_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,501,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,502,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,503,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,504,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,505,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,506,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,507,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,508,"new TimeOfDay(-1, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,509,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,510,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,511,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,512,"new TimeOfDay(24, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,513,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,514,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,515,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,516,"new TimeOfDay(10, -1, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,517,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,518,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,519,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,520,"new TimeOfDay(10, 60, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,521,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,522,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,523,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,524,"new TimeOfDay(10, 20, -1, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,525,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,526,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,527,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,528,"new TimeOfDay(10, 20, 60, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,529,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,530,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,531,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,532,"new TimeOfDay(10, 20, 30, -1);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,533,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,534,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,535,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,536,"new TimeOfDay(10, 20, 30, 1000);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,537,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,538,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,542,"* Test constructor (int, int, int, int, Chronology)"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,544,public void testConstructor_int_int_int_int_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,545,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,546,"assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,547,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,548,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,549,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,550,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,551,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,552,"new TimeOfDay(-1, 20, 30, 40, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,553,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,554,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,555,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,556,"new TimeOfDay(24, 20, 30, 40, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,557,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,558,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,559,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,560,"new TimeOfDay(10, -1, 30, 40, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,561,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,562,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,563,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,564,"new TimeOfDay(10, 60, 30, 40, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,565,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,566,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,567,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,568,"new TimeOfDay(10, 20, -1, 40, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,569,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,570,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,571,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,572,"new TimeOfDay(10, 20, 60, 40, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,573,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,574,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,575,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,576,"new TimeOfDay(10, 20, 30, -1, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,577,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,578,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,579,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,580,"new TimeOfDay(10, 20, 30, 1000, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,581,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,582,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,586,"* Test constructor (int, int, int, int, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,588,public void testConstructor_int_int_int_int_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,589,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40, null);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,590,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,591,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,592,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,593,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,594,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,56,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,58,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,59,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,62,* This class is a Junit unit test for TimeOfDay.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,64,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,66,public class TestTimeOfDay_Properties extends TestCase {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,68,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,69,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,71,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,72,10L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,73,+ 20L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,74,+ 30L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,75,+ 40L;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,77,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,78,1L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,79,+ 2L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,80,+ 3L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,81,+ 4L;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,83,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,84,1L * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,85,+ 5L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,86,+ 6L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,87,+ 7L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,88,+ 8L;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,90,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,92,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,93,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,96,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,97,return new TestSuite(TestTimeOfDay_Properties.class);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,100,public TestTimeOfDay_Properties(String name) {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,101,super(name);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,104,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,105,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,106,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,107,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,110,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,111,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,112,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,113,zone = null;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,117,public void testPropertyGetHour() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,118,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,119,"assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,120,"assertEquals(""hourOfDay"", test.hourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,121,"assertEquals(""Property[hourOfDay]"", test.hourOfDay().toString());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,122,"assertSame(test, test.hourOfDay().getReadablePartial());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,123,"assertSame(test, test.hourOfDay().getTimeOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,124,"assertEquals(10, test.hourOfDay().get());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,125,"assertEquals(""10"", test.hourOfDay().getAsText());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,126,"assertEquals(""10"", test.hourOfDay().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,127,"assertEquals(""10"", test.hourOfDay().getAsShortText());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,128,"assertEquals(""10"", test.hourOfDay().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,129,"assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,130,"assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,131,"assertEquals(2, test.hourOfDay().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,132,"assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,135,public void testPropertyGetMaxMinValuesHour() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,136,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,137,"assertEquals(0, test.hourOfDay().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,138,"assertEquals(0, test.hourOfDay().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,139,"assertEquals(23, test.hourOfDay().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,140,"assertEquals(23, test.hourOfDay().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,143,public void testPropertyAddHour() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,144,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,145,TimeOfDay copy = test.hourOfDay().addToCopy(9);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,146,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,147,"check(copy, 19, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,149,copy = test.hourOfDay().addToCopy(0);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,150,"check(copy, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,152,copy = test.hourOfDay().addToCopy(13);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,153,"check(copy, 23, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,155,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,156,test.hourOfDay().addToCopy(14);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,157,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,158,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,159,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,161,copy = test.hourOfDay().addToCopy(-10);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,162,"check(copy, 0, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,164,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,165,test.hourOfDay().addToCopy(-11);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,166,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,167,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,168,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,171,public void testPropertyAddWrapFieldHour() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,172,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,173,TimeOfDay copy = test.hourOfDay().addWrapFieldToCopy(9);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,174,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,175,"check(copy, 19, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,177,copy = test.hourOfDay().addWrapFieldToCopy(0);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,178,"check(copy, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,180,copy = test.hourOfDay().addWrapFieldToCopy(18);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,181,"check(copy, 4, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,183,copy = test.hourOfDay().addWrapFieldToCopy(-15);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,184,"check(copy, 19, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,187,public void testPropertySetHour() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,188,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,189,TimeOfDay copy = test.hourOfDay().setCopy(12);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,190,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,191,"check(copy, 12, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,193,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,194,test.hourOfDay().setCopy(24);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,195,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,196,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,197,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,198,test.hourOfDay().setCopy(-1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,199,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,200,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,203,public void testPropertySetTextHour() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,204,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,205,"TimeOfDay copy = test.hourOfDay().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,206,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,207,"check(copy, 12, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,210,public void testPropertyCompareToHour() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,211,TimeOfDay test1 = new TimeOfDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,212,TimeOfDay test2 = new TimeOfDay(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,213,"assertEquals(true, test1.hourOfDay().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,214,"assertEquals(true, test2.hourOfDay().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,215,"assertEquals(true, test1.hourOfDay().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,216,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,217,test1.hourOfDay().compareTo((ReadablePartial) null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,218,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,219,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,221,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,222,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,223,"assertEquals(true, test1.hourOfDay().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,224,"assertEquals(true, test2.hourOfDay().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,225,"assertEquals(true, test1.hourOfDay().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,226,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,227,test1.hourOfDay().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,228,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,229,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,233,public void testPropertyGetMinute() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,234,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,235,"assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,236,"assertEquals(""minuteOfHour"", test.minuteOfHour().getName());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,237,"assertEquals(""Property[minuteOfHour]"", test.minuteOfHour().toString());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,238,"assertSame(test, test.minuteOfHour().getReadablePartial());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,239,"assertSame(test, test.minuteOfHour().getTimeOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,240,"assertEquals(20, test.minuteOfHour().get());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,241,"assertEquals(""20"", test.minuteOfHour().getAsText());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,242,"assertEquals(""20"", test.minuteOfHour().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,243,"assertEquals(""20"", test.minuteOfHour().getAsShortText());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,244,"assertEquals(""20"", test.minuteOfHour().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,245,"assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,246,"assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,247,"assertEquals(2, test.minuteOfHour().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,248,"assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,251,public void testPropertyGetMaxMinValuesMinute() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,252,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,253,"assertEquals(0, test.minuteOfHour().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,254,"assertEquals(0, test.minuteOfHour().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,255,"assertEquals(59, test.minuteOfHour().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,256,"assertEquals(59, test.minuteOfHour().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,259,public void testPropertyAddMinute() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,260,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,261,TimeOfDay copy = test.minuteOfHour().addToCopy(9);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,262,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,263,"check(copy, 10, 29, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,265,copy = test.minuteOfHour().addToCopy(39);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,266,"check(copy, 10, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,268,copy = test.minuteOfHour().addToCopy(40);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,269,"check(copy, 11, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,271,copy = test.minuteOfHour().addToCopy(1 * 60 + 45);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,272,"check(copy, 12, 5, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,274,copy = test.minuteOfHour().addToCopy(13 * 60 + 39);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,275,"check(copy, 23, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,277,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,278,test.minuteOfHour().addToCopy(13 * 60 + 40);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,279,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,280,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,281,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,283,copy = test.minuteOfHour().addToCopy(-9);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,284,"check(copy, 10, 11, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,286,copy = test.minuteOfHour().addToCopy(-19);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,287,"check(copy, 10, 1, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,289,copy = test.minuteOfHour().addToCopy(-20);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,290,"check(copy, 10, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,292,copy = test.minuteOfHour().addToCopy(-21);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,293,"check(copy, 9, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,295,copy = test.minuteOfHour().addToCopy(-(10 * 60 + 20));
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,296,"check(copy, 0, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,298,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,299,test.minuteOfHour().addToCopy(-(10 * 60 + 21));
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,300,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,301,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,302,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,305,public void testPropertyAddWrapFieldMinute() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,306,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,307,TimeOfDay copy = test.minuteOfHour().addWrapFieldToCopy(9);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,308,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,309,"check(copy, 10, 29, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,311,copy = test.minuteOfHour().addWrapFieldToCopy(49);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,312,"check(copy, 10, 9, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,314,copy = test.minuteOfHour().addWrapFieldToCopy(-47);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,315,"check(copy, 10, 33, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,318,public void testPropertySetMinute() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,319,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,320,TimeOfDay copy = test.minuteOfHour().setCopy(12);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,321,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,322,"check(copy, 10, 12, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,324,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,325,test.minuteOfHour().setCopy(60);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,326,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,327,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,328,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,329,test.minuteOfHour().setCopy(-1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,330,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,331,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,334,public void testPropertySetTextMinute() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,335,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,336,"TimeOfDay copy = test.minuteOfHour().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,337,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,338,"check(copy, 10, 12, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,341,public void testPropertyCompareToMinute() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,342,TimeOfDay test1 = new TimeOfDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,343,TimeOfDay test2 = new TimeOfDay(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,344,"assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,345,"assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,346,"assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,347,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,348,test1.minuteOfHour().compareTo((ReadablePartial) null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,349,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,350,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,352,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,353,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,354,"assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,355,"assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,356,"assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,357,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,358,test1.minuteOfHour().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,359,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,360,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,364,public void testPropertyGetSecond() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,365,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,366,"assertSame(test.getChronology().secondOfMinute(), test.secondOfMinute().getField());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,367,"assertEquals(""secondOfMinute"", test.secondOfMinute().getName());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,368,"assertEquals(""Property[secondOfMinute]"", test.secondOfMinute().toString());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,369,"assertSame(test, test.secondOfMinute().getReadablePartial());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,370,"assertSame(test, test.secondOfMinute().getTimeOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,371,"assertEquals(30, test.secondOfMinute().get());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,372,"assertEquals(""30"", test.secondOfMinute().getAsText());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,373,"assertEquals(""30"", test.secondOfMinute().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,374,"assertEquals(""30"", test.secondOfMinute().getAsShortText());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,375,"assertEquals(""30"", test.secondOfMinute().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,376,"assertEquals(test.getChronology().seconds(), test.secondOfMinute().getDurationField());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,377,"assertEquals(test.getChronology().minutes(), test.secondOfMinute().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,378,"assertEquals(2, test.secondOfMinute().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,379,"assertEquals(2, test.secondOfMinute().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,382,public void testPropertyGetMaxMinValuesSecond() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,383,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,384,"assertEquals(0, test.secondOfMinute().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,385,"assertEquals(0, test.secondOfMinute().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,386,"assertEquals(59, test.secondOfMinute().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,387,"assertEquals(59, test.secondOfMinute().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,390,public void testPropertyAddSecond() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,391,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,392,TimeOfDay copy = test.secondOfMinute().addToCopy(9);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,393,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,394,"check(copy, 10, 20, 39, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,396,copy = test.secondOfMinute().addToCopy(29);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,397,"check(copy, 10, 20, 59, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,399,copy = test.secondOfMinute().addToCopy(30);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,400,"check(copy, 10, 21, 0, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,402,copy = test.secondOfMinute().addToCopy(39 * 60 + 29);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,403,"check(copy, 10, 59, 59, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,405,copy = test.secondOfMinute().addToCopy(39 * 60 + 30);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,406,"check(copy, 11, 0, 0, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,408,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,409,test.secondOfMinute().addToCopy(13 * 60 * 60 + 39 * 60 + 30);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,410,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,411,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,412,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,414,copy = test.secondOfMinute().addToCopy(-9);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,415,"check(copy, 10, 20, 21, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,417,copy = test.secondOfMinute().addToCopy(-30);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,418,"check(copy, 10, 20, 0, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,420,copy = test.secondOfMinute().addToCopy(-31);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,421,"check(copy, 10, 19, 59, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,423,copy = test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 30));
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,424,"check(copy, 0, 0, 0, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,426,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,427,test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 31));
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,428,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,429,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,430,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,433,public void testPropertyAddWrapFieldSecond() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,434,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,435,TimeOfDay copy = test.secondOfMinute().addWrapFieldToCopy(9);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,436,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,437,"check(copy, 10, 20, 39, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,439,copy = test.secondOfMinute().addWrapFieldToCopy(49);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,440,"check(copy, 10, 20, 19, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,442,copy = test.secondOfMinute().addWrapFieldToCopy(-47);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,443,"check(copy, 10, 20, 43, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,446,public void testPropertySetSecond() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,447,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,448,TimeOfDay copy = test.secondOfMinute().setCopy(12);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,449,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,450,"check(copy, 10, 20, 12, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,452,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,453,test.secondOfMinute().setCopy(60);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,454,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,455,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,456,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,457,test.secondOfMinute().setCopy(-1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,458,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,459,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,462,public void testPropertySetTextSecond() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,463,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,464,"TimeOfDay copy = test.secondOfMinute().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,465,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,466,"check(copy, 10, 20, 12, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,469,public void testPropertyCompareToSecond() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,470,TimeOfDay test1 = new TimeOfDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,471,TimeOfDay test2 = new TimeOfDay(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,472,"assertEquals(true, test1.secondOfMinute().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,473,"assertEquals(true, test2.secondOfMinute().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,474,"assertEquals(true, test1.secondOfMinute().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,475,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,476,test1.secondOfMinute().compareTo((ReadablePartial) null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,477,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,478,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,480,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,481,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,482,"assertEquals(true, test1.secondOfMinute().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,483,"assertEquals(true, test2.secondOfMinute().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,484,"assertEquals(true, test1.secondOfMinute().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,485,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,486,test1.secondOfMinute().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,487,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,488,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,492,public void testPropertyGetMilli() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,493,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,494,"assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,495,"assertEquals(""millisOfSecond"", test.millisOfSecond().getName());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,496,"assertEquals(""Property[millisOfSecond]"", test.millisOfSecond().toString());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,497,"assertSame(test, test.millisOfSecond().getReadablePartial());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,498,"assertSame(test, test.millisOfSecond().getTimeOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,499,"assertEquals(40, test.millisOfSecond().get());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,500,"assertEquals(""40"", test.millisOfSecond().getAsText());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,501,"assertEquals(""40"", test.millisOfSecond().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,502,"assertEquals(""40"", test.millisOfSecond().getAsShortText());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,503,"assertEquals(""40"", test.millisOfSecond().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,504,"assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,505,"assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,506,"assertEquals(3, test.millisOfSecond().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,507,"assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,510,public void testPropertyGetMaxMinValuesMilli() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,511,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,512,"assertEquals(0, test.millisOfSecond().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,513,"assertEquals(0, test.millisOfSecond().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,514,"assertEquals(999, test.millisOfSecond().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,515,"assertEquals(999, test.millisOfSecond().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,518,public void testPropertyAddMilli() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,519,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,520,TimeOfDay copy = test.millisOfSecond().addToCopy(9);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,521,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,522,"check(copy, 10, 20, 30, 49);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,524,copy = test.millisOfSecond().addToCopy(959);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,525,"check(copy, 10, 20, 30, 999);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,527,copy = test.millisOfSecond().addToCopy(960);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,528,"check(copy, 10, 20, 31, 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,530,copy = test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,531,"check(copy, 23, 59, 59, 999);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,533,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,534,test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,535,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,536,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,537,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,539,copy = test.millisOfSecond().addToCopy(-9);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,540,"check(copy, 10, 20, 30, 31);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,542,copy = test.millisOfSecond().addToCopy(-40);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,543,"check(copy, 10, 20, 30, 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,545,copy = test.millisOfSecond().addToCopy(-41);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,546,"check(copy, 10, 20, 29, 999);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,548,copy = test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,549,"check(copy, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,551,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,552,test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,553,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,554,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,555,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,558,public void testPropertyAddWrapFieldMilli() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,559,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,560,TimeOfDay copy = test.millisOfSecond().addWrapFieldToCopy(9);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,561,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,562,"check(copy, 10, 20, 30, 49);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,564,copy = test.millisOfSecond().addWrapFieldToCopy(995);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,565,"check(copy, 10, 20, 30, 35);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,567,copy = test.millisOfSecond().addWrapFieldToCopy(-47);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,568,"check(copy, 10, 20, 30, 993);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,571,public void testPropertySetMilli() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,572,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,573,TimeOfDay copy = test.millisOfSecond().setCopy(12);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,574,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,575,"check(copy, 10, 20, 30, 12);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,577,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,578,test.millisOfSecond().setCopy(1000);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,579,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,580,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,581,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,582,test.millisOfSecond().setCopy(-1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,583,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,584,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,587,public void testPropertySetTextMilli() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,588,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,589,"TimeOfDay copy = test.millisOfSecond().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,590,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,591,"check(copy, 10, 20, 30, 12);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,594,public void testPropertyCompareToMilli() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,595,TimeOfDay test1 = new TimeOfDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,596,TimeOfDay test2 = new TimeOfDay(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,597,"assertEquals(true, test1.millisOfSecond().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,598,"assertEquals(true, test2.millisOfSecond().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,599,"assertEquals(true, test1.millisOfSecond().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,600,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,601,test1.millisOfSecond().compareTo((ReadablePartial) null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,602,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,603,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,605,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,606,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,607,"assertEquals(true, test1.millisOfSecond().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,608,"assertEquals(true, test2.millisOfSecond().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,609,"assertEquals(true, test1.millisOfSecond().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,610,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,611,test1.millisOfSecond().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,612,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,613,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,617,"private void check(TimeOfDay test, int hour, int min, int sec, int milli) {"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,618,"assertEquals(hour, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,619,"assertEquals(min, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,620,"assertEquals(sec, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,621,"assertEquals(milli, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,56,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,57,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,58,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,59,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,60,import java.util.Arrays;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,62,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,63,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,66,* This class is a Junit unit test for YearMonthDay.
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,68,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,70,public class TestYearMonthDay_Basics extends TestCase {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,72,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,73,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,74,"private static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,75,private static final int OFFSET = 1;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,76,private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,77,private static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,78,private static final Chronology COPTIC_TOKYO = Chronology.getCoptic(TOKYO);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,79,private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,80,private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,81,private static final Chronology ISO_LONDON = Chronology.getISO(LONDON);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,82,private static final Chronology ISO_TOKYO = Chronology.getISO(TOKYO);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,83,private static final Chronology ISO_UTC = Chronology.getISOUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,84,private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,85,private static final Chronology BUDDHIST_LONDON = Chronology.getBuddhist(LONDON);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,86,private static final Chronology BUDDHIST_TOKYO = Chronology.getBuddhist(TOKYO);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,87,private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,89,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,90,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,92,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,93,(31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,94,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,95,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,97,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,98,(365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,99,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,100,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,102,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,104,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,105,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,108,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,109,return new TestSuite(TestYearMonthDay_Basics.class);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,112,public TestYearMonthDay_Basics(String name) {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,113,super(name);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,116,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,117,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,118,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,119,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,122,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,123,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,124,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,125,zone = null;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,129,public void testGet() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,130,YearMonthDay test = new YearMonthDay();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,131,"assertEquals(1970, test.get(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,132,"assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,133,"assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,134,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,135,test.get(null);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,136,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,137,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,138,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,139,test.get(DateTimeFieldType.hourOfDay());
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,140,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,141,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,144,public void testSize() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,145,YearMonthDay test = new YearMonthDay();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,146,"assertEquals(3, test.size());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,149,public void testGetFieldType() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,150,YearMonthDay test = new YearMonthDay(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,151,"assertSame(DateTimeFieldType.year(), test.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,152,"assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,153,"assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,154,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,155,test.getFieldType(-1);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,156,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,157,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,158,test.getFieldType(3);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,159,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,162,public void testGetFieldTypes() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,163,YearMonthDay test = new YearMonthDay(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,164,DateTimeFieldType[] fields = test.getFieldTypes();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,165,"assertSame(DateTimeFieldType.year(), fields[0]);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,166,"assertSame(DateTimeFieldType.monthOfYear(), fields[1]);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,167,"assertSame(DateTimeFieldType.dayOfMonth(), fields[2]);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,168,"assertNotSame(test.getFieldTypes(), test.getFieldTypes());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,171,public void testGetField() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,172,YearMonthDay test = new YearMonthDay(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,173,"assertSame(COPTIC_UTC.year(), test.getField(0));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,174,"assertSame(COPTIC_UTC.monthOfYear(), test.getField(1));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,175,"assertSame(COPTIC_UTC.dayOfMonth(), test.getField(2));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,176,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,177,test.getField(-1);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,178,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,179,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,180,test.getField(3);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,181,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,184,public void testGetFields() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,185,YearMonthDay test = new YearMonthDay(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,186,DateTimeField[] fields = test.getFields();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,187,"assertSame(COPTIC_UTC.year(), fields[0]);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,188,"assertSame(COPTIC_UTC.monthOfYear(), fields[1]);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,189,"assertSame(COPTIC_UTC.dayOfMonth(), fields[2]);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,190,"assertNotSame(test.getFields(), test.getFields());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,193,public void testGetValue() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,194,YearMonthDay test = new YearMonthDay();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,195,"assertEquals(1970, test.getValue(0));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,196,"assertEquals(6, test.getValue(1));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,197,"assertEquals(9, test.getValue(2));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,198,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,199,test.getValue(-1);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,200,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,201,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,202,test.getValue(3);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,203,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,206,public void testGetValues() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,207,YearMonthDay test = new YearMonthDay();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,208,int[] values = test.getValues();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,209,"assertEquals(1970, values[0]);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,210,"assertEquals(6, values[1]);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,211,"assertEquals(9, values[2]);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,212,"assertNotSame(test.getValues(), test.getValues());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,215,public void testIsSupported() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,216,YearMonthDay test = new YearMonthDay(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,217,"assertEquals(true, test.isSupported(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,218,"assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,219,"assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,220,"assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,223,public void testEqualsHashCode() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,224,"YearMonthDay test1 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,225,"YearMonthDay test2 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,226,"assertEquals(true, test1.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,227,"assertEquals(true, test2.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,228,"assertEquals(true, test1.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,229,"assertEquals(true, test2.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,230,"assertEquals(true, test1.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,231,"assertEquals(true, test1.hashCode() == test1.hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,232,"assertEquals(true, test2.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,234,"YearMonthDay test3 = new YearMonthDay(1971, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,235,"assertEquals(false, test1.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,236,"assertEquals(false, test2.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,237,"assertEquals(false, test3.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,238,"assertEquals(false, test3.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,239,"assertEquals(false, test1.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,240,"assertEquals(false, test2.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,242,"assertEquals(false, test1.equals(""Hello""));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,243,"assertEquals(true, test1.equals(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,244,"assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,247,class MockInstant extends MockPartial {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,248,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,249,return COPTIC_UTC;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,251,public DateTimeField[] getFields() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,252,return new DateTimeField[] {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,253,"COPTIC_UTC.year(),"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,254,"COPTIC_UTC.monthOfYear(),"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,255,"COPTIC_UTC.dayOfMonth(),"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,258,public int[] getValues() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,259,"return new int[] {1970, 6, 9};"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,264,public void testWithChronologyRetainFields_Chrono() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,265,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,266,YearMonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,267,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,268,"assertEquals(COPTIC_UTC, base.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,269,"check(test, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,270,"assertEquals(BUDDHIST_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,273,public void testWithChronologyRetainFields_sameChrono() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,274,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,275,YearMonthDay test = base.withChronologyRetainFields(COPTIC_TOKYO);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,276,"assertSame(base, test);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,279,public void testWithChronologyRetainFields_nullChrono() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,280,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,281,YearMonthDay test = base.withChronologyRetainFields(null);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,282,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,283,"assertEquals(COPTIC_UTC, base.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,284,"check(test, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,285,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,289,public void testToDateTime() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,290,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,291,"DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,292,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,294,DateTime test = base.toDateTime();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,295,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,296,"DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,297,expected = expected.year().setCopy(2005);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,298,expected = expected.monthOfYear().setCopy(6);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,299,expected = expected.dayOfMonth().setCopy(9);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,300,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,304,public void testToDateTime_Zone() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,305,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,306,"DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,307,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,309,DateTime test = base.toDateTime(TOKYO);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,310,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,311,"DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,312,expected = expected.year().setCopy(2005);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,313,expected = expected.monthOfYear().setCopy(6);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,314,expected = expected.dayOfMonth().setCopy(9);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,315,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,318,public void testToDateTime_nullZone() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,319,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,320,"DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,321,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,323,DateTime test = base.toDateTime((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,324,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,325,"DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,326,expected = expected.year().setCopy(2005);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,327,expected = expected.monthOfYear().setCopy(6);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,328,expected = expected.dayOfMonth().setCopy(9);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,329,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,333,public void testToDateTime_TOD() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,334,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,335,"TimeOfDay tod = new TimeOfDay(12, 13, 14, 15, BUDDHIST_TOKYO);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,337,DateTime test = base.toDateTime(tod);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,338,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,339,"DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,340,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,343,public void testToDateTime_nullTOD() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,344,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,345,"long now = new DateTime(2004, 5, 8, 12, 13, 14, 15, COPTIC_LONDON).getMillis();"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,346,DateTimeUtils.setCurrentMillisFixed(now);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,348,DateTime test = base.toDateTime((TimeOfDay) null);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,349,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,350,"DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,351,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,355,public void testToDateTime_TOD_Zone() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,356,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,357,"TimeOfDay tod = new TimeOfDay(12, 13, 14, 15, BUDDHIST_TOKYO);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,359,"DateTime test = base.toDateTime(tod, TOKYO);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,360,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,361,"DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_TOKYO);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,362,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,365,public void testToDateTime_TOD_nullZone() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,366,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,367,"TimeOfDay tod = new TimeOfDay(12, 13, 14, 15, BUDDHIST_TOKYO);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,369,"DateTime test = base.toDateTime(tod, null);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,370,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,371,"DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,372,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,375,public void testToDateTime_nullTOD_Zone() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,376,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,377,"long now = new DateTime(2004, 5, 8, 12, 13, 14, 15, COPTIC_TOKYO).getMillis();"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,378,DateTimeUtils.setCurrentMillisFixed(now);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,380,"DateTime test = base.toDateTime((TimeOfDay) null, TOKYO);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,381,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,382,"DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_TOKYO);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,383,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,387,public void testToDateMidnight() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,388,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,390,DateMidnight test = base.toDateMidnight();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,391,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,392,"assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,396,public void testToDateMidnight_Zone() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,397,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,399,DateMidnight test = base.toDateMidnight(TOKYO);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,400,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,401,"assertEquals(new DateMidnight(2005, 6, 9, COPTIC_TOKYO), test);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,404,public void testToDateMidnight_nullZone() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,405,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,407,DateMidnight test = base.toDateMidnight((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,408,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,409,"assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,413,public void testToDateTime_RI() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,414,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,415,"DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,417,DateTime test = base.toDateTime(dt);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,418,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,419,DateTime expected = dt;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,420,expected = expected.year().setCopy(2005);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,421,expected = expected.monthOfYear().setCopy(6);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,422,expected = expected.dayOfMonth().setCopy(9);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,423,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,426,public void testToDateTime_nullRI() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,427,"YearMonthDay base = new YearMonthDay(2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,428,"DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,429,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,431,DateTime test = base.toDateTime((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,432,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,433,DateTime expected = dt;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,434,expected = expected.year().setCopy(2005);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,435,expected = expected.monthOfYear().setCopy(6);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,436,expected = expected.dayOfMonth().setCopy(9);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,437,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,441,public void testProperty() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,442,"YearMonthDay test = new YearMonthDay(2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,443,"assertEquals(test.year(), test.property(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,444,"assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,445,"assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,446,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,447,test.property(DateTimeFieldType.millisOfDay());
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,448,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,449,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,453,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,454,"YearMonthDay test = new YearMonthDay(1972, 6, 9, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,456,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,457,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,458,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,459,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,460,oos.close();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,462,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,463,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,464,YearMonthDay result = (YearMonthDay) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,465,ois.close();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,467,"assertEquals(test, result);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,468,"assertTrue(Arrays.equals(test.getValues(), result.getValues()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,469,"assertTrue(Arrays.equals(test.getFields(), result.getFields()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,470,"assertEquals(test.getChronology(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,474,public void testToString() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,475,"YearMonthDay test = new YearMonthDay(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,476,"assertEquals(""1972-06-09"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,480,"private void check(YearMonthDay test, int hour, int min, int sec) {"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,481,"assertEquals(hour, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,482,"assertEquals(min, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,483,"assertEquals(sec, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,56,import java.util.Date;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,58,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,59,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,61,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,62,import org.joda.time.convert.MockZeroNullIntegerConverter;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,65,* This class is a Junit unit test for YearMonthDay.
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,67,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,69,public class TestYearMonthDay_Constructors extends TestCase {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,71,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,72,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,73,private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,74,private static final Chronology ISO_UTC = Chronology.getISOUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,75,private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,76,private static final Chronology GREGORIAN_UTC = Chronology.getGregorianUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,77,private static final Chronology GREGORIAN_PARIS = Chronology.getGregorian(PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,79,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,80,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,82,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,83,(31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,84,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,85,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,87,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,88,(365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,89,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,90,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,92,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,94,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,95,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,98,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,99,return new TestSuite(TestYearMonthDay_Constructors.class);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,102,public TestYearMonthDay_Constructors(String name) {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,103,super(name);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,106,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,107,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,108,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,109,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,112,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,113,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,114,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,115,zone = null;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,120,* Test constructor ()
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,122,public void testConstructor() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,123,YearMonthDay test = new YearMonthDay();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,124,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,125,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,126,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,127,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,131,* Test constructor (Chronology)
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,133,public void testConstructor_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,134,YearMonthDay test = new YearMonthDay(GREGORIAN_PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,135,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,136,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,137,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,138,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,142,* Test constructor (Chronology=null)
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,144,public void testConstructor_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,145,YearMonthDay test = new YearMonthDay((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,146,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,147,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,148,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,149,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,154,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,156,public void testConstructor_long1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,157,YearMonthDay test = new YearMonthDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,158,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,159,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,160,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,161,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,165,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,167,public void testConstructor_long2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,168,YearMonthDay test = new YearMonthDay(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,169,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,170,"assertEquals(1971, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,171,"assertEquals(5, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,172,"assertEquals(7, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,176,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,178,public void testConstructor_long1_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,179,"YearMonthDay test = new YearMonthDay(TEST_TIME1, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,180,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,181,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,182,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,183,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,187,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,189,public void testConstructor_long2_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,190,"YearMonthDay test = new YearMonthDay(TEST_TIME2, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,191,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,192,"assertEquals(1971, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,193,"assertEquals(5, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,194,"assertEquals(7, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,198,"* Test constructor (long, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,200,public void testConstructor_long_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,201,"YearMonthDay test = new YearMonthDay(TEST_TIME1, null);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,202,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,203,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,204,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,205,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,210,* Test constructor (Object)
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,212,public void testConstructor_Object() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,213,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,214,YearMonthDay test = new YearMonthDay(date);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,215,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,216,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,217,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,218,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,222,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,224,public void testConstructor_nullObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,225,YearMonthDay test = new YearMonthDay(null);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,226,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,227,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,228,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,229,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,233,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,235,public void testConstructor_badconverterObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,236,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,237,ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,238,YearMonthDay test = new YearMonthDay(new Integer(0));
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,239,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,240,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,241,"assertEquals(1, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,242,"assertEquals(1, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,243,} finally {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,244,ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,249,"* Test constructor (Object, Chronology)"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,251,public void testConstructor_Object_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,252,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,253,"YearMonthDay test = new YearMonthDay(date, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,254,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,255,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,256,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,257,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,261,"* Test constructor (Object=null, Chronology)"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,263,public void testConstructor_nullObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,264,"YearMonthDay test = new YearMonthDay((Object) null, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,265,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,266,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,267,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,268,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,272,"* Test constructor (Object, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,274,public void testConstructor_Object_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,275,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,276,"YearMonthDay test = new YearMonthDay(date, null);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,277,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,278,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,279,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,280,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,284,"* Test constructor (Object=null, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,286,public void testConstructor_nullObject_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,287,"YearMonthDay test = new YearMonthDay((Object) null, null);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,288,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,289,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,290,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,291,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,295,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,297,public void testConstructor_badconverterObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,298,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,299,ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,300,"YearMonthDay test = new YearMonthDay(new Integer(0), GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,301,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,302,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,303,"assertEquals(1, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,304,"assertEquals(1, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,305,} finally {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,306,ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,312,"* Test constructor (int, int, int)"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,314,public void testConstructor_int_int_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,315,"YearMonthDay test = new YearMonthDay(1970, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,316,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,317,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,318,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,319,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,320,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,321,"new YearMonthDay(Integer.MIN_VALUE, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,322,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,323,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,324,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,325,"new YearMonthDay(Integer.MAX_VALUE, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,326,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,327,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,328,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,329,"new YearMonthDay(1970, 0, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,330,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,331,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,332,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,333,"new YearMonthDay(1970, 13, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,334,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,335,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,336,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,337,"new YearMonthDay(1970, 6, 0);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,338,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,339,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,340,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,341,"new YearMonthDay(1970, 6, 31);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,342,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,343,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,344,"new YearMonthDay(1970, 7, 31);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,345,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,346,"new YearMonthDay(1970, 7, 32);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,347,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,348,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,352,"* Test constructor (int, int, int, Chronology)"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,354,public void testConstructor_int_int_int_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,355,"YearMonthDay test = new YearMonthDay(1970, 6, 9, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,356,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,357,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,358,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,359,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,360,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,361,"new YearMonthDay(Integer.MIN_VALUE, 6, 9, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,362,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,363,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,364,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,365,"new YearMonthDay(Integer.MAX_VALUE, 6, 9, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,366,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,367,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,368,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,369,"new YearMonthDay(1970, 0, 9, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,370,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,371,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,372,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,373,"new YearMonthDay(1970, 13, 9, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,374,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,375,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,376,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,377,"new YearMonthDay(1970, 6, 0, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,378,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,379,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,380,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,381,"new YearMonthDay(1970, 6, 31, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,382,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,383,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,384,"new YearMonthDay(1970, 7, 31, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,385,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,386,"new YearMonthDay(1970, 7, 32, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,387,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,388,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,392,"* Test constructor (int, int, int, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,394,public void testConstructor_int_int_int_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,395,"YearMonthDay test = new YearMonthDay(1970, 6, 9, null);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,396,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,397,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,398,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,399,"assertEquals(9, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,56,mport java.io.ByteArrayInputStream;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,57,mport java.io.ByteArrayOutputStream;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,58,mport java.io.ObjectInputStream;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,59,mport java.io.ObjectOutputStream;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,60,mport java.util.Arrays;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,61,mport java.util.Date;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,67,mport org.joda.time.chrono.GregorianChronology;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,68,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,69,mport org.joda.time.convert.ConverterManager;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,70,mport org.joda.time.convert.MockZeroNullIntegerConverter;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,77,ublic class TestYearMonthDay extends TestCase {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,66,public class TestYearMonthDay_Properties extends TestCase {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,101,eturn new TestSuite(TestYearMonthDay.class);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,90,return new TestSuite(TestYearMonthDay_Properties.class);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,104,ublic TestYearMonthDay(String name) {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,93,public TestYearMonthDay_Properties(String name) {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,122, Test constructor ()
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,124,ublic void testConstructor() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,125,earMonthDay test = new YearMonthDay();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,126,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,127,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,128,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,129,"ssertEquals(9, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,133, Test constructor (Chronology)
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,135,ublic void testConstructor_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,136,earMonthDay test = new YearMonthDay(GregorianChronology.getInstance());
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,137,"ssertEquals(GregorianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,138,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,139,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,140,"ssertEquals(9, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,144, Test constructor (Chronology=null)
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,146,ublic void testConstructor_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,147,earMonthDay test = new YearMonthDay((Chronology) null);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,148,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,149,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,150,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,151,"ssertEquals(9, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,156, Test constructor (long)
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,158,ublic void testConstructor_long1() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,159,earMonthDay test = new YearMonthDay(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,160,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,161,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,162,"ssertEquals(4, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,163,"ssertEquals(6, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,167, Test constructor (long)
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,169,ublic void testConstructor_long2() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,170,earMonthDay test = new YearMonthDay(TEST_TIME2);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,171,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,172,"ssertEquals(1971, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,173,"ssertEquals(5, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,174,"ssertEquals(7, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,178," Test constructor (long, Chronology)"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,180,ublic void testConstructor_long1_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,181,"earMonthDay test = new YearMonthDay(TEST_TIME1, GregorianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,182,"ssertEquals(GregorianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,183,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,184,"ssertEquals(4, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,185,"ssertEquals(6, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,189," Test constructor (long, Chronology)"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,191,ublic void testConstructor_long2_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,192,"earMonthDay test = new YearMonthDay(TEST_TIME2, GregorianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,193,"ssertEquals(GregorianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,194,"ssertEquals(1971, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,195,"ssertEquals(5, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,196,"ssertEquals(7, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,200," Test constructor (long, Chronology=null)"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,202,ublic void testConstructor_long_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,203,"earMonthDay test = new YearMonthDay(TEST_TIME1, null);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,204,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,205,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,206,"ssertEquals(4, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,207,"ssertEquals(6, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,212, Test constructor (Object)
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,214,ublic void testConstructor_Object() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,215,ate date = new Date(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,216,earMonthDay test = new YearMonthDay(date);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,217,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,218,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,219,"ssertEquals(4, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,220,"ssertEquals(6, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,224, Test constructor (Object=null)
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,226,ublic void testConstructor_nullObject() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,227,earMonthDay test = new YearMonthDay(null);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,228,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,229,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,230,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,231,"ssertEquals(9, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,235, Test constructor (Object=null)
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,237,ublic void testConstructor_badconverterObject() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,238,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,239,onverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,240,earMonthDay test = new YearMonthDay(new Integer(0));
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,241,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,242,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,243,"ssertEquals(1, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,244,"ssertEquals(1, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,245, finally {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,246,onverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,251," Test constructor (Object, Chronology)"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,253,ublic void testConstructor_Object_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,254,ate date = new Date(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,255,"earMonthDay test = new YearMonthDay(date, GregorianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,256,"ssertEquals(GregorianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,257,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,258,"ssertEquals(4, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,259,"ssertEquals(6, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,263," Test constructor (Object=null, Chronology)"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,265,ublic void testConstructor_nullObject_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,266,"earMonthDay test = new YearMonthDay((Object) null, GregorianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,267,"ssertEquals(GregorianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,268,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,269,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,270,"ssertEquals(9, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,274," Test constructor (Object, Chronology=null)"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,276,ublic void testConstructor_Object_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,277,ate date = new Date(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,278,"earMonthDay test = new YearMonthDay(date, null);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,279,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,280,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,281,"ssertEquals(4, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,282,"ssertEquals(6, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,286," Test constructor (Object=null, Chronology=null)"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,288,ublic void testConstructor_nullObject_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,289,"earMonthDay test = new YearMonthDay((Object) null, null);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,290,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,291,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,292,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,293,"ssertEquals(9, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,297, Test constructor (Object=null)
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,299,ublic void testConstructor_badconverterObject_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,300,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,301,onverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,302,"earMonthDay test = new YearMonthDay(new Integer(0), GregorianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,303,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,304,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,305,"ssertEquals(1, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,306,"ssertEquals(1, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,307, finally {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,308,onverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,314," Test constructor (int, int, int)"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,316,ublic void testConstructor_int_int_int() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,317,"earMonthDay test = new YearMonthDay(1970, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,318,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,319,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,320,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,321,"ssertEquals(9, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,322,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,323,"ew YearMonthDay(Integer.MIN_VALUE, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,324,ail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,325, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,326,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,327,"ew YearMonthDay(Integer.MAX_VALUE, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,328,ail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,329, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,330,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,331,"ew YearMonthDay(1970, 0, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,332,ail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,333, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,334,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,335,"ew YearMonthDay(1970, 13, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,336,ail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,337, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,338,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,339,"ew YearMonthDay(1970, 6, 0);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,340,ail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,341, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,342,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,343,"ew YearMonthDay(1970, 6, 31);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,344,ail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,345, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,346,"ew YearMonthDay(1970, 7, 31);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,347,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,348,"ew YearMonthDay(1970, 7, 32);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,349,ail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,350, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,354," Test constructor (int, int, int, Chronology)"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,356,ublic void testConstructor_int_int_int_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,357,"earMonthDay test = new YearMonthDay(1970, 6, 9, GregorianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,358,"ssertEquals(GregorianChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,359,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,360,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,361,"ssertEquals(9, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,362,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,363,"ew YearMonthDay(Integer.MIN_VALUE, 6, 9, GregorianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,364,ail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,365, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,366,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,367,"ew YearMonthDay(Integer.MAX_VALUE, 6, 9, GregorianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,368,ail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,369, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,370,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,371,"ew YearMonthDay(1970, 0, 9, GregorianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,372,ail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,373, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,374,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,375,"ew YearMonthDay(1970, 13, 9, GregorianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,376,ail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,377, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,378,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,379,"ew YearMonthDay(1970, 6, 0, GregorianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,380,ail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,381, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,382,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,383,"ew YearMonthDay(1970, 6, 31, GregorianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,384,ail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,385, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,386,"ew YearMonthDay(1970, 7, 31, GregorianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,387,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,388,"ew YearMonthDay(1970, 7, 32, GregorianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,389,ail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,390, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,394," Test constructor (int, int, int, Chronology=null)"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,396,ublic void testConstructor_int_int_int_nullChronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,397,"earMonthDay test = new YearMonthDay(1970, 6, 9, null);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,398,"ssertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,399,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,400,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,401,"ssertEquals(9, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,405,ublic void testGet() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,406,earMonthDay test = new YearMonthDay();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,407,"ssertEquals(1970, test.get(DateTimeFieldType.year()));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,408,"ssertEquals(6, test.get(DateTimeFieldType.monthOfYear()));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,409,"ssertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,410,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,411,est.get(null);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,412,ail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,413, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,414,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,415,est.get(DateTimeFieldType.hourOfDay());
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,416,ail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,417, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,420,ublic void testSize() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,421,earMonthDay test = new YearMonthDay();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,422,"ssertEquals(3, test.size());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,425,ublic void testGetFieldType() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,426,earMonthDay test = new YearMonthDay();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,427,"ssertSame(DateTimeFieldType.year(), test.getFieldType(0));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,428,"ssertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,429,"ssertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(2));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,430,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,431,est.getFieldType(-1);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,432, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,433,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,434,est.getFieldType(3);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,435, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,438,ublic void testGetFieldTypes() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,439,earMonthDay test = new YearMonthDay();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,440,ateTimeFieldType[] fields = test.getFieldTypes();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,441,"ssertSame(DateTimeFieldType.year(), fields[0]);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,442,"ssertSame(DateTimeFieldType.monthOfYear(), fields[1]);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,443,"ssertSame(DateTimeFieldType.dayOfMonth(), fields[2]);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,444,"ssertNotSame(test.getFieldTypes(), test.getFieldTypes());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,447,ublic void testGetField() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,448,earMonthDay test = new YearMonthDay();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,449,"ssertSame(ISOChronology.getInstance().year(), test.getField(0));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,450,"ssertSame(ISOChronology.getInstance().monthOfYear(), test.getField(1));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,451,"ssertSame(ISOChronology.getInstance().dayOfMonth(), test.getField(2));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,452,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,453,est.getField(-1);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,454, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,455,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,456,est.getField(3);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,457, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,460,ublic void testGetFields() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,461,earMonthDay test = new YearMonthDay();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,462,ateTimeField[] fields = test.getFields();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,463,"ssertSame(ISOChronology.getInstance().year(), fields[0]);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,464,"ssertSame(ISOChronology.getInstance().monthOfYear(), fields[1]);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,465,"ssertSame(ISOChronology.getInstance().dayOfMonth(), fields[2]);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,466,"ssertNotSame(test.getFields(), test.getFields());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,469,ublic void testGetValue() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,470,earMonthDay test = new YearMonthDay();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,471,"ssertEquals(1970, test.getValue(0));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,472,"ssertEquals(6, test.getValue(1));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,473,"ssertEquals(9, test.getValue(2));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,474,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,475,est.getValue(-1);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,476, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,477,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,478,est.getValue(3);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,479, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,482,ublic void testGetValues() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,483,earMonthDay test = new YearMonthDay();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,484,nt[] values = test.getValues();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,485,"ssertEquals(1970, values[0]);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,486,"ssertEquals(6, values[1]);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,487,"ssertEquals(9, values[2]);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,488,"ssertNotSame(test.getValues(), test.getValues());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,491,ublic void testIsSupported() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,492,earMonthDay test = new YearMonthDay();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,493,"ssertEquals(true, test.isSupported(DateTimeFieldType.year()));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,494,"ssertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,495,"ssertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,496,"ssertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay()));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,499,ublic void testEqualsHashCode() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,500,"earMonthDay test1 = new YearMonthDay(1970, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,501,"earMonthDay test2 = new YearMonthDay(1970, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,502,"ssertEquals(true, test1.equals(test2));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,503,"ssertEquals(true, test2.equals(test1));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,504,"ssertEquals(true, test1.equals(test1));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,505,"ssertEquals(true, test2.equals(test2));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,506,"ssertEquals(true, test1.hashCode() == test2.hashCode());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,507,"ssertEquals(true, test1.hashCode() == test1.hashCode());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,508,"ssertEquals(true, test2.hashCode() == test2.hashCode());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,510,"earMonthDay test3 = new YearMonthDay(1971, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,511,"ssertEquals(false, test1.equals(test3));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,512,"ssertEquals(false, test2.equals(test3));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,513,"ssertEquals(false, test3.equals(test1));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,514,"ssertEquals(false, test3.equals(test2));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,515,"ssertEquals(false, test1.hashCode() == test3.hashCode());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,516,"ssertEquals(false, test2.hashCode() == test3.hashCode());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,518,"ssertEquals(false, test1.equals(""Hello""));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,519,"ssertEquals(true, test1.equals(new MockInstant()));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,520,"ssertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,523,lass MockInstant extends MockPartial {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,524,ublic DateTimeField[] getFields() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,525,eturn new DateTimeField[] {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,526,"SOChronology.getInstance().year(),"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,527,"SOChronology.getInstance().monthOfYear(),"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,528,"SOChronology.getInstance().dayOfMonth(),"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,531,ublic int[] getValues() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,532,"eturn new int[] {1970, 6, 9};"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,537,ublic void testResolveDateTime_RI() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,538,"earMonthDay test = new YearMonthDay(1972, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,539,ateTime dt = new DateTime(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,540,"ssertEquals(""1970-04-06T12:24:00.000Z"", dt.toString());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,542,ateTime result = test.toDateTimeUsing(dt);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,543,"heck(test, 1972, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,544,"ssertEquals(""1970-04-06T12:24:00.000Z"", dt.toString());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,545,"ssertEquals(""1972-06-09T12:24:00.000Z"", result.toString());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,548,ublic void testResolveDateTime_nullRI() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,549,"earMonthDay test = new YearMonthDay(1972, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,550,ateTimeUtils.setCurrentMillisFixed(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,552,ateTime result = test.toDateTimeUsing(null);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,553,"heck(test, 1972, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,554,"ssertEquals(""1972-06-09T12:24:00.000Z"", result.toString());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,558,ublic void testSerialization() throws Exception {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,559,"earMonthDay test = new YearMonthDay(1972, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,561,yteArrayOutputStream baos = new ByteArrayOutputStream();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,562,bjectOutputStream oos = new ObjectOutputStream(baos);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,563,os.writeObject(test);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,564,yte[] bytes = baos.toByteArray();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,565,os.close();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,567,yteArrayInputStream bais = new ByteArrayInputStream(bytes);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,568,bjectInputStream ois = new ObjectInputStream(bais);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,569,earMonthDay result = (YearMonthDay) ois.readObject();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,570,is.close();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,572,"ssertEquals(test, result);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,573,"ssertTrue(Arrays.equals(test.getValues(), result.getValues()));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,574,"ssertTrue(Arrays.equals(test.getFields(), result.getFields()));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,575,"ssertEquals(test.getChronology(), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,579,ublic void testToString() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,580,"earMonthDay test = new YearMonthDay(1972, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,581,"ssertEquals(""1972-06-09"", test.toString());"

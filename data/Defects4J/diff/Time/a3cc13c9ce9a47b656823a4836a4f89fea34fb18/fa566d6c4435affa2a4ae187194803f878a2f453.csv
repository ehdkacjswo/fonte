is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,829,* The interval may have more or less than 24 hours if this is a daylight
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,830,* savings cutover date.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,831,* <p>
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,843,* The interval may have more or less than 24 hours if this is a daylight
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,844,* savings cutover date.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,845,* <p>
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,847,eturn toDateMidnight(zone).toInterval();
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,853,DateTime start = toDateTimeAtStartOfDay(zone);
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,854,DateTime end = plusDays(1).toDateTimeAtStartOfDay(zone);
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,855,"return new Interval(start, end);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,905,ateTime start = base.toDateTimeAtMidnight();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,905,DateTime start = base.toDateTimeAtStartOfDay();
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,916,ateTime start = base.toDateTimeAtMidnight(TOKYO);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,916,DateTime start = base.toDateTimeAtStartOfDay(TOKYO);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,922,public void testToInterval_Zone_noMidnight() {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,923,"LocalDate base = new LocalDate(2006, 4, 1, ISO_LONDON);  // LONDON irrelevant"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,924,"DateTimeZone gaza = DateTimeZone.forID(""Asia/Gaza"");"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,925,Interval test = base.toInterval(gaza);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,926,"check(base, 2006, 4, 1);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,927,"DateTime start = new DateTime(2006, 4, 1, 1, 0, 0, 0, gaza);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,928,"DateTime end = new DateTime(2006, 4, 2, 0, 0, 0, 0, gaza);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,929,"Interval expected = new Interval(start, end);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,930,"assertEquals(expected, test);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,926,ateTime start = base.toDateTimeAtMidnight(LONDON);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,937,DateTime start = base.toDateTimeAtStartOfDay(LONDON);

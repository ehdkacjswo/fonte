is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,18,mport org.joda.time.chrono.BuddhistChronology;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,19,mport org.joda.time.chrono.CopticChronology;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,20,mport org.joda.time.chrono.GJChronology;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,21,mport org.joda.time.chrono.GregorianChronology;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,22,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,23,mport org.joda.time.chrono.JulianChronology;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,72, Gets an instance of the ISOChronology in the default zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,73, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,74, {@link ISOChronology} defines all fields in line with the ISO8601 standard.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,75," This chronology is the default, and is suitable for all normal datetime processing."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,76," It is <i>unsuitable</i> for historical datetimes before October 15, 1582"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,77, as it applies the modern Gregorian calendar rules before that date.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,79, @return the ISO chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,80, @deprecated Use ISOChronology.getInstance()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,82,ublic static Chronology getISO() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,83,eturn ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,87, Gets an instance of the ISOChronology in the UTC zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,88, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,89, {@link ISOChronology} defines all fields in line with the ISO8601 standard.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,90," This chronology is the default, and is suitable for all normal datetime processing."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,91," It is <i>unsuitable</i> for historical datetimes before October 15, 1582"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,92, as it applies the modern Gregorian calendar rules before that date.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,94, @return the ISO chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,95, @deprecated Use ISOChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,97,ublic static Chronology getISOUTC() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,98,eturn ISOChronology.getInstanceUTC();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,102, Gets an instance of the ISOChronology in the specified zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,103, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,104, {@link ISOChronology} defines all fields in line with the ISO8601 standard.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,105," This chronology is the default, and is suitable for all normal datetime processing."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,106," It is <i>unsuitable</i> for historical datetimes before October 15, 1582"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,107, as it applies the modern Gregorian calendar rules before that date.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,109," @param zone  the zone to use, null means default zone"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,110, @return the ISO chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,111, @deprecated Use ISOChronology.getInstance(zone)
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,113,ublic static Chronology getISO(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,114,eturn ISOChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,119, Gets an instance of the GJChronology in the default zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,120, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,121, {@link GJChronology} defines all fields using standard meanings.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,122, This chronology is intended to be used as a replacement for <code>GregorianCalendar</code>.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,123," The Gregorian calendar system is used after October 15, 1582, while the"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,124, Julian calendar system is used before.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,125, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,126," Unlike <code>GregorianCalendar</code>, this chronology returns a year of -1"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,127," for 1 BCE, -2 for 2 BCE and so on. Thus there is no year zero."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,128, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,129, This method uses the standard Julian to Gregorian cutover date of
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,130," October 15th 1582. If you require a cutover on a different date, then use"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,131, the factories on <code>GJChronology</code> itself.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,132, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,133," When dealing solely with dates in the modern era, from 1600 onwards,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,134," we recommend using ISOChronology, which is the default."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,136, @return the GJ chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,137, @deprecated Use GJChronology.getInstance()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,139,ublic static Chronology getGJ() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,140,eturn GJChronology.getInstance();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,144, Gets an instance of the GJChronology in the UTC zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,145, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,146, {@link GJChronology} defines all fields using standard meanings.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,147, This chronology is intended to be used as a replacement for <code>GregorianCalendar</code>.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,148," The Gregorian calendar system is used after October 15, 1582, while the"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,149, Julian calendar system is used before.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,150, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,151," Unlike <code>GregorianCalendar</code>, this chronology returns a year of -1"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,152," for 1 BCE, -2 for 2 BCE and so on. Thus there is no year zero."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,153, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,154, This method uses the standard Julian to Gregorian cutover date of
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,155," October 15th 1582. If you require a cutover on a different date, then use"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,156, the factories on <code>GJChronology</code> itself.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,157, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,158," When dealing solely with dates in the modern era, from 1600 onwards,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,159," we recommend using ISOChronology, which is the default."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,161, @return the GJ chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,162, @deprecated Use GJChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,164,ublic static Chronology getGJUTC() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,165,eturn GJChronology.getInstanceUTC();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,169, Gets an instance of the GJChronology in the specified zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,170, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,171, {@link GJChronology} defines all fields using standard meanings.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,172, This chronology is intended to be used as a replacement for <code>GregorianCalendar</code>.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,173," The Gregorian calendar system is used after October 15, 1582, while the"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,174, Julian calendar system is used before.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,175, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,176," Unlike <code>GregorianCalendar</code>, this chronology returns a year of -1"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,177," for 1 BCE, -2 for 2 BCE and so on. Thus there is no year zero."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,178, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,179, This method uses the standard Julian to Gregorian cutover date of
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,180," October 15th 1582. If you require a cutover on a different date, then use"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,181, the factories on <code>GJChronology</code> itself.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,182, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,183," When dealing solely with dates in the modern era, from 1600 onwards,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,184," we recommend using ISOChronology, which is the default."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,186," @param zone  the zone to use, null means default zone"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,187, @return the GJ chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,188, @deprecated Use GJChronology.getInstance(zone)
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,190,ublic static Chronology getGJ(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,191,eturn GJChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,196, Gets an instance of the GregorianChronology in the default zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,197, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,198, {@link GregorianChronology} defines all fields using standard meanings.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,199, It uses the Gregorian calendar rules <i>for all time</i> (proleptic)
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,200, thus it is NOT a replacement for <code>GregorianCalendar</code>.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,201," For that purpose, you should use {@link #getGJ()}."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,202, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,203," The Gregorian calendar system defines a leap year every four years,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,204," except that every 100 years is not leap, but every 400 is leap."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,205, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,206," Technically, this chronology is almost identical to the ISO chronology,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,207," thus we recommend using ISOChronology instead, which is the default."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,209, @return the Gregorian chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,210, @deprecated Use GregorianChronology.getInstance()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,212,ublic static Chronology getGregorian() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,213,eturn GregorianChronology.getInstance();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,217, Gets an instance of the GregorianChronology in the UTC zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,218, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,219, {@link GregorianChronology} defines all fields using standard meanings.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,220, It uses the Gregorian calendar rules <i>for all time</i> (proleptic)
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,221, thus it is NOT a replacement for <code>GregorianCalendar</code>.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,222," For that purpose, you should use {@link #getGJ()}."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,223, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,224," The Gregorian calendar system defines a leap year every four years,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,225," except that every 100 years is not leap, but every 400 is leap."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,226, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,227," Technically, this chronology is almost identical to the ISO chronology,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,228," thus we recommend using ISOChronology instead, which is the default."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,230, @return the Gregorian chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,231, @deprecated Use GregorianChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,233,ublic static Chronology getGregorianUTC() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,234,eturn GregorianChronology.getInstanceUTC();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,238, Gets an instance of the GregorianChronology in the specified zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,239, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,240, {@link GregorianChronology} defines all fields using standard meanings.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,241, It uses the Gregorian calendar rules <i>for all time</i> (proleptic)
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,242, thus it is NOT a replacement for <code>GregorianCalendar</code>.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,243," For that purpose, you should use {@link #getGJ()}."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,244, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,245," The Gregorian calendar system defines a leap year every four years,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,246," except that every 100 years is not leap, but every 400 is leap."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,247, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,248," Technically, this chronology is almost identical to the ISO chronology,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,249," thus we recommend using ISOChronology instead, which is the default."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,251," @param zone  the zone to use, null means default zone"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,252, @return the Gregorian chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,253, @deprecated Use GregorianChronology.getInstance(zone)
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,255,ublic static Chronology getGregorian(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,256,eturn GregorianChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,261, Gets an instance of the JulianChronology in the default zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,262, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,263, {@link JulianChronology} defines all fields using standard meanings.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,264, It uses the Julian calendar rules <i>for all time</i> (proleptic).
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,265, The Julian calendar system defines a leap year every four years.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,267, @return the Julian chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,268, @deprecated Use JulianChronology.getInstance()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,270,ublic static Chronology getJulian() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,271,eturn JulianChronology.getInstance();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,275, Gets an instance of the JulianChronology in the UTC zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,276, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,277, {@link JulianChronology} defines all fields using standard meanings.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,278, It uses the Julian calendar rules <i>for all time</i> (proleptic).
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,279, The Julian calendar system defines a leap year every four years.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,281, @return the Julian chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,282, @deprecated Use JulianChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,284,ublic static Chronology getJulianUTC() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,285,eturn JulianChronology.getInstanceUTC();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,289, Gets an instance of the JulianChronology in the specified zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,290, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,291, {@link JulianChronology} defines all fields using standard meanings.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,292, It uses the Julian calendar rules <i>for all time</i> (proleptic).
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,293, The Julian calendar system defines a leap year every four years.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,295," @param zone  the zone to use, null means default zone"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,296, @return the Julian chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,297, @deprecated Use JulianChronology.getInstance(zone)
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,299,ublic static Chronology getJulian(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,300,eturn JulianChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,305, Gets an instance of the BuddhistChronology in the default zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,306, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,307," {@link BuddhistChronology} defines all fields using standard meanings,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,308, however the year is offset by 543. The chronology cannot be used before
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,309, year 1 in the Buddhist calendar.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,311, @return the Buddhist chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,312, @deprecated Use BuddhistChronology.getInstance()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,314,ublic static Chronology getBuddhist() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,315,eturn BuddhistChronology.getInstance();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,319, Gets an instance of the BuddhistChronology in the UTC zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,320, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,321," {@link BuddhistChronology} defines all fields using standard meanings,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,322, however the year is offset by 543. The chronology cannot be used before
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,323, year 1 in the Buddhist calendar.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,325, @return the Buddhist chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,326, @deprecated Use BuddhistChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,328,ublic static Chronology getBuddhistUTC() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,329,eturn BuddhistChronology.getInstanceUTC();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,333, Gets an instance of the BuddhistChronology in the specified zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,334, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,335," {@link BuddhistChronology} defines all fields using standard meanings,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,336, however the year is offset by 543. The chronology cannot be used before
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,337, year 1 in the Buddhist calendar.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,339," @param zone  the zone to use, null means default zone"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,340, @return the Buddhist chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,341, @deprecated Use BuddhistChronology.getInstance(zone)
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,343,ublic static Chronology getBuddhist(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,344,eturn BuddhistChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,349, Gets an instance of the CopticChronology in the default zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,350, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,351, {@link CopticChronology} defines fields sensibly for the Coptic calendar system.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,352, The Coptic calendar system defines every fourth year as leap.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,353," The year is broken down into 12 months, each 30 days in length."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,354, An extra period at the end of the year is either 5 or 6 days in length
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,355, and is returned as a 13th month.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,356," Year 1 in the Coptic calendar began on August 29, 284 CE (Julian)."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,357, The chronology cannot be used before the first Coptic year.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,359, @return the Coptic chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,360, @deprecated Use CopticChronology.getInstance()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,362,ublic static Chronology getCoptic() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,363,eturn CopticChronology.getInstance();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,367, Gets an instance of the CopticChronology in the UTC zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,368, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,369, {@link CopticChronology} defines fields sensibly for the Coptic calendar system.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,370, The Coptic calendar system defines every fourth year as leap.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,371," The year is broken down into 12 months, each 30 days in length."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,372, An extra period at the end of the year is either 5 or 6 days in length
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,373, and is returned as a 13th month.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,374," Year 1 in the Coptic calendar began on August 29, 284 CE (Julian)."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,375, The chronology cannot be used before the first Coptic year.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,377, @return the Coptic chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,378, @deprecated Use CopticChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,380,ublic static Chronology getCopticUTC() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,381,eturn CopticChronology.getInstanceUTC();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,385, Gets an instance of the CopticChronology in the specified zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,386, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,387, {@link CopticChronology} defines fields sensibly for the Coptic calendar system.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,388, The Coptic calendar system defines every fourth year as leap.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,389," The year is broken down into 12 months, each 30 days in length."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,390, An extra period at the end of the year is either 5 or 6 days in length
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,391, and is returned as a 13th month.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,392," Year 1 in the Coptic calendar began on August 29, 284 CE (Julian)."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,393, The chronology cannot be used before the first Coptic year.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,395," @param zone  the zone to use, null means default zone"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,396, @return the Coptic chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,397, @deprecated Use CopticChronology.getInstance(zone)
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,399,ublic static Chronology getCoptic(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,400,eturn CopticChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,241, This method definition preserves compatability with earlier versions
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,241,* This method definition preserves compatibility with earlier versions
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,261, This method definition preserves compatability with earlier versions
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,261,* This method is deprecated because it is a duplicate of {@link #toDateTime()}.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,262,"* However, removing it would cause the superclass implementation to be used,"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,263,* which would create silent bugs in any caller depending on this implementation.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,264,"* As such, the method itself is not currently planned to be removed."
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,265,* <p>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,266,* This method definition preserves compatibility with earlier versions
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,281, This method definition preserves compatability with earlier versions
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,286,* This method definition preserves compatibility with earlier versions
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,301, This method definition preserves compatability with earlier versions
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,306,* This method is deprecated because it is a duplicate of {@link #toMutableDateTime()}.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,307,"* However, removing it would cause the superclass implementation to be used,"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,308,* which would create silent bugs in any caller depending on this implementation.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,309,"* As such, the method itself is not currently planned to be removed."
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,310,* <p>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,311,* This method definition preserves compatibility with earlier versions
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,627, Converts this LocalDate to a full datetime at midnight using the default
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,628, time zone.
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,629, <p>
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,630, This method will throw an exception if the default time zone switches
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,631, to Daylight Savings Time at midnight and this LocalDate represents
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,632, that switchover date. The problem is that there is no such time as
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,633," midnight on the required date, and as such an exception is thrown."
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,634, <p>
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,635, This instance is immutable and unaffected by this method call.
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,637, @return this date as a datetime at midnight
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,638, @deprecated Use {@link #toDateTimeAtStartOfDay()} which won't throw an exception
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,640,ublic DateTime toDateTimeAtMidnight() {
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,641,eturn toDateTimeAtMidnight(null);
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,645, Converts this LocalDate to a full datetime at midnight using the
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,646, specified time zone.
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,647, <p>
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,648, This method will throw an exception if the time zone switches
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,649, to Daylight Savings Time at midnight and this LocalDate represents
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,650, that switchover date. The problem is that there is no such time as
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,651," midnight on the required date, and as such an exception is thrown."
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,652, <p>
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,653, This method uses the chronology from this instance plus the time zone
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,654, specified.
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,655, <p>
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,656, This instance is immutable and unaffected by this method call.
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,658," @param zone  the zone to use, null means default zone"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,659, @return this date as a datetime at midnight
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,660, @deprecated Use {@link #toDateTimeAtStartOfDay(DateTimeZone)} which won't throw an exception
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,662,ublic DateTime toDateTimeAtMidnight(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,663,one = DateTimeUtils.getZone(zone);
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,664,hronology chrono = getChronology().withZone(zone);
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,665,"eturn new DateTime(getYear(), getMonthOfYear(), getDayOfMonth(), 0, 0, 0, 0, chrono);"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,46,"rivate static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,46,"//    private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,118,ublic void testGetISO() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,119,"ssertEquals(ISOChronology.getInstance(), Chronology.getISO());"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,122,ublic void testGetISOUTC() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,123,"ssertEquals(ISOChronology.getInstanceUTC(), Chronology.getISOUTC());"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,126,ublic void testGetISO_Zone() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,127,"ssertEquals(ISOChronology.getInstance(PARIS), Chronology.getISO(PARIS));"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,128,"ssertEquals(ISOChronology.getInstance(), Chronology.getISO(null));"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,132,ublic void testGetGJ() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,133,"ssertEquals(GJChronology.getInstance(), Chronology.getGJ());"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,136,ublic void testGetGJUTC() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,137,"ssertEquals(GJChronology.getInstanceUTC(), Chronology.getGJUTC());"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,140,ublic void testGetGJ_Zone() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,141,"ssertEquals(GJChronology.getInstance(PARIS), Chronology.getGJ(PARIS));"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,142,"ssertEquals(GJChronology.getInstance(), Chronology.getGJ(null));"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,146,ublic void testGetGregorian() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,147,"ssertEquals(GregorianChronology.getInstance(), Chronology.getGregorian());"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,150,ublic void testGetGregorianUTC() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,151,"ssertEquals(GregorianChronology.getInstanceUTC(), Chronology.getGregorianUTC());"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,154,ublic void testGetGregorian_Zone() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,155,"ssertEquals(GregorianChronology.getInstance(PARIS), Chronology.getGregorian(PARIS));"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,156,"ssertEquals(GregorianChronology.getInstance(), Chronology.getGregorian(null));"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,160,ublic void testGetJulian() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,161,"ssertEquals(JulianChronology.getInstance(), Chronology.getJulian());"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,164,ublic void testGetJulianUTC() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,165,"ssertEquals(JulianChronology.getInstanceUTC(), Chronology.getJulianUTC());"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,168,ublic void testGetJulian_Zone() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,169,"ssertEquals(JulianChronology.getInstance(PARIS), Chronology.getJulian(PARIS));"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,170,"ssertEquals(JulianChronology.getInstance(), Chronology.getJulian(null));"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,174,ublic void testGetBuddhist() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,175,"ssertEquals(BuddhistChronology.getInstance(), Chronology.getBuddhist());"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,178,ublic void testGetBuddhistUTC() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,179,"ssertEquals(BuddhistChronology.getInstanceUTC(), Chronology.getBuddhistUTC());"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,182,ublic void testGetBuddhist_Zone() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,183,"ssertEquals(BuddhistChronology.getInstance(PARIS), Chronology.getBuddhist(PARIS));"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,184,"ssertEquals(BuddhistChronology.getInstance(), Chronology.getBuddhist(null));"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,188,ublic void testGetCoptic() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,189,"ssertEquals(CopticChronology.getInstance(), Chronology.getCoptic());"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,192,ublic void testGetCopticUTC() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,193,"ssertEquals(CopticChronology.getInstanceUTC(), Chronology.getCopticUTC());"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,196,ublic void testGetCoptic_Zone() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,197,"ssertEquals(CopticChronology.getInstance(PARIS), Chronology.getCoptic(PARIS));"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,198,"ssertEquals(CopticChronology.getInstance(), Chronology.getCoptic(null));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,219,ublic void test_LocalDate_toDateTimeAtMidnight_Gaza() {
False,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,220,"ocalDate date = new LocalDate(2007, 4, 1);"
False,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,221,ry {
False,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,222,ate.toDateTimeAtMidnight(MOCK_GAZA);
False,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,223,ail();
False,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,224, catch (IllegalArgumentException ex) {
False,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,225,"ssertEquals(true, ex.getMessage().startsWith(""Illegal instant due to time zone offset transition""));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,445,ublic void test_LocalDate_toDateTimeAtMidnight_Turk() {
False,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,446,"ocalDate date = new LocalDate(2007, 4, 1);"
False,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,447,ry {
False,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,448,ate.toDateTimeAtMidnight(MOCK_TURK);
False,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,449,ail();
False,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,450, catch (IllegalArgumentException ex) {
False,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,451,"ssertEquals(true, ex.getMessage().startsWith(""Illegal instant due to time zone offset transition""));"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,48,rivate static final int OFFSET = 1;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,48,//    private static final int OFFSET = 1;
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,54,rivate static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,54,//    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,56,rivate static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,57,rivate static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,56,//    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,57,//    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,61,rivate static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,61,//    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,71,rivate long TEST_TIME1 =
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,72,31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,73, 12L * DateTimeConstants.MILLIS_PER_HOUR
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,74, 24L * DateTimeConstants.MILLIS_PER_MINUTE;
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,76,rivate long TEST_TIME2 =
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,77,365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,78, 14L * DateTimeConstants.MILLIS_PER_HOUR
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,79, 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,71,//    private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,72,//        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,73,//        + 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,74,//        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,76,//    private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,77,//        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,78,//        + 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,79,//        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,678,ublic void testToDateTimeAtMidnight() {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,679,"ocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,681,ateTime test = base.toDateTimeAtMidnight();
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,682,"heck(base, 2005, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,683,"ssertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,687,ublic void testToDateTimeAtMidnight_Zone() {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,688,"ocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,690,ateTime test = base.toDateTimeAtMidnight(TOKYO);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,691,"heck(base, 2005, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,692,"ssertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_TOKYO), test);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,695,ublic void testToDateTimeAtMidnight_nullZone() {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,696,"ocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,698,ateTime test = base.toDateTimeAtMidnight((DateTimeZone) null);
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,699,"heck(base, 2005, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,700,"ssertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test);"

is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,131,"* Constructs a TimeOfDay with the current time, using ISOChronology in"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,132,* the specified zone to extract the fields.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,133,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,134,* The constructor uses the specified time zone to obtain the current time.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,135,"* Once the constructor is complete, all further calculations"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,136,* are performed without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,138,"* @param zone  the zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,139,* @since 1.1
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,141,public TimeOfDay(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,142,super(Chronology.getISO(zone));
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,78," Constructs a YearMonthDay with the current time, using ISOChronology in"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,78,"* Constructs a YearMonthDay with the current date, using ISOChronology in"
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,90," Constructs a YearMonthDay with the current time, using the specified chronology"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,90,"* Constructs a YearMonthDay with the current date, using ISOChronology in"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,91,* the specified zone to extract the fields.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,92,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,93,* The constructor uses the specified time zone to obtain the current date.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,94,"* Once the constructor is complete, all further calculations"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,95,* are performed without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,97,"* @param zone  the zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,98,* @since 1.1
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,100,public YearMonthDay(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,101,super(Chronology.getISO(zone));
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,105,"* Constructs a YearMonthDay with the current date, using the specified chronology"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,35,private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,88,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,89,"assertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,101,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,102,"assertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,125,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,126,"assertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,138,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,139,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,147,* Test constructor (DateTimeZone)
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,149,public void testConstructor_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,150,"DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,151,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,152,// 23:59 in London is 00:59 the following day in Paris
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,154,TimeOfDay test = new TimeOfDay(LONDON);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,155,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,156,"assertEquals(23, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,157,"assertEquals(59, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,158,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,159,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,161,test = new TimeOfDay(PARIS);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,162,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,163,"assertEquals(0, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,164,"assertEquals(59, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,165,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,166,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,170,* Test constructor (DateTimeZone=null)
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,172,public void testConstructor_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,173,"DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,174,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,175,// 23:59 in London is 00:59 the following day in Paris
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,177,TimeOfDay test = new TimeOfDay((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,178,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,179,"assertEquals(23, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,180,"assertEquals(59, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,181,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,182,"assertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,162,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,202,"assertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,175,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,215,"assertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,187,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,227,"assertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,223,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,263,"assertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,237,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,277,"assertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,248,imeOfDay test = new TimeOfDay(null);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,249,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,288,TimeOfDay test = new TimeOfDay((Object) null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,289,"assertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,301,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,341,"assertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,313,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,353,"assertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,326,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,366,"assertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,382,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,422,"assertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,394,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,434,"assertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,466,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,506,"assertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,478,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,518,"assertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,566,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,606,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,90,* Test constructor (DateTimeZone)
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,92,public void testConstructor_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,93,"DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,94,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,95,// 23:59 in London is 00:59 the following day in Paris
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,97,YearMonthDay test = new YearMonthDay(LONDON);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,98,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,99,"assertEquals(2005, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,100,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,101,"assertEquals(8, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,103,test = new YearMonthDay(PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,104,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,105,"assertEquals(2005, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,106,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,107,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,111,* Test constructor (DateTimeZone=null)
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,113,public void testConstructor_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,114,"DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,115,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,116,// 23:59 in London is 00:59 the following day in Paris
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,118,YearMonthDay test = new YearMonthDay((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,119,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,120,"assertEquals(2005, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,121,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,122,"assertEquals(8, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,184,earMonthDay test = new YearMonthDay(null);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,220,YearMonthDay test = new YearMonthDay((Object) null);

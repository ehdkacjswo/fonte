is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,22, A <code>ReadablePartial</code> supports a subset of those fields on the chronology.
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,23," It cannot be compared to a <code>ReadableInstant</code>, as it does not fully"
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,22,* A {@code ReadablePartial} supports a subset of those fields on the chronology.
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,23,"* It cannot be compared to a {@code ReadableInstant}, as it does not fully"
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,27, A <code>ReadablePartial</code> can be converted to a <code>ReadableInstant</code>
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,28, using the <code>toDateTime</code> method. This works by providing a full base
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,27,* A {@code ReadablePartial} can be converted to a {@code ReadableInstant}
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,28,* using the {@code toDateTime} method. This works by providing a full base
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,30,* <p>
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,31,* {@code ReadablePartial} is {@code Comparable} from v2.0.
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,32,"* The comparison is based on the fields, compared in order, from largest to smallest."
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,33,* The first field that is non-equal is used to determine the result.
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,149, Compares this partial with another returning an integer
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,150, indicating the order.
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,151, <p>
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,152," The fields are compared in order, from largest to smallest."
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,153, The first field that is non-equal is used to determine the result.
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,154," Thus a year-hour partial will first be compared on the year, and then"
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,155, on the hour.
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,156, <p>
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,157, The specified object must be a partial instance whose field types
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,158, match those of this partial. If the partial instance has different
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,159, fields then a {@code ClassCastException} is thrown.
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,161, @param partial  an object to check against
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,162," @return negative if this is less, zero if equal, positive if greater"
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,163, @throws ClassCastException if the partial is the wrong class
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,164,  or if it has field types that don't match
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,165, @throws NullPointerException if the partial is null
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,166," @since 2.0, previously on {@code AbstractPartial}"
False,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,168,nt compareTo(ReadablePartial partial);
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,152,//  This is commented out to improve backwards compatibility
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,154,//     * Compares this partial with another returning an integer
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,155,//     * indicating the order.
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,156,//     * <p>
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,157,"//     * The fields are compared in order, from largest to smallest."
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,158,//     * The first field that is non-equal is used to determine the result.
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,159,"//     * Thus a year-hour partial will first be compared on the year, and then"
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,160,//     * on the hour.
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,161,//     * <p>
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,162,//     * The specified object must be a partial instance whose field types
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,163,//     * match those of this partial. If the partial instance has different
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,164,//     * fields then a {@code ClassCastException} is thrown.
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,166,//     * @param partial  an object to check against
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,167,"//     * @return negative if this is less, zero if equal, positive if greater"
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,168,//     * @throws ClassCastException if the partial is the wrong class
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,169,//     *  or if it has field types that don't match
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,170,//     * @throws NullPointerException if the partial is null
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,171,"//     * @since 2.0, previously on {@code AbstractPartial}"
True,src/main/java/org/joda/time/ReadablePartial.java,src/main/java/org/joda/time/ReadablePartial.java,173,//    int compareTo(ReadablePartial partial);

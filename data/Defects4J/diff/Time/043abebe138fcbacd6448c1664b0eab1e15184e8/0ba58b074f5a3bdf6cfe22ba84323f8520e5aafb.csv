is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,65,import org.joda.time.field.DelegatedDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,69,import org.joda.time.field.SkipUndoDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,70," Implements the Buddhist calendar system, which is similar to Gregorian/Julian,"
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,71, except with the year offset by 543.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,72,* A chronology that matches the BuddhistCalendar class supplied by Sun.
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,73, The Buddhist calendar differs from the Gregorian/Julian calendar only
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,74, in the year. This class is compatable with the BuddhistCalendar class
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,75, supplied by Sun.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,74,"* The chronology is identical to the Gregorian/Julian, except that the"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,75,* year is offset by +543 and the era is named 'BE' for Buddhist Era.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,76,* <p>
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,77,* This class was intended by Sun to model the calendar used in Thailand.
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,78,"* However, the actual rules for Thailand are much more involved than"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,79,* this class covers. (This class is accurate after 1941-01-01 ISO).
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,80,* <p>
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,81,* This chronlogy is being retained for those who want a same effect
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,82,* replacement for the Sun class. It is hoped that community support will
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,83,"* enable a more accurate chronology for Thailand, to be developed."
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,219,"// julian chrono removed zero, but we need to put it back"
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,212,"ields.year = new OffsetDateTimeField(field, BUDDHIST_OFFSET);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,221,fields.year = new OffsetDateTimeField(
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,222,"new SkipUndoDateTimeField(this, field), BUDDHIST_OFFSET);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,224,"// one era, so yearOfEra is the same"
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,215,ields.yearOfEra = new OffsetDateTimeField(
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,216,"ields.year, DateTimeFieldType.yearOfEra(), BUDDHIST_OFFSET);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,226,fields.yearOfEra = new DelegatedDateTimeField(
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,227,"fields.year, DateTimeFieldType.yearOfEra());"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,229,"// julian chrono removed zero, but we need to put it back"
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,219,"ields.weekyear = new OffsetDateTimeField(field, BUDDHIST_OFFSET);"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,231,fields.weekyear = new OffsetDateTimeField(
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,232,"new SkipUndoDateTimeField(this, field), BUDDHIST_OFFSET);"
False,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,89,rotected DelegatedDateTimeField(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,89,public DelegatedDateTimeField(DateTimeField field) {
False,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,99,"rotected DelegatedDateTimeField(DateTimeField field, DateTimeFieldType type) {"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,99,"public DelegatedDateTimeField(DateTimeField field, DateTimeFieldType type) {"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,5,* Copyright (c) 2001-2005 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,54,package org.joda.time.field;
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,56,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,57,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,60,* Wraps another field such that a certain value is added back into
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,61,* the sequence of numbers.
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,62,* <p>
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,63,* This reverses the effect of SkipDateTimeField. This isn't very
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,64,* elegant.
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,65,* <p>
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,66,* SkipUndoDateTimeField is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,68,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,69,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,70,* @since 1.0
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,72,public final class SkipUndoDateTimeField extends DelegatedDateTimeField {
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,74,/** Serialization version. */
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,75,private static final long serialVersionUID = -5875876968979L;
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,77,/** The chronology to wrap. */
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,78,private final Chronology iChronology;
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,79,/** The value to skip. */
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,80,private final int iSkip;
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,81,/** The calculated minimum value. */
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,82,private transient int iMinValue;
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,85,* Constructor that reinserts zero.
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,87,* @param chronology  the chronoogy to use
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,88,* @param field  the field to skip zero on
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,90,"public SkipUndoDateTimeField(Chronology chronology, DateTimeField field) {"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,91,"this(chronology, field, 0);"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,95,* Constructor.
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,97,* @param chronology  the chronoogy to use
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,98,* @param field  the field to skip zero on
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,99,* @param skip  the value to skip
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,101,"public SkipUndoDateTimeField(Chronology chronology, DateTimeField field, int skip) {"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,102,super(field);
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,103,iChronology = chronology;
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,104,int min = super.getMinimumValue();
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,105,if (min < skip) {
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,106,iMinValue = min + 1;
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,107,} else if (min == skip + 1) {
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,108,iMinValue = skip;
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,109,} else {
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,110,iMinValue = min;
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,112,iSkip = skip;
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,116,public int get(long millis) {
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,117,int value = super.get(millis);
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,118,if (value < iSkip) {
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,119,value++;
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,121,return value;
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,124,"public long set(long millis, int value) {"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,125,"FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,126,if (value <= iSkip) {
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,127,value--;
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,129,"return super.set(millis, value);"
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,132,public int getMinimumValue() {
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,133,return iMinValue;
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,136,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipUndoDateTimeField.java,137,return getType().getField(iChronology);
False,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,5,* Copyright (c) 2001-2005 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,62,import org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,63,import org.joda.time.DateTime;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,65,import org.joda.time.DateTimeField;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,68,import org.joda.time.Period;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,80,private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,81,private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,82,private static final Chronology JULIAN_UTC = Chronology.getJulianUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,83,private static final Chronology GJ_UTC = Chronology.getGJUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,84,private static final Chronology ISO_UTC = Chronology.getISOUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,288,public void testEpoch() {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,289,"DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,290,"assertEquals(new DateTime(-543, 1, 1, 0, 0, 0, 0, JULIAN_UTC), epoch.withChronology(JULIAN_UTC));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,293,public void testEra() {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,294,"assertEquals(1, BuddhistChronology.BE);"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,295,try {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,296,"new DateTime(-1, 13, 5, 0, 0, 0, 0, BUDDHIST_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,297,fail();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,298,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,301,public void testKeyYears() {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,302,"DateTime bd = new DateTime(2513, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,303,"DateTime jd = new DateTime(1970, 1, 1, 0, 0, 0, 0, GJ_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,304,"assertEquals(jd, bd.withChronology(GJ_UTC));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,305,"assertEquals(2513, bd.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,306,"assertEquals(2513, bd.getYearOfEra());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,307,"assertEquals(2513, bd.plus(Period.weeks(1)).getWeekyear());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,309,"bd = new DateTime(2126, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,310,"jd = new DateTime(1583, 1, 1, 0, 0, 0, 0, GJ_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,311,"assertEquals(jd, bd.withChronology(GJ_UTC));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,312,"assertEquals(2126, bd.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,313,"assertEquals(2126, bd.getYearOfEra());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,314,"assertEquals(2126, bd.plus(Period.weeks(1)).getWeekyear());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,316,"bd = new DateTime(2125, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,317,"jd = new DateTime(1582, 1, 1, 0, 0, 0, 0, GJ_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,318,"assertEquals(jd, bd.withChronology(GJ_UTC));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,319,"assertEquals(2125, bd.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,320,"assertEquals(2125, bd.getYearOfEra());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,321,"assertEquals(2125, bd.plus(Period.weeks(1)).getWeekyear());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,323,"bd = new DateTime(544, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,324,"jd = new DateTime(1, 1, 1, 0, 0, 0, 0, GJ_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,325,"assertEquals(jd, bd.withChronology(GJ_UTC));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,326,"assertEquals(544, bd.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,327,"assertEquals(544, bd.getYearOfEra());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,328,"assertEquals(544, bd.plus(Period.weeks(1)).getWeekyear());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,330,"bd = new DateTime(543, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,331,"jd = new DateTime(-1, 1, 1, 0, 0, 0, 0, GJ_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,332,"assertEquals(jd, bd.withChronology(GJ_UTC));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,333,"assertEquals(543, bd.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,334,"assertEquals(543, bd.getYearOfEra());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,335,"assertEquals(543, bd.plus(Period.weeks(1)).getWeekyear());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,337,"bd = new DateTime(1, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,338,"jd = new DateTime(-543, 1, 1, 0, 0, 0, 0, GJ_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,339,"assertEquals(jd, bd.withChronology(GJ_UTC));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,340,"assertEquals(1, bd.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,341,"assertEquals(1, bd.getYearOfEra());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,342,"assertEquals(1, bd.plus(Period.weeks(1)).getWeekyear());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,345,public void testCalendar() {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,346,"System.out.println(""\nTestBuddhistChronology.testCalendar"");"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,347,"DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,348,long oneDay = DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,349,long millis = epoch.getMillis();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,350,"long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis();"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,351,DateTimeField dayOfWeek = BUDDHIST_UTC.dayOfWeek();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,352,DateTimeField weekOfWeekyear = GJ_UTC.weekOfWeekyear();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,353,DateTimeField dayOfYear = BUDDHIST_UTC.dayOfYear();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,354,DateTimeField dayOfMonth = BUDDHIST_UTC.dayOfMonth();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,355,DateTimeField monthOfYear = BUDDHIST_UTC.monthOfYear();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,356,DateTimeField year = BUDDHIST_UTC.year();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,357,DateTimeField yearOfEra = BUDDHIST_UTC.yearOfEra();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,358,DateTimeField era = BUDDHIST_UTC.era();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,359,DateTimeField gjDayOfWeek = GJ_UTC.dayOfWeek();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,360,DateTimeField gjWeekOfWeekyear = GJ_UTC.weekOfWeekyear();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,361,DateTimeField gjDayOfYear = GJ_UTC.dayOfYear();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,362,DateTimeField gjDayOfMonth = GJ_UTC.dayOfMonth();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,363,DateTimeField gjMonthOfYear = GJ_UTC.monthOfYear();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,364,DateTimeField gjYear = GJ_UTC.year();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,365,DateTimeField gjYearOfEra = GJ_UTC.yearOfEra();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,366,DateTimeField gjEra = GJ_UTC.era();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,367,while (millis < end) {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,368,"assertEquals(gjDayOfWeek.get(millis), dayOfWeek.get(millis));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,369,"assertEquals(gjDayOfYear.get(millis), dayOfYear.get(millis));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,370,"assertEquals(gjDayOfMonth.get(millis), dayOfMonth.get(millis));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,371,"assertEquals(gjMonthOfYear.get(millis), monthOfYear.get(millis));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,372,"assertEquals(gjWeekOfWeekyear.get(millis), weekOfWeekyear.get(millis));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,373,"assertEquals(1, era.get(millis));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,374,int yearValue = gjYear.get(millis);
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,375,if (yearValue <= 0) {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,376,yearValue++;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,378,yearValue += 543;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,379,"assertEquals(yearValue, year.get(millis));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,380,"assertEquals(yearValue, yearOfEra.get(millis));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,381,millis += oneDay;

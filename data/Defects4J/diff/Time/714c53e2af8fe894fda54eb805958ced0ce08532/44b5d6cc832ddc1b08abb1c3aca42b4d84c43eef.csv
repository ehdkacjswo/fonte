is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,165,f (val2 == 0) {
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,165,if (val1 == 1) {
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,166,return val2;
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,168,if (val1 == 0 || val2 == 0) {
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,169,f (total / val2 != val1) {
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,170,hrow new ArithmeticException
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,171,"""The calculation caused an overflow: "" + val1 + "" * "" + val2);"
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,172,if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,173,"throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,193,public void testSafeMultiplyLongLong() {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,194,"assertEquals(0L, FieldUtils.safeMultiply(0L, 0L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,196,"assertEquals(1L, FieldUtils.safeMultiply(1L, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,197,"assertEquals(3L, FieldUtils.safeMultiply(1L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,198,"assertEquals(3L, FieldUtils.safeMultiply(3L, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,200,"assertEquals(6L, FieldUtils.safeMultiply(2L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,201,"assertEquals(-6L, FieldUtils.safeMultiply(2L, -3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,202,"assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,203,"assertEquals(6L, FieldUtils.safeMultiply(-2L, -3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,205,"assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,206,"assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,207,"assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,209,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,210,"FieldUtils.safeMultiply(Long.MIN_VALUE, -1L);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,211,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,212,} catch (ArithmeticException e) {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,215,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,216,"FieldUtils.safeMultiply(-1L, Long.MIN_VALUE);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,217,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,218,} catch (ArithmeticException e) {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,221,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,222,"FieldUtils.safeMultiply(Long.MIN_VALUE, 100L);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,223,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,224,} catch (ArithmeticException e) {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,227,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,228,"FieldUtils.safeMultiply(Long.MIN_VALUE, Long.MAX_VALUE);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,229,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,230,} catch (ArithmeticException e) {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,233,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,234,"FieldUtils.safeMultiply(Long.MAX_VALUE, Long.MIN_VALUE);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,235,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,236,} catch (ArithmeticException e) {

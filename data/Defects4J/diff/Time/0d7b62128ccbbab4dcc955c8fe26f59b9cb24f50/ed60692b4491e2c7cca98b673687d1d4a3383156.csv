is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,258,"* Adds a value (which may be negative) to the partial instant,"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,259,* wrapping within this field.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,260,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,261,* The value will be added to this field. If the value is too large to be
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,262,* added solely to this field then it wraps. Larger fields are always
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,263,"* unaffected. Smaller fields should be unaffected, except where the"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,264,* result would be an invalid value for a smaller field. In this case the
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,265,* smaller field is adjusted to be in range.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,266,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,267,"* For example, in the ISO chronology:<br>"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,268,* 2000-08-20 addInField six months is 2000-02-20<br>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,269,* 2000-08-20 addInField twenty months is 2000-04-20<br>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,270,* 2000-08-20 addInField minus nine months is 2000-11-20<br>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,271,* 2001-01-31 addInField one month  is 2001-02-28<br>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,272,* 2001-01-31 addInField two months is 2001-03-31<br>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,274,* @param instant  the partial instant
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,275,* @param fieldIndex  the index of this field in the instant
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,276,* @param values  the values of the partial instant which should be updated
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,277,"* @param valueToAdd  the value to add, in the units of the field"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,278,* @return the passed in values
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,279,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,281,"public abstract int[] addInField(PartialInstant instant, int fieldIndex, int[] values, int valueToAdd);"
True,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,59,import org.joda.time.partial.PartialInstant;
False,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,80, Get the year of era component of the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,82, @param instant  the time instant in millis to query.
False,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,83, @return the year of era extracted from the input.
False,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,94, Add the specified year to the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,95, The amount added may be negative.
False,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,97, @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,98, @param years  the years to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,99, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,110, Add to the year component of the specified time instant
False,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,111, wrapping around within that component if necessary.
False,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,113, @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,114, @param years  the years to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,115, @return the updated time instant.
True,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,100,"public int[] addInField(PartialInstant instant, int fieldIndex, int[] values, int years) {"
True,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,101,"return getWrappedField().addInField(instant, fieldIndex, values, years);"
True,JodaTime/src/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,59,import org.joda.time.partial.PartialInstant;
True,JodaTime/src/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,102,"public int[] addInField(PartialInstant instant, int fieldIndex, int[] values, int years) {"
True,JodaTime/src/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,103,"return getWrappedField().addInField(instant, fieldIndex, values, years);"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,285,"* Adds a value (which may be negative) to the partial instant,"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,286,* wrapping within this field.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,287,* <p>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,288,* The value will be added to this field. If the value is too large to be
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,289,* added solely to this field then it wraps. Larger fields are always
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,290,"* unaffected. Smaller fields should be unaffected, except where the"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,291,* result would be an invalid value for a smaller field. In this case the
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,292,* smaller field is adjusted to be in range.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,293,* <p>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,294,"* For example, in the ISO chronology:<br>"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,295,* 2000-08-20 addInField six months is 2000-02-20<br>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,296,* 2000-08-20 addInField twenty months is 2000-04-20<br>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,297,* 2000-08-20 addInField minus nine months is 2000-11-20<br>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,298,* 2001-01-31 addInField one month  is 2001-02-28<br>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,299,* 2001-01-31 addInField two months is 2001-03-31<br>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,300,* <p>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,301,* The default implementation internally calls set. Subclasses are
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,302,* encouraged to provide a more efficient implementation.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,304,* @param instant  the partial instant
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,305,* @param fieldIndex  the index of this field in the instant
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,306,* @param values  the values of the partial instant which should be updated
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,307,"* @param valueToAdd  the value to add, in the units of the field"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,308,* @return the passed in values
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,309,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,311,"public int[] addInField(PartialInstant instant, int fieldIndex, int[] values, int valueToAdd) {"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,312,int current = values[fieldIndex];
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,313,int wrapped = FieldUtils.getWrappedValue
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,314,"(current, valueToAdd, getMinimumValue(instant), getMaximumValue(instant));"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,315,"return set(instant, fieldIndex, values, wrapped);"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,176,"public int[] addInField(PartialInstant instant, int fieldIndex, int[] values, int valueToAdd) {"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,177,"return iField.addInField(instant, fieldIndex, values, valueToAdd);"
True,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,105,"public int[] addInField(PartialInstant instant, int fieldIndex, int[] values, int valueToAdd) {"
True,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,106,"return getWrappedField().addInField(instant, fieldIndex, values, valueToAdd);"
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,215,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,217,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,219,"public int[] addInField(PartialInstant instant, int fieldIndex, int[] values, int valueToAdd) {"
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,220,throw unsupported();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,77, <li>numeric value
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,78, <li>text value
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,79, <li>short text value
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,80, <li>maximum/minimum values
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,81, <li>add/subtract
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,82, <li>set
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,83, <li>rounding
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,77,* <li>numeric value - <code>hourOfDay().get()</code>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,78,* <li>text value - <code>hourOfDay().getAsText()</code>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,79,* <li>short text value - <code>hourOfDay().getAsShortText()</code>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,80,* <li>maximum/minimum values - <code>hourOfDay().getMaximumValue()</code>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,81,* <li>add/subtract - <code>hourOfDay().addToCopy()</code>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,82,* <li>set - <code>hourOfDay().setCopy()</code>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,476,"//        * Instead, a new instance is returned."
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,488,"/         * Adds to this field, possibly wrapped, in a copy of this TimeOfDay."
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,489,/         * A wrapped operation only changes this field.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,490,/         * Thus 12:59:00 addWrapped one minute goes to 12:00:00.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,491,/         * <p>
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,492,/         * The TimeOfDay attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,494,/         * @param value  the value to add to the field in the copy
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,495,/         * @return a copy of the TimeOfDay with the field value changed
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,496,/         * @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,498,/        public TimeOfDay addWrappedToCopy(int value) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,499,"/            int[] newValues = getField().addWrapped(getInstant(), value);"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,500,"/            return new TimeOfDay(getInstant(), newValues);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,488,* Adds to the value of this field in a copy of this TimeOfDay wrapping
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,489,* within this field if the maximum value is reached.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,490,* <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,491,* The value will be added to this field. If the value is too large to be
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,492,* added solely to this field then it wraps. Larger fields are always
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,493,"* unaffected. Smaller fields should be unaffected, except where the"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,494,* result would be an invalid value for a smaller field. In this case the
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,495,* smaller field is adjusted to be in range.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,496,* <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,497,"* For example,"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,498,* <code>12:59:37</code> addInField one minute returns <code>12:00:37</code>.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,499,* <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,500,* The TimeOfDay attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,501,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,503,* @param valueToAdd  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,504,* @return a copy of the TimeOfDay with the field value changed
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,505,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,507,public TimeOfDay addInFieldCopy(int valueToAdd) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,508,int[] newValues = iInstant.getValues();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,509,"getField().addInField(iInstant, iFieldIndex, newValues, valueToAdd);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,510,"return new TimeOfDay(iInstant, newValues);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,518,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,534,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,551,"* Instead, a new instance is returned."
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,570,public void testPropertyAddInField() {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,571,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,572,TimeOfDay updated = test.hourOfDay().addInFieldCopy(9);
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,573,"assertEquals(19, updated.getHourOfDay());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,574,"assertEquals(20, updated.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,575,"assertEquals(30, updated.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,576,"assertEquals(40, updated.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,577,updated = updated.hourOfDay().addInFieldCopy(9);
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,578,"assertEquals(4, updated.getHourOfDay());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,579,"assertEquals(20, updated.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,580,"assertEquals(30, updated.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,581,"assertEquals(40, updated.getMillisOfSecond());"

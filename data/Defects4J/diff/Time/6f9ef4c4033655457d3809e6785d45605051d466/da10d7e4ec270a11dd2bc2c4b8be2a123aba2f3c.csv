is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,202,* Gets the interval handling null.
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,203,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,204,"* If the interval is <code>null</code>, an interval representing now"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,205,* to now in the {@link ISOChronology#getInstance() ISOChronology}
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,206,"* will be returned. Otherwise, the interval specified is returned."
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,208,"* @param interval  the interval to use, null means now to now"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,209,"* @return the interval, never null"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,211,public static final ReadableInterval getReadableInterval(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,212,if (interval == null) {
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,213,long now = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,214,"interval = new Interval(now, now);"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,216,return interval;
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,180, Gets the interval where this interval and that specified overlap.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,180,* Gets the overlap where this interval and that specified.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,181,* <p>
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,182,"* Any two intervals can overlap, abut, or have a gap between them."
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,183,"* This method returns the amount of the overlap, only if the"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,184,* intervals do overlap.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,185,"* If the intervals do not overlap, then null is returned."
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,187,f (interval == null) {
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,188,ong now = DateTimeUtils.currentTimeMillis();
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,189,"nterval = new Interval(now, now);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,192,interval = DateTimeUtils.getReadableInterval(interval);
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,203,* Gets the gap between this interval and that specified.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,204,* <p>
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,205,"* Any two intervals can overlap, abut, or have a gap between them."
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,206,* This method returns the amount of the gap only if the
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,207,* intervals do actually have a gap between them.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,208,"* If the intervals overlap or abut, then null is returned."
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,210,"* @param interval  the interval to examine, null means now"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,211,"* @return the gap interval, null if no gap"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,212,* @since 1.1
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,214,public Interval gap(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,215,interval = DateTimeUtils.getReadableInterval(interval);
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,216,if (overlaps(interval) || abuts(interval)) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,217,return null;
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,219,long otherStart = interval.getStartMillis();
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,220,long otherEnd = interval.getEndMillis();
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,221,long thisStart = getStartMillis();
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,222,long thisEnd = getEndMillis();
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,223,if (thisStart >= otherEnd) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,224,"return new Interval(otherEnd, thisStart);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,225,} else {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,226,"return new Interval(thisEnd, otherStart);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,232,* Does this interval abut with the interval specified.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,233,* <p>
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,234,"* An interval abuts if it starts immediately after, or"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,235,* ends immediately before this interval without overlap.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,237,"* @param interval  the interval to examine, null means now"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,238,* @return true if the interval abuts
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,239,* @since 1.1
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,241,public boolean abuts(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,242,interval = DateTimeUtils.getReadableInterval(interval);
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,243,return (interval.getEndMillis() == getStartMillis() ||
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,244,getEndMillis() == interval.getStartMillis());
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,335,public void testGetReadableInterval_ReadableInterval() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,336,"ReadableInterval input = new Interval(0, 100L);"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,337,"assertEquals(input, DateTimeUtils.getReadableInterval(input));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,339,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,340,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,341,"assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME_NOW), DateTimeUtils.getReadableInterval(null));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,342,} finally {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,343,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,327,public void testGap_RInterval() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,328,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,330,assertEquals(
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,331,"new Interval(TEST_TIME2, TEST_TIME2 + 2),"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,332,"test.gap(new Interval(TEST_TIME2 + 2, TEST_TIME2 + 4)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,333,assertEquals(
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,334,"null,"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,335,"test.gap(new Interval(TEST_TIME2, TEST_TIME2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,337,assertEquals(
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,338,"new Interval(TEST_TIME1 - 2, TEST_TIME1),"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,339,"test.gap(new Interval(TEST_TIME1 - 4, TEST_TIME1 - 2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,340,assertEquals(
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,341,"null,"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,342,"test.gap(new Interval(TEST_TIME1 - 2, TEST_TIME1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,344,assertEquals(
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,345,"null,"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,346,"test.gap(new Interval(TEST_TIME1, TEST_TIME2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,347,assertEquals(
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,348,"null,"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,349,"test.gap(new Interval(TEST_TIME1 + 1, TEST_TIME2 - 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,353,public void testAbuts_RInterval() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,354,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,356,assertEquals(
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,357,"false,"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,358,"test.abuts(new Interval(TEST_TIME2 + 2, TEST_TIME2 + 4)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,359,assertEquals(
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,360,"true,"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,361,"test.abuts(new Interval(TEST_TIME2, TEST_TIME2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,363,assertEquals(
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,364,"false,"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,365,"test.abuts(new Interval(TEST_TIME1 - 4, TEST_TIME1 - 2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,366,assertEquals(
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,367,"true,"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,368,"test.abuts(new Interval(TEST_TIME1 - 2, TEST_TIME1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,370,assertEquals(
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,371,"false,"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,372,"test.abuts(new Interval(TEST_TIME1, TEST_TIME2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,373,assertEquals(
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,374,"false,"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,375,"test.abuts(new Interval(TEST_TIME1 + 1, TEST_TIME2 - 1)));"

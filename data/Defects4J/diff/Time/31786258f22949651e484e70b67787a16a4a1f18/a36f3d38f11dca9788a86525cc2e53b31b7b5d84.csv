is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/test/org/joda/time/field/TestAll.java,JodaTime/src/test/org/joda/time/field/TestAll.java,84,suite.addTest(TestOffsetDateTimeField.suite());
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,63,import org.joda.time.DateTimeField;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,68,import org.joda.time.base.BasePartial;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,246,"values = new int[] {0, 0};"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,247,try {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,248,"field.add(new MockPartial(), 0, values, 1000);"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,249,fail();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,250,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,252,"values = new int[] {1, 0};"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,253,try {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,254,"field.add(new MockPartial(), 0, values, -1000);"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,255,fail();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,256,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,638,static class MockPartial extends BasePartial {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,639,"protected DateTimeField getField(int index, Chronology chrono) {"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,640,if (index == 0) {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,641,return Chronology.getISOUTC().minuteOfHour();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,643,if (index == 1) {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,644,return Chronology.getISOUTC().millisOfSecond();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,646,return null;
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,648,public int size() {
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,649,return 2;
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,10,* are met:
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,54,package org.joda.time.field;
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,56,import java.util.Arrays;
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,57,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,59,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,60,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,62,import org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,63,import org.joda.time.DateTimeFieldType;
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,64,import org.joda.time.DurationField;
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,65,import org.joda.time.TimeOfDay;
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,68,* This class is a Junit unit test for PreciseDateTimeField.
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,70,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,72,public class TestOffsetDateTimeField extends TestCase {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,74,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,75,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,78,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,79,return new TestSuite(TestOffsetDateTimeField.class);
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,82,public TestOffsetDateTimeField(String name) {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,83,super(name);
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,86,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,89,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,93,public void test_constructor1() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,94,OffsetDateTimeField field = new OffsetDateTimeField(
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,95,"Chronology.getISO().secondOfMinute(), 3"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,97,"assertEquals(DateTimeFieldType.secondOfMinute(), field.getType());"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,98,"assertEquals(3, field.getOffset());"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,100,try {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,101,"field = new OffsetDateTimeField(null, 3);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,102,fail();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,103,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,105,try {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,106,"field = new OffsetDateTimeField(Chronology.getISO().secondOfMinute(), 0);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,107,fail();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,108,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,111,public void test_constructor2() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,112,OffsetDateTimeField field = new OffsetDateTimeField(
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,113,"Chronology.getISO().secondOfMinute(), DateTimeFieldType.secondOfDay(), 3"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,115,"assertEquals(DateTimeFieldType.secondOfDay(), field.getType());"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,116,"assertEquals(3, field.getOffset());"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,118,try {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,119,"field = new OffsetDateTimeField(null, DateTimeFieldType.secondOfDay(), 3);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,120,fail();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,121,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,123,try {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,124,"field = new OffsetDateTimeField(Chronology.getISO().secondOfMinute(), null, 3);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,125,fail();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,126,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,128,try {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,129,"field = new OffsetDateTimeField(Chronology.getISO().secondOfMinute(), DateTimeFieldType.secondOfDay(), 0);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,130,fail();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,131,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,134,public void test_getType() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,135,OffsetDateTimeField field = new OffsetDateTimeField(
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,136,"Chronology.getISO().secondOfMinute(), 3"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,138,"assertEquals(DateTimeFieldType.secondOfMinute(), field.getType());"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,141,public void test_getName() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,142,OffsetDateTimeField field = new OffsetDateTimeField(
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,143,"Chronology.getISO().secondOfMinute(), 3"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,145,"assertEquals(""secondOfMinute"", field.getName());"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,148,public void test_toString() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,149,OffsetDateTimeField field = new OffsetDateTimeField(
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,150,"Chronology.getISO().secondOfMinute(), 3"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,152,"assertEquals(""DateTimeField[secondOfMinute]"", field.toString());"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,155,public void test_isSupported() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,156,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,157,"assertEquals(true, field.isSupported());"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,160,public void test_getOffset() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,161,OffsetDateTimeField field = new OffsetDateTimeField(
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,162,"Chronology.getISO().secondOfMinute(), 5"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,164,"assertEquals(5, field.getOffset());"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,167,public void test_get() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,168,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,169,"assertEquals(0 + 3, field.get(0));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,170,"assertEquals(6 + 3, field.get(6000));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,174,public void test_getAsText_long_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,175,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,176,"assertEquals(""32"", field.getAsText(1000L * 29, Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,177,"assertEquals(""32"", field.getAsText(1000L * 29, null));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,180,public void test_getAsText_long() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,181,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,182,"assertEquals(""32"", field.getAsText(1000L * 29));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,185,public void test_getAsText_RP_int_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,186,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,187,"assertEquals(""20"", field.getAsText(new TimeOfDay(12, 30, 40, 50), 20, Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,188,"assertEquals(""20"", field.getAsText(new TimeOfDay(12, 30, 40, 50), 20, null));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,191,public void test_getAsText_RP_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,192,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,193,"assertEquals(""40"", field.getAsText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,194,"assertEquals(""40"", field.getAsText(new TimeOfDay(12, 30, 40, 50), null));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,197,public void test_getAsText_int_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,198,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,199,"assertEquals(""80"", field.getAsText(80, Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,200,"assertEquals(""80"", field.getAsText(80, null));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,204,public void test_getAsShortText_long_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,205,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,206,"assertEquals(""32"", field.getAsShortText(1000L * 29, Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,207,"assertEquals(""32"", field.getAsShortText(1000L * 29, null));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,210,public void test_getAsShortText_long() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,211,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,212,"assertEquals(""32"", field.getAsShortText(1000L * 29));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,215,public void test_getAsShortText_RP_int_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,216,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,217,"assertEquals(""20"", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), 20, Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,218,"assertEquals(""20"", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), 20, null));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,221,public void test_getAsShortText_RP_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,222,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,223,"assertEquals(""40"", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,224,"assertEquals(""40"", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), null));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,227,public void test_getAsShortText_int_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,228,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,229,"assertEquals(""80"", field.getAsShortText(80, Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,230,"assertEquals(""80"", field.getAsShortText(80, null));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,234,public void test_add_long_int() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,235,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,236,"assertEquals(1001, field.add(1L, 1));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,239,public void test_add_long_long() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,240,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,241,"assertEquals(1001, field.add(1L, 1L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,244,public void test_add_RP_int_intarray_int() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,245,"int[] values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,246,"int[] expected = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,247,OffsetDateTimeField field = new MockStandardDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,248,"int[] result = field.add(new TimeOfDay(), 2, values, 0);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,249,"assertEquals(true, Arrays.equals(expected, result));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,251,"values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,252,"expected = new int[] {10, 20, 31, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,253,"result = field.add(new TimeOfDay(), 2, values, 1);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,254,"assertEquals(true, Arrays.equals(expected, result));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,256,"values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,257,"expected = new int[] {10, 20, 62, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,258,"result = field.add(new TimeOfDay(), 2, values, 32);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,259,"assertEquals(true, Arrays.equals(expected, result));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,261,"values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,262,"expected = new int[] {10, 21, 3, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,263,"result = field.add(new TimeOfDay(), 2, values, 33);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,264,"assertEquals(true, Arrays.equals(expected, result));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,266,"values = new int[] {23, 59, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,267,try {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,268,"field.add(new TimeOfDay(), 2, values, 33);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,269,fail();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,270,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,272,"values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,273,"expected = new int[] {10, 20, 29, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,274,"result = field.add(new TimeOfDay(), 2, values, -1);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,275,"assertEquals(true, Arrays.equals(expected, result));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,277,"values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,278,"expected = new int[] {10, 19, 59, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,279,"result = field.add(new TimeOfDay(), 2, values, -31);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,280,"assertEquals(true, Arrays.equals(expected, result));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,282,"values = new int[] {0, 0, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,283,try {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,284,"field.add(new TimeOfDay(), 2, values, -31);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,285,fail();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,286,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,290,public void test_addWrapField_long_int() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,291,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,292,"assertEquals(29 * 1000L, field.addWrapField(1000L * 29, 0));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,293,"assertEquals(59 * 1000L, field.addWrapField(1000L * 29, 30));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,294,"assertEquals(0L, field.addWrapField(1000L * 29, 31));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,297,public void test_addWrapField_RP_int_intarray_int() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,298,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,299,"int[] values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,300,"int[] expected = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,301,"int[] result = field.addWrapField(new TimeOfDay(), 2, values, 0);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,302,"assertEquals(true, Arrays.equals(result, expected));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,304,"values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,305,"expected = new int[] {10, 20, 59, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,306,"result = field.addWrapField(new TimeOfDay(), 2, values, 29);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,307,"assertEquals(true, Arrays.equals(result, expected));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,309,"values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,310,"expected = new int[] {10, 20, 3, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,311,"result = field.addWrapField(new TimeOfDay(), 2, values, 33);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,312,"assertEquals(true, Arrays.equals(result, expected));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,316,public void test_getDifference_long_long() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,317,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,318,"assertEquals(-21, field.getDifference(20000L, 41000L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,321,public void test_getDifferenceAsLong_long_long() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,322,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,323,"assertEquals(-21L, field.getDifferenceAsLong(20000L, 41000L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,327,public void test_set_long_int() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,328,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,329,"assertEquals(3120L, field.set(2120L, 6));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,330,"assertEquals(26120L, field.set(120L, 29));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,331,"assertEquals(57120L, field.set(2120L, 60));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,334,public void test_set_RP_int_intarray_int() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,335,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,336,"int[] values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,337,"int[] expected = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,338,"int[] result = field.set(new TimeOfDay(), 2, values, 30);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,339,"assertEquals(true, Arrays.equals(result, expected));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,341,"values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,342,"expected = new int[] {10, 20, 29, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,343,"result = field.set(new TimeOfDay(), 2, values, 29);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,344,"assertEquals(true, Arrays.equals(result, expected));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,346,"values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,347,"expected = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,348,try {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,349,"field.set(new TimeOfDay(), 2, values, 63);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,350,fail();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,351,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,352,"assertEquals(true, Arrays.equals(values, expected));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,354,"values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,355,"expected = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,356,try {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,357,"field.set(new TimeOfDay(), 2, values, 2);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,358,fail();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,359,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,360,"assertEquals(true, Arrays.equals(values, expected));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,363,public void test_set_long_String_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,364,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,365,"assertEquals(3050L, field.set(50L, ""6"", null));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,366,"assertEquals(26050L, field.set(50L, ""29"", Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,369,public void test_set_long_String() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,370,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,371,"assertEquals(3050L, field.set(50L, ""6""));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,372,"assertEquals(26050L, field.set(50L, ""29""));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,375,public void test_set_RP_int_intarray_String_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,376,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,377,"int[] values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,378,"int[] expected = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,379,"int[] result = field.set(new TimeOfDay(), 2, values, ""30"", null);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,380,"assertEquals(true, Arrays.equals(result, expected));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,382,"values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,383,"expected = new int[] {10, 20, 29, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,384,"result = field.set(new TimeOfDay(), 2, values, ""29"", Locale.ENGLISH);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,385,"assertEquals(true, Arrays.equals(result, expected));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,387,"values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,388,"expected = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,389,try {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,390,"field.set(new TimeOfDay(), 2, values, ""63"", null);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,391,fail();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,392,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,393,"assertEquals(true, Arrays.equals(values, expected));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,395,"values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,396,"expected = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,397,try {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,398,"field.set(new TimeOfDay(), 2, values, ""2"", null);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,399,fail();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,400,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,401,"assertEquals(true, Arrays.equals(values, expected));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,404,public void test_convertText() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,405,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,406,"assertEquals(0, field.convertText(""0"", null));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,407,"assertEquals(29, field.convertText(""29"", null));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,408,try {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,409,"field.convertText(""2A"", null);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,410,fail();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,411,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,412,try {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,413,"field.convertText(null, null);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,414,fail();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,415,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,419,//    public abstract DurationField getDurationField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,421,//    public abstract DurationField getRangeDurationField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,423,public void test_isLeap_long() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,424,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,425,"assertEquals(false, field.isLeap(0L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,428,public void test_getLeapAmount_long() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,429,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,430,"assertEquals(0, field.getLeapAmount(0L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,433,public void test_getLeapDurationField() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,434,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,435,"assertEquals(null, field.getLeapDurationField());"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,439,public void test_getMinimumValue() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,440,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,441,"assertEquals(3, field.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,444,public void test_getMinimumValue_long() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,445,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,446,"assertEquals(3, field.getMinimumValue(0L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,449,public void test_getMinimumValue_RP() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,450,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,451,"assertEquals(3, field.getMinimumValue(new TimeOfDay()));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,454,public void test_getMinimumValue_RP_intarray() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,455,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,456,"assertEquals(3, field.getMinimumValue(new TimeOfDay(), new int[4]));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,459,public void test_getMaximumValue() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,460,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,461,"assertEquals(62, field.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,464,public void test_getMaximumValue_long() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,465,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,466,"assertEquals(62, field.getMaximumValue(0L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,469,public void test_getMaximumValue_RP() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,470,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,471,"assertEquals(62, field.getMaximumValue(new TimeOfDay()));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,474,public void test_getMaximumValue_RP_intarray() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,475,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,476,"assertEquals(62, field.getMaximumValue(new TimeOfDay(), new int[4]));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,480,public void test_getMaximumTextLength_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,481,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,482,"assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,485,public void test_getMaximumShortTextLength_Locale() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,486,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,487,"assertEquals(2, field.getMaximumShortTextLength(Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,491,public void test_roundFloor_long() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,492,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,493,"assertEquals(-2000L, field.roundFloor(-1001L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,494,"assertEquals(-1000L, field.roundFloor(-1000L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,495,"assertEquals(-1000L, field.roundFloor(-999L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,496,"assertEquals(-1000L, field.roundFloor(-1L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,497,"assertEquals(0L, field.roundFloor(0L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,498,"assertEquals(0L, field.roundFloor(1L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,499,"assertEquals(0L, field.roundFloor(499L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,500,"assertEquals(0L, field.roundFloor(500L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,501,"assertEquals(0L, field.roundFloor(501L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,502,"assertEquals(1000L, field.roundFloor(1000L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,505,public void test_roundCeiling_long() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,506,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,507,"assertEquals(-1000L, field.roundCeiling(-1001L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,508,"assertEquals(-1000L, field.roundCeiling(-1000L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,509,"assertEquals(0L, field.roundCeiling(-999L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,510,"assertEquals(0L, field.roundCeiling(-1L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,511,"assertEquals(0L, field.roundCeiling(0L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,512,"assertEquals(1000L, field.roundCeiling(1L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,513,"assertEquals(1000L, field.roundCeiling(499L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,514,"assertEquals(1000L, field.roundCeiling(500L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,515,"assertEquals(1000L, field.roundCeiling(501L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,516,"assertEquals(1000L, field.roundCeiling(1000L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,519,public void test_roundHalfFloor_long() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,520,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,521,"assertEquals(0L, field.roundHalfFloor(0L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,522,"assertEquals(0L, field.roundHalfFloor(499L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,523,"assertEquals(0L, field.roundHalfFloor(500L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,524,"assertEquals(1000L, field.roundHalfFloor(501L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,525,"assertEquals(1000L, field.roundHalfFloor(1000L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,528,public void test_roundHalfCeiling_long() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,529,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,530,"assertEquals(0L, field.roundHalfCeiling(0L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,531,"assertEquals(0L, field.roundHalfCeiling(499L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,532,"assertEquals(1000L, field.roundHalfCeiling(500L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,533,"assertEquals(1000L, field.roundHalfCeiling(501L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,534,"assertEquals(1000L, field.roundHalfCeiling(1000L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,537,public void test_roundHalfEven_long() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,538,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,539,"assertEquals(0L, field.roundHalfEven(0L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,540,"assertEquals(0L, field.roundHalfEven(499L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,541,"assertEquals(0L, field.roundHalfEven(500L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,542,"assertEquals(1000L, field.roundHalfEven(501L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,543,"assertEquals(1000L, field.roundHalfEven(1000L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,544,"assertEquals(1000L, field.roundHalfEven(1499L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,545,"assertEquals(2000L, field.roundHalfEven(1500L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,546,"assertEquals(2000L, field.roundHalfEven(1501L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,549,public void test_remainder_long() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,550,OffsetDateTimeField field = new MockOffsetDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,551,"assertEquals(0L, field.remainder(0L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,552,"assertEquals(499L, field.remainder(499L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,553,"assertEquals(500L, field.remainder(500L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,554,"assertEquals(501L, field.remainder(501L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,555,"assertEquals(0L, field.remainder(1000L));"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,559,static class MockOffsetDateTimeField extends OffsetDateTimeField {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,560,protected MockOffsetDateTimeField() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,561,"super(Chronology.getISO().secondOfMinute(), 3);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,565,static class MockStandardDateTimeField extends MockOffsetDateTimeField {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,566,protected MockStandardDateTimeField() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,567,super();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,569,public DurationField getDurationField() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,570,return Chronology.getISOUTC().seconds();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,572,public DurationField getRangeDurationField() {
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,573,return Chronology.getISOUTC().minutes();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,167,public void test_getRange() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,168,PreciseDateTimeField field = new MockPreciseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,169,"assertEquals(60, field.getRange());"
False,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,168,aseDateTimeField field = new MockPreciseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,173,PreciseDateTimeField field = new MockPreciseDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java,138,public void test_isLenient() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java,139,BaseDateTimeField field = new MockPreciseDurationDateTimeField();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java,140,"assertEquals(false, field.isLenient());"

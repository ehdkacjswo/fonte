is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,80,/** Constant for midnight. */
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,81,"public static final LocalTime MIDNIGHT = new LocalTime(0, 0, 0, 0);"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,99,** The chronology to use in UTC */
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,102,"/** The chronology to use, in UTC */"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,144,* Constructs a LocalTime from the specified millis of day using the
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,145,* ISO chronology.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,146,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,147,"* The millisOfDay value may exceed the number of millis in one day,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,148,* but additional days will be ignored.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,149,* This method uses the UTC time zone internally.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,151,* @param millisOfDay  the number of milliseconds into a day to convert
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,153,public static LocalTime fromMillisOfDay(long millisOfDay) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,154,"return fromMillisOfDay(millisOfDay, null);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,158,* Constructs a LocalTime from the specified millis of day using the
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,159,* specified chronology.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,160,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,161,"* The millisOfDay value may exceed the number of millis in one day,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,162,* but additional days will be ignored.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,163,* This method uses the UTC time zone internally.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,165,* @param millisOfDay  the number of milliseconds into a day to convert
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,166,"* @param chrono  the chronology, null means ISO chronology"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,168,"public static LocalTime fromMillisOfDay(long millisOfDay, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,169,chrono = DateTimeUtils.getChronology(chrono).withUTC();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,170,"return new LocalTime(millisOfDay, chrono);"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,387,"ourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,421,"0L, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,435," @param index  the index, zero to two"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,469,"* @param index  the index, zero to three"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,939, Get the hour of day field value.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,973,"* Sets the hour of day field in a copy of this LocalTime, leaving this"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,974,* instance unchanged.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,975,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,976,"* LocalTime is immutable, so there are no set methods."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,977,"* Instead, this method returns a new instance with the value of"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,978,* hour of day changed.
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,941, @param hour  the hour of day
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,980,* @param hour  the hour of day to set
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,981,* @return a copy of this object with the field set
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,982,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,943,ublic void withHourOfDay(int hour) {
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,944,"etChronology().hourOfDay().set(getLocalMillis(), hour);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,984,public LocalTime withHourOfDay(int hour) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,985,"return withLocalMillis(getChronology().hourOfDay().set(getLocalMillis(), hour));"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,948, Get the minute of hour field value.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,989,"* Sets the minute of hour field in a copy of this LocalTime, leaving this"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,990,* instance unchanged.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,991,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,992,"* LocalTime is immutable, so there are no set methods."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,993,"* Instead, this method returns a new instance with the value of"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,994,* minute of hour changed.
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,950, @param minute  the minute of hour
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,996,* @param minute  the minute of hour to set
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,997,* @return a copy of this object with the field set
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,998,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,952,ublic void withMinuteOfHour(int minute) {
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,953,"etChronology().minuteOfHour().set(getLocalMillis(), minute);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1000,public LocalTime withMinuteOfHour(int minute) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1001,"return withLocalMillis(getChronology().minuteOfHour().set(getLocalMillis(), minute));"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,957, Get the second of minute field value.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1005,"* Sets the second of minute field in a copy of this LocalTime, leaving this"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1006,* instance unchanged.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1007,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1008,"* LocalTime is immutable, so there are no set methods."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1009,"* Instead, this method returns a new instance with the value of"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1010,* second of minute changed.
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,959, @param second  the second of minute
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1012,* @param second  the second of minute to set
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1013,* @return a copy of this object with the field set
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1014,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,961,ublic void withSecondOfMinute(int second) {
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,962,"etChronology().secondOfMinute().set(getLocalMillis(), second);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1016,public LocalTime withSecondOfMinute(int second) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1017,"return withLocalMillis(getChronology().secondOfMinute().set(getLocalMillis(), second));"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,966, Get the millis of second field value.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1021,"* Sets the millis of second field in a copy of this LocalTime, leaving this"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1022,* instance unchanged.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1023,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1024,"* LocalTime is immutable, so there are no set methods."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1025,"* Instead, this method returns a new instance with the value of"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1026,* millis of second changed.
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,968, @param millis  the millis of second
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1028,* @param millis  the millis of second to set
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1029,* @return a copy of this object with the field set
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1030,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,970,ublic void withMillisOfSecond(int millis) {
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,971,"etChronology().millisOfSecond().set(getLocalMillis(), millis);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1032,public LocalTime withMillisOfSecond(int millis) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1033,"return withLocalMillis(getChronology().millisOfSecond().set(getLocalMillis(), millis));"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1075,* Converts this LocalTime to a full datetime using the default time zone
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1076,* setting the time fields from this instance and the date fields from
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1077,* the current date.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1079,* @return this time as a datetime using todays date
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1081,public DateTime toDateTimeTodayDefaultZone() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1082,return toDateTimeToday(null);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1086,* Converts this LocalTime to a full datetime using the specified time zone
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1087,* setting the time fields from this instance and the date fields from
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1088,* the current time.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1089,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1090,* This method uses the chronology from this instance plus the time zone
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1091,* specified.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1093,"* @param zone  the zone to use, null means default"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1094,* @return this time as a datetime using todays date
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1096,public DateTime toDateTimeToday(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1097,Chronology chrono = getChronology().withZone(zone);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1098,long instantMillis = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1099,"long resolved = chrono.set(this, instantMillis);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1100,"return new DateTime(resolved, chrono);"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1150, @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1165, @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1168,/ TODO
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1262,* Adds to this field in a copy of this LocalTime.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1263,* If the addition exceeds the maximum value (eg. 23:59) then
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1264,* an exception will be thrown.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1265,* Contrast this behaviour to {@link #plus(int)}.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1266,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1267,* The LocalTime attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1269,* @param value  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1270,* @return a copy of the LocalTime with the field value changed
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1271,* @throws IllegalArgumentException if the result is invalid
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1273,public LocalTime plusNoWrap(int value) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1274,"long millis = iField.add(iInstant.getLocalMillis(), value);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1275,long rounded = iInstant.getChronology().millisOfDay().get(millis);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1276,if (rounded != millis) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1277,"throw new IllegalArgumentException(""The addition exceeded the boundaries of LocalTime"");"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1279,return iInstant.withLocalMillis(millis);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,18,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,19,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,20,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,21,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,22,import java.util.Arrays;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,23,import java.util.Date;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,24,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,26,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,27,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,29,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,30,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,31,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,32,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,33,import org.joda.time.format.DateTimeFormat;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,34,import org.joda.time.format.DateTimeFormatter;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,37,* This class is a Junit unit test for LocalTime.
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,39,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,41,public class TestLocalTime_Basics extends TestCase {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,43,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,44,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,45,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,46,private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,47,private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,48,private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,49,private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,50,private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,51,private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,52,private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,53,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,54,private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,55,private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,56,private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,57,private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,59,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,60,10L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,61,+ 20L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,62,+ 30L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,63,+ 40L;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,65,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,66,1L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,67,+ 2L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,68,+ 3L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,69,+ 4L;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,71,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,72,1L * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,73,+ 5L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,74,+ 6L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,75,+ 7L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,76,+ 8L;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,78,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,80,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,81,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,84,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,85,return new TestSuite(TestLocalTime_Basics.class);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,88,public TestLocalTime_Basics(String name) {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,89,super(name);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,92,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,93,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,94,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,95,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,98,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,99,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,100,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,101,zone = null;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,105,public void testGet_DateTimeFieldType() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,106,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,107,"assertEquals(10, test.get(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,108,"assertEquals(20, test.get(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,109,"assertEquals(30, test.get(DateTimeFieldType.secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,110,"assertEquals(40, test.get(DateTimeFieldType.millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,111,"assertEquals(TEST_TIME_NOW / 60000 , test.get(DateTimeFieldType.minuteOfDay()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,112,"assertEquals(TEST_TIME_NOW / 1000 , test.get(DateTimeFieldType.secondOfDay()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,113,"assertEquals(TEST_TIME_NOW , test.get(DateTimeFieldType.millisOfDay()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,114,"assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,115,"assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,116,"test = new LocalTime(12, 30);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,117,"assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,118,"assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,119,"assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,120,"assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,121,"test = new LocalTime(14, 30);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,122,"assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,123,"assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,124,"assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,125,"assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,126,"test = new LocalTime(0, 30);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,127,"assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,128,"assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,129,"assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,130,"assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,131,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,132,test.get(null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,133,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,134,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,135,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,136,test.get(DateTimeFieldType.dayOfMonth());
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,137,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,138,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,141,public void testSize() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,142,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,143,"assertEquals(4, test.size());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,146,public void testGetFieldType_int() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,147,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,148,"assertSame(DateTimeFieldType.hourOfDay(), test.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,149,"assertSame(DateTimeFieldType.minuteOfHour(), test.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,150,"assertSame(DateTimeFieldType.secondOfMinute(), test.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,151,"assertSame(DateTimeFieldType.millisOfSecond(), test.getFieldType(3));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,152,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,153,test.getFieldType(-1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,154,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,155,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,156,test.getFieldType(5);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,157,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,160,public void testGetFieldTypes() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,161,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,162,DateTimeFieldType[] fields = test.getFieldTypes();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,163,"assertSame(DateTimeFieldType.hourOfDay(), fields[0]);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,164,"assertSame(DateTimeFieldType.minuteOfHour(), fields[1]);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,165,"assertSame(DateTimeFieldType.secondOfMinute(), fields[2]);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,166,"assertSame(DateTimeFieldType.millisOfSecond(), fields[3]);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,167,"assertNotSame(test.getFieldTypes(), test.getFieldTypes());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,170,public void testGetField_int() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,171,"LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,172,"assertSame(COPTIC_UTC.hourOfDay(), test.getField(0));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,173,"assertSame(COPTIC_UTC.minuteOfHour(), test.getField(1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,174,"assertSame(COPTIC_UTC.secondOfMinute(), test.getField(2));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,175,"assertSame(COPTIC_UTC.millisOfSecond(), test.getField(3));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,176,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,177,test.getField(-1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,178,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,179,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,180,test.getField(5);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,181,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,184,public void testGetFields() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,185,"LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,186,DateTimeField[] fields = test.getFields();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,187,"assertSame(COPTIC_UTC.hourOfDay(), fields[0]);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,188,"assertSame(COPTIC_UTC.minuteOfHour(), fields[1]);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,189,"assertSame(COPTIC_UTC.secondOfMinute(), fields[2]);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,190,"assertSame(COPTIC_UTC.millisOfSecond(), fields[3]);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,191,"assertNotSame(test.getFields(), test.getFields());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,194,public void testGetValue_int() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,195,"LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,196,"assertEquals(10, test.getValue(0));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,197,"assertEquals(20, test.getValue(1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,198,"assertEquals(30, test.getValue(2));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,199,"assertEquals(40, test.getValue(3));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,200,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,201,test.getValue(-1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,202,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,203,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,204,test.getValue(5);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,205,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,208,public void testGetValues() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,209,"LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,210,int[] values = test.getValues();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,211,"assertEquals(10, values[0]);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,212,"assertEquals(20, values[1]);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,213,"assertEquals(30, values[2]);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,214,"assertEquals(40, values[3]);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,215,"assertNotSame(test.getValues(), test.getValues());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,218,public void testIsSupported_DateTimeFieldType() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,219,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,220,"assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,221,"assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,222,"assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,223,"assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,224,"assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,225,"assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,226,"assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,228,"assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,229,"assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,230,"assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,231,"assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,233,"assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,234,"assertEquals(false, test.isSupported((DateTimeFieldType) null));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,237,public void testIsSupported_DurationFieldType() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,238,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,239,"assertEquals(true, test.isSupported(DurationFieldType.hours()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,240,"assertEquals(true, test.isSupported(DurationFieldType.minutes()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,241,"assertEquals(true, test.isSupported(DurationFieldType.seconds()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,242,"assertEquals(true, test.isSupported(DurationFieldType.millis()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,243,"assertEquals(true, test.isSupported(DurationFieldType.halfdays()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,245,"assertEquals(false, test.isSupported(DurationFieldType.days()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,246,"assertEquals(false, test.isSupported((DurationFieldType) null));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,249,public void testEqualsHashCode() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,250,"LocalTime test1 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,251,"LocalTime test2 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,252,"assertEquals(true, test1.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,253,"assertEquals(true, test2.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,254,"assertEquals(true, test1.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,255,"assertEquals(true, test2.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,256,"assertEquals(true, test1.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,257,"assertEquals(true, test1.hashCode() == test1.hashCode());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,258,"assertEquals(true, test2.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,260,"LocalTime test3 = new LocalTime(15, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,261,"assertEquals(false, test1.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,262,"assertEquals(false, test2.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,263,"assertEquals(false, test3.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,264,"assertEquals(false, test3.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,265,"assertEquals(false, test1.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,266,"assertEquals(false, test2.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,268,"assertEquals(false, test1.equals(""Hello""));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,269,"assertEquals(true, test1.equals(new TimeOfDay(10, 20, 30, 40, COPTIC_UTC)));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,270,"assertEquals(true, test1.equals(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,271,"assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,274,class MockInstant extends MockPartial {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,275,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,276,return COPTIC_UTC;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,278,public DateTimeField[] getFields() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,279,return new DateTimeField[] {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,280,"COPTIC_UTC.hourOfDay(),"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,281,"COPTIC_UTC.minuteOfHour(),"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,282,"COPTIC_UTC.secondOfMinute(),"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,283,"COPTIC_UTC.millisOfSecond(),"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,286,public int[] getValues() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,287,"return new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,292,public void testCompareTo() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,293,"LocalTime test1 = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,294,"LocalTime test1a = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,295,"assertEquals(0, test1.compareTo(test1a));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,296,"assertEquals(0, test1a.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,297,"assertEquals(0, test1.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,298,"assertEquals(0, test1a.compareTo(test1a));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,300,"LocalTime test2 = new LocalTime(10, 20, 35, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,301,"assertEquals(-1, test1.compareTo(test2));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,302,"assertEquals(+1, test2.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,304,"LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,305,"assertEquals(-1, test1.compareTo(test3));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,306,"assertEquals(+1, test3.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,307,"assertEquals(0, test3.compareTo(test2));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,309,DateTimeFieldType[] types = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,310,"DateTimeFieldType.hourOfDay(),"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,311,"DateTimeFieldType.minuteOfHour(),"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,312,"DateTimeFieldType.secondOfMinute(),"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,313,"DateTimeFieldType.millisOfSecond(),"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,315,"int[] values = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,316,"Partial p = new Partial(types, values);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,317,"assertEquals(0, test1.compareTo(p));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,318,"assertEquals(0, test1.compareTo(new TimeOfDay(10, 20, 30, 40)));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,319,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,320,test1.compareTo(null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,321,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,322,} catch (NullPointerException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,323,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,324,test1.compareTo(new Date());
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,325,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,326,} catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,330,public void testIsEqual_LocalTime() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,331,"LocalTime test1 = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,332,"LocalTime test1a = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,333,"assertEquals(true, test1.isEqual(test1a));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,334,"assertEquals(true, test1a.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,335,"assertEquals(true, test1.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,336,"assertEquals(true, test1a.isEqual(test1a));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,338,"LocalTime test2 = new LocalTime(10, 20, 35, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,339,"assertEquals(false, test1.isEqual(test2));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,340,"assertEquals(false, test2.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,342,"LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,343,"assertEquals(false, test1.isEqual(test3));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,344,"assertEquals(false, test3.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,345,"assertEquals(true, test3.isEqual(test2));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,347,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,348,"new LocalTime(10, 20, 35, 40).isEqual(null);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,349,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,350,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,354,public void testIsBefore_LocalTime() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,355,"LocalTime test1 = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,356,"LocalTime test1a = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,357,"assertEquals(false, test1.isBefore(test1a));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,358,"assertEquals(false, test1a.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,359,"assertEquals(false, test1.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,360,"assertEquals(false, test1a.isBefore(test1a));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,362,"LocalTime test2 = new LocalTime(10, 20, 35, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,363,"assertEquals(true, test1.isBefore(test2));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,364,"assertEquals(false, test2.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,366,"LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,367,"assertEquals(true, test1.isBefore(test3));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,368,"assertEquals(false, test3.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,369,"assertEquals(false, test3.isBefore(test2));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,371,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,372,"new LocalTime(10, 20, 35, 40).isBefore(null);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,373,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,374,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,378,public void testIsAfter_LocalTime() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,379,"LocalTime test1 = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,380,"LocalTime test1a = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,381,"assertEquals(false, test1.isAfter(test1a));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,382,"assertEquals(false, test1a.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,383,"assertEquals(false, test1.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,384,"assertEquals(false, test1a.isAfter(test1a));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,386,"LocalTime test2 = new LocalTime(10, 20, 35, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,387,"assertEquals(false, test1.isAfter(test2));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,388,"assertEquals(true, test2.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,390,"LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,391,"assertEquals(false, test1.isAfter(test3));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,392,"assertEquals(true, test3.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,393,"assertEquals(false, test3.isAfter(test2));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,395,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,396,"new LocalTime(10, 20, 35, 40).isAfter(null);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,397,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,398,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,402,public void testWithField_DateTimeFieldType_int_1() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,403,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,404,"LocalTime result = test.withField(DateTimeFieldType.hourOfDay(), 15);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,406,"assertEquals(new LocalTime(10, 20, 30, 40), test);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,407,"assertEquals(new LocalTime(15, 20, 30, 40), result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,410,public void testWithField_DateTimeFieldType_int_2() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,411,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,412,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,413,"test.withField(null, 6);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,414,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,415,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,418,public void testWithField_DateTimeFieldType_int_3() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,419,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,420,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,421,"test.withField(DateTimeFieldType.dayOfMonth(), 6);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,422,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,423,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,426,public void testWithField_DateTimeFieldType_int_4() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,427,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,428,"LocalTime result = test.withField(DateTimeFieldType.hourOfDay(), 10);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,429,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,433,public void testWithFieldAdded_DurationFieldType_int_1() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,434,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,435,"LocalTime result = test.withFieldAdded(DurationFieldType.hours(), 6);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,437,"assertEquals(new LocalTime(10, 20, 30, 40), test);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,438,"assertEquals(new LocalTime(16, 20, 30, 40), result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,441,public void testWithFieldAdded_DurationFieldType_int_2() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,442,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,443,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,444,"test.withFieldAdded(null, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,445,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,446,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,449,public void testWithFieldAdded_DurationFieldType_int_3() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,450,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,451,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,452,"test.withFieldAdded(null, 6);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,453,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,454,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,457,public void testWithFieldAdded_DurationFieldType_int_4() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,458,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,459,"LocalTime result = test.withFieldAdded(DurationFieldType.hours(), 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,460,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,463,public void testWithFieldAdded_DurationFieldType_int_5() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,464,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,465,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,466,"test.withFieldAdded(DurationFieldType.days(), 6);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,467,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,468,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,471,public void testWithFieldAdded_DurationFieldType_int_6() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,472,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,473,"LocalTime result = test.withFieldAdded(DurationFieldType.hours(), 16);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,475,"assertEquals(new LocalTime(10, 20, 30, 40), test);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,476,"assertEquals(new LocalTime(2, 20, 30, 40), result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,479,public void testWithFieldAdded_DurationFieldType_int_7() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,480,"LocalTime test = new LocalTime(23, 59, 59, 999);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,481,"LocalTime result = test.withFieldAdded(DurationFieldType.millis(), 1);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,482,"assertEquals(new LocalTime(0, 0, 0, 0), result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,484,"test = new LocalTime(23, 59, 59, 999);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,485,"result = test.withFieldAdded(DurationFieldType.seconds(), 1);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,486,"assertEquals(new LocalTime(0, 0, 0, 999), result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,488,"test = new LocalTime(23, 59, 59, 999);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,489,"result = test.withFieldAdded(DurationFieldType.minutes(), 1);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,490,"assertEquals(new LocalTime(0, 0, 59, 999), result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,492,"test = new LocalTime(23, 59, 59, 999);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,493,"result = test.withFieldAdded(DurationFieldType.hours(), 1);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,494,"assertEquals(new LocalTime(0, 59, 59, 999), result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,497,public void testWithFieldAdded_DurationFieldType_int_8() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,498,"LocalTime test = new LocalTime(0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,499,"LocalTime result = test.withFieldAdded(DurationFieldType.millis(), -1);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,500,"assertEquals(new LocalTime(23, 59, 59, 999), result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,502,"test = new LocalTime(0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,503,"result = test.withFieldAdded(DurationFieldType.seconds(), -1);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,504,"assertEquals(new LocalTime(23, 59, 59, 0), result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,506,"test = new LocalTime(0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,507,"result = test.withFieldAdded(DurationFieldType.minutes(), -1);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,508,"assertEquals(new LocalTime(23, 59, 0, 0), result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,510,"test = new LocalTime(0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,511,"result = test.withFieldAdded(DurationFieldType.hours(), -1);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,512,"assertEquals(new LocalTime(23, 0, 0, 0), result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,516,public void testPlus_RP() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,517,"LocalTime test = new LocalTime(10, 20, 30, 40, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,518,"LocalTime result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,519,"LocalTime expected = new LocalTime(15, 26, 37, 48, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,520,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,522,result = test.plus((ReadablePeriod) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,523,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,526,public void testPlusHours_int() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,527,"LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,528,LocalTime result = test.plusHours(1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,529,"LocalTime expected = new LocalTime(2, 2, 3, 4, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,530,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,532,result = test.plusHours(0);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,533,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,536,public void testPlusMinutes_int() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,537,"LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,538,LocalTime result = test.plusMinutes(1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,539,"LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,540,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,542,result = test.plusMinutes(0);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,543,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,546,public void testPlusSeconds_int() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,547,"LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,548,LocalTime result = test.plusSeconds(1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,549,"LocalTime expected = new LocalTime(1, 2, 4, 4, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,550,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,552,result = test.plusSeconds(0);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,553,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,556,public void testPlusMillis_int() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,557,"LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,558,LocalTime result = test.plusMillis(1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,559,"LocalTime expected = new LocalTime(1, 2, 3, 5, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,560,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,562,result = test.plusMillis(0);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,563,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,567,public void testMinus_RP() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,568,"LocalTime test = new LocalTime(10, 20, 30, 40, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,569,"LocalTime result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,570,"LocalTime expected = new LocalTime(9, 19, 29, 39, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,571,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,573,result = test.minus((ReadablePeriod) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,574,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,577,public void testMinusHours_int() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,578,"LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,579,LocalTime result = test.minusHours(1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,580,"LocalTime expected = new LocalTime(0, 2, 3, 4, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,581,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,583,result = test.minusHours(0);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,584,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,587,public void testMinusMinutes_int() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,588,"LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,589,LocalTime result = test.minusMinutes(1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,590,"LocalTime expected = new LocalTime(1, 1, 3, 4, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,591,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,593,result = test.minusMinutes(0);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,594,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,597,public void testMinusSeconds_int() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,598,"LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,599,LocalTime result = test.minusSeconds(1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,600,"LocalTime expected = new LocalTime(1, 2, 2, 4, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,601,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,603,result = test.minusSeconds(0);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,604,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,607,public void testMinusMillis_int() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,608,"LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,609,LocalTime result = test.minusMillis(1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,610,"LocalTime expected = new LocalTime(1, 2, 3, 3, BUDDHIST_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,611,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,613,result = test.minusMillis(0);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,614,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,618,public void testGetters() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,619,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,620,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,621,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,622,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,623,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,627,public void testWithers() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,628,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,629,"check(test.withHourOfDay(6), 6, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,630,"check(test.withMinuteOfHour(6), 10, 6, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,631,"check(test.withSecondOfMinute(6), 10, 20, 6, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,632,"check(test.withMillisOfSecond(6), 10, 20, 30, 6);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,633,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,634,test.withHourOfDay(-1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,635,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,636,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,637,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,638,test.withHourOfDay(24);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,639,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,640,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,644,public void testToDateTimeTodayDefaultZone() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,645,"LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,646,"DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,647,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,649,DateTime test = base.toDateTimeTodayDefaultZone();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,650,"check(base, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,651,"DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,652,expected = expected.hourOfDay().setCopy(10);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,653,expected = expected.minuteOfHour().setCopy(20);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,654,expected = expected.secondOfMinute().setCopy(30);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,655,expected = expected.millisOfSecond().setCopy(40);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,656,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,660,public void testToDateTimeToday_Zone() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,661,"LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,662,"DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,663,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,665,DateTime test = base.toDateTimeToday(TOKYO);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,666,"check(base, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,667,"DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,668,expected = expected.hourOfDay().setCopy(10);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,669,expected = expected.minuteOfHour().setCopy(20);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,670,expected = expected.secondOfMinute().setCopy(30);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,671,expected = expected.millisOfSecond().setCopy(40);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,672,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,675,public void testToDateTimeToday_nullZone() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,676,"LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,677,"DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,678,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,680,DateTime test = base.toDateTimeToday((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,681,"check(base, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,682,"DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,683,expected = expected.hourOfDay().setCopy(10);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,684,expected = expected.minuteOfHour().setCopy(20);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,685,expected = expected.secondOfMinute().setCopy(30);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,686,expected = expected.millisOfSecond().setCopy(40);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,687,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,691,public void testToDateTime_RI() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,692,"LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,693,DateTime dt = new DateTime(0L); // LONDON zone
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,694,"assertEquals(""1970-01-01T01:00:00.000+01:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,696,DateTime test = base.toDateTime(dt);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,697,"check(base, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,698,"assertEquals(""1970-01-01T01:00:00.000+01:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,699,"assertEquals(""1970-01-01T10:20:30.040+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,702,public void testToDateTime_nullRI() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,703,"LocalTime base = new LocalTime(1, 2, 3, 4);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,704,DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,706,DateTime test = base.toDateTime((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,707,"check(base, 1, 2, 3, 4);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,708,"assertEquals(""1970-01-02T01:02:03.004+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,712,public void testProperty() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,713,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,714,"assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,715,"assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,716,"assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,717,"assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,719,"assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalTime());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,720,"assertEquals(test, test.property(DateTimeFieldType.secondOfDay()).getLocalTime());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,721,"assertEquals(test, test.property(DateTimeFieldType.millisOfDay()).getLocalTime());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,722,"assertEquals(test, test.property(DateTimeFieldType.hourOfHalfday()).getLocalTime());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,723,"assertEquals(test, test.property(DateTimeFieldType.halfdayOfDay()).getLocalTime());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,724,"assertEquals(test, test.property(DateTimeFieldType.clockhourOfHalfday()).getLocalTime());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,725,"assertEquals(test, test.property(DateTimeFieldType.clockhourOfDay()).getLocalTime());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,727,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,728,test.property(DateTimeFieldType.dayOfWeek());
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,729,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,730,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,731,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,732,test.property(null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,733,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,734,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,738,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,739,"LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,741,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,742,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,743,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,744,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,745,oos.close();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,747,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,748,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,749,LocalTime result = (LocalTime) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,750,ois.close();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,752,"assertEquals(test, result);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,753,"assertTrue(Arrays.equals(test.getValues(), result.getValues()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,754,"assertTrue(Arrays.equals(test.getFields(), result.getFields()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,755,"assertEquals(test.getChronology(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,759,public void testToString() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,760,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,761,"assertEquals(""10:20:30.040"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,765,public void testToString_String() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,766,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,767,"assertEquals(""\ufffd\ufffd\ufffd\ufffd 10"", test.toString(""yyyy HH""));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,768,"assertEquals(""10:20:30.040"", test.toString((String) null));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,772,public void testToString_String_Locale() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,773,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,774,"assertEquals(""10 20"", test.toString(""H m"", Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,775,"assertEquals(""10:20:30.040"", test.toString(null, Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,776,"assertEquals(""10 20"", test.toString(""H m"", null));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,777,"assertEquals(""10:20:30.040"", test.toString(null, null));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,781,public void testToString_DTFormatter() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,782,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,783,"assertEquals(""\ufffd\ufffd\ufffd\ufffd 10"", test.toString(DateTimeFormat.forPattern(""yyyy HH"")));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,784,"assertEquals(""10:20:30.040"", test.toString((DateTimeFormatter) null));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,788,"private void check(LocalTime test, int hour, int min, int sec, int milli) {"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,789,"assertEquals(hour, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,790,"assertEquals(min, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,791,"assertEquals(sec, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,792,"assertEquals(milli, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,18,import java.util.Calendar;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,19,import java.util.Date;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,20,import java.util.GregorianCalendar;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,22,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,23,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,25,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,26,import org.joda.time.chrono.GJChronology;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,27,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,28,import org.joda.time.chrono.JulianChronology;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,31,* This class is a Junit unit test for LocalTime.
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,33,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,35,public class TestLocalTime_Constructors extends TestCase {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,37,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,38,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,39,private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,40,private static final JulianChronology JULIAN = JulianChronology.getInstance();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,41,private static final JulianChronology JULIAN_PARIS = JulianChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,42,private static final JulianChronology JULIAN_UTC = JulianChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,43,private static final int OFFSET_LONDON = LONDON.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,44,private static final int OFFSET_PARIS = PARIS.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,46,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,47,10L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,48,+ 20L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,49,+ 30L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,50,+ 40L;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,52,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,53,1L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,54,+ 2L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,55,+ 3L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,56,+ 4L;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,58,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,59,1L * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,60,+ 5L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,61,+ 6L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,62,+ 7L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,63,+ 8L;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,65,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,67,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,68,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,71,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,72,return new TestSuite(TestLocalTime_Constructors.class);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,75,public TestLocalTime_Constructors(String name) {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,76,super(name);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,79,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,80,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,81,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,82,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,83,java.util.TimeZone.setDefault(LONDON.toTimeZone());
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,86,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,87,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,88,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,89,java.util.TimeZone.setDefault(zone.toTimeZone());
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,90,zone = null;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,95,* Test constructor ()
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,97,public void testConstantMidnight() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,98,LocalTime test = LocalTime.MIDNIGHT;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,99,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,100,"assertEquals(0, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,101,"assertEquals(0, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,102,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,103,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,107,public void testFactory_ForFields_Calendar() throws Exception {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,108,"GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,109,"cal.set(Calendar.MILLISECOND, 7);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,110,"LocalTime expected = new LocalTime(4, 5, 6, 7);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,111,"assertEquals(expected, LocalTime.forFields(cal));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,112,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,113,LocalTime.forFields((Calendar) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,114,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,115,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,119,public void testFactory_ForFields_Date() throws Exception {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,120,"GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,121,"cal.set(Calendar.MILLISECOND, 7);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,122,"LocalTime expected = new LocalTime(4, 5, 6, 7);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,123,"assertEquals(expected, LocalTime.forFields(cal.getTime()));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,124,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,125,LocalTime.forFields((Date) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,126,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,127,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,131,public void testFactoryMillisOfDay_long() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,132,LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,133,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,134,"assertEquals(1, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,135,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,136,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,137,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,141,public void testFactoryMillisOfDay_long_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,142,"LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1, JULIAN);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,143,"assertEquals(JULIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,144,"assertEquals(1, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,145,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,146,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,147,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,150,public void testFactoryMillisOfDay_long_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,151,"LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1, null);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,152,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,153,"assertEquals(1, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,154,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,155,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,156,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,160,public void testFactory_nowDefaultZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,161,LocalTime test = LocalTime.nowDefaultZone();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,162,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,163,"assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,164,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,165,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,166,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,170,public void testFactory_now_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,171,"DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,172,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,173,// 23:59 in London is 00:59 the following day in Paris
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,175,LocalTime test = LocalTime.now(LONDON);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,176,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,177,"assertEquals(23, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,178,"assertEquals(59, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,179,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,180,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,182,test = LocalTime.now(PARIS);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,183,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,184,"assertEquals(0, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,185,"assertEquals(59, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,186,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,187,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,190,public void testFactory_now_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,191,"DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,192,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,193,// 23:59 in London is 00:59 the following day in Paris
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,195,LocalTime test = LocalTime.now((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,196,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,197,"assertEquals(23, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,198,"assertEquals(59, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,199,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,200,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,204,public void testFactory_now_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,205,LocalTime test = LocalTime.now(JULIAN);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,206,"assertEquals(JULIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,207,"assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,208,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,209,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,210,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,213,public void testFactory_now_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,214,LocalTime test = LocalTime.now((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,215,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,216,"assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,217,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,218,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,219,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,223,public void testFactory_forInstantDefaultZone_long1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,224,LocalTime test = LocalTime.forInstantDefaultZone(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,225,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,226,"assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,227,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,228,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,229,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,232,public void testFactory_forInstantDefaultZone_long2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,233,LocalTime test = LocalTime.forInstantDefaultZone(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,234,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,235,"assertEquals(5 + OFFSET_LONDON, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,236,"assertEquals(6, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,237,"assertEquals(7, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,238,"assertEquals(8, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,242,public void testFactory_forInstant_long_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,243,"LocalTime test = LocalTime.forInstant(TEST_TIME1, PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,244,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,245,"assertEquals(1 + OFFSET_PARIS, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,246,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,247,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,248,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,251,public void testFactory_forInstant_long_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,252,"LocalTime test = LocalTime.forInstant(TEST_TIME1, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,253,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,254,"assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,255,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,256,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,257,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,261,public void testFactory_forInstant_long1_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,262,"LocalTime test = LocalTime.forInstant(TEST_TIME1, JULIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,263,"assertEquals(JULIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,264,"assertEquals(1 + OFFSET_PARIS, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,265,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,266,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,267,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,270,public void testFactory_forInstant_long2_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,271,"LocalTime test = LocalTime.forInstant(TEST_TIME2, JULIAN);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,272,"assertEquals(JULIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,273,"assertEquals(5 + OFFSET_LONDON, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,274,"assertEquals(6, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,275,"assertEquals(7, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,276,"assertEquals(8, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,279,public void testFactory_forInstant_long_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,280,"LocalTime test = LocalTime.forInstant(TEST_TIME1, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,281,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,282,"assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,283,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,284,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,285,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,289,public void testFactory_forInstant_Object1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,290,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,291,LocalTime test = LocalTime.forInstant(date);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,292,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,293,"assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,294,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,295,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,296,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,299,public void testFactory_forInstant_Object2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,300,Calendar cal = new GregorianCalendar();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,301,cal.setTime(new Date(TEST_TIME1));
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,302,LocalTime test = LocalTime.forInstant(cal);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,303,"assertEquals(GJChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,304,"assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,305,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,306,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,307,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,310,public void testFactory_forInstant_nullObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,311,LocalTime test = LocalTime.forInstant((Object) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,312,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,313,"assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,314,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,315,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,316,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,319,//    public void testFactory_forInstant_localTimeObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,320,"//        LocalTime base = new LocalTime(10, 20, 30, 40, CopticChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,321,//        LocalTime test = LocalTime.forInstant(base);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,322,"//        assertEquals(CopticChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,323,"//        assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,324,"//        assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,325,"//        assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,326,"//        assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,330,public void testFactory_forInstant_Object1_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,331,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,332,"LocalTime test = LocalTime.forInstant(date, JULIAN);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,333,"assertEquals(JULIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,334,"assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,335,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,336,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,337,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,340,public void testFactory_forInstant_Object2_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,341,"LocalTime test = LocalTime.forInstant(""T10:20"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,342,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,343,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,344,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,345,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,347,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,348,"LocalTime.forInstant(""T1020"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,349,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,350,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,353,public void testFactory_forInstant_nullObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,354,"LocalTime test = LocalTime.forInstant((Object) null, JULIAN);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,355,"assertEquals(JULIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,356,"assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,357,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,358,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,359,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,362,public void testFactory_forInstant_Object_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,363,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,364,"LocalTime test = LocalTime.forInstant(date, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,365,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,366,"assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,367,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,368,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,369,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,372,public void testFactory_forInstant_nullObject_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,373,"LocalTime test = LocalTime.forInstant((Object) null, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,374,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,375,"assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,376,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,377,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,378,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,382,public void testConstructor_int_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,383,"LocalTime test = new LocalTime(10, 20);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,384,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,385,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,386,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,387,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,388,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,389,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,390,"new LocalTime(-1, 20);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,391,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,392,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,393,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,394,"new LocalTime(24, 20);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,395,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,396,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,397,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,398,"new LocalTime(10, -1);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,399,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,400,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,401,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,402,"new LocalTime(10, 60);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,403,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,404,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,407,public void testConstructor_int_int_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,408,"LocalTime test = new LocalTime(10, 20, 30);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,409,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,410,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,411,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,412,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,413,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,414,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,415,"new LocalTime(-1, 20, 30);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,416,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,417,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,418,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,419,"new LocalTime(24, 20, 30);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,420,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,421,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,422,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,423,"new LocalTime(10, -1, 30);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,424,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,425,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,426,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,427,"new LocalTime(10, 60, 30);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,428,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,429,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,430,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,431,"new LocalTime(10, 20, -1);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,432,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,433,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,434,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,435,"new LocalTime(10, 20, 60);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,436,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,437,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,440,public void testConstructor_int_int_int_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,441,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,442,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,443,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,444,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,445,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,446,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,447,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,448,"new LocalTime(-1, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,449,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,450,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,451,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,452,"new LocalTime(24, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,453,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,454,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,455,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,456,"new LocalTime(10, -1, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,457,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,458,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,459,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,460,"new LocalTime(10, 60, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,461,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,462,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,463,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,464,"new LocalTime(10, 20, -1, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,465,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,466,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,467,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,468,"new LocalTime(10, 20, 60, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,469,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,470,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,471,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,472,"new LocalTime(10, 20, 30, -1);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,473,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,474,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,475,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,476,"new LocalTime(10, 20, 30, 1000);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,477,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,478,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,481,public void testConstructor_int_int_int_int_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,482,"LocalTime test = new LocalTime(10, 20, 30, 40, JULIAN);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,483,"assertEquals(JULIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,484,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,485,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,486,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,487,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,488,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,489,"new LocalTime(-1, 20, 30, 40, JULIAN);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,490,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,491,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,492,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,493,"new LocalTime(24, 20, 30, 40, JULIAN);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,494,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,495,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,496,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,497,"new LocalTime(10, -1, 30, 40, JULIAN);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,498,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,499,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,500,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,501,"new LocalTime(10, 60, 30, 40, JULIAN);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,502,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,503,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,504,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,505,"new LocalTime(10, 20, -1, 40, JULIAN);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,506,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,507,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,508,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,509,"new LocalTime(10, 20, 60, 40, JULIAN);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,510,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,511,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,512,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,513,"new LocalTime(10, 20, 30, -1, JULIAN);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,514,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,515,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,516,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,517,"new LocalTime(10, 20, 30, 1000, JULIAN);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,518,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,519,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,522,public void testConstructor_int_int_int_int_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,523,"LocalTime test = new LocalTime(10, 20, 30, 40, null);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,524,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,525,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,526,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,527,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,528,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,18,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,20,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,21,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,24,* This class is a Junit unit test for TimeOfDay.
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,26,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,28,public class TestLocalTime_Properties extends TestCase {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,30,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,32,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,33,10L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,34,+ 20L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,35,+ 30L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,36,+ 40L;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,38,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,39,1L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,40,+ 2L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,41,+ 3L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,42,+ 4L;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,44,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,45,1L * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,46,+ 5L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,47,+ 6L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,48,+ 7L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,49,+ 8L;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,51,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,53,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,54,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,57,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,58,return new TestSuite(TestLocalTime_Properties.class);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,61,public TestLocalTime_Properties(String name) {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,62,super(name);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,65,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,66,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,67,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,68,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,71,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,72,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,73,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,74,zone = null;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,78,public void testPropertyGetHour() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,79,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,80,"assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,81,"assertEquals(""hourOfDay"", test.hourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,82,"assertEquals(""Property[hourOfDay]"", test.hourOfDay().toString());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,83,"assertSame(test, test.hourOfDay().getLocalTime());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,84,"assertEquals(10, test.hourOfDay().get());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,85,"assertEquals(""10"", test.hourOfDay().getAsString());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,86,"assertEquals(""10"", test.hourOfDay().getAsText());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,87,"assertEquals(""10"", test.hourOfDay().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,88,"assertEquals(""10"", test.hourOfDay().getAsShortText());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,89,"assertEquals(""10"", test.hourOfDay().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,90,"assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,91,"assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,92,"assertEquals(2, test.hourOfDay().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,93,"assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,96,public void testPropertyRoundHour() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,97,"LocalTime test = new LocalTime(10, 20);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,98,"check(test.hourOfDay().withRoundedCeiling(), 11, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,99,"check(test.hourOfDay().withRoundedFloor(), 10, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,100,"check(test.hourOfDay().withRoundedHalfCeiling(), 10, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,101,"check(test.hourOfDay().withRoundedHalfFloor(), 10, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,102,"check(test.hourOfDay().withRoundedHalfEven(), 10, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,104,"test = new LocalTime(10, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,105,"check(test.hourOfDay().withRoundedCeiling(), 11, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,106,"check(test.hourOfDay().withRoundedFloor(), 10, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,107,"check(test.hourOfDay().withRoundedHalfCeiling(), 11, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,108,"check(test.hourOfDay().withRoundedHalfFloor(), 11, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,109,"check(test.hourOfDay().withRoundedHalfEven(), 11, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,111,"test = new LocalTime(10, 30);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,112,"check(test.hourOfDay().withRoundedCeiling(), 11, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,113,"check(test.hourOfDay().withRoundedFloor(), 10, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,114,"check(test.hourOfDay().withRoundedHalfCeiling(), 11, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,115,"check(test.hourOfDay().withRoundedHalfFloor(), 10, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,116,"check(test.hourOfDay().withRoundedHalfEven(), 10, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,118,"test = new LocalTime(11, 30);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,119,"check(test.hourOfDay().withRoundedCeiling(), 12, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,120,"check(test.hourOfDay().withRoundedFloor(), 11, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,121,"check(test.hourOfDay().withRoundedHalfCeiling(), 12, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,122,"check(test.hourOfDay().withRoundedHalfFloor(), 11, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,123,"check(test.hourOfDay().withRoundedHalfEven(), 12, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,126,public void testPropertyGetMaxMinValuesHour() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,127,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,128,"assertEquals(0, test.hourOfDay().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,129,"assertEquals(0, test.hourOfDay().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,130,"assertEquals(23, test.hourOfDay().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,131,"assertEquals(23, test.hourOfDay().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,134,public void testPropertyWithMaxMinValueHour() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,135,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,136,"check(test.hourOfDay().withMaximumValue(), 23, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,137,"check(test.hourOfDay().withMinimumValue(), 0, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,140,public void testPropertyPlusHour() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,141,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,142,LocalTime copy = test.hourOfDay().plus(9);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,143,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,144,"check(copy, 19, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,146,copy = test.hourOfDay().plus(0);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,147,"check(copy, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,149,copy = test.hourOfDay().plus(13);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,150,"check(copy, 23, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,152,copy = test.hourOfDay().plus(14);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,153,"check(copy, 0, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,155,copy = test.hourOfDay().plus(-10);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,156,"check(copy, 0, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,158,copy = test.hourOfDay().plus(-11);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,159,"check(copy, 23, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,162,public void testPropertyPlusNoWrapHour() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,163,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,164,LocalTime copy = test.hourOfDay().plusNoWrap(9);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,165,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,166,"check(copy, 19, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,168,copy = test.hourOfDay().plusNoWrap(0);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,169,"check(copy, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,171,copy = test.hourOfDay().plusNoWrap(13);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,172,"check(copy, 23, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,174,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,175,test.hourOfDay().plusNoWrap(14);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,176,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,177,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,178,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,180,copy = test.hourOfDay().plusNoWrap(-10);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,181,"check(copy, 0, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,183,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,184,test.hourOfDay().plusNoWrap(-11);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,185,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,186,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,187,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,190,public void testPropertyPlusWrapFieldHour() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,191,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,192,LocalTime copy = test.hourOfDay().plusWrapField(9);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,193,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,194,"check(copy, 19, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,196,copy = test.hourOfDay().plusWrapField(0);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,197,"check(copy, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,199,copy = test.hourOfDay().plusWrapField(18);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,200,"check(copy, 4, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,202,copy = test.hourOfDay().plusWrapField(-15);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,203,"check(copy, 19, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,206,public void testPropertySetHour() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,207,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,208,LocalTime copy = test.hourOfDay().withValue(12);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,209,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,210,"check(copy, 12, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,212,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,213,test.hourOfDay().withValue(24);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,214,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,215,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,216,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,217,test.hourOfDay().withValue(-1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,218,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,219,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,222,public void testPropertySetTextHour() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,223,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,224,"LocalTime copy = test.hourOfDay().withValue(""12"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,225,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,226,"check(copy, 12, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,229,public void testPropertyWithMaximumValueHour() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,230,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,231,LocalTime copy = test.hourOfDay().withMaximumValue();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,232,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,233,"check(copy, 23, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,236,public void testPropertyWithMinimumValueHour() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,237,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,238,LocalTime copy = test.hourOfDay().withMinimumValue();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,239,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,240,"check(copy, 0, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,243,public void testPropertyCompareToHour() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,244,LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,245,LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,246,"assertEquals(true, test1.hourOfDay().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,247,"assertEquals(true, test2.hourOfDay().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,248,"assertEquals(true, test1.hourOfDay().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,249,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,250,test1.hourOfDay().compareTo((ReadablePartial) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,251,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,252,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,254,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,255,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,256,"assertEquals(true, test1.hourOfDay().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,257,"assertEquals(true, test2.hourOfDay().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,258,"assertEquals(true, test1.hourOfDay().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,259,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,260,test1.hourOfDay().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,261,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,262,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,266,public void testPropertyGetMinute() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,267,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,268,"assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,269,"assertEquals(""minuteOfHour"", test.minuteOfHour().getName());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,270,"assertEquals(""Property[minuteOfHour]"", test.minuteOfHour().toString());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,271,"assertSame(test, test.minuteOfHour().getLocalTime());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,272,"assertEquals(20, test.minuteOfHour().get());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,273,"assertEquals(""20"", test.minuteOfHour().getAsString());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,274,"assertEquals(""20"", test.minuteOfHour().getAsText());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,275,"assertEquals(""20"", test.minuteOfHour().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,276,"assertEquals(""20"", test.minuteOfHour().getAsShortText());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,277,"assertEquals(""20"", test.minuteOfHour().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,278,"assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,279,"assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,280,"assertEquals(2, test.minuteOfHour().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,281,"assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,284,public void testPropertyGetMaxMinValuesMinute() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,285,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,286,"assertEquals(0, test.minuteOfHour().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,287,"assertEquals(0, test.minuteOfHour().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,288,"assertEquals(59, test.minuteOfHour().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,289,"assertEquals(59, test.minuteOfHour().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,292,public void testPropertyWithMaxMinValueMinute() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,293,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,294,"check(test.minuteOfHour().withMaximumValue(), 10, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,295,"check(test.minuteOfHour().withMinimumValue(), 10, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,298,public void testPropertyPlusMinute() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,299,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,300,LocalTime copy = test.minuteOfHour().plus(9);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,301,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,302,"check(copy, 10, 29, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,304,copy = test.minuteOfHour().plus(39);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,305,"check(copy, 10, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,307,copy = test.minuteOfHour().plus(40);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,308,"check(copy, 11, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,310,copy = test.minuteOfHour().plus(1 * 60 + 45);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,311,"check(copy, 12, 5, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,313,copy = test.minuteOfHour().plus(13 * 60 + 39);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,314,"check(copy, 23, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,316,copy = test.minuteOfHour().plus(13 * 60 + 40);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,317,"check(copy, 0, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,319,copy = test.minuteOfHour().plus(-9);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,320,"check(copy, 10, 11, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,322,copy = test.minuteOfHour().plus(-19);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,323,"check(copy, 10, 1, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,325,copy = test.minuteOfHour().plus(-20);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,326,"check(copy, 10, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,328,copy = test.minuteOfHour().plus(-21);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,329,"check(copy, 9, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,331,copy = test.minuteOfHour().plus(-(10 * 60 + 20));
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,332,"check(copy, 0, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,334,copy = test.minuteOfHour().plus(-(10 * 60 + 21));
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,335,"check(copy, 23, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,338,public void testPropertyPlusNoWrapMinute() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,339,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,340,LocalTime copy = test.minuteOfHour().plusNoWrap(9);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,341,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,342,"check(copy, 10, 29, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,344,copy = test.minuteOfHour().plusNoWrap(39);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,345,"check(copy, 10, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,347,copy = test.minuteOfHour().plusNoWrap(40);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,348,"check(copy, 11, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,350,copy = test.minuteOfHour().plusNoWrap(1 * 60 + 45);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,351,"check(copy, 12, 5, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,353,copy = test.minuteOfHour().plusNoWrap(13 * 60 + 39);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,354,"check(copy, 23, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,356,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,357,test.minuteOfHour().plusNoWrap(13 * 60 + 40);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,358,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,359,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,360,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,362,copy = test.minuteOfHour().plusNoWrap(-9);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,363,"check(copy, 10, 11, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,365,copy = test.minuteOfHour().plusNoWrap(-19);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,366,"check(copy, 10, 1, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,368,copy = test.minuteOfHour().plusNoWrap(-20);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,369,"check(copy, 10, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,371,copy = test.minuteOfHour().plusNoWrap(-21);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,372,"check(copy, 9, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,374,copy = test.minuteOfHour().plusNoWrap(-(10 * 60 + 20));
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,375,"check(copy, 0, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,377,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,378,test.minuteOfHour().plusNoWrap(-(10 * 60 + 21));
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,379,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,380,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,381,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,384,public void testPropertyPlusWrapFieldMinute() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,385,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,386,LocalTime copy = test.minuteOfHour().plusWrapField(9);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,387,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,388,"check(copy, 10, 29, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,390,copy = test.minuteOfHour().plusWrapField(49);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,391,"check(copy, 10, 9, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,393,copy = test.minuteOfHour().plusWrapField(-47);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,394,"check(copy, 10, 33, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,397,public void testPropertySetMinute() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,398,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,399,LocalTime copy = test.minuteOfHour().withValue(12);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,400,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,401,"check(copy, 10, 12, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,403,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,404,test.minuteOfHour().withValue(60);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,405,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,406,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,407,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,408,test.minuteOfHour().withValue(-1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,409,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,410,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,413,public void testPropertySetTextMinute() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,414,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,415,"LocalTime copy = test.minuteOfHour().withValue(""12"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,416,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,417,"check(copy, 10, 12, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,420,public void testPropertyCompareToMinute() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,421,LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,422,LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,423,"assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,424,"assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,425,"assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,426,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,427,test1.minuteOfHour().compareTo((ReadablePartial) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,428,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,429,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,431,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,432,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,433,"assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,434,"assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,435,"assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,436,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,437,test1.minuteOfHour().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,438,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,439,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,443,public void testPropertyGetSecond() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,444,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,445,"assertSame(test.getChronology().secondOfMinute(), test.secondOfMinute().getField());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,446,"assertEquals(""secondOfMinute"", test.secondOfMinute().getName());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,447,"assertEquals(""Property[secondOfMinute]"", test.secondOfMinute().toString());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,448,"assertSame(test, test.secondOfMinute().getLocalTime());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,449,"assertEquals(30, test.secondOfMinute().get());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,450,"assertEquals(""30"", test.secondOfMinute().getAsString());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,451,"assertEquals(""30"", test.secondOfMinute().getAsText());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,452,"assertEquals(""30"", test.secondOfMinute().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,453,"assertEquals(""30"", test.secondOfMinute().getAsShortText());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,454,"assertEquals(""30"", test.secondOfMinute().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,455,"assertEquals(test.getChronology().seconds(), test.secondOfMinute().getDurationField());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,456,"assertEquals(test.getChronology().minutes(), test.secondOfMinute().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,457,"assertEquals(2, test.secondOfMinute().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,458,"assertEquals(2, test.secondOfMinute().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,461,public void testPropertyGetMaxMinValuesSecond() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,462,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,463,"assertEquals(0, test.secondOfMinute().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,464,"assertEquals(0, test.secondOfMinute().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,465,"assertEquals(59, test.secondOfMinute().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,466,"assertEquals(59, test.secondOfMinute().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,469,public void testPropertyWithMaxMinValueSecond() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,470,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,471,"check(test.secondOfMinute().withMaximumValue(), 10, 20, 59, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,472,"check(test.secondOfMinute().withMinimumValue(), 10, 20, 0, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,475,public void testPropertyPlusSecond() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,476,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,477,LocalTime copy = test.secondOfMinute().plus(9);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,478,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,479,"check(copy, 10, 20, 39, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,481,copy = test.secondOfMinute().plus(29);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,482,"check(copy, 10, 20, 59, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,484,copy = test.secondOfMinute().plus(30);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,485,"check(copy, 10, 21, 0, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,487,copy = test.secondOfMinute().plus(39 * 60 + 29);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,488,"check(copy, 10, 59, 59, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,490,copy = test.secondOfMinute().plus(39 * 60 + 30);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,491,"check(copy, 11, 0, 0, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,493,copy = test.secondOfMinute().plus(13 * 60 * 60 + 39 * 60 + 30);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,494,"check(copy, 0, 0, 0, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,496,copy = test.secondOfMinute().plus(-9);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,497,"check(copy, 10, 20, 21, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,499,copy = test.secondOfMinute().plus(-30);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,500,"check(copy, 10, 20, 0, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,502,copy = test.secondOfMinute().plus(-31);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,503,"check(copy, 10, 19, 59, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,505,copy = test.secondOfMinute().plus(-(10 * 60 * 60 + 20 * 60 + 30));
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,506,"check(copy, 0, 0, 0, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,508,copy = test.secondOfMinute().plus(-(10 * 60 * 60 + 20 * 60 + 31));
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,509,"check(copy, 23, 59, 59, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,512,public void testPropertyPlusNoWrapSecond() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,513,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,514,LocalTime copy = test.secondOfMinute().plusNoWrap(9);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,515,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,516,"check(copy, 10, 20, 39, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,518,copy = test.secondOfMinute().plusNoWrap(29);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,519,"check(copy, 10, 20, 59, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,521,copy = test.secondOfMinute().plusNoWrap(30);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,522,"check(copy, 10, 21, 0, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,524,copy = test.secondOfMinute().plusNoWrap(39 * 60 + 29);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,525,"check(copy, 10, 59, 59, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,527,copy = test.secondOfMinute().plusNoWrap(39 * 60 + 30);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,528,"check(copy, 11, 0, 0, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,530,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,531,test.secondOfMinute().plusNoWrap(13 * 60 * 60 + 39 * 60 + 30);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,532,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,533,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,534,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,536,copy = test.secondOfMinute().plusNoWrap(-9);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,537,"check(copy, 10, 20, 21, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,539,copy = test.secondOfMinute().plusNoWrap(-30);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,540,"check(copy, 10, 20, 0, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,542,copy = test.secondOfMinute().plusNoWrap(-31);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,543,"check(copy, 10, 19, 59, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,545,copy = test.secondOfMinute().plusNoWrap(-(10 * 60 * 60 + 20 * 60 + 30));
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,546,"check(copy, 0, 0, 0, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,548,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,549,test.secondOfMinute().plusNoWrap(-(10 * 60 * 60 + 20 * 60 + 31));
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,550,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,551,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,552,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,555,public void testPropertyPlusWrapFieldSecond() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,556,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,557,LocalTime copy = test.secondOfMinute().plusWrapField(9);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,558,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,559,"check(copy, 10, 20, 39, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,561,copy = test.secondOfMinute().plusWrapField(49);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,562,"check(copy, 10, 20, 19, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,564,copy = test.secondOfMinute().plusWrapField(-47);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,565,"check(copy, 10, 20, 43, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,568,public void testPropertySetSecond() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,569,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,570,LocalTime copy = test.secondOfMinute().withValue(12);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,571,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,572,"check(copy, 10, 20, 12, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,574,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,575,test.secondOfMinute().withValue(60);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,576,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,577,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,578,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,579,test.secondOfMinute().withValue(-1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,580,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,581,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,584,public void testPropertySetTextSecond() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,585,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,586,"LocalTime copy = test.secondOfMinute().withValue(""12"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,587,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,588,"check(copy, 10, 20, 12, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,591,public void testPropertyCompareToSecond() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,592,LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,593,LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,594,"assertEquals(true, test1.secondOfMinute().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,595,"assertEquals(true, test2.secondOfMinute().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,596,"assertEquals(true, test1.secondOfMinute().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,597,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,598,test1.secondOfMinute().compareTo((ReadablePartial) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,599,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,600,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,602,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,603,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,604,"assertEquals(true, test1.secondOfMinute().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,605,"assertEquals(true, test2.secondOfMinute().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,606,"assertEquals(true, test1.secondOfMinute().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,607,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,608,test1.secondOfMinute().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,609,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,610,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,614,public void testPropertyGetMilli() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,615,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,616,"assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,617,"assertEquals(""millisOfSecond"", test.millisOfSecond().getName());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,618,"assertEquals(""Property[millisOfSecond]"", test.millisOfSecond().toString());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,619,"assertSame(test, test.millisOfSecond().getLocalTime());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,620,"assertEquals(40, test.millisOfSecond().get());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,621,"assertEquals(""40"", test.millisOfSecond().getAsString());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,622,"assertEquals(""40"", test.millisOfSecond().getAsText());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,623,"assertEquals(""40"", test.millisOfSecond().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,624,"assertEquals(""40"", test.millisOfSecond().getAsShortText());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,625,"assertEquals(""40"", test.millisOfSecond().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,626,"assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,627,"assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,628,"assertEquals(3, test.millisOfSecond().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,629,"assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,632,public void testPropertyGetMaxMinValuesMilli() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,633,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,634,"assertEquals(0, test.millisOfSecond().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,635,"assertEquals(0, test.millisOfSecond().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,636,"assertEquals(999, test.millisOfSecond().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,637,"assertEquals(999, test.millisOfSecond().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,640,public void testPropertyWithMaxMinValueMilli() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,641,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,642,"check(test.millisOfSecond().withMaximumValue(), 10, 20, 30, 999);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,643,"check(test.millisOfSecond().withMinimumValue(), 10, 20, 30, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,646,public void testPropertyPlusMilli() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,647,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,648,LocalTime copy = test.millisOfSecond().plus(9);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,649,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,650,"check(copy, 10, 20, 30, 49);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,652,copy = test.millisOfSecond().plus(959);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,653,"check(copy, 10, 20, 30, 999);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,655,copy = test.millisOfSecond().plus(960);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,656,"check(copy, 10, 20, 31, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,658,copy = test.millisOfSecond().plus(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,659,"check(copy, 23, 59, 59, 999);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,661,copy = test.millisOfSecond().plus(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,662,"check(copy, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,664,copy = test.millisOfSecond().plus(-9);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,665,"check(copy, 10, 20, 30, 31);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,667,copy = test.millisOfSecond().plus(-40);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,668,"check(copy, 10, 20, 30, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,670,copy = test.millisOfSecond().plus(-41);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,671,"check(copy, 10, 20, 29, 999);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,673,copy = test.millisOfSecond().plus(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,674,"check(copy, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,676,copy = test.millisOfSecond().plus(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,677,"check(copy, 23, 59, 59, 999);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,680,public void testPropertyPlusNoWrapMilli() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,681,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,682,LocalTime copy = test.millisOfSecond().plusNoWrap(9);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,683,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,684,"check(copy, 10, 20, 30, 49);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,686,copy = test.millisOfSecond().plusNoWrap(959);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,687,"check(copy, 10, 20, 30, 999);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,689,copy = test.millisOfSecond().plusNoWrap(960);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,690,"check(copy, 10, 20, 31, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,692,copy = test.millisOfSecond().plusNoWrap(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,693,"check(copy, 23, 59, 59, 999);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,695,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,696,test.millisOfSecond().plusNoWrap(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,697,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,698,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,699,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,701,copy = test.millisOfSecond().plusNoWrap(-9);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,702,"check(copy, 10, 20, 30, 31);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,704,copy = test.millisOfSecond().plusNoWrap(-40);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,705,"check(copy, 10, 20, 30, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,707,copy = test.millisOfSecond().plusNoWrap(-41);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,708,"check(copy, 10, 20, 29, 999);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,710,copy = test.millisOfSecond().plusNoWrap(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,711,"check(copy, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,713,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,714,test.millisOfSecond().plusNoWrap(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,715,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,716,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,717,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,720,public void testPropertyPlusWrapFieldMilli() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,721,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,722,LocalTime copy = test.millisOfSecond().plusWrapField(9);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,723,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,724,"check(copy, 10, 20, 30, 49);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,726,copy = test.millisOfSecond().plusWrapField(995);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,727,"check(copy, 10, 20, 30, 35);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,729,copy = test.millisOfSecond().plusWrapField(-47);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,730,"check(copy, 10, 20, 30, 993);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,733,public void testPropertySetMilli() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,734,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,735,LocalTime copy = test.millisOfSecond().withValue(12);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,736,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,737,"check(copy, 10, 20, 30, 12);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,739,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,740,test.millisOfSecond().withValue(1000);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,741,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,742,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,743,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,744,test.millisOfSecond().withValue(-1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,745,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,746,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,749,public void testPropertySetTextMilli() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,750,"LocalTime test = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,751,"LocalTime copy = test.millisOfSecond().withValue(""12"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,752,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,753,"check(copy, 10, 20, 30, 12);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,756,public void testPropertyCompareToMilli() {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,757,LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,758,LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,759,"assertEquals(true, test1.millisOfSecond().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,760,"assertEquals(true, test2.millisOfSecond().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,761,"assertEquals(true, test1.millisOfSecond().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,762,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,763,test1.millisOfSecond().compareTo((ReadablePartial) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,764,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,765,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,767,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,768,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,769,"assertEquals(true, test1.millisOfSecond().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,770,"assertEquals(true, test2.millisOfSecond().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,771,"assertEquals(true, test1.millisOfSecond().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,772,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,773,test1.millisOfSecond().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,774,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,775,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,779,"private void check(LocalTime test, int hour, int min, int sec, int milli) {"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,780,"assertEquals(hour, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,781,"assertEquals(min, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,782,"assertEquals(sec, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java,783,"assertEquals(milli, test.getMillisOfSecond());"

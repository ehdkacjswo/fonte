is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,61,import org.joda.time.field.FieldUtils;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,404, Add an amount of time to the datetime.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,406, @param duration  duration to add.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,408,ublic void add(final ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,409,"uration.addInto(this, 1);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,413, Add an amount of time to the datetime.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,415, @param duration  duration to add.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,416," @param scalar  direction and amount to add, which may be negative"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,405,* Adds an amount of time to this instant.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,406,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,407,"* If the resulting value is too large for the implementation,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,408,* an exception is thrown.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,409,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,410,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,411,"* include ReadableDuration, String and Long."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,413,* @param duration  an object representing a duration
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,414,* @throws IllegalArgumentException if the duration is invalid
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,415,* @throws ArithmeticException if the result exceeds the capacity of the instant
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,418,"ublic void add(final ReadableDuration duration, final int scalar) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,419,"uration.addInto(this, scalar);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,417,public void add(final Object duration) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,418,"add(duration, 1);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,423, Add an amount of time to the datetime.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,422,* Adds an amount of time to this instant specifying how many times to add.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,423,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,424,"* If the resulting value is too large for the implementation,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,425,* an exception is thrown.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,426," include ReadableDuration, and Long."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,428, @param duration  an object representing a duration
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,428,"* include ReadableDuration, String and Long."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,430,* @param duration  duration to add.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,431,"* @param scalar  direction and amount to add, which may be negative"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,432,* @throws IllegalArgumentException if the duration is invalid
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,433,* @throws ArithmeticException if the result exceeds the capacity of the instant
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,430,ublic void add(final Object duration) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,435,"public void add(final Object duration, final int scalar) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,432,"dd((ReadableDuration) duration, 1);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,437,ReadableDuration d = (ReadableDuration) duration;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,438,"d.addInto(this, scalar);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,435,dd(converter.getDurationMillis(duration));
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,441,"add(FieldUtils.safeMultiply(converter.getDurationMillis(duration), scalar));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,488, Set a value in the specified field.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,489, This could be used to set a field using a different Chronology.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,494,* Sets the value of the specified field.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,495,* It is permitted to use a field from another Chronology.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,509, Add a value to the specified field.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,510, This could be used to set a field using a different Chronology.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,515,* Adds to the value to the specified field.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,516,* It is permitted to use a field from another Chronology.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,522,"* Where possible the {@link #add(DurationField, int)} is a better choice as"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,523,* it is more explicit about what is being added.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,538,* Adds the to the datetime the amount represented by the duration multiplied by the value.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,539,* It is permitted to use a field from another Chronology.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,540,* For example:
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,541,* <pre>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,542,* MutableDateTime dt = new MutableDateTime();
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,543,"* dt.add(GJChronology.getInstance().years(), 2);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,544,* </pre>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,546,* @param field  the DurationField to use
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,547,* @param value the value
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,548,* @throws IllegalArgumentException if the field is null
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,549,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,551,"public void add(final DurationField field, final int value) {"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,552,if (field == null) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,553,"throw new IllegalArgumentException(""The DurationField must not be null"");"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,555,"setMillis(field.add(getMillis(), value));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,531, This could be used to set a field using a different Chronology.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,560,* It is permitted to use a field from another Chronology.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,114, Set the value as the number of milliseconds since
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,114,* Sets the value as the number of milliseconds since
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,124, Set the value from an Object representing an instant.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,124,* Sets the value from an Object representing an instant.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,136," Set the chronology of the datetime, which has no effect if not"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,137, applicable.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,136,"* Sets the chronology of the datetime, which has no effect if not applicable."
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,175, Add a number of millis to the value.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,174,* Adds a number of millis to the value.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,187, Add an amount of time.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,186,* Adds an amount of time to this instant.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,192, @param duration  duration to add.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,193, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,195,oid add(ReadableDuration duration);
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,198, Add an amount of time.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,200," If the resulting value is too large for the implementation,"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,201, an exception is thrown.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,191,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,192,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,193,"* include ReadableDuration, String and Long."
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,203, @param duration  duration to add.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,204," @param scalar direction and amount to add, which may be negative"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,205, @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,195,* @param duration  an object representing a duration
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,196,* @throws IllegalArgumentException if the duration is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,197,* @throws ArithmeticException if the result exceeds the capacity of the instant
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,207,"oid add(ReadableDuration duration, int scalar);"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,199,void add(Object duration);
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,210," Add an amount of time, either a ReadableDuration or Long (millis)."
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,202,* Adds an amount of time to this instant specifying how many times to add.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,220, @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,212,"* @param scalar  direction and amount to add, which may be negative"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,213,* @throws IllegalArgumentException if the duration is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,214,* @throws ArithmeticException if the result exceeds the capacity of the instant
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,222,oid add(Object duration);
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,216,"void add(Object duration, int scalar);"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,226, Set the value of one of the fields of a datetime.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,220,* Sets the value of one of the fields of a datetime.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,240, Add to the value of one of the fields of a datetime.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,234,* Adds to the instant specifying the duration and multiple.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,242, DateTimeField instances are generally obtained from a {@link Chronology} subclass.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,243," However, an application can create its own DateTimeField to manipulate the"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,236,* DurationField instances are generally obtained from a {@link Chronology} subclass.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,237,"* However, an application can create its own DurationField to manipulate the"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,246," @param field  a DateTimeField instance, usually obtained from a Chronology"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,247, @param value  the value of that field for the millis set in the implementation
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,240,"* @param field  a DurationField instance, usually obtained from a Chronology"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,241,* @param value  the number of times to add the duration
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,249, @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,243,* @throws ArithmeticException if the result exceeds the capacity of the instant
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,251,"oid add(DateTimeField field, int value);"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,245,"void add(DurationField field, int value);"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,254," Add to the value of one of the fields of a datetime, wrapping within that field."
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,248,"* Adds to the value of one of the fields of a datetime, wrapping within that field."
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,264, @param value  the value of that field for the millis set in the implementation
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,258,* @param value  the number of times to add the duration
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,82,suite.addTest(TestMutableDateTime_Constructors.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,83,suite.addTest(TestMutableDateTime_Basics.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,84,suite.addTest(TestMutableDateTime_Sets.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,85,suite.addTest(TestMutableDateTime_Adds.suite());
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,56,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,57,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,59,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,60,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,62,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,65,* This class is a JUnit test for MutableDateTime.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,67,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,69,public class TestMutableDateTime_Adds extends TestCase {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,70,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,71,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,73,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,74,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,76,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,77,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,78,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,79,366 + 365;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,80,long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,81,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,82,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,83,366 + 365 + 365;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,85,// 2002-06-09
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,86,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,87,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,89,// 2002-04-05
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,90,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,91,(y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,92,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,93,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,95,// 2003-05-06
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,96,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,97,(y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,98,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,99,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,101,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,102,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,103,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,105,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,106,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,109,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,110,return new TestSuite(TestMutableDateTime_Adds.class);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,113,public TestMutableDateTime_Adds(String name) {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,114,super(name);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,117,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,118,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,119,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,120,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,121,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,122,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,123,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,124,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,127,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,128,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,129,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,130,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,131,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,132,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,133,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,134,originalLocale = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,138,public void testTest() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,139,"assertEquals(""2002-06-09T00:00:00.000Z"", new Instant(TEST_TIME_NOW).toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,140,"assertEquals(""2002-04-05T12:24:00.000Z"", new Instant(TEST_TIME1).toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,141,"assertEquals(""2003-05-06T14:28:00.000Z"", new Instant(TEST_TIME2).toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,145,public void testAdd_long1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,146,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,147,test.add(123456L);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,148,"assertEquals(TEST_TIME1 + 123456L, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,149,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,153,public void testAdd_Object1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,154,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,155,test.add(new Long(123456L));
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,156,"assertEquals(TEST_TIME1 + 123456L, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,159,public void testAdd_Object2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,160,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,161,test.add((Object) null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,162,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,165,public void testAdd_Object3() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,166,"Duration d = new Duration(DurationType.getYearMonthType(), 1, 1, 0, 1, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,167,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,168,"assertEquals(""2002-06-09T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,169,test.add(d);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,170,"assertEquals(""2003-07-10T06:07:08.009+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,174,public void testAdd_Object_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,175,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,176,"test.add(new Long(123L), -2);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,177,"assertEquals(TEST_TIME1 + (-2 * 123L), test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,180,public void testAdd_Object_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,181,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,182,"test.add((ReadableDuration) null, 1);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,183,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,184,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,187,public void testAdd_Object_int3() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,188,"Duration d = new Duration(DurationType.getYearMonthType(), 1, 1, 0, 1, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,189,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,190,"assertEquals(""2002-06-09T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,191,"test.add(d, -2);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,192,"assertEquals(""2000-04-07T03:04:05.006+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,196,public void testAdd_DateTimeField_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,197,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,198,"test.add(ISOChronology.getInstance().year(), 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,199,"assertEquals(2010, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,202,public void testAdd_DateTimeField_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,203,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,204,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,205,"test.add((DateTimeField) null, 2010);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,206,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,207,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,208,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,212,public void testAdd_DurationField_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,213,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,214,"test.add(ISOChronology.getInstance().years(), 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,215,"assertEquals(2010, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,218,public void testAdd_DurationField_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,219,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,220,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,221,"test.add((DurationField) null, 2010);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,222,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,223,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,224,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,228,public void testAddYears_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,229,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,230,test.addYears(8);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,231,"assertEquals(""2010-06-09T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,235,public void testAddMonths_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,236,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,237,test.addMonths(6);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,238,"assertEquals(""2002-12-09T05:06:07.008Z"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,242,public void testAddDays_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,243,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,244,test.addDays(17);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,245,"assertEquals(""2002-06-26T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,249,public void testAddWeekyears_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,250,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,251,test.addWeekyears(-1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,252,"assertEquals(""2001-06-10T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,256,public void testAddWeeks_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,257,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,258,test.addWeeks(-21);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,259,"assertEquals(""2002-01-13T05:06:07.008Z"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,263,public void testAddHours_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,264,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,265,test.addHours(13);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,266,"assertEquals(""2002-06-09T18:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,270,public void testAddMinutes_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,271,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,272,test.addMinutes(13);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,273,"assertEquals(""2002-06-09T05:19:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,277,public void testAddSeconds_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,278,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,279,test.addSeconds(13);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,280,"assertEquals(""2002-06-09T05:06:20.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,284,public void testAddMillis_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,285,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,286,test.addMillis(13);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,287,"assertEquals(""2002-06-09T05:06:07.021+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,56,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,57,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,58,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,59,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,60,import java.util.Calendar;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,61,import java.util.Date;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,62,import java.util.GregorianCalendar;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,63,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,64,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,66,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,67,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,69,import org.joda.time.chrono.AbstractChronology;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,70,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,71,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,74,* This class is a JUnit test for MutableDateTime.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,76,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,78,public class TestMutableDateTime_Basics extends TestCase {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,79,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,80,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,82,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,83,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,85,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,86,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,87,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,88,366 + 365;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,89,long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,90,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,91,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,92,366 + 365 + 365;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,94,// 2002-06-09
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,95,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,96,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,98,// 2002-04-05
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,99,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,100,(y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,101,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,102,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,104,// 2003-05-06
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,105,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,106,(y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,107,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,108,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,110,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,111,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,112,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,114,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,115,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,118,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,119,return new TestSuite(TestMutableDateTime_Basics.class);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,122,public TestMutableDateTime_Basics(String name) {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,123,super(name);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,126,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,127,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,128,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,129,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,130,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,131,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,132,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,133,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,136,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,137,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,138,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,139,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,140,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,141,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,142,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,143,originalLocale = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,147,public void testTest() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,148,"assertEquals(""2002-06-09T00:00:00.000Z"", new Instant(TEST_TIME_NOW).toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,149,"assertEquals(""2002-04-05T12:24:00.000Z"", new Instant(TEST_TIME1).toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,150,"assertEquals(""2003-05-06T14:28:00.000Z"", new Instant(TEST_TIME2).toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,154,public void testGet() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,155,MutableDateTime test = new MutableDateTime();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,156,"assertEquals(1, test.get(ISOChronology.getInstance().era()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,157,"assertEquals(20, test.get(ISOChronology.getInstance().centuryOfEra()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,158,"assertEquals(2, test.get(ISOChronology.getInstance().yearOfCentury()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,159,"assertEquals(2002, test.get(ISOChronology.getInstance().yearOfEra()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,160,"assertEquals(2002, test.get(ISOChronology.getInstance().year()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,161,"assertEquals(6, test.get(ISOChronology.getInstance().monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,162,"assertEquals(9, test.get(ISOChronology.getInstance().dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,163,"assertEquals(2002, test.get(ISOChronology.getInstance().weekyear()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,164,"assertEquals(23, test.get(ISOChronology.getInstance().weekOfWeekyear()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,165,"assertEquals(7, test.get(ISOChronology.getInstance().dayOfWeek()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,166,"assertEquals(160, test.get(ISOChronology.getInstance().dayOfYear()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,167,"assertEquals(0, test.get(ISOChronology.getInstance().halfdayOfDay()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,168,"assertEquals(1, test.get(ISOChronology.getInstance().hourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,169,"assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,170,"assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,171,"assertEquals(1, test.get(ISOChronology.getInstance().hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,172,"assertEquals(0, test.get(ISOChronology.getInstance().minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,173,"assertEquals(60, test.get(ISOChronology.getInstance().minuteOfDay()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,174,"assertEquals(0, test.get(ISOChronology.getInstance().secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,175,"assertEquals(60 * 60, test.get(ISOChronology.getInstance().secondOfDay()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,176,"assertEquals(0, test.get(ISOChronology.getInstance().millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,177,"assertEquals(60 * 60 * 1000, test.get(ISOChronology.getInstance().millisOfDay()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,178,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,179,test.get(null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,180,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,181,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,184,public void testGetMethods() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,185,MutableDateTime test = new MutableDateTime();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,187,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,188,"assertEquals(LONDON, test.getZone());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,189,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,191,"assertEquals(1, test.getEra());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,192,"assertEquals(20, test.getCenturyOfEra());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,193,"assertEquals(2, test.getYearOfCentury());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,194,"assertEquals(2002, test.getYearOfEra());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,195,"assertEquals(2002, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,196,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,197,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,198,"assertEquals(2002, test.getWeekyear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,199,"assertEquals(23, test.getWeekOfWeekyear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,200,"assertEquals(7, test.getDayOfWeek());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,201,"assertEquals(160, test.getDayOfYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,202,"assertEquals(1, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,203,"assertEquals(0, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,204,"assertEquals(60, test.getMinuteOfDay());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,205,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,206,"assertEquals(60 * 60, test.getSecondOfDay());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,207,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,208,"assertEquals(60 * 60 * 1000, test.getMillisOfDay());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,211,public void testEqualsHashCode() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,212,MutableDateTime test1 = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,213,MutableDateTime test2 = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,214,"assertEquals(true, test1.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,215,"assertEquals(true, test2.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,216,"assertEquals(true, test1.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,217,"assertEquals(true, test2.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,218,"assertEquals(true, test1.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,219,"assertEquals(true, test1.hashCode() == test1.hashCode());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,220,"assertEquals(true, test2.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,222,MutableDateTime test3 = new MutableDateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,223,"assertEquals(false, test1.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,224,"assertEquals(false, test2.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,225,"assertEquals(false, test3.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,226,"assertEquals(false, test3.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,227,"assertEquals(false, test1.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,228,"assertEquals(false, test2.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,230,"assertEquals(false, test1.equals(""Hello""));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,231,"assertEquals(true, test1.equals(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,232,"assertEquals(false, test1.equals(new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance())));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,233,"assertEquals(true, new MutableDateTime(TEST_TIME1, new MockEqualsChronology()).equals(new MutableDateTime(TEST_TIME1, new MockEqualsChronology())));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,234,"assertEquals(false, new MutableDateTime(TEST_TIME1, new MockEqualsChronology()).equals(new MutableDateTime(TEST_TIME1, ISOChronology.getInstance())));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,237,class MockInstant extends AbstractInstant {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,238,public String toString() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,239,return null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,241,public long getMillis() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,242,return TEST_TIME1;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,244,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,245,return ISOChronology.getInstance();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,249,class MockEqualsChronology extends AbstractChronology {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,250,public boolean equals(Object obj) {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,251,return obj instanceof MockEqualsChronology;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,253,public DateTimeZone getZone() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,254,return null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,256,public Chronology withUTC() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,257,return this;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,259,public Chronology withZone(DateTimeZone zone) {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,260,return this;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,262,public String toString() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,263,"return """";"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,267,public void testCompareTo() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,268,MutableDateTime test1 = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,269,MutableDateTime test1a = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,270,"assertEquals(0, test1.compareTo(test1a));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,271,"assertEquals(0, test1a.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,272,"assertEquals(0, test1.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,273,"assertEquals(0, test1a.compareTo(test1a));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,275,MutableDateTime test2 = new MutableDateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,276,"assertEquals(-1, test1.compareTo(test2));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,277,"assertEquals(+1, test2.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,279,"MutableDateTime test3 = new MutableDateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,280,"assertEquals(-1, test1.compareTo(test3));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,281,"assertEquals(+1, test3.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,282,"assertEquals(0, test3.compareTo(test2));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,284,"assertEquals(+1, test2.compareTo(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,285,"assertEquals(0, test1.compareTo(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,287,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,288,test1.compareTo(null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,289,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,290,} catch (NullPointerException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,291,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,292,test1.compareTo(new Date());
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,293,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,294,} catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,297,public void testIsEqual() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,298,MutableDateTime test1 = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,299,MutableDateTime test1a = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,300,"assertEquals(true, test1.isEqual(test1a));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,301,"assertEquals(true, test1a.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,302,"assertEquals(true, test1.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,303,"assertEquals(true, test1a.isEqual(test1a));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,305,MutableDateTime test2 = new MutableDateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,306,"assertEquals(false, test1.isEqual(test2));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,307,"assertEquals(false, test2.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,309,"MutableDateTime test3 = new MutableDateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,310,"assertEquals(false, test1.isEqual(test3));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,311,"assertEquals(false, test3.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,312,"assertEquals(true, test3.isEqual(test2));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,314,"assertEquals(false, test2.isEqual(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,315,"assertEquals(true, test1.isEqual(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,316,"assertEquals(false, test1.isEqual(null));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,319,public void testIsBefore() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,320,MutableDateTime test1 = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,321,MutableDateTime test1a = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,322,"assertEquals(false, test1.isBefore(test1a));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,323,"assertEquals(false, test1a.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,324,"assertEquals(false, test1.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,325,"assertEquals(false, test1a.isBefore(test1a));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,327,MutableDateTime test2 = new MutableDateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,328,"assertEquals(true, test1.isBefore(test2));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,329,"assertEquals(false, test2.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,331,"MutableDateTime test3 = new MutableDateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,332,"assertEquals(true, test1.isBefore(test3));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,333,"assertEquals(false, test3.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,334,"assertEquals(false, test3.isBefore(test2));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,336,"assertEquals(false, test2.isBefore(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,337,"assertEquals(false, test1.isBefore(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,338,"assertEquals(false, test1.isBefore(null));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,341,public void testIsAfter() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,342,MutableDateTime test1 = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,343,MutableDateTime test1a = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,344,"assertEquals(false, test1.isAfter(test1a));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,345,"assertEquals(false, test1a.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,346,"assertEquals(false, test1.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,347,"assertEquals(false, test1a.isAfter(test1a));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,349,MutableDateTime test2 = new MutableDateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,350,"assertEquals(false, test1.isAfter(test2));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,351,"assertEquals(true, test2.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,353,"MutableDateTime test3 = new MutableDateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,354,"assertEquals(false, test1.isAfter(test3));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,355,"assertEquals(true, test3.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,356,"assertEquals(false, test3.isAfter(test2));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,358,"assertEquals(true, test2.isAfter(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,359,"assertEquals(false, test1.isAfter(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,360,"assertEquals(false, test1.isAfter(null));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,364,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,365,MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,367,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,368,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,369,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,370,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,371,oos.close();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,373,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,374,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,375,MutableDateTime result = (MutableDateTime) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,376,ois.close();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,378,"assertEquals(test, result);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,382,public void testToString() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,383,MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,384,"assertEquals(""2002-06-09T01:00:00.000+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,386,"test = new MutableDateTime(TEST_TIME_NOW, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,387,"assertEquals(""2002-06-09T02:00:00.000+02:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,390,public void testToString_String() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,391,MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,392,"assertEquals(""2002 01"", test.toString(""yyyy HH""));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,393,"assertEquals(""2002-06-09T01:00:00.000+01:00"", test.toString(null));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,396,public void testToString_String_String() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,397,MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,398,"assertEquals(""Sun 9/6"", test.toString(""EEE d/M"", Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,399,"assertEquals(""dim. 9/6"", test.toString(""EEE d/M"", Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,400,"assertEquals(""2002-06-09T01:00:00.000+01:00"", test.toString(null, Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,401,"assertEquals(""Sun 9/6"", test.toString(""EEE d/M"", null));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,402,"assertEquals(""2002-06-09T01:00:00.000+01:00"", test.toString(null, null));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,406,public void testToInstant() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,407,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,408,Instant result = test.toInstant();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,409,"assertEquals(TEST_TIME1, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,412,public void testToDateTime() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,413,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,414,DateTime result = test.toDateTime();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,415,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,416,"assertEquals(test.getChronology(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,419,public void testToDateTime_DateTimeZone() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,420,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,421,MutableDateTime result = test.toMutableDateTime(LONDON);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,422,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,423,"assertEquals(test.getChronology(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,424,"assertEquals(LONDON, result.getZone());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,426,test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,427,result = test.toMutableDateTime(PARIS);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,428,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,429,"assertEquals(PARIS, result.getZone());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,431,"test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,432,result = test.toMutableDateTime((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,433,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,434,"assertEquals(GregorianChronology.getInstance(LONDON), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,436,"test = new MutableDateTime(TEST_TIME1, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,437,result = test.toMutableDateTime((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,438,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,439,"assertEquals(LONDON, result.getZone());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,441,test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,442,result = test.toMutableDateTime((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,443,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,444,"assertEquals(LONDON, result.getZone());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,445,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,448,public void testToDateTime_Chronology() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,449,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,450,MutableDateTime result = test.toMutableDateTime(ISOChronology.getInstance());
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,451,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,452,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,454,test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,455,result = test.toMutableDateTime(GregorianChronology.getInstance(PARIS));
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,456,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,457,"assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,459,"test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,460,result = test.toMutableDateTime((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,461,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,462,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,464,test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,465,result = test.toMutableDateTime((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,466,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,467,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,470,public void testToTrustedISOMutableDateTime() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,471,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,472,DateTime result = test.toTrustedISODateTime();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,473,"assertSame(DateTime.class, result.getClass());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,474,"assertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,475,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,476,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,478,test = new MockUntrustedMutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,479,result = test.toTrustedISODateTime();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,480,"assertSame(DateTime.class, result.getClass());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,481,"assertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,482,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,483,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,485,"test = new MutableDateTime(TEST_TIME1, new MockUntrustedZone(""Europe/Paris""));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,486,result = test.toTrustedISODateTime();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,487,"assertSame(DateTime.class, result.getClass());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,488,"assertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,489,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,490,"assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,493,static class MockUntrustedMutableDateTime extends MutableDateTime {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,494,MockUntrustedMutableDateTime(long millis) {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,495,super(millis);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,499,static class MockUntrustedZone extends DateTimeZone {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,500,MockUntrustedZone(String id) {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,501,super(id);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,503,public String getNameKey(long instant) {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,504,return null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,506,public int getOffset(long instant) {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,507,return 60 * 60 * 1000;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,509,public int getStandardOffset(long instant) {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,510,return 60 * 60 * 1000;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,512,public boolean isFixed() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,513,return true;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,515,public long nextTransition(long instant) {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,516,return 0;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,518,public long previousTransition(long instant) {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,519,return 0;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,521,public boolean equals(Object object) {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,522,return false;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,526,public void testToMutableDateTime() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,527,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,528,MutableDateTime result = test.toMutableDateTime();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,529,assertTrue(test != result);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,530,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,531,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,534,public void testToMutableDateTime_DateTimeZone() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,535,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,536,MutableDateTime result = test.toMutableDateTime(LONDON);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,537,assertTrue(test != result);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,538,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,539,"assertEquals(ISOChronology.getInstance(LONDON), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,541,test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,542,result = test.toMutableDateTime(PARIS);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,543,assertTrue(test != result);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,544,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,545,"assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,547,"test = new MutableDateTime(TEST_TIME1, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,548,result = test.toMutableDateTime((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,549,assertTrue(test != result);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,550,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,551,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,553,test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,554,result = test.toMutableDateTime((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,555,assertTrue(test != result);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,556,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,557,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,560,public void testToMutableDateTime_Chronology() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,561,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,562,MutableDateTime result = test.toMutableDateTime(ISOChronology.getInstance());
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,563,assertTrue(test != result);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,564,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,565,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,567,test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,568,result = test.toMutableDateTime(GregorianChronology.getInstance(PARIS));
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,569,assertTrue(test != result);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,570,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,571,"assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,573,"test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,574,result = test.toMutableDateTime((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,575,assertTrue(test != result);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,576,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,577,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,579,test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,580,result = test.toMutableDateTime((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,581,assertTrue(test != result);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,582,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,583,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,586,public void testToDate() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,587,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,588,Date result = test.toDate();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,589,"assertEquals(test.getMillis(), result.getTime());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,592,public void testToCalendar_Locale() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,593,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,594,Calendar result = test.toCalendar(null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,595,"assertEquals(test.getMillis(), result.getTime().getTime());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,596,"assertEquals(TimeZone.getTimeZone(""Europe/London""), result.getTimeZone());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,598,"test = new MutableDateTime(TEST_TIME1, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,599,result = test.toCalendar(null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,600,"assertEquals(test.getMillis(), result.getTime().getTime());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,601,"assertEquals(TimeZone.getTimeZone(""Europe/Paris""), result.getTimeZone());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,603,"test = new MutableDateTime(TEST_TIME1, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,604,result = test.toCalendar(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,605,"assertEquals(test.getMillis(), result.getTime().getTime());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,606,"assertEquals(TimeZone.getTimeZone(""Europe/Paris""), result.getTimeZone());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,609,public void testToGregorianCalendar() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,610,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,611,GregorianCalendar result = test.toGregorianCalendar();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,612,"assertEquals(test.getMillis(), result.getTime().getTime());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,613,"assertEquals(TimeZone.getTimeZone(""Europe/London""), result.getTimeZone());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,615,"test = new MutableDateTime(TEST_TIME1, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,616,result = test.toGregorianCalendar();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,617,"assertEquals(test.getMillis(), result.getTime().getTime());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,618,"assertEquals(TimeZone.getTimeZone(""Europe/Paris""), result.getTimeZone());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,56,import java.util.Date;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,57,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,59,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,60,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,62,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,63,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,64,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,65,import org.joda.time.convert.MockZeroNullIntegerConverter;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,68,* This class is a Junit unit test for MutableDateTime.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,70,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,72,public class TestMutableDateTime_Constructors extends TestCase {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,73,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,74,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,76,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,77,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,79,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,80,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,81,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,82,366 + 365;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,83,long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,84,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,85,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,86,366 + 365 + 365;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,88,// 2002-06-09
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,89,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,90,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,92,// 2002-04-05
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,93,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,94,(y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,95,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,96,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,98,// 2003-05-06
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,99,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,100,(y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,101,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,102,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,104,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,105,private Locale locale = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,107,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,108,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,111,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,112,return new TestSuite(TestMutableDateTime_Constructors.class);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,115,public TestMutableDateTime_Constructors(String name) {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,116,super(name);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,119,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,120,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,121,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,122,locale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,123,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,124,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,127,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,128,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,129,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,130,Locale.setDefault(locale);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,131,zone = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,135,public void testTest() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,136,"assertEquals(""2002-06-09T00:00:00.000Z"", new Instant(TEST_TIME_NOW).toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,137,"assertEquals(""2002-04-05T12:24:00.000Z"", new Instant(TEST_TIME1).toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,138,"assertEquals(""2003-05-06T14:28:00.000Z"", new Instant(TEST_TIME2).toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,143,* Test constructor ()
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,145,public void testConstructor() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,146,MutableDateTime test = new MutableDateTime();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,147,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,148,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,152,* Test constructor (DateTimeZone)
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,154,public void testConstructor_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,155,MutableDateTime test = new MutableDateTime(PARIS);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,156,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,157,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,161,* Test constructor (DateTimeZone=null)
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,163,public void testConstructor_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,164,MutableDateTime test = new MutableDateTime((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,165,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,166,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,170,* Test constructor (Chronology)
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,172,public void testConstructor_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,173,MutableDateTime test = new MutableDateTime(GregorianChronology.getInstance());
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,174,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,175,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,179,* Test constructor (Chronology=null)
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,181,public void testConstructor_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,182,MutableDateTime test = new MutableDateTime((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,183,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,184,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,189,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,191,public void testConstructor_long1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,192,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,193,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,194,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,198,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,200,public void testConstructor_long2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,201,MutableDateTime test = new MutableDateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,202,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,203,"assertEquals(TEST_TIME2, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,207,"* Test constructor (long, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,209,public void testConstructor_long1_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,210,"MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,211,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,212,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,216,"* Test constructor (long, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,218,public void testConstructor_long2_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,219,"MutableDateTime test = new MutableDateTime(TEST_TIME2, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,220,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,221,"assertEquals(TEST_TIME2, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,225,"* Test constructor (long, DateTimeZone=null)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,227,public void testConstructor_long_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,228,"MutableDateTime test = new MutableDateTime(TEST_TIME1, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,229,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,230,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,234,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,236,public void testConstructor_long1_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,237,"MutableDateTime test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,238,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,239,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,243,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,245,public void testConstructor_long2_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,246,"MutableDateTime test = new MutableDateTime(TEST_TIME2, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,247,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,248,"assertEquals(TEST_TIME2, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,252,"* Test constructor (long, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,254,public void testConstructor_long_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,255,"MutableDateTime test = new MutableDateTime(TEST_TIME1, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,256,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,257,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,262,* Test constructor (Object)
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,264,public void testConstructor_Object() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,265,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,266,MutableDateTime test = new MutableDateTime(date);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,267,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,268,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,272,* Test constructor (Object)
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,274,public void testConstructor_invalidObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,275,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,276,new MutableDateTime(new Object());
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,277,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,278,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,282,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,284,public void testConstructor_nullObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,285,MutableDateTime test = new MutableDateTime((Object) null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,286,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,287,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,291,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,293,public void testConstructor_badconverterObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,294,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,295,ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,296,MutableDateTime test = new MutableDateTime(new Integer(0));
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,297,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,298,"assertEquals(0L, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,299,} finally {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,300,ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,305,"* Test constructor (Object, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,307,public void testConstructor_Object_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,308,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,309,"MutableDateTime test = new MutableDateTime(date, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,310,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,311,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,315,"* Test constructor (Object, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,317,public void testConstructor_invalidObject_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,318,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,319,"new MutableDateTime(new Object(), PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,320,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,321,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,325,"* Test constructor (Object=null, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,327,public void testConstructor_nullObject_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,328,"MutableDateTime test = new MutableDateTime((Object) null, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,329,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,330,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,334,"* Test constructor (Object, DateTimeZone=null)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,336,public void testConstructor_Object_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,337,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,338,"MutableDateTime test = new MutableDateTime(date, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,339,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,340,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,344,"* Test constructor (Object=null, DateTimeZone=null)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,346,public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,347,"MutableDateTime test = new MutableDateTime((Object) null, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,348,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,349,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,353,"* Test constructor (Object, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,355,public void testConstructor_badconverterObject_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,356,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,357,ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,358,"MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,359,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,360,"assertEquals(0L, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,361,} finally {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,362,ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,367,"* Test constructor (Object, Chronology)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,369,public void testConstructor_Object_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,370,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,371,"MutableDateTime test = new MutableDateTime(date, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,372,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,373,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,377,"* Test constructor (Object, Chronology)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,379,public void testConstructor_invalidObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,380,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,381,"new MutableDateTime(new Object(), GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,382,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,383,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,387,"* Test constructor (Object=null, Chronology)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,389,public void testConstructor_nullObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,390,"MutableDateTime test = new MutableDateTime((Object) null, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,391,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,392,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,396,"* Test constructor (Object, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,398,public void testConstructor_Object_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,399,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,400,"MutableDateTime test = new MutableDateTime(date, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,401,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,402,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,406,"* Test constructor (Object=null, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,408,public void testConstructor_nullObject_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,409,"MutableDateTime test = new MutableDateTime((Object) null, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,410,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,411,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,415,"* Test constructor (Object, Chronology)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,417,public void testConstructor_badconverterObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,418,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,419,ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,420,"MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,421,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,422,"assertEquals(0L, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,423,} finally {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,424,ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,430,"* Test constructor (int, int, int)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,432,public void testConstructor_int_int_int_int_int_int_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,433,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 1, 0, 0, 0);  // +01:00"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,434,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,435,"assertEquals(LONDON, test.getZone());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,436,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,437,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,438,"new MutableDateTime(Integer.MIN_VALUE, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,439,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,440,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,441,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,442,"new MutableDateTime(Integer.MAX_VALUE, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,443,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,444,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,445,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,446,"new MutableDateTime(2002, 0, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,447,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,448,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,449,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,450,"new MutableDateTime(2002, 13, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,451,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,452,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,453,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,454,"new MutableDateTime(2002, 6, 0, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,455,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,456,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,457,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,458,"new MutableDateTime(2002, 6, 31, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,459,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,460,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,461,"new MutableDateTime(2002, 7, 31, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,462,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,463,"new MutableDateTime(2002, 7, 32, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,464,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,465,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,469,"* Test constructor (int, int, int, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,471,public void testConstructor_int_int_int_int_int_int_int_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,472,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 2, 0, 0, 0, PARIS);  // +02:00"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,473,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,474,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,475,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,476,"new MutableDateTime(Integer.MIN_VALUE, 6, 9, 0, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,477,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,478,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,479,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,480,"new MutableDateTime(Integer.MAX_VALUE, 6, 9, 0, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,481,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,482,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,483,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,484,"new MutableDateTime(2002, 0, 9, 0, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,485,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,486,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,487,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,488,"new MutableDateTime(2002, 13, 9, 0, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,489,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,490,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,491,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,492,"new MutableDateTime(2002, 6, 0, 0, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,493,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,494,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,495,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,496,"new MutableDateTime(2002, 6, 31, 0, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,497,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,498,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,499,"new MutableDateTime(2002, 7, 31, 0, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,500,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,501,"new MutableDateTime(2002, 7, 32, 0, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,502,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,503,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,507,"* Test constructor (int, int, int, DateTimeZone=null)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,509,public void testConstructor_int_int_int_int_int_int_int_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,510,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 1, 0, 0, 0, (DateTimeZone) null);  // +01:00"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,511,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,512,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,516,"* Test constructor (int, int, int, Chronology)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,518,public void testConstructor_int_int_int_int_int_int_int_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,519,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 1, 0, 0, 0, GregorianChronology.getInstance());  // +01:00"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,520,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,521,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,522,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,523,"new MutableDateTime(Integer.MIN_VALUE, 6, 9, 0, 0, 0, 0, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,524,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,525,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,526,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,527,"new MutableDateTime(Integer.MAX_VALUE, 6, 9, 0, 0, 0, 0, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,528,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,529,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,530,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,531,"new MutableDateTime(2002, 0, 9, 0, 0, 0, 0, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,532,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,533,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,534,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,535,"new MutableDateTime(2002, 13, 9, 0, 0, 0, 0, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,536,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,537,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,538,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,539,"new MutableDateTime(2002, 6, 0, 0, 0, 0, 0, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,540,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,541,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,542,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,543,"new MutableDateTime(2002, 6, 31, 0, 0, 0, 0, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,544,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,545,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,546,"new MutableDateTime(2002, 7, 31, 0, 0, 0, 0, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,547,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,548,"new MutableDateTime(2002, 7, 32, 0, 0, 0, 0, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,549,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,550,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,554,"* Test constructor (int, int, int, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,556,public void testConstructor_int_int_int_int_int_int_int_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,557,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 1, 0, 0, 0, (Chronology) null);  // +01:00"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,558,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,559,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,56,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,57,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,59,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,60,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,62,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,63,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,66,* This class is a JUnit test for MutableDateTime.
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,68,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,70,public class TestMutableDateTime_Sets extends TestCase {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,71,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,72,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,74,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,75,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,77,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,78,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,79,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,80,366 + 365;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,81,long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,82,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,83,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,84,366 + 365 + 365;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,86,// 2002-06-09
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,87,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,88,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,90,// 2002-04-05
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,91,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,92,(y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,93,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,94,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,96,// 2003-05-06
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,97,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,98,(y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,99,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,100,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,102,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,103,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,104,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,106,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,107,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,110,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,111,return new TestSuite(TestMutableDateTime_Sets.class);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,114,public TestMutableDateTime_Sets(String name) {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,115,super(name);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,118,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,119,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,120,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,121,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,122,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,123,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,124,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,125,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,128,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,129,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,130,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,131,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,132,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,133,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,134,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,135,originalLocale = null;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,139,public void testTest() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,140,"assertEquals(""2002-06-09T00:00:00.000Z"", new Instant(TEST_TIME_NOW).toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,141,"assertEquals(""2002-04-05T12:24:00.000Z"", new Instant(TEST_TIME1).toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,142,"assertEquals(""2003-05-06T14:28:00.000Z"", new Instant(TEST_TIME2).toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,146,public void testSetMillis_long1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,147,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,148,test.setMillis(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,149,"assertEquals(TEST_TIME2, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,150,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,154,public void testSetChronology_Chronology1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,155,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,156,test.setChronology(GregorianChronology.getInstance(PARIS));
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,157,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,158,"assertEquals(GregorianChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,161,public void testSetChronology_Chronology2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,162,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,163,test.setChronology(null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,164,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,165,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,169,public void testSetZone_DateTimeZone1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,170,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,171,test.setZone(PARIS);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,172,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,173,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,176,public void testSetZone_DateTimeZone2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,177,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,178,test.setZone(null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,179,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,180,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,184,public void testSetZoneRetainFields_DateTimeZone1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,185,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,186,test.setZoneRetainFields(PARIS);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,187,"assertEquals(TEST_TIME1 - DateTimeConstants.MILLIS_PER_HOUR, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,188,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,191,public void testSetZoneRetainFields_DateTimeZone2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,192,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,193,test.setZoneRetainFields(null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,194,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,195,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,198,public void testSetZoneRetainFields_DateTimeZone3() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,199,"MutableDateTime test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,200,test.setZoneRetainFields(null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,201,"assertEquals(TEST_TIME1 + DateTimeConstants.MILLIS_PER_HOUR, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,202,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,205,public void testSetZoneRetainFields_DateTimeZone4() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,206,Chronology chrono = new MockNullZoneChronology();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,207,"MutableDateTime test = new MutableDateTime(TEST_TIME1, chrono);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,208,test.setZoneRetainFields(PARIS);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,209,"assertEquals(TEST_TIME1 - DateTimeConstants.MILLIS_PER_HOUR, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,210,"assertSame(chrono, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,214,public void testSetMillis_Object1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,215,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,216,test.setMillis(new Long(TEST_TIME2));
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,217,"assertEquals(TEST_TIME2, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,218,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,221,public void testSetMillis_Object2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,222,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,223,test.setMillis(null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,224,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,225,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,229,public void testSet_DateTimeField_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,230,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,231,"test.set(ISOChronology.getInstance().year(), 2010);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,232,"assertEquals(2010, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,235,public void testSet_DateTimeField_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,236,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,237,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,238,"test.set(null, 2010);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,239,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,240,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,241,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,244,public void testSet_DateTimeField_int3() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,245,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,246,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,247,"test.set(ISOChronology.getInstance().monthOfYear(), 13);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,248,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,249,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,250,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,254,public void testSetDate_int_int_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,255,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,256,"test.setDate(2010, 12, 3);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,257,"assertEquals(2010, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,258,"assertEquals(12, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,259,"assertEquals(3, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,260,"assertEquals(12, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,261,"assertEquals(24, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,262,"assertEquals(48, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,263,"assertEquals(501, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,266,public void testSetDate_int_int_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,267,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,268,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,269,"test.setDate(2010, 13, 3);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,270,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,271,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,272,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,276,public void testSetDate_long1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,277,"long setter = new DateTime(2010, 12, 3, 5, 7, 9, 501).getMillis();"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,278,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,279,test.setDate(setter);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,280,"assertEquals(2010, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,281,"assertEquals(12, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,282,"assertEquals(3, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,283,"assertEquals(12, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,284,"assertEquals(24, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,285,"assertEquals(48, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,286,"assertEquals(501, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,290,public void testSetDate_Object1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,291,"Long setter = new Long(new DateTime(2010, 12, 3, 5, 7, 9, 501).getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,292,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,293,test.setDate(setter);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,294,"assertEquals(2010, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,295,"assertEquals(12, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,296,"assertEquals(3, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,297,"assertEquals(12, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,298,"assertEquals(24, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,299,"assertEquals(48, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,300,"assertEquals(501, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,303,public void testSetDate_Object2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,304,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,305,test.setDate(null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,306,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,310,public void testSetTime_int_int_int_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,311,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,312,"test.setTime(5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,313,"assertEquals(2002, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,314,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,315,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,316,"assertEquals(5, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,317,"assertEquals(6, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,318,"assertEquals(7, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,319,"assertEquals(8, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,322,public void testSetTime_int_int_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,323,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,324,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,325,"test.setTime(60, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,326,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,327,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,328,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,332,public void testSetTime_long1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,333,"long setter = new DateTime(2010, 12, 3, 5, 7, 9, 11).getMillis();"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,334,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,335,test.setTime(setter);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,336,"assertEquals(2002, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,337,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,338,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,339,"assertEquals(5, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,340,"assertEquals(7, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,341,"assertEquals(9, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,342,"assertEquals(11, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,346,public void testSetTime_Object1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,347,"Long setter = new Long(new DateTime(2010, 12, 3, 5, 7, 9, 11).getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,348,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,349,test.setTime(setter);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,350,"assertEquals(2002, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,351,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,352,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,353,"assertEquals(5, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,354,"assertEquals(7, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,355,"assertEquals(9, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,356,"assertEquals(11, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,359,public void testSetTime_Object2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,360,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,361,test.setTime(null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,362,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,366,public void testSetDateTime_int_int_int_int_int_int_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,367,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,368,"test.setDateTime(2010, 12, 3, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,369,"assertEquals(2010, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,370,"assertEquals(12, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,371,"assertEquals(3, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,372,"assertEquals(5, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,373,"assertEquals(6, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,374,"assertEquals(7, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,375,"assertEquals(8, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,378,public void testSetDateTime_int_int_int_int_int_int_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,379,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,380,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,381,"test.setDateTime(2010, 13, 3, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,382,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,383,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,385,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,389,public void testSetDateTime_long1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,390,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,391,test.setDateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,392,"assertEquals(TEST_TIME2, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,393,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,397,public void testSetDateTime_Object1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,398,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,399,test.setDateTime(new Long(TEST_TIME2));
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,400,"assertEquals(TEST_TIME2, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,401,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,404,public void testSetDateTime_Object2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,405,MutableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,406,test.setDateTime(null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,407,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,408,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,412,public void testSetYear_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,413,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,414,test.setYear(2010);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,415,"assertEquals(""2010-06-09T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,419,public void testSetMonthOfYear_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,420,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,421,test.setMonthOfYear(12);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,422,"assertEquals(""2002-12-09T05:06:07.008Z"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,425,public void testSetMonthOfYear_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,426,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,427,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,428,test.setMonthOfYear(13);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,429,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,430,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,431,"assertEquals(""2002-06-09T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,435,public void testSetDayOfMonth_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,436,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,437,test.setDayOfMonth(17);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,438,"assertEquals(""2002-06-17T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,441,public void testSetDayOfMonth_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,442,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,443,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,444,test.setDayOfMonth(31);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,445,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,446,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,447,"assertEquals(""2002-06-09T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,451,public void testSetDayOfYear_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,452,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,453,test.setDayOfYear(3);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,454,"assertEquals(""2002-01-03T05:06:07.008Z"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,457,public void testSetDayOfYear_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,458,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,459,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,460,test.setDayOfYear(366);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,461,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,462,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,463,"assertEquals(""2002-06-09T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,467,public void testSetWeekyear_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,468,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,469,test.setWeekyear(2001);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,470,"assertEquals(""2001-06-10T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,474,public void testSetWeekOfWeekyear_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,475,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,476,test.setWeekOfWeekyear(2);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,477,"assertEquals(""2002-01-13T05:06:07.008Z"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,480,public void testSetWeekOfWeekyear_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,481,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,482,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,483,test.setWeekOfWeekyear(53);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,484,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,485,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,486,"assertEquals(""2002-06-09T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,490,public void testSetDayOfWeek_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,491,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,492,test.setDayOfWeek(5);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,493,"assertEquals(""2002-06-07T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,496,public void testSetDayOfWeek_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,497,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,498,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,499,test.setDayOfWeek(8);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,500,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,501,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,502,"assertEquals(""2002-06-09T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,506,public void testSetHourOfDay_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,507,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,508,test.setHourOfDay(13);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,509,"assertEquals(""2002-06-09T13:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,512,public void testSetHourOfDay_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,513,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,514,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,515,test.setHourOfDay(24);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,516,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,517,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,518,"assertEquals(""2002-06-09T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,522,public void testSetMinuteOfHour_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,523,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,524,test.setMinuteOfHour(13);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,525,"assertEquals(""2002-06-09T05:13:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,528,public void testSetMinuteOfHour_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,529,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,530,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,531,test.setMinuteOfHour(60);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,532,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,533,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,534,"assertEquals(""2002-06-09T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,538,public void testSetMinuteOfDay_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,539,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,540,test.setMinuteOfDay(13);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,541,"assertEquals(""2002-06-09T00:13:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,544,public void testSetMinuteOfDay_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,545,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,546,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,547,test.setMinuteOfDay(24 * 60);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,548,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,549,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,550,"assertEquals(""2002-06-09T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,554,public void testSetSecondOfMinute_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,555,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,556,test.setSecondOfMinute(13);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,557,"assertEquals(""2002-06-09T05:06:13.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,560,public void testSetSecondOfMinute_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,561,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,562,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,563,test.setSecondOfMinute(60);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,564,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,565,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,566,"assertEquals(""2002-06-09T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,570,public void testSetSecondOfDay_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,571,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,572,test.setSecondOfDay(13);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,573,"assertEquals(""2002-06-09T00:00:13.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,576,public void testSetSecondOfDay_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,577,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,578,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,579,test.setSecondOfDay(24 * 60 * 60);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,580,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,581,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,582,"assertEquals(""2002-06-09T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,586,public void testSetMilliOfSecond_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,587,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,588,test.setMillisOfSecond(13);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,589,"assertEquals(""2002-06-09T05:06:07.013+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,592,public void testSetMilliOfSecond_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,593,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,594,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,595,test.setMillisOfSecond(1000);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,596,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,597,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,598,"assertEquals(""2002-06-09T05:06:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,602,public void testSetMilliOfDay_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,603,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,604,test.setMillisOfDay(13);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,605,"assertEquals(""2002-06-09T00:00:00.013+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,608,public void testSetMilliOfDay_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,609,"MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,610,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,611,test.setMillisOfDay(24 * 60 * 60 * 1000);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,612,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,613,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,614,"assertEquals(""2002-06-09T05:06:07.008+01:00"", test.toString());"

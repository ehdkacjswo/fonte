is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,2,*  Copyright 2001-2006 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,180, Gets the overlap where this interval and that specified.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,180,* Gets the overlap between this interval and another interval.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,186,* <p>
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,187,* The chronology of the returned interval is the same as that of
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,188,* this interval (the chronology of the interval parameter is not used).
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,189,* Note that the use of the chronology was only correctly implemented
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,190,* in version 1.3.
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,198,"eturn new Interval(start, end);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,203,"return new Interval(start, end, getChronology());"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,203, Gets the gap between this interval and that specified.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,208,* Gets the gap between this interval and another interval.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,209,* The other interval can be either before or after this interval.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,215,* <p>
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,216,* The chronology of the returned interval is the same as that of
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,217,* this interval (the chronology of the interval parameter is not used).
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,218,* Note that the use of the chronology was only correctly implemented
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,219,* in version 1.3.
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,224,"eturn new Interval(otherEnd, thisStart);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,235,"return new Interval(otherEnd, thisStart, getChronology());"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,226,"eturn new Interval(thisEnd, otherStart);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,237,"return new Interval(thisEnd, otherStart, getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,43,"private static final DateTimeZone MOSCOW = DateTimeZone.forID(""Europe/Moscow"");"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,93,ateTimeZone.setDefault(LONDON);
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,94,"imeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,95,ocale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,94,DateTimeZone.setDefault(PARIS);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,95,TimeZone.setDefault(PARIS.toTimeZone());
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,96,Locale.setDefault(Locale.FRANCE);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,358,public void testOverlap_RInterval_zone() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,359,"Interval testA = new Interval(new DateTime(TEST_TIME1, LONDON), new DateTime(TEST_TIME2, LONDON));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,360,"assertEquals(ISOChronology.getInstance(LONDON), testA.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,362,"Interval testB = new Interval(new DateTime(TEST_TIME1 + 1, MOSCOW), new DateTime(TEST_TIME2 + 1, MOSCOW));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,363,"assertEquals(ISOChronology.getInstance(MOSCOW), testB.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,365,Interval resultAB = testA.overlap(testB);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,366,"assertEquals(ISOChronology.getInstance(LONDON), resultAB.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,368,Interval resultBA = testB.overlap(testA);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,369,"assertEquals(ISOChronology.getInstance(MOSCOW), resultBA.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,372,public void testOverlap_RInterval_zoneUTC() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,373,"Interval testA = new Interval(new Instant(TEST_TIME1), new Instant(TEST_TIME2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,374,"assertEquals(ISOChronology.getInstanceUTC(), testA.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,376,"Interval testB = new Interval(new Instant(TEST_TIME1 + 1), new Instant(TEST_TIME2 + 1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,377,"assertEquals(ISOChronology.getInstanceUTC(), testB.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,379,Interval result = testA.overlap(testB);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,380,"assertEquals(ISOChronology.getInstanceUTC(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,409,public void testGap_RInterval_zone() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,410,"Interval testA = new Interval(new DateTime(TEST_TIME1, LONDON), new DateTime(TEST_TIME2, LONDON));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,411,"assertEquals(ISOChronology.getInstance(LONDON), testA.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,413,"Interval testB = new Interval(new DateTime(TEST_TIME1 - 100, MOSCOW), new DateTime(TEST_TIME1 - 50, MOSCOW));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,414,"assertEquals(ISOChronology.getInstance(MOSCOW), testB.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,416,Interval resultAB = testA.gap(testB);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,417,"assertEquals(ISOChronology.getInstance(LONDON), resultAB.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,419,Interval resultBA = testB.gap(testA);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,420,"assertEquals(ISOChronology.getInstance(MOSCOW), resultBA.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,423,public void testGap_RInterval_zoneUTC() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,424,"Interval testA = new Interval(new Instant(TEST_TIME1), new Instant(TEST_TIME2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,425,"assertEquals(ISOChronology.getInstanceUTC(), testA.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,427,"Interval testB = new Interval(new Instant(TEST_TIME1 - 100), new Instant(TEST_TIME1 - 50));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,428,"assertEquals(ISOChronology.getInstanceUTC(), testB.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,430,Interval result = testA.gap(testB);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,431,"assertEquals(ISOChronology.getInstanceUTC(), result.getChronology());"

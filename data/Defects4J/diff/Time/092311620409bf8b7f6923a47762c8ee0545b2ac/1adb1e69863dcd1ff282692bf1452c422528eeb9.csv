is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,791,ocalDateTime check = LocalDateTime.fromDateFields(date);
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,792,f (check.isBefore(this)) {
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,793,/ DST gap
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,794,/ move forward in units of one minute until equal/after
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,795,hile (check.isBefore(this)) {
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,796,ate.setTime(date.getTime() + 60000);
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,797,heck = LocalDateTime.fromDateFields(date);
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,799,/ move back in units of one second until date wrong
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,800,hile (check.isBefore(this) == false) {
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,801,ate.setTime(date.getTime() - 1000);
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,802,heck = LocalDateTime.fromDateFields(date);
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,804,ate.setTime(date.getTime() + 1000);
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,805, else if (check.equals(this)) {
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,806,/ check for DST overlap
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,807,ate earlier = new Date(date.getTime() - TimeZone.getDefault().getDSTSavings());
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,808,heck = LocalDateTime.fromDateFields(earlier);
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,809,f (check.equals(this)) {
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,810,ate = earlier;
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,813,eturn date;
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,792,"return correctDstTransition(date, TimeZone.getDefault());"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,796,* Get the date time as a <code>java.util.Date</code> using the specified time zone.
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,797,* <p>
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,798,* The <code>Date</code> object created has exactly the same fields as this
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,799,"* date-time, except when the time would be invalid due to a daylight savings"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,800,"* gap. In that case, the time will be set to the earliest valid time after the gap."
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,801,* <p>
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,802,"* In the case of a daylight savings overlap, the earlier instant is selected."
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,803,* <p>
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,804,* Converting to a JDK Date is full of complications as the JDK Date constructor
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,805,* doesn't behave as you might expect around DST transitions. This method works
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,806,* by taking a first guess and then adjusting. This also handles the situation
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,807,* where the JDK time zone data differs from the Joda-Time time zone data.
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,808,* <p>
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,809,"* Unlike {@link #toDate()}, this implementation does not rely on Java's synchronized"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,810,"* time zone initialization logic, and should demonstrate better concurrent performance"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,811,* characteristics.
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,813,"* @return a Date initialised with this date-time, never null"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,814,* @since 2.0
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,816,public Date toDate(final TimeZone timeZone) {
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,817,final Calendar calendar = Calendar.getInstance(timeZone);
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,818,calendar.clear();
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,819,"calendar.set(getYear(), getMonthOfYear() - 1, getDayOfMonth(),"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,820,"getHourOfDay(), getMinuteOfHour(), getSecondOfMinute());"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,821,Date date = calendar.getTime();
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,822,date.setTime(date.getTime() + getMillisOfSecond());
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,824,"return correctDstTransition(date, timeZone);"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,829,* Correct <code>date</code> in case of DST overlap.
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,830,* <p>
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,831,* The <code>Date</code> object created has exactly the same fields as this
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,832,"* date-time, except when the time would be invalid due to a daylight savings"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,833,"* gap. In that case, the time will be set to the earliest valid time after the gap."
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,834,* <p>
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,835,"* In the case of a daylight savings overlap, the earlier instant is selected."
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,836,* <p>
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,837,* Converting to a JDK Date is full of complications as the JDK Date constructor
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,838,* doesn't behave as you might expect around DST transitions. This method works
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,839,* by taking a first guess and then adjusting. This also handles the situation
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,840,* where the JDK time zone data differs from the Joda-Time time zone data.
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,841,* @see #toDate()
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,843,"private Date correctDstTransition(Date date, final TimeZone timeZone) {"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,844,Calendar calendar = Calendar.getInstance(timeZone);
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,845,calendar.setTime(date);
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,846,LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,847,if (check.isBefore(this)) {
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,848,// DST gap
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,849,// move forward in units of one minute until equal/after
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,850,while (check.isBefore(this)) {
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,851,calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,852,check = LocalDateTime.fromCalendarFields(calendar);
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,854,// move back in units of one second until date wrong
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,855,while (check.isBefore(this) == false) {
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,856,calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,857,check = LocalDateTime.fromCalendarFields(calendar);
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,859,calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,860,} else if (check.equals(this)) {
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,861,// check for DST overlap
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,862,final Calendar earlier = Calendar.getInstance(timeZone);
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,863,earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,864,check = LocalDateTime.fromCalendarFields(earlier);
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,865,if (check.equals(this)) {
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,866,calendar = earlier;
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,869,return calendar.getTime();
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,911,public void testToDate_summer_Zone() {
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,912,"LocalDateTime base = new LocalDateTime(2005, 7, 9, 10, 20, 30, 40, COPTIC_PARIS);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,914,Date test = base.toDate(TimeZone.getDefault());
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,915,"check(base, 2005, 7, 9, 10, 20, 30, 40);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,917,GregorianCalendar gcal = new GregorianCalendar();
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,918,gcal.clear();
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,919,"gcal.set(Calendar.YEAR, 2005);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,920,"gcal.set(Calendar.MONTH, Calendar.JULY);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,921,"gcal.set(Calendar.DAY_OF_MONTH, 9);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,922,"gcal.set(Calendar.HOUR_OF_DAY, 10);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,923,"gcal.set(Calendar.MINUTE, 20);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,924,"gcal.set(Calendar.SECOND, 30);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,925,"gcal.set(Calendar.MILLISECOND, 40);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,926,"assertEquals(gcal.getTime(), test);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,929,public void testToDate_winter_Zone() {
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,930,"LocalDateTime base = new LocalDateTime(2005, 1, 9, 10, 20, 30, 40, COPTIC_PARIS);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,932,Date test = base.toDate(TimeZone.getDefault());
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,933,"check(base, 2005, 1, 9, 10, 20, 30, 40);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,935,GregorianCalendar gcal = new GregorianCalendar();
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,936,gcal.clear();
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,937,"gcal.set(Calendar.YEAR, 2005);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,938,"gcal.set(Calendar.MONTH, Calendar.JANUARY);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,939,"gcal.set(Calendar.DAY_OF_MONTH, 9);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,940,"gcal.set(Calendar.HOUR_OF_DAY, 10);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,941,"gcal.set(Calendar.MINUTE, 20);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,942,"gcal.set(Calendar.SECOND, 30);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,943,"gcal.set(Calendar.MILLISECOND, 40);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,944,"assertEquals(gcal.getTime(), test);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,947,public void testToDate_springDST_Zone() {
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,948,"LocalDateTime base = new LocalDateTime(2007, 4, 2, 0, 20, 0, 0);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,950,"SimpleTimeZone testZone = new SimpleTimeZone(3600000, ""NoMidnight"","
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,951,"Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,952,TimeZone currentZone = TimeZone.getDefault();
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,953,try {
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,954,TimeZone.setDefault(testZone);
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,955,Date test = base.toDate(TimeZone.getDefault());
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,956,"check(base, 2007, 4, 2, 0, 20, 0, 0);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,957,"assertEquals(""Mon Apr 02 01:00:00 GMT+02:00 2007"", test.toString());"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,958,} finally {
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,959,TimeZone.setDefault(currentZone);
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,963,public void testToDate_springDST_2Hour40Savings_Zone() {
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,964,"LocalDateTime base = new LocalDateTime(2007, 4, 2, 0, 20, 0, 0);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,966,"SimpleTimeZone testZone = new SimpleTimeZone(3600000, ""NoMidnight"","
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,967,"Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000, (3600000 / 6) * 16);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,968,TimeZone currentZone = TimeZone.getDefault();
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,969,try {
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,970,TimeZone.setDefault(testZone);
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,971,Date test = base.toDate(TimeZone.getDefault());
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,972,"check(base, 2007, 4, 2, 0, 20, 0, 0);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,973,"assertEquals(""Mon Apr 02 02:40:00 GMT+03:40 2007"", test.toString());"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,974,} finally {
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,975,TimeZone.setDefault(currentZone);
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,979,public void testToDate_autumnDST_Zone() {
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,980,"LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,982,"SimpleTimeZone testZone = new SimpleTimeZone(3600000, ""NoMidnight"","
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,983,"Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,984,TimeZone currentZone = TimeZone.getDefault();
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,985,try {
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,986,TimeZone.setDefault(testZone);
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,987,Date test = base.toDate(TimeZone.getDefault());
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,988,"check(base, 2007, 10, 2, 0, 20, 30, 0);"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,989,"assertEquals(""Tue Oct 02 00:20:30 GMT+02:00 2007"", test.toString());"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,990,} finally {
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,991,TimeZone.setDefault(currentZone);

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/chrono/BasicChronology.java,src/main/java/org/joda/time/chrono/BasicChronology.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/main/java/org/joda/time/chrono/BasicChronology.java,src/main/java/org/joda/time/chrono/BasicChronology.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/main/java/org/joda/time/chrono/BasicChronology.java,src/main/java/org/joda/time/chrono/BasicChronology.java,196,eturn super.equals(obj);
True,src/main/java/org/joda/time/chrono/BasicChronology.java,src/main/java/org/joda/time/chrono/BasicChronology.java,197,if (this == obj) {
True,src/main/java/org/joda/time/chrono/BasicChronology.java,src/main/java/org/joda/time/chrono/BasicChronology.java,198,return true;
True,src/main/java/org/joda/time/chrono/BasicChronology.java,src/main/java/org/joda/time/chrono/BasicChronology.java,200,if (obj != null && getClass() == obj.getClass()) {
True,src/main/java/org/joda/time/chrono/BasicChronology.java,src/main/java/org/joda/time/chrono/BasicChronology.java,201,BasicChronology chrono = (BasicChronology) obj;
True,src/main/java/org/joda/time/chrono/BasicChronology.java,src/main/java/org/joda/time/chrono/BasicChronology.java,202,return getMinimumDaysInFirstWeek() == chrono.getMinimumDaysInFirstWeek() &&
True,src/main/java/org/joda/time/chrono/BasicChronology.java,src/main/java/org/joda/time/chrono/BasicChronology.java,203,getZone().equals(chrono.getZone());
True,src/main/java/org/joda/time/chrono/BasicChronology.java,src/main/java/org/joda/time/chrono/BasicChronology.java,205,return false;
False,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,2,  Copyright 2001-2009 Stephen Colebourne
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,177,eturn super.equals(obj);
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,178,if (this == obj) {
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,179,return true;
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,181,if (obj instanceof BuddhistChronology) {
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,182,BuddhistChronology chrono = (BuddhistChronology) obj;
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,183,return getZone().equals(chrono.getZone());
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,185,return false;
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,2,  Copyright 2001-2009 Stephen Colebourne
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,415,eturn super.equals(obj);
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,416,if (this == obj) {
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,417,return true;
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,419,if (obj instanceof GJChronology) {
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,420,GJChronology chrono = (GJChronology) obj;
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,421,return iCutoverMillis == chrono.iCutoverMillis &&
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,422,getMinimumDaysInFirstWeek() == chrono.getMinimumDaysInFirstWeek() &&
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,423,getZone().equals(chrono.getZone());
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,425,return false;
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,425,"eturn ""GJ"".hashCode() * 11 + iJulianChronology.hashCode() +"
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,426,GregorianChronology.hashCode() + iCutoverInstant.hashCode();
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,435,"return ""GJ"".hashCode() * 11 + getZone().hashCode() +"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,436,getMinimumDaysInFirstWeek() + iCutoverInstant.hashCode();
False,src/main/java/org/joda/time/chrono/ISOChronology.java,src/main/java/org/joda/time/chrono/ISOChronology.java,2,  Copyright 2001-2009 Stephen Colebourne
True,src/main/java/org/joda/time/chrono/ISOChronology.java,src/main/java/org/joda/time/chrono/ISOChronology.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/main/java/org/joda/time/chrono/ISOChronology.java,src/main/java/org/joda/time/chrono/ISOChronology.java,190,eturn super.equals(obj);
True,src/main/java/org/joda/time/chrono/ISOChronology.java,src/main/java/org/joda/time/chrono/ISOChronology.java,191,if (this == obj) {
True,src/main/java/org/joda/time/chrono/ISOChronology.java,src/main/java/org/joda/time/chrono/ISOChronology.java,192,return true;
True,src/main/java/org/joda/time/chrono/ISOChronology.java,src/main/java/org/joda/time/chrono/ISOChronology.java,194,if (obj instanceof ISOChronology) {
True,src/main/java/org/joda/time/chrono/ISOChronology.java,src/main/java/org/joda/time/chrono/ISOChronology.java,195,ISOChronology chrono = (ISOChronology) obj;
True,src/main/java/org/joda/time/chrono/ISOChronology.java,src/main/java/org/joda/time/chrono/ISOChronology.java,196,return getZone().equals(chrono.getZone());
True,src/main/java/org/joda/time/chrono/ISOChronology.java,src/main/java/org/joda/time/chrono/ISOChronology.java,198,return false;
False,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,2,  Copyright 2001-2009 Stephen Colebourne
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,280,* Checks if this chronology instance equals another.
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,282,* @param obj  the object to compare to
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,283,* @return true if equal
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,284,* @since 2.3
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,286,public boolean equals(Object obj) {
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,287,if (this == obj) {
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,288,return true;
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,290,if (obj instanceof IslamicChronology) {
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,291,IslamicChronology chrono = (IslamicChronology) obj;
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,292,return getLeapYearPatternType().index == chrono.getLeapYearPatternType().index &&
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,293,super.equals(obj);
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,295,return false;
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,563,@Override
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,564,public boolean equals(Object obj) {
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,565,if (obj instanceof LeapYearPatternType) {
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,566,return index == ((LeapYearPatternType) obj).index;
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,568,return false;
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,571,@Override
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,572,public int hashCode() {
True,src/main/java/org/joda/time/chrono/IslamicChronology.java,src/main/java/org/joda/time/chrono/IslamicChronology.java,573,return index;

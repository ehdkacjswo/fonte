is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,474,* Returns a new duration with this length multiplied by the
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,475,* specified multiplicand.
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,476,* This instance is immutable and is not altered.
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,477,* <p>
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,478,"* If the multiplicand is one, this instance is returned."
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,480,* @param multiplicand  the multiplicand to multiply this one by
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,481,* @return the new duration instance
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,483,public Duration multipliedBy(long multiplicand)
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,485,if(multiplicand == 1)
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,486,return this;
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,487,"return new Duration(FieldUtils.safeMultiply(getMillis(), multiplicand));"
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,491,* Returns a new duration with this length divided by the
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,492,* specified divisor.
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,493,* This instance is immutable and is not altered.
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,494,* <p>
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,495,"* If the divisor is one, this instance is returned."
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,497,* @param divisor  the divisor to divide this one by
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,498,* @return the new duration instance
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,500,public Duration dividedBy(long divisor)
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,502,if(divisor == 1)
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,503,return this;
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,504,"return new Duration(FieldUtils.safeDivide(getMillis(), divisor));"
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,508,* Returns a new duration with this length negated.
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,509,* This instance is immutable and is not altered.
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,511,* @return the new duration instance
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,513,public Duration negated()
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,515,if(getMillis() == Long.MIN_VALUE)
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,516,"throw new ArithmeticException(""Negation of this duration would overflow"");"
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,517,return new Duration(-getMillis());
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,180,* Divides the dividend by the divisor throwing an exception if
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,181,* overflow occurs or the divisor is zero.
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,183,* @param dividend  the dividend
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,184,* @param divisor  the divisor
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,185,* @return the new total
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,186,* @throws ArithmeticException if the operation overflows or the divisor is zero
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,188,"public static long safeDivide(long dividend, long divisor)"
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,190,if(dividend == Long.MIN_VALUE && divisor == -1L)
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,191,"throw new ArithmeticException(""Multiplication overflows a long: "" + dividend + "" / "" + divisor);"
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,192,return dividend / divisor;
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,682,public void testMultipliedBy_long1() {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,683,Duration test = new Duration(123L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,684,Duration result = test.multipliedBy(2L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,685,"assertEquals(246L, result.getMillis());"
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,688,public void testMultipliedBy_long2() {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,689,Duration test = new Duration(123L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,690,Duration result = test.multipliedBy(1L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,691,"assertSame(test, result);"
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,695,public void testDividedBy_long1() {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,696,Duration test = new Duration(246L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,697,Duration result = test.dividedBy(2L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,698,"assertEquals(123L, result.getMillis());"
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,701,public void testDividedBy_long2() {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,702,Duration test = new Duration(123L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,703,Duration result = test.dividedBy(1L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,704,"assertSame(test, result);"
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,708,public void testNegated_long1() {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,709,Duration test = new Duration(246L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,710,Duration result = test.negated();
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,711,"assertEquals(-246L, result.getMillis());"
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,714,public void testNegated_long2() {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,715,Duration test = new Duration(-246L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,716,Duration result = test.negated();
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,717,"assertEquals(246L, result.getMillis());"
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,720,public void testNegated_long3() {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,721,Duration test = new Duration(Long.MIN_VALUE);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,722,try {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,723,test.negated();
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,724,fail();
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,725,} catch(ArithmeticException e) {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,726,// expected
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,285,public void testSafeDivideLongLong() {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,286,"assertEquals(1L, FieldUtils.safeDivide(1L, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,288,"assertEquals(1L, FieldUtils.safeDivide(3L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,289,"assertEquals(0L, FieldUtils.safeDivide(1L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,290,"assertEquals(3L, FieldUtils.safeDivide(3L, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,292,"assertEquals(2L, FieldUtils.safeDivide(6L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,293,"assertEquals(-2L, FieldUtils.safeDivide(6L, -3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,294,"assertEquals(-2L, FieldUtils.safeDivide(-6L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,295,"assertEquals(2L, FieldUtils.safeDivide(-6L, -3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,297,"assertEquals(Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,298,"assertEquals(Long.MIN_VALUE, FieldUtils.safeDivide(Long.MIN_VALUE, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,299,"assertEquals(-Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, -1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,301,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,302,"FieldUtils.safeDivide(Long.MIN_VALUE, -1L);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,303,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,304,} catch (ArithmeticException e) {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,307,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,308,"FieldUtils.safeDivide(1L, 0L);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,309,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,310,} catch (ArithmeticException e) {

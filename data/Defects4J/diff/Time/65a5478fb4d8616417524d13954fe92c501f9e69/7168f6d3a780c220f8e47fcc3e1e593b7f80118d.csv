is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,429,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,435,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,436,* The two partials must also both be contiguous - see
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,437,* {@link DateTimeUtils#isContiguous(ReadablePartial)} for a
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,438,* definition. Both YearMonthDay and TimeOfDay are contiguous.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,439,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,440,* An alternative way of constructing a Period from two Partials
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,441,"* is {@link #fieldDifference(ReadablePartial, ReadablePartial)}."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,442,* That method handles all kinds of partials.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,455,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,461,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,462,* The two partials must also both be contiguous - see
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,463,* {@link DateTimeUtils#isContiguous(ReadablePartial)} for a
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,464,* definition. Both YearMonthDay and TimeOfDay are contiguous.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,465,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,466,* An alternative way of constructing a Period from two Partials
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,467,"* is {@link #fieldDifference(ReadablePartial, ReadablePartial)}."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,468,* That method handles all kinds of partials.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,129,* <p>
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,135,* <p>
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,136,* The two partials must also both be contiguous - see
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,137,* {@link DateTimeUtils#isContiguous(ReadablePartial)} for a
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,138,* definition. Both YearMonthDay and TimeOfDay are contiguous.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,159,if (DateTimeUtils.isContiguous(start) == false) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,160,"throw new IllegalArgumentException(""ReadablePartial objects must be contiguous"");"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,800,public void testConstructor_RP_RP7() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,801,"Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 12);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,802,"Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,803,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,804,"new Period(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,805,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,806,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,876,public void testConstructor_RP_RP_PeriodType7() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,877,"Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 12);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,878,"Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,879,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,880,"new Period(dt1, dt2, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,881,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,882,} catch (IllegalArgumentException ex) {}

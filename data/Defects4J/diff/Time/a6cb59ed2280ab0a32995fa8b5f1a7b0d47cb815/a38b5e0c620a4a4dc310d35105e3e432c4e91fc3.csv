is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1617,type = DateTimeUtils.getPeriodType(type);
False,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1623,"eriod result = new Period(millis, DateTimeUtils.getPeriodType(type), ISOChronology.getInstanceUTC());"
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1624,"Period result = new Period(millis, type, ISOChronology.getInstanceUTC());"
False,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1627,"ears = FieldUtils.safeAdd(years, months / 12);"
False,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1628,onths = months % 12;
False,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1629,f (years != 0) {
False,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1630,esult = result.withYears(years);
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1628,long totalMonths = years * 12L + months;
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1629,if (type.isSupported(DurationFieldType.YEARS_TYPE)) {
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1630,int normalizedYears = FieldUtils.safeToInt(totalMonths / 12);
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1631,result = result.withYears(normalizedYears);
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1632,totalMonths = totalMonths - (normalizedYears * 12);
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1634,if (type.isSupported(DurationFieldType.MONTHS_TYPE)) {
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1635,int normalizedMonths = FieldUtils.safeToInt(totalMonths);
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1636,result = result.withMonths(normalizedMonths);
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1637,totalMonths = totalMonths - normalizedMonths;
False,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1632,f (months != 0) {
False,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1633,esult = result.withMonths(months);
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1639,if (totalMonths != 0) {
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1640,"throw new UnsupportedOperationException(""Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: "" + toString());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,220,private static final long serialVersionUID = 1L;
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1520,public void testNormalizedStandard_periodType_months1() {
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1521,"Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1522,Period result = test.normalizedStandard(PeriodType.months());
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1523,"assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1524,"assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1527,public void testNormalizedStandard_periodType_months2() {
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1528,"Period test = new Period(-2, 15, 0, 0, 0, 0, 0, 0);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1529,Period result = test.normalizedStandard(PeriodType.months());
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1530,"assertEquals(new Period(-2, 15, 0, 0, 0, 0, 0, 0), test);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1531,"assertEquals(new Period(0, -9, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1534,public void testNormalizedStandard_periodType_months3() {
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1535,"Period test = new Period(0, 4, 0, 0, 0, 0, 0, 0);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1536,Period result = test.normalizedStandard(PeriodType.months());
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1537,"assertEquals(new Period(0, 4, 0, 0, 0, 0, 0, 0), test);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1538,"assertEquals(new Period(0, 4, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1541,public void testNormalizedStandard_periodType_years() {
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1542,"Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1543,try {
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1544,test.normalizedStandard(PeriodType.years());
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1545,fail();
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1546,} catch (UnsupportedOperationException ex) {
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1547,// expected
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1551,public void testNormalizedStandard_periodType_monthsWeeks() {
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1552,PeriodType type = PeriodType.forFields(new DurationFieldType[]{
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1553,"DurationFieldType.months(),"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1554,"DurationFieldType.weeks(),"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1555,DurationFieldType.days()});
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1556,"Period test = new Period(2, 4, 6, 0, 0, 0, 0, 0);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1557,Period result = test.normalizedStandard(type);
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1558,"assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1559,"assertEquals(new Period(0, 28, 6, 0, 0, 0, 0, 0, type), result);"

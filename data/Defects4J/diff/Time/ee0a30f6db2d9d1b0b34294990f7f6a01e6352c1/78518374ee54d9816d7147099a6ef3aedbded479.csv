is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,340, Note that this method may not be reversible if the zone rules differ
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,341," around a daylight savings, or other, change."
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,340,* This method is the equivalent of creating a calendar object and
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,341,* calling set using each field in turn. The result is a calendar that
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,342,"* reflects the fields of the instant, rather than millisecond value."
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,343,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,344,* This method can 'lose' data depending on the date and zone rules.
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,345,* If a datetime exists in the specified instant that cannot be
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,346,* represented in a calendar (due to differences in the time zone rules)
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,347,"* the JDK chooses to move the hour backwards. For example, 1972-03-26"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,348,* 01:30  in Europe/London cannot be represented in <code>Calendar</code>
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,349,* in JDK1.3 due to an incorrect time zone definition in the JDK.
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,350,"* Instead, the JDK sets the time to 00:30."
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,361,Chronology chrono = instant.getChronology();
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,363,long millis = instant.getMillis();
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,355,"ong jdkMillis = zone.getMillisJDKKeepLocal(jdkZone, instant.getMillis());"
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,356,al.setTime(new Date(jdkMillis));
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,366,cal.clear();
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,367,"cal.set(Calendar.YEAR, chrono.year().get(millis));"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,368,"cal.set(Calendar.DAY_OF_YEAR, chrono.dayOfYear().get(millis));"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,369,"cal.set(Calendar.MILLISECOND, chrono.millisOfDay().get(millis));"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,370,cal.get(Calendar.ERA);  // force calculation
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,147,ry {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,148,ethod[] ms = TimeZone.class.getDeclaredMethods();
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,149," = TimeZone.class.getDeclaredMethod(""getOffsets"", new Class[] {Long.TYPE, int[].class});"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,150,.setAccessible(true);
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,151, catch (SecurityException e) {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,152,/ ignore
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,153, catch (NoSuchMethodException e) {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,154,/ ignore
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,147,// ignore
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,914,ong offset = zone.getRawOffset();
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,915,f (zone.inDaylightTime(new Date(instant)))  {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,916,ffset += zone.getDSTSavings();
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,918,ong millisLocal = instant - offset;
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,919,eturn millisLocal + getOffsetFromLocal(millisLocal);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,906,long millisLocal = instant + getOffset(instant);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,907,"long jdkOffset = getJDKOffset(zone, millisLocal - getJDKOffset(zone, millisLocal));"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,908,return millisLocal - jdkOffset;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,921,// TODO: this conversion is wrong
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,927,* @param zone
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,928,* @param instant
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,929,* @return
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,931,"private long getJDKOffset(SimpleTimeZone zone, long instant) {"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,932,long offset = zone.getRawOffset();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,933,if (zone.inDaylightTime(new Date(instant)))  {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,934,offset += zone.getDSTSavings();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,936,return offset;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,26,import java.util.Calendar;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,27,import java.util.Date;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,28,import java.util.GregorianCalendar;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,29,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,38,import org.joda.time.chrono.LenientChronology;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,402,public void testToGregorianCalendar() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,403,TimeZone jdkZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,404,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,405,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/Paris""));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,406,"DateTime dt = new DateTime(1970, 1, 1, 2, 30, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,407,"Calendar cal = new GregorianCalendar(1970, 0, 1, 2, 30);  // same field values"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,409,"assertEquals(cal, DateTimeUtils.toGregorianCalendar(dt));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,411,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,412,"dt = new DateTime(1970, 1, 1, 2, 30, 0, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,413,"cal = new GregorianCalendar(1970, 0, 1, 2, 30);  // same field values"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,415,"assertEquals(cal, DateTimeUtils.toGregorianCalendar(dt));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,417,"dt = new DateTime(1800, 1, 1, 0, 30, 0, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,418,int year = dt.getYear();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,419,while (year < 2000) {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,420,dt = dt.plusHours(1);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,421,int hourOfDay = dt.getHourOfDay();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,422,if (hourOfDay == 4) {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,423,dt = dt.plusHours(18);  // speed up test
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,424,} else {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,425,year = dt.getYear();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,426,cal.clear();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,427,"cal.set(year, dt.getMonthOfYear() - 1, dt.getDayOfMonth(),"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,428,"hourOfDay, dt.getMinuteOfHour(), dt.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,429,//cal.get(Calendar.ERA);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,430,"assertEquals(cal, DateTimeUtils.toGregorianCalendar(dt));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,434,} finally {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,435,TimeZone.setDefault(jdkZone);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,437,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,438,DateTimeUtils.toGregorianCalendar(null);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,439,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,440,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,444,public void testToDateTime_Calendar() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,445,TimeZone jdkZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,446,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,447,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,448,"GregorianCalendar cal = new GregorianCalendar(1800, 0, 1, 0, 30, 0);"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,449,int year = cal.get(Calendar.YEAR);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,450,while (year < 2000) {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,451,"cal.add(Calendar.HOUR_OF_DAY, 1);"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,452,int hourOfDay = cal.get(Calendar.HOUR_OF_DAY);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,453,if (hourOfDay == 4) {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,454,"cal.add(Calendar.HOUR_OF_DAY, 18);  // speed up test"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,455,} else {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,456,year = cal.get(Calendar.YEAR);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,457,DateTime dt = new DateTime(
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,458,"year, cal.get(Calendar.MONTH) + 1, cal.get(Calendar.DAY_OF_MONTH),"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,459,"cal.get(Calendar.HOUR_OF_DAY), cal.get(Calendar.MINUTE),"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,460,"cal.get(Calendar.SECOND), 0,"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,461,LenientChronology.getInstance(ISOChronology.getInstance(LONDON)))
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,462,.withChronology(ISOChronology.getInstance(LONDON));
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,463,"assertEquals(dt, DateTimeUtils.toDateTime(cal));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,467,} finally {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,468,TimeZone.setDefault(jdkZone);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,470,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,471,DateTimeUtils.toDateTime((Calendar) null);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,472,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,473,} catch (IllegalArgumentException ex) {}

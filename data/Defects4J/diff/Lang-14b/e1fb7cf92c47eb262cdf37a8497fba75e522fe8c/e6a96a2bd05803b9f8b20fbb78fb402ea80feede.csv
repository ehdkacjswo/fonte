is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,5,* reserved.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,9,* are met:
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,17,*    distribution.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,54,package org.apache.commons.lang;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,56,import java.util.ArrayList;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,57,import java.util.Iterator;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,58,import java.util.List;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,59,import java.util.ListIterator;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,61,* <code>ClassUtils</code> contains utility methods for working for
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,62,* classes without using reflection.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,64,"* @author <a href=""mailto:scolebourne@apache.org"">Stephen Colebourne</a>"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,65,"* @version $Id: ClassUtils.java,v 1.3 2002/10/24 23:12:54 scolebourne Exp $"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,67,public class ClassUtils {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,70,* ClassUtils instances should NOT be constructed in standard programming.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,71,"* Instead, the class should be used as <code>ClassUtils.getShortClassName(cls)</code>."
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,72,* This constructor is public to permit tools that require a JavaBean instance
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,73,* to operate.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,75,public ClassUtils() {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,81,* Gets the class name minus the package name from a Class.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,83,"* @param cls  the class to get the short name for, must not be null"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,84,* @return the class name without the package name
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,85,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,87,public static String getShortClassName(Class cls) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,88,if (cls == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,89,"throw new IllegalArgumentException(""The class must not be null"");"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,91,return getShortClassName(cls.getName());
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,95,* Gets the class name minus the package name for an Object.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,97,"* @param object  the class to get the short name for, must not be null"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,98,* @return the class name of the object without the package name
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,99,* @throws IllegalArgumentException if the object is null
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,101,public static String getShortClassName(Object object) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,102,if (object == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,103,"throw new IllegalArgumentException(""The object must not be null"");"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,105,return getShortClassName(object.getClass().getName());
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,109,* Gets the class name minus the package name from a String.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,110,* <p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,111,* The string passed in is assumed to be a class name - it is not
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,112,* checked.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,114,"* @param className  the className to get the short name for, must not be empty"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,115,* @return the class name of the class without the package name
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,116,* @throws IllegalArgumentException if the className is empty
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,118,public static String getShortClassName(String className) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,119,if (StringUtils.isEmpty(className)) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,120,"throw new IllegalArgumentException(""The class name must not be empty"");"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,122,char[] chars = className.toCharArray();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,123,int lastDot = 0;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,124,for (int i = 0; i < chars.length; i++) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,125,if (chars[i] == '.') {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,126,lastDot = i + 1;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,127,} else if (chars[i] == '$') {  // handle inner classes
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,128,chars[i] = '.';
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,131,"return new String(chars, lastDot, chars.length - lastDot);"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,137,* Gets the package name of a Class.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,139,"* @param cls  the class to get the package name for, must not be null"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,140,* @return the package name
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,141,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,143,public static String getPackageName(Class cls) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,144,if (cls == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,145,"throw new IllegalArgumentException(""The class must not be null"");"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,147,return getPackageName(cls.getName());
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,151,* Gets the package name of an Object.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,153,"* @param object  the class to get the package name for, must not be null"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,154,* @return the package name
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,155,* @throws IllegalArgumentException if the object is null
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,157,public static String getPackageName(Object object) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,158,if (object == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,159,"throw new IllegalArgumentException(""The object must not be null"");"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,161,return getPackageName(object.getClass().getName());
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,165,* Gets the package name from a String.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,166,* <p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,167,* The string passed in is assumed to be a class name - it is not
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,168,* checked.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,170,"* @param className  the className to get the package name for, must not be empty"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,171,* @return the package name
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,172,* @throws IllegalArgumentException if the className is empty
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,174,public static String getPackageName(String className) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,175,if (StringUtils.isEmpty(className)) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,176,"throw new IllegalArgumentException(""The class name must not be empty"");"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,178,int i = className.lastIndexOf('.');
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,179,if (i == -1) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,180,"return """";"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,182,"return className.substring(0, i);"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,188,* Gets a list of superclasses for the given class.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,190,"* @param cls  the class to look up, must not be null"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,191,* @return the list of superclasses in order going up from this one
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,192,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,194,public static List getAllSuperclasses(Class cls) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,195,if (cls == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,196,"throw new IllegalArgumentException(""The class must not be null"");"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,198,List classes = new ArrayList();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,199,Class superclass = cls.getSuperclass();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,200,while (superclass != null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,201,classes.add(superclass);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,202,superclass = superclass.getSuperclass();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,204,return classes;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,208,* Gets a list of all interfaces implemented by the given class.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,209,* <p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,210,* The order is determined by looking through each interface in turn as
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,211,* declared in the source file and following its hieracrchy up. Later
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,212,"* duplicates are ignored, so the order is maintained."
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,214,"* @param cls  the class to look up, must not be null"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,215,* @return the list of interfaces in order
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,216,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,218,public static List getAllInterfaces(Class cls) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,219,if (cls == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,220,"throw new IllegalArgumentException(""The class must not be null"");"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,222,List list = new ArrayList();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,223,Class[] interfaces = cls.getInterfaces();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,224,for (int i = 0; i < interfaces.length; i++) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,225,if (list.contains(interfaces[i]) == false) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,226,list.add(interfaces[i]);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,228,List superInterfaces = getAllInterfaces(interfaces[i]);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,229,for (Iterator it = superInterfaces.iterator(); it.hasNext();) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,230,Class intface = (Class) it.next();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,231,if (list.contains(intface) == false) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,232,list.add(intface);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,236,return list;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,240,* Gets a list of subclasses of the specified class.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,241,* <p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,242,* This method searches the classpath to find all the subclasses
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,243,"* of a particular class available. No classes are loaded, the"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,244,"* returned list contains class names, not classes."
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,246,* @param cls  the class to find subclasses for
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,247,* @return the list of subclass String class names
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,248,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,250,public static List getAllSubclassNames(Class cls) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,251,if (cls == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,252,"throw new IllegalArgumentException(""The class must not be null"");"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,254,// TODO Use JavaWorld tip for searching the classpath
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,255,return null;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,259,* Gets a list of subclasses of the specified class.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,260,* <p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,261,* This method searches the classpath to find all the subclasses
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,262,* of a particular class available.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,264,* @param cls  the class to find subclasses for
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,265,* @return the list of subclasses
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,266,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,268,public static List getAllSubclasses(Class cls) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,269,List names = getAllSubclassNames(cls);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,270,return convertClassNamesToClasses(names);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,274,* Gets a list of implementations of the specified interface.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,275,* <p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,276,* This method searches the classpath to find all the implementations
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,277,"* of a particular interface available. No classes are loaded, the"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,278,"* returned list contains class names, not classes."
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,280,* @param cls  the class to find sub classes for
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,281,* @return the list of implementation String class names
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,282,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,284,public static List getAllImplementationClassNames(Class cls) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,285,if (cls == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,286,"throw new IllegalArgumentException(""The class must not be null"");"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,288,// TODO Use JavaWorld tip for searching the classpath
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,289,return null;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,293,"* Given a list of class names, this method converts them into classes."
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,294,"* A new list is returned. If the class name cannot be found, null is"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,295,"* stored in the list. If the class name in the list is null, null is"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,296,* stored in the output list.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,298,"* @param classes  the classNames to change, the class is stored back"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,299,*  into the list. null will be stored in the list if no class is found.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,300,* @return the list of Class objects corresponding to the class names
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,301,* @throws IllegalArgumentException if the classNames is null
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,303,public static List convertClassNamesToClasses(List classNames) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,304,if (classNames == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,305,"throw new IllegalArgumentException(""The class names must not be null"");"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,307,List classes = new ArrayList(classNames.size());
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,308,for (Iterator it = classNames.iterator(); it.hasNext();) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,309,String className = (String) it.next();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,310,try {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,311,classes.add(Class.forName(className));
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,312,} catch (Exception ex) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,313,classes.add(null);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,316,return classes;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,320,"* Given a list of classes, this method finds all those which are"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,321,* subclasses or implementations of a specified superclass.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,323,* @param classes  the classes to check
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,324,* @param superclass  the superclass to check for
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,325,* @return the list of subclasses or implementations
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,326,* @throws IllegalArgumentException if the classes or superClass is null
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,328,"public static List getAssignableFrom(List classes, Class superclass) {"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,329,if (classes == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,330,"throw new IllegalArgumentException(""The classes must not be null"");"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,332,if (superclass == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,333,"throw new IllegalArgumentException(""The superclass must not be null"");"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,335,List subs = new ArrayList();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,336,Iterator it = classes.iterator();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,337,while (it.hasNext()) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,338,Class cls = (Class) it.next();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,339,if (cls == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,340,"throw new IllegalArgumentException(""The class list must not contain nulls"");"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,342,"if (isAssignable(cls, superclass)) {"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,343,subs.add(cls);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,346,return subs;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,350,* Checks if an array of Classes can be assigned to another array of Classes.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,351,* <p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,352,* This can be used to check if parameter types are suitably compatable for
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,353,* reflection invocation.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,354,* <p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,355,"* Unlike the Class.isAssignableFrom method, this method takes into"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,356,* account widenings of primitive classes and nulls.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,357,* <p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,358,"* Primitive widenings allow an int to be assigned to a long, float or"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,359,* double. This method returns the correct result for these cases.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,360,* <p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,361,* Null may be assigned to any reference type. This method will return
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,362,* true if null is passed in and the toClass is non-primitive.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,363,* <p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,364,"* Specifically, this method tests whether the type represented by the"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,365,* specified <code>Class</code> parameter can be converted to the type
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,366,* represented by this <code>Class</code> object via an identity conversion
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,367,* widening primitive or widening reference conversion. See
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,368,"* <em>The Java Language Specification</em>, sections 5.1.1, 5.1.2 and"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,369,* 5.1.4 for details.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,371,"* @param classArray  the array of Classes to check, may be null"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,372,"* @param toClassArray  the array of Classes to try to assign into, may be null"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,373,* @return true if assignment possible
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,375,"public static boolean isAssignable(Class[] classArray, Class[] toClassArray) {"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,376,"if (ArrayUtils.isSameLength(classArray, toClassArray) == false) {"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,377,return false;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,379,if (classArray == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,380,classArray = ArrayUtils.EMPTY_CLASS_ARRAY;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,382,if (toClassArray == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,383,toClassArray = ArrayUtils.EMPTY_CLASS_ARRAY;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,385,for (int i = 0; i < classArray.length; i++) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,386,"if (isAssignable(classArray[i], toClassArray[i]) == false) {"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,387,return false;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,390,return true;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,394,* Checks if one Class can be assigned to a variable of another Class.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,395,* <p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,396,"* Unlike the Class.isAssignableFrom method, this method takes into"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,397,* account widenings of primitive classes and nulls.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,398,* <p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,399,"* Primitive widenings allow an int to be assigned to a long, float or"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,400,* double. This method returns the correct result for these cases.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,401,* <p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,402,* Null may be assigned to any reference type. This method will return
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,403,* true if null is passed in and the toClass is non-primitive.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,404,* <p>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,405,"* Specifically, this method tests whether the type represented by the"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,406,* specified <code>Class</code> parameter can be converted to the type
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,407,* represented by this <code>Class</code> object via an identity conversion
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,408,* widening primitive or widening reference conversion. See
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,409,"* <em>The Java Language Specification</em>, sections 5.1.1, 5.1.2 and"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,410,* 5.1.4 for details.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,412,"* @param cls  the Class to check, may be null"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,413,"* @param toClass  the Class to try to assign into, must not be null"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,414,* @return true if assignment possible
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,415,* @throws IllegalArgumentException if the toClass is null
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,417,"public static boolean isAssignable(Class cls, Class toClass) {"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,418,if (toClass == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,419,"throw new IllegalArgumentException(""The class must not be null"");"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,421,"// have to check for null, as isAssignableFrom doesn't"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,422,if (cls == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,423,return !(toClass.isPrimitive());
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,425,if (cls.equals(toClass)) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,426,return true;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,428,if (cls.isPrimitive()) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,429,if (toClass.isPrimitive() == false) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,430,return false;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,432,if (Integer.TYPE.equals(cls)) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,433,return Long.TYPE.equals(toClass)
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,434,|| Float.TYPE.equals(toClass)
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,435,|| Double.TYPE.equals(toClass);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,437,if (Long.TYPE.equals(cls)) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,438,return Float.TYPE.equals(toClass)
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,439,|| Double.TYPE.equals(toClass);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,441,if (Boolean.TYPE.equals(cls)) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,442,return false;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,444,if (Double.TYPE.equals(cls)) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,445,return false;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,447,if (Float.TYPE.equals(cls)) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,448,return Double.TYPE.equals(toClass);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,450,if (Character.TYPE.equals(cls)) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,451,return Integer.TYPE.equals(toClass)
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,452,|| Long.TYPE.equals(toClass)
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,453,|| Float.TYPE.equals(toClass)
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,454,|| Double.TYPE.equals(toClass);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,456,if (Short.TYPE.equals(cls)) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,457,return Integer.TYPE.equals(toClass)
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,458,|| Long.TYPE.equals(toClass)
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,459,|| Float.TYPE.equals(toClass)
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,460,|| Double.TYPE.equals(toClass);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,462,if (Byte.TYPE.equals(cls)) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,463,return Short.TYPE.equals(toClass)
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,464,|| Integer.TYPE.equals(toClass)
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,465,|| Long.TYPE.equals(toClass)
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,466,|| Float.TYPE.equals(toClass)
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,467,|| Double.TYPE.equals(toClass);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,469,// should never get here
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,470,return false;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,472,return toClass.isAssignableFrom(cls);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,476,* Is the specified class an inner class or static nested class.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,478,* @param cls  the class to check
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,479,* @return true if the class is an inner or static nested class
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,480,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,482,public static boolean isInnerClass(Class cls) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,483,if (cls == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,484,"throw new IllegalArgumentException(""The class must not be null"");"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,486,return (cls.getDeclaringClass() != null);
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,5,* reserved.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,9,* are met:
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,17,*    distribution.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,54,package org.apache.commons.lang.reflect;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,56,import java.lang.reflect.Constructor;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,57,import java.lang.reflect.Modifier;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,59,import org.apache.commons.lang.ArrayUtils;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,61,* <code>ConstructorUtils</code> contains utility methods for working for
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,62,* constructors by reflection.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,63,* <p>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,64,* The ability is provided to break the scoping restrictions coded by the
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,65,"* programmer. This can allow classes to be created that shouldn't be, for"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,66,"* example new instances of an enumerated type. Thus, this facility should"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,67,* be used with care.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,69,"* @author <a href=""mailto:scolebourne@apache.org"">Stephen Colebourne</a>"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,70,"* @version $Id: ConstructorUtils.java,v 1.1 2002/10/24 23:12:54 scolebourne Exp $"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,72,public class ConstructorUtils {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,74,/** An empty constructor array */
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,75,public static final Constructor[] EMPTY_CONSTRUCTOR_ARRAY = new Constructor[0];
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,78,* ConstructorUtils instances should NOT be constructed in standard programming.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,79,"* Instead, the class should be used as <code>ConstructorUtils.newInstance(...)</code>."
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,80,* This constructor is public to permit tools that require a JavaBean instance
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,81,* to operate.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,83,public ConstructorUtils() {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,89,* Gets a public <code>Constructor</code> object by matching the
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,90,* parameter types as per the Java Language Specification.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,92,"* @param cls  Class object to find constructor for, must not be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,93,"* @param types  array of Class objects representing parameter types, may be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,94,* @return Constructor object
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,95,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,96,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,98,"public static Constructor getConstructor(Class cls, Class[] types) {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,99,"return getConstructor(cls, types, false);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,103,* Gets a public <code>Constructor</code> object by matching the
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,104,* parameter types as per the Java Language Specification.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,106,"* @param cls  Class object to find constructor for, must not be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,107,"* @param types  array of Class objects representing parameter types, may be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,108,* @param breakScope  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,109,*  <code>setAccessible</code> method. False will only match public methods.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,110,* @return Constructor object
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,111,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,112,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,114,"public static Constructor getConstructor(Class cls, Class[] types, boolean breakScope) {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,115,if (cls == null) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,116,"throw new IllegalArgumentException(""The class must not be null"");"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,118,// try exact call first for speed
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,119,try {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,120,"getConstructorExact(cls, types, breakScope);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,122,} catch (ReflectionException ex) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,123,if (types == null || types.length == 0) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,124,throw ex;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,126,if (ex.getCause() instanceof NoSuchMethodException == false) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,127,throw ex;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,130,// try to find best match
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,131,try {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,132,Constructor[] cons = cls.getDeclaredConstructors();
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,133,for (int i = 0; i < cons.length; i++) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,134,if (cons[i].getParameterTypes().length == types.length) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,135,// TODO
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,138,return null;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,140,} catch (ReflectionException ex) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,141,throw ex;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,142,} catch (LinkageError ex) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,143,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,144,"ex, ""getting constructor"", cls.getName(), types, null), ex);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,145,} catch (Exception ex) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,146,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,147,"ex, ""getting constructor"", cls.getName(), types, null), ex);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,154,* Gets a public <code>Constructor</code> object by exactly matching the
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,155,* parameter types.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,157,"* @param cls  Class object to find constructor for, must not be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,158,"* @param types  array of Class objects representing parameter types, may be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,159,* @return Constructor object
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,160,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,161,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,163,"public static Constructor getConstructorExact(Class cls, Class[] types) {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,164,"return getConstructorExact(cls, types, false);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,168,* Gets a <code>Constructor</code> object by exactly matching the
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,169,* parameter types.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,171,"* @param cls  Class object to find constructor for, must not be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,172,"* @param types  array of Class objects representing parameter types, may be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,173,* @param breakScope  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,174,*  <code>setAccessible</code> method. False will only match public methods.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,175,* @return Constructor object
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,176,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,177,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,179,"public static Constructor getConstructorExact(Class cls, Class[] types, boolean breakScope) {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,180,if (cls == null) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,181,"throw new IllegalArgumentException(""The class must not be null"");"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,183,try {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,184,if (breakScope) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,185,Constructor con = cls.getDeclaredConstructor(types);
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,186,if (Modifier.isPublic(con.getModifiers()) == false) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,187,con.setAccessible(true);
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,189,return con;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,191,} else {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,192,return cls.getConstructor(types);
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,195,} catch (ReflectionException ex) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,196,throw ex;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,197,} catch (LinkageError ex) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,198,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,199,"ex, ""getting constructor"", cls.getName(), types, null), ex);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,200,} catch (Exception ex) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,201,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,202,"ex, ""getting constructor"", cls.getName(), types, null), ex);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,209,* Creates a new instance using a <code>Constructor</code> and parameters.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,211,"* @param con  Class object to find constructor for, must not be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,212,"* @param param  the single parameter to pass to the constructor, may be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,213,* @return the newly created object
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,214,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,215,* @throws IllegalArgumentException if the constructor is null
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,217,"public static Object newInstance(Constructor con, Object param) {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,218,"return newInstance(con, new Object[] {param}, false);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,222,* Creates a new instance using a <code>Constructor</code> and parameters.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,224,"* @param con  Class object to find constructor for, must not be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,225,"* @param params  array of objects to pass as parameters, may be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,226,* @return the newly created object
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,227,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,228,* @throws IllegalArgumentException if the constructor is null
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,230,"public static Object newInstance(Constructor con, Object[] params) {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,231,"return newInstance(con, params, false);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,235,* Creates a new instance using a <code>Constructor</code> and parameters.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,237,"* @param con  Class object to find constructor for, must not be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,238,"* @param params  array of objects to pass as parameters, may be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,239,* @param breakScope  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,240,*  <code>setAccessible</code> method. False will only match public methods.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,241,* @return the newly created object
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,242,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,243,* @throws IllegalArgumentException if the constructor is null
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,245,"public static Object newInstance(Constructor con, Object[] params, boolean breakScope) {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,246,if (con == null) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,247,"throw new IllegalArgumentException(""The constructor must not be null"");"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,249,try {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,250,if (breakScope && Modifier.isPublic(con.getModifiers()) == false) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,251,con.setAccessible(true);
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,253,return con.newInstance(params);
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,255,} catch (ReflectionException ex) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,256,throw ex;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,257,} catch (LinkageError ex) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,258,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,259,"ex, ""invoking constructor"", con.getDeclaringClass().getName(), con.getParameterTypes(), null), ex);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,260,} catch (Exception ex) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,261,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,262,"ex, ""invoking constructor"", con.getDeclaringClass().getName(), con.getParameterTypes(), null), ex);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,269,* Creates a new instance of the specified <code>Class</code> by name.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,271,"* @param className  String class name to instantiate, must not be empty"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,272,* @return the newly created object
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,273,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,274,* @throws IllegalArgumentException if the class name is empty
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,276,public static Object newInstance(String className) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,277,"return newInstance(className, false);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,281,* Creates a new instance of the specified <code>Class</code> by name.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,282,"* If the constructor is not public, <code>setAccessible(true)</code>"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,283,* is used to make it accessible.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,285,"* @param className  String class name to instantiate, must not be empty"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,286,* @param breakScope  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,287,*  <code>setAccessible</code> method. False will only match public methods.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,288,* @return the newly created object
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,289,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,290,* @throws IllegalArgumentException if the class name is empty
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,292,"public static Object newInstance(String className, boolean breakScope) {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,293,Class cls = ReflectionUtils.getClass(className);
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,294,"return newInstance(cls, breakScope);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,300,* Creates a new instance of the specified <code>Class</code>.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,302,"* @param cls  Class object to instantiate, must not be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,303,* @return the newly created object
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,304,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,305,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,307,public static Object newInstance(Class cls) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,308,"return newInstance(cls, false);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,312,* Creates a new instance of the specified <code>Class</code>.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,313,"* If the constructor is not public, <code>setAccessible(true)</code>"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,314,* is used to make it accessible.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,316,"* @param cls  Class object to instantiate, must not be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,317,* @param breakScope  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,318,*  <code>setAccessible</code> method. False will only match public methods.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,319,* @return the newly created object
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,320,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,321,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,323,"public static Object newInstance(Class cls, boolean breakScope) {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,324,if (breakScope) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,325,"return newInstanceExact(cls, null, null, true);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,327,} else {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,328,if (cls == null) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,329,"throw new IllegalArgumentException(""The constructor must not be null"");"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,331,try {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,332,return cls.newInstance();
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,334,} catch (ReflectionException ex) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,335,throw ex;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,336,} catch (LinkageError ex) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,337,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,338,"ex, ""instantiating class"", cls.getName(), null, null), ex);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,339,} catch (Exception ex) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,340,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,341,"ex, ""instantiating class"", cls.getName(), null, null), ex);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,349,* Creates a new instance of the specified <code>Class</code>.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,350,* The constructor is found by matching the
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,351,* parameter types as per the Java Language Specification.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,353,"* @param cls  Class object to instantiate, must not be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,354,"* @param types  array of Class objects representing parameter types, may be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,355,"* @param params  array of objects to pass as parameters, may be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,356,* @return the newly created object
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,357,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,358,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,360,"public static Object newInstance(Class cls, Class[] types, Object[] params) {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,361,"return newInstance(cls, types, params, false);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,365,* Creates a new instance of the specified <code>Class</code>.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,366,* The constructor is found by matching the
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,367,* parameter types as per the Java Language Specification.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,369,"* @param cls  Class object to instantiate, must not be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,370,"* @param types  array of Class objects representing parameter types, may be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,371,"* @param params  array of objects to pass as parameters, may be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,372,* @param breakScope  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,373,*  <code>setAccessible</code> method. False will only match public methods.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,374,* @return the newly created object
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,375,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,376,* @throws IllegalArgumentException if the types and params lengths differ
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,377,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,379,"public static Object newInstance(Class cls, Class[] types, Object[] params, boolean breakScope) {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,380,"if (ArrayUtils.isSameLength(types, params) == false) {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,381,"throw new IllegalArgumentException(""The types and params lengths must be the same"");"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,383,"Constructor con = getConstructor(cls, types, breakScope);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,384,"return newInstance(con, params, breakScope);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,390,* Creates a new instance of the specified <code>Class</code>.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,391,* The constructor is found by matching the parameter types exactly.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,393,"* @param cls  Class object to instantiate, must not be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,394,"* @param types  array of Class objects representing parameter types, may be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,395,"* @param params  array of objects to pass as parameters, may be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,396,* @return the newly created object
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,397,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,398,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,400,"public static Object newInstanceExact(Class cls, Class[] types, Object[] params) {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,401,"return newInstanceExact(cls, types, params, false);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,405,* Creates a new instance of the specified <code>Class</code>.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,406,* The constructor is found by matching the parameter types exactly.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,408,"* @param cls  Class object to instantiate, must not be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,409,"* @param types  array of Class objects representing parameter types, may be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,410,"* @param params  array of objects to pass as parameters, may be null"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,411,* @param breakScope  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,412,*  <code>setAccessible</code> method. False will only match public methods.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,413,* @return the newly created object
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,414,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,415,* @throws IllegalArgumentException if the types and params lengths differ
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,416,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,418,"public static Object newInstanceExact(Class cls, Class[] types, Object[] params, boolean breakScope) {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,419,"if (ArrayUtils.isSameLength(types, params) == false) {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,420,"throw new IllegalArgumentException(""The types and params lengths must be the same"");"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,422,"Constructor con = getConstructorExact(cls, types, breakScope);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,423,"return newInstance(con, params, breakScope);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,5,* reserved.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,9,* are met:
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,17,*    distribution.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,54,package org.apache.commons.lang.reflect;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,56,import java.lang.reflect.Field;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,57,import java.lang.reflect.Modifier;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,59,* <code>FieldUtils</code> contains utility methods for working with
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,60,* fields by reflection.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,61,* <p>
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,62,* The ability is provided to break the scoping restrictions coded by the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,63,* programmer. This can allow fields to be changed that shouldn't be. This
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,64,* facility should be used with care.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,66,"* @author <a href=""mailto:scolebourne@apache.org"">Stephen Colebourne</a>"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,67,"* @version $Id: FieldUtils.java,v 1.1 2002/10/24 23:12:54 scolebourne Exp $"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,69,public class FieldUtils {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,71,/** An empty field array */
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,72,public static final Field[] EMPTY_FIELD_ARRAY = new Field[0];
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,75,* FieldUtils instances should NOT be constructed in standard programming.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,76,"* Instead, the class should be used as <code>FieldUtils.getField(cls, name)</code>."
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,77,* This constructor is public to permit tools that require a JavaBean instance
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,78,* to operate.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,80,public FieldUtils() {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,86,* Gets an accessible Field by name repecting scope.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,87,* Superclasses/interfaces will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,89,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,90,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,91,* @return the Field object
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,92,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,93,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,95,"public static Field getField(Class cls, String fieldName) {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,96,"return getField(cls, fieldName, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,100,* Gets an accessible Field by name breaking scope if requested.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,101,* Superclasses/interfaces will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,103,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,104,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,105,* @param breakScope  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,106,*  <code>setAccessible</code> method. False will only match public fields.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,107,* @return the Field object
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,108,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,109,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,111,"public static Field getField(Class cls, String fieldName, boolean breakScope) {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,112,if (cls == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,113,"throw new IllegalArgumentException(""The class must not be null"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,115,if (fieldName == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,116,"throw new IllegalArgumentException(""The field name must not be null"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,118,// Sun Java 1.3 has a bugged implementation of getField hence we write the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,119,// code ourselves
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,121,// getField() will return the Field object with the declaring class
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,122,// set correctly to the class that declares the field. Thus requesting the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,123,// field on a subclass will return the field from the superclass.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,125,// priority order for lookup:
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,126,// searchclass private/protected/package/public
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,127,// superclass protected/package/public
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,128,//  private/different package blocks access to further superclasses
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,129,// implementedinterface public
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,130,try {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,131,// check up the superclass hierarchy
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,132,Class acls = cls;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,133,Field match = null;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,134,while (acls != null && acls != Object.class) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,135,// getDeclaredField checks for non-public scopes as well
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,136,// and it returns accurate results
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,137,try {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,138,Field field = acls.getDeclaredField(fieldName);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,139,if (Modifier.isPublic(field.getModifiers()) == false) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,140,field.setAccessible(breakScope);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,141,return field;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,143,if (breakScope == false) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,144,// only public acceptable if not breaking scope
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,145,"throw new IllegalAccessException(""The field '"" + fieldName +"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,146,"""' was found, but it's scope prevents direct access by reflection"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,148,field.setAccessible(true);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,149,match = field;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,150,break;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,152,} catch (NoSuchFieldException ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,153,// ignore
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,155,// next superclass
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,156,acls = acls.getSuperclass();
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,158,// check the public interface case. This must be manually searched for
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,159,// incase there is a public supersuperclass field hidden by a private/package
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,160,// superclass field.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,161,// check up the superclass hierarchy
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,162,Class[] ints = cls.getInterfaces();
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,163,for (int i = 0; i < ints.length; i++) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,164,"// getField is fine here, because everything is public, and thus it works"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,165,try {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,166,Field field = ints[i].getField(fieldName);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,167,return field;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,169,} catch (NoSuchFieldException ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,170,// ignore
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,173,if (match != null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,174,return match;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,176,"throw new NoSuchFieldException(""The field '"" + fieldName + ""' could not be found"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,178,} catch (ReflectionException ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,179,throw ex;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,180,} catch (LinkageError ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,181,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,182,"ex, ""getting field"", cls.getName(), null, fieldName), ex);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,183,} catch (Exception ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,184,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,185,"ex, ""getting field"", cls.getName(), null, fieldName), ex);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,192,* Gets an accessible Field by name respecting scope.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,193,* Only the specified class will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,195,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,196,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,197,* @return the Field object
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,198,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,199,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,201,"public static Field getFieldExact(Class cls, String fieldName) {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,202,"return getFieldExact(cls, fieldName, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,206,* Gets an accessible Field by name breaking scope if requested.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,207,* Only the specified class will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,209,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,210,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,211,* @param breakScope  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,212,*  <code>setAccessible</code> method. False will only match public fields.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,213,* @return the Field object
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,214,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,215,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,217,"public static Field getFieldExact(Class cls, String fieldName, boolean breakScope) {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,218,if (cls == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,219,"throw new IllegalArgumentException(""The class must not be null"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,221,if (fieldName == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,222,"throw new IllegalArgumentException(""The field name must not be null"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,224,try {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,225,// only consider the specified class by using getDeclaredField()
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,226,Field field = cls.getDeclaredField(fieldName);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,227,if (Modifier.isPublic(field.getModifiers()) == false) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,228,if (breakScope) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,229,field.setAccessible(true);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,230,} else {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,231,"throw new IllegalAccessException(""The field '"" + fieldName + ""' was found, but it's scope prevents direct access by reflection"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,234,return field;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,236,} catch (ReflectionException ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,237,throw ex;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,238,} catch (LinkageError ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,239,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,240,"ex, ""getting field"", cls.getName(), null, fieldName), ex);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,241,} catch (Exception ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,242,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,243,"ex, ""getting field"", cls.getName(), null, fieldName), ex);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,250,* Gets a static Field value from a Field object.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,252,* @param field  the field to use
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,253,* @return the field value
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,254,* @throws IllegalArgumentException if the field is null or not static
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,255,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,257,public static Object getStaticFieldValue(Field field) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,258,if (field == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,259,"throw new IllegalArgumentException(""The field must not be null"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,261,if (Modifier.isStatic(field.getModifiers()) == false) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,262,"throw new IllegalArgumentException(""The field '"" + field.getName() + ""' is not static"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,264,"return getFieldValue(field, (Object) null, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,268,* Gets a static Field value from a Field object.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,270,* @param field  the field to use
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,271,* @param breakScope  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,272,*  <code>setAccessible</code> method. False will only match public methods.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,273,* @return the field value
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,274,* @throws IllegalArgumentException if the field is null or not static
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,275,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,277,"public static Object getStaticFieldValue(Field field, boolean breakScope) {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,278,if (field == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,279,"throw new IllegalArgumentException(""The field must not be null"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,281,if (Modifier.isStatic(field.getModifiers()) == false) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,282,"throw new IllegalArgumentException(""The field '"" + field.getName() + ""' is not static"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,284,"return getFieldValue(field, (Object) null, breakScope);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,288,* Gets a Field value from a Field object.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,290,* @param field  the field to use
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,291,"* @param object  the object to call on, may be null for static fields"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,292,* @return the field value
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,293,* @throws IllegalArgumentException if the field is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,294,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,296,"public static Object getFieldValue(Field field, Object object) {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,297,"return getFieldValue(field, object, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,301,* Gets a Field value from a Field object.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,303,* @param field  the field to use
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,304,"* @param object  the object to call on, may be null for static fields"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,305,* @param breakScope  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,306,*  <code>setAccessible</code> method. False will only match public methods.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,307,* @return the field value
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,308,* @throws IllegalArgumentException if the field is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,309,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,311,"public static Object getFieldValue(Field field, Object object, boolean breakScope) {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,312,if (field == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,313,"throw new IllegalArgumentException(""The field must not be null"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,315,try {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,316,if (breakScope && Modifier.isPublic(field.getModifiers()) == false) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,317,field.setAccessible(true);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,319,return field.get(object);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,321,} catch (ReflectionException ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,322,throw ex;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,323,} catch (LinkageError ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,324,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,325,"ex, ""getting field value"", field.getDeclaringClass().getName(), null, field.getName()), ex);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,326,} catch (Exception ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,327,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,328,"ex, ""getting field value"", field.getDeclaringClass().getName(), null, field.getName()), ex);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,335,* Gets a static Field value by name. The field must be public.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,336,* Superclasses will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,338,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,339,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,340,* @return the value of the field
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,341,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,342,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,344,"public static Object getStaticFieldValue(Class cls, String fieldName) {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,345,"return getStaticFieldValue(cls, fieldName, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,349,* Gets a static Field value by name.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,350,* Only the specified class will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,352,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,353,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,354,* @param breakScope  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,355,*  <code>setAccessible</code> method. False will only match public fields.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,356,* @return the Field object
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,357,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,358,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,360,"public static Object getStaticFieldValue(Class cls, String fieldName, boolean breakScope) {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,361,try {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,362,"Field field = getField(cls, fieldName, breakScope);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,363,if (Modifier.isStatic(field.getModifiers()) == false) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,364,"throw new NoSuchMethodException(""The field '"" + fieldName + ""' is not static"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,366,"return getStaticFieldValue(field, breakScope);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,368,} catch (ReflectionException ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,369,throw ex;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,370,} catch (LinkageError ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,371,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,372,"ex, ""getting field value"", cls.getName(), null, fieldName), ex);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,373,} catch (Exception ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,374,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,375,"ex, ""getting field value"", cls.getName(), null, fieldName), ex);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,382,* Gets a static Field value by name. The field must be public.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,383,* Only the specified class will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,385,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,386,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,387,* @return the value of the field
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,388,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,389,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,391,"public static Object getStaticFieldValueExact(Class cls, String fieldName) {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,392,"return getStaticFieldValueExact(cls, fieldName, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,396,* Gets a static Field value by name.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,397,* Only the specified class will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,399,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,400,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,401,* @param breakScope  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,402,*  <code>setAccessible</code> method. False will only match public fields.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,403,* @return the Field object
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,404,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,405,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,407,"public static Object getStaticFieldValueExact(Class cls, String fieldName, boolean breakScope) {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,408,try {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,409,"Field field = getFieldExact(cls, fieldName, breakScope);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,410,if (Modifier.isStatic(field.getModifiers()) == false) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,411,"throw new NoSuchMethodException(""The field '"" + fieldName + ""' is not static"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,413,"return getStaticFieldValue(field, breakScope);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,415,} catch (ReflectionException ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,416,throw ex;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,417,} catch (LinkageError ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,418,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,419,"ex, ""getting field value"", cls.getName(), null, fieldName), ex);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,420,} catch (Exception ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,421,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,422,"ex, ""getting field value"", cls.getName(), null, fieldName), ex);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,429,* Gets a Field value by name. The field must be public.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,430,* Superclasses will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,432,"* @param object  the object to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,433,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,434,* @return the value of the field
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,435,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,436,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,438,"public static Object getFieldValue(Object object, String fieldName) {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,439,"return getFieldValue(object, fieldName, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,443,* Gets a Field value by name.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,444,* Only the specified class will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,446,"* @param object  the object to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,447,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,448,* @param breakScope  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,449,*  <code>setAccessible</code> method. False will only match public fields.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,450,* @return the Field object
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,451,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,452,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,454,"public static Object getFieldValue(Object object, String fieldName, boolean breakScope) {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,455,"Field field = getField(object.getClass(), fieldName, breakScope);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,456,"return getFieldValue(field, object, breakScope);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,462,* Gets a Field value by name. The field must be public.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,463,* Only the class of the specified object will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,465,"* @param object  the object to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,466,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,467,* @return the value of the field
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,468,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,469,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,471,"public static Object getFieldValueExact(Object object, String fieldName) {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,472,"return getFieldValueExact(object, fieldName, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,476,* Gets a Field value by name.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,477,* Only the class of the specified object will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,479,"* @param object  the object to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,480,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,481,* @param breakScope  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,482,*  <code>setAccessible</code> method. False will only match public fields.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,483,* @return the Field object
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,484,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,485,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,487,"public static Object getFieldValueExact(Object object, String fieldName, boolean breakScope) {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,488,"Field field = getFieldExact(object.getClass(), fieldName, breakScope);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,489,"return getFieldValue(field, object, breakScope);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,5,* reserved.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,9,* are met:
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,17,*    distribution.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,54,package org.apache.commons.lang.reflect;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,56,import java.lang.reflect.Field;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,57,import java.lang.reflect.InvocationTargetException;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,58,import java.lang.reflect.Member;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,59,import java.lang.reflect.Method;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,60,import java.lang.reflect.Modifier;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,61,import java.util.ArrayList;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,62,import java.util.HashSet;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,63,import java.util.Iterator;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,64,import java.util.List;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,65,import java.util.Set;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,67,import org.apache.commons.lang.ArrayUtils;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,68,import org.apache.commons.lang.StringUtils;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,70,* <code>MethodUtils</code> contains utility methods for working for
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,71,* methods by reflection.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,72,* <p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,73,* The ability is provided to break the scoping restrictions coded by the
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,74,* programmer. This can break an implementation if used incorrectly. This
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,75,* facility should be used with care.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,77,* @author Based on code from BeanUtils
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,78,"* @author <a href=""mailto:scolebourne@apache.org"">Stephen Colebourne</a>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,79,"* @version $Id: MethodUtils.java,v 1.1 2002/10/24 23:12:54 scolebourne Exp $"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,81,public class MethodUtils {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,83,/** An empty method array */
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,84,public static final Method[] EMPTY_METHOD_ARRAY = new Method[0];
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,87,* MethodUtils instances should NOT be constructed in standard programming.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,88,"* Instead, the class should be used as <code>MethodUtils.getMethod(cls, name)</code>."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,89,* This constructor is public to permit tools that require a JavaBean instance
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,90,* to operate.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,92,public MethodUtils() {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,98,* Gets a Method by name. The method must be public and take no parameters.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,99,* Superclasses will be considered.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,101,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,102,* @param methodName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,103,* @return the Method object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,104,* @throws IllegalArgumentException if the class or method name is null
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,105,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,107,"public static Method getMethod(Class cls, String methodName) {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,108,"return getMethod(cls, methodName, ArrayUtils.EMPTY_CLASS_ARRAY, false);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,112,* Gets a Method by name. The method must be public.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,113,* Superclasses will be considered.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,115,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,116,* @param methodName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,117,* @return the Method object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,118,* @throws IllegalArgumentException if the class or method name is null
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,119,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,121,"public static Method getMethod(Class cls, String methodName, Class[] paramTypes) {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,122,"return getMethod(cls, methodName, paramTypes, false);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,126,* Gets a Method by name.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,127,* Superclasses will be considered.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,129,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,130,* @param methodName  the method name to obtain
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,131,* @param breakScope  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,132,*  <code>setAccessible</code> method. False will only match public fields.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,133,* @return the Method object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,134,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,135,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,137,"public static Method getMethod(Class cls, String methodName, Class[] paramTypes, boolean breakScope) {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,138,if (cls == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,139,"throw new IllegalArgumentException(""The class must not be null"");"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,141,if (methodName == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,142,"throw new IllegalArgumentException(""The method name must not be null"");"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,144,try {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,145,if (breakScope) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,146,try {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,147,"// most common case, always do this for speed"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,148,"return cls.getMethod(methodName, paramTypes);  // must be public"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,149,} catch (NoSuchMethodException ex) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,150,// ignore
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,152,Class acls = cls;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,153,while (acls != null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,154,Method[] methods = acls.getDeclaredMethods();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,155,for (int i = 0; i < methods.length; i++) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,156,if (methods[i].getName().equals(methodName) &&
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,157,"ReflectionUtils.isCompatable(paramTypes, methods[i].getParameterTypes())) {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,158,if (Modifier.isPublic(methods[i].getModifiers())) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,159,methods[i].setAccessible(true);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,161,return methods[i];
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,164,acls = acls.getSuperclass();  // TODO interfaces
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,166,"throw new NoSuchMethodException(""The method '"" + methodName + ""' could not be found"");"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,167,} else {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,168,"return cls.getMethod(methodName, paramTypes);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,171,} catch (ReflectionException ex) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,172,throw ex;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,173,} catch (LinkageError ex) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,174,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,175,"ex, ""getting method"", cls.getName(), null, methodName), ex);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,176,} catch (Exception ex) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,177,throw new ReflectionException(ReflectionUtils.getThrowableText(
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,178,"ex, ""getting method"", cls.getName(), null, methodName), ex);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,185,* <p>Invoke a named method whose parameter type matches the object type.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,187,* <p>The behaviour of this method is less deterministic
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,188,* than {@link #invokeExactMethod}.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,189,* It loops through all methods with names that match
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,190,* and then executes the first it finds with compatable parameters.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,192,* <p>This method supports calls to methods taking primitive parameters
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,193,"* via passing in wrapping classes. So, for example, a <code>Boolean</code> class"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,194,* would match a <code>boolean</code> primitive.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,196,* <p> This is a convenient wrapper for
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,197,"* {@link #invokeMethod(Object object,String methodName,Object [] args)}."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,198,* </p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,200,"* @param objectToInvoke  invoke method on this object, must not be null"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,201,"* @param methodName  get method with this name, must not be null"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,202,"* @param arg  use this argument, must not be null"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,204,* @throws NoSuchMethodException if there is no such accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,205,* @throws InvocationTargetException wraps an exception thrown by the
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,206,*  method invoked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,207,* @throws IllegalAccessException if the requested method is not accessible
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,208,*  via reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,209,* @throws IllegalArgumentException if any parameter is null
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,211,public static Object invokeMethod(
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,212,"Object objectToInvoke,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,213,"String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,214,Object arg)
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,215,throws
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,216,"NoSuchMethodException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,217,"IllegalAccessException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,218,InvocationTargetException {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,220,if (objectToInvoke == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,221,"throw new IllegalArgumentException(""The object to invoke must not be null"");"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,223,if (methodName == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,224,"throw new IllegalArgumentException(""The method name must not be null"");"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,226,if (arg == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,227,"throw new IllegalArgumentException(""The argument must not be null"");"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,229,Object[] args = {arg};
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,230,"return invokeMethod(objectToInvoke, methodName, args);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,234,* <p>Invoke a named method whose parameter type matches the object type.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,236,* <p>The behaviour of this method is less deterministic
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,237,"* than {@link #invokeExactMethod(Object object,String methodName,Object [] args)}."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,238,* It loops through all methods with names that match
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,239,* and then executes the first it finds with compatable parameters.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,241,* <p>This method supports calls to methods taking primitive parameters
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,242,"* via passing in wrapping classes. So, for example, a <code>Boolean</code> class"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,243,* would match a <code>boolean</code> primitive.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,245,* <p> This is a convenient wrapper for
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,246,"* {@link #invokeMethod(Object object,String methodName,Object [] args,Class[] parameterTypes)}."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,247,* </p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,249,"* @param objectToInvoke  invoke method on this object, must not be null"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,250,"* @param methodName  get method with this name, must not be null"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,251,* @param args  use these arguments - treat null as empty array
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,253,* @throws NoSuchMethodException if there is no such accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,254,* @throws InvocationTargetException wraps an exception thrown by the
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,255,*  method invoked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,256,* @throws IllegalAccessException if the requested method is not accessible
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,257,*  via reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,258,"* @throws IllegalArgumentException if the objectToInvoke, methodName or any argument is null"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,260,public static Object invokeMethod(
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,261,"Object objectToInvoke,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,262,"String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,263,Object[] args)
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,264,throws
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,265,"NoSuchMethodException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,266,"IllegalAccessException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,267,InvocationTargetException {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,269,if (objectToInvoke == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,270,"throw new IllegalArgumentException(""The object to invoke must not be null"");"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,272,if (methodName == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,273,"throw new IllegalArgumentException(""The method name must not be null"");"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,275,if (args == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,276,"return invokeMethod(objectToInvoke, methodName, null, null);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,277,} else {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,278,int arguments = args.length;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,279,Class parameterTypes [] = new Class[arguments];
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,280,for (int i = 0; i < arguments; i++) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,281,if (args[i] == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,282,"throw new IllegalArgumentException(""The arguments must not be null. Index "" + i + "" was null."");"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,284,parameterTypes[i] = args[i].getClass();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,286,"return invokeMethod(objectToInvoke, methodName, args, parameterTypes);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,291,* <p>Invoke a named method whose parameter type matches the object type.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,293,* <p>The behaviour of this method is less deterministic
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,294,* than {@link
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,295,"* #invokeExactMethod(Object object,String methodName,Object [] args,Class[] parameterTypes)}."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,296,* It loops through all methods with names that match
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,297,* and then executes the first it finds with compatable parameters.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,299,* <p>This method supports calls to methods taking primitive parameters
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,300,"* via passing in wrapping classes. So, for example, a <code>Boolean</code> class"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,301,* would match a <code>boolean</code> primitive.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,304,* @param object  invoke method on this object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,305,* @param methodName  get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,306,* @param args  use these arguments - treat null as empty array
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,307,* @param parameterTypes  match these parameters - treat null as empty array
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,309,* @throws NoSuchMethodException if there is no such accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,310,* @throws InvocationTargetException wraps an exception thrown by the
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,311,*  method invoked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,312,* @throws IllegalAccessException if the requested method is not accessible
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,313,*  via reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,315,public static Object invokeMethod(
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,316,"Object object,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,317,"String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,318,"Object[] args,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,319,Class[] parameterTypes)
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,320,throws
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,321,"NoSuchMethodException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,322,"IllegalAccessException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,323,InvocationTargetException {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,325,if (parameterTypes == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,326,parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,328,if (args == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,329,args = ArrayUtils.EMPTY_OBJECT_ARRAY;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,332,return null;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,333,//        Method method = getMatchingAccessibleMethod(
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,334,"//                object.getClass(),"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,335,"//                methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,336,//                parameterTypes);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,337,//        if (method == null)
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,338,"//            throw new NoSuchMethodException(""No such accessible method: "" +"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,339,"//                    methodName + ""() on object: "" + object.getClass().getName());"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,340,"//        return method.invoke(object, args);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,345,* <p>Invoke a method whose parameter type matches exactly the object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,346,* type.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,348,* <p> This is a convenient wrapper for
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,349,"* {@link #invokeExactMethod(Object object,String methodName,Object [] args)}."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,350,* </p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,352,* @param object invoke method on this object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,353,* @param methodName get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,354,* @param arg use this argument
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,356,* @throws NoSuchMethodException if there is no such accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,357,* @throws InvocationTargetException wraps an exception thrown by the
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,358,*  method invoked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,359,* @throws IllegalAccessException if the requested method is not accessible
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,360,*  via reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,362,public static Object invokeExactMethod(
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,363,"Object object,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,364,"String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,365,Object arg)
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,366,throws
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,367,"NoSuchMethodException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,368,"IllegalAccessException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,369,InvocationTargetException {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,371,Object[] args = {arg};
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,372,"return invokeExactMethod(object, methodName, args);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,378,* <p>Invoke a method whose parameter types match exactly the object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,379,* types.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,381,* <p> This uses reflection to invoke the method obtained from a call to
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,382,* {@link #getAccessibleMethod}.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,384,* @param object invoke method on this object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,385,* @param methodName get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,386,* @param args use these arguments - treat null as empty array
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,388,* @throws NoSuchMethodException if there is no such accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,389,* @throws InvocationTargetException wraps an exception thrown by the
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,390,*  method invoked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,391,* @throws IllegalAccessException if the requested method is not accessible
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,392,*  via reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,394,public static Object invokeExactMethod(
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,395,"Object object,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,396,"String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,397,Object[] args)
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,398,throws
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,399,"NoSuchMethodException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,400,"IllegalAccessException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,401,InvocationTargetException {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,402,if (args == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,403,args = ArrayUtils.EMPTY_OBJECT_ARRAY;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,405,int arguments = args.length;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,406,Class parameterTypes [] = new Class[arguments];
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,407,for (int i = 0; i < arguments; i++) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,408,parameterTypes[i] = args[i].getClass();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,410,"return invokeExactMethod(object, methodName, args, parameterTypes);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,416,* <p>Invoke a method whose parameter types match exactly the parameter
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,417,* types given.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,419,* <p>This uses reflection to invoke the method obtained from a call to
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,420,* {@link #getAccessibleMethod}.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,422,* @param object invoke method on this object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,423,* @param methodName get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,424,* @param args use these arguments - treat null as empty array
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,425,* @param parameterTypes match these parameters - treat null as empty array
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,427,* @throws NoSuchMethodException if there is no such accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,428,* @throws InvocationTargetException wraps an exception thrown by the
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,429,*  method invoked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,430,* @throws IllegalAccessException if the requested method is not accessible
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,431,*  via reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,433,public static Object invokeExactMethod(
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,434,"Object object,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,435,"String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,436,"Object[] args,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,437,Class[] parameterTypes)
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,438,throws
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,439,"NoSuchMethodException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,440,"IllegalAccessException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,441,InvocationTargetException {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,443,if (args == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,444,args = ArrayUtils.EMPTY_OBJECT_ARRAY;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,447,if (parameterTypes == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,448,parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,451,Method method = getAccessibleMethod(
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,452,"object.getClass(),"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,453,"methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,454,parameterTypes);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,455,if (method == null)
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,456,"throw new NoSuchMethodException(""No such accessible method: "" +"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,457,"methodName + ""() on object: "" + object.getClass().getName());"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,458,"return method.invoke(object, args);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,464,"* <p>Return an accessible method (that is, one that can be invoked via"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,465,* reflection) with given name and a single parameter.  If no such method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,466,"* can be found, return <code>null</code>."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,467,"* Basically, a convenience wrapper that constructs a <code>Class</code>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,468,* array for you.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,470,* @param clazz get method from this class
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,471,* @param methodName get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,472,* @param parameterType taking this type of parameter
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,474,public static Method getAccessibleMethod(
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,475,"Class clazz,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,476,"String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,477,Class parameterType) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,479,Class[] parameterTypes = {parameterType};
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,480,"return getAccessibleMethod(clazz, methodName, parameterTypes);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,486,"* <p>Return an accessible method (that is, one that can be invoked via"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,487,* reflection) with given name and parameters.  If no such method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,488,"* can be found, return <code>null</code>."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,489,* This is just a convenient wrapper for
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,490,* {@link #getAccessibleMethod(Method method)}.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,492,* @param clazz get method from this class
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,493,* @param methodName get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,494,* @param parameterTypes with these parameters types
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,496,public static Method getAccessibleMethod(
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,497,"Class clazz,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,498,"String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,499,Class[] parameterTypes) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,501,try {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,502,return getAccessibleMethod
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,503,"(clazz.getMethod(methodName, parameterTypes));"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,504,} catch (NoSuchMethodException e) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,505,return (null);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,512,"* <p>Return an accessible method (that is, one that can be invoked via"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,513,* reflection) that implements the specified Method.  If no such method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,514,"* can be found, return <code>null</code>.</p>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,516,* @param method The method that we wish to call
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,518,public static Method getAccessibleMethod(Method method) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,520,// Make sure we have a method to check
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,521,if (method == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,522,return (null);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,525,// If the requested method is not public we cannot call it
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,526,if (!Modifier.isPublic(method.getModifiers())) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,527,return (null);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,530,"// If the declaring class is public, we are done"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,531,Class clazz = method.getDeclaringClass();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,532,if (Modifier.isPublic(clazz.getModifiers())) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,533,return (method);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,536,// Check the implemented interfaces and subinterfaces
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,537,String methodName = method.getName();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,538,Class[] parameterTypes = method.getParameterTypes();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,539,method =
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,540,"getAccessibleMethodFromInterfaceNest(clazz,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,541,"method.getName(),"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,542,method.getParameterTypes());
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,543,return (method);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,548,// -------------------------------------------------------- Private Methods
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,551,"* <p>Return an accessible method (that is, one that can be invoked via"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,552,"* reflection) that implements the specified method, by scanning through"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,553,* all implemented interfaces and subinterfaces.  If no such method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,554,"* can be found, return <code>null</code>.</p>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,556,* <p> There isn't any good reason why this method must be private.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,557,* It is because there doesn't seem any reason why other classes should
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,558,* call this rather than the higher level methods.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,560,* @param clazz Parent class for the interfaces to be checked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,561,* @param methodName Method name of the method we wish to call
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,562,* @param parameterTypes The parameter type signatures
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,564,private static Method getAccessibleMethodFromInterfaceNest
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,565,"(Class clazz, String methodName, Class parameterTypes[]) {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,567,Method method = null;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,569,// Search up the superclass chain
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,570,for (; clazz != null; clazz = clazz.getSuperclass()) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,572,// Check the implemented interfaces of the parent class
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,573,Class interfaces[] = clazz.getInterfaces();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,574,for (int i = 0; i < interfaces.length; i++) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,576,// Is this interface public?
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,577,if (!Modifier.isPublic(interfaces[i].getModifiers()))
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,578,continue;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,580,// Does the method exist on this interface?
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,581,try {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,582,"method = interfaces[i].getDeclaredMethod(methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,583,parameterTypes);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,584,} catch (NoSuchMethodException e) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,587,if (method != null)
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,588,break;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,590,// Recursively check our parent interfaces
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,591,method =
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,592,"getAccessibleMethodFromInterfaceNest(interfaces[i],"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,593,"methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,594,parameterTypes);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,595,if (method != null)
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,596,break;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,602,// If we found a method return it
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,603,if (method != null)
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,604,return (method);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,606,// We did not find anything
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,607,return (null);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,612,//     * <p>Find an accessible method that matches the given name and has compatible parameters.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,613,//     * Compatible parameters mean that every method parameter is assignable from
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,614,//     * the given parameters.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,615,"//     * In other words, it finds a method with the given name"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,616,//     * that will take the parameters given.<p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,618,//     * <p>This method is slightly undeterminstic since it loops
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,619,//     * through methods names and return the first matching method.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,621,//     * <p>This method is used by
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,622,//     * {@link
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,623,"//     * #invokeMethod(Object object,String methodName,Object [] args,Class[] parameterTypes)}."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,625,//     * <p>This method can match primitive parameter by passing in wrapper classes.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,626,"//     * For example, a <code>Boolean</code> will match a primitive <code>boolean</code>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,627,//     * parameter.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,629,//     * @param clazz find method in this class
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,630,//     * @param methodName find method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,631,//     * @param parameterTypes find method with compatible parameters
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,633,//    private static Method getMatchingAccessibleMethod(
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,634,"//                                                Class clazz,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,635,"//                                                String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,636,//                                                Class[] parameterTypes) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,637,//        // trace logging
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,638,//        if (log.isTraceEnabled()) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,639,"//            log.trace(""Matching name="" + methodName + "" on "" + clazz);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,642,//        // see if we can find the method directly
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,643,//        // most of the time this works and it's much faster
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,644,//        try {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,645,"//            Method method = clazz.getMethod(methodName, parameterTypes);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,646,//            return method;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,648,//        } catch (NoSuchMethodException e) { /* SWALLOW */ }
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,650,//        // search through all methods
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,651,//        int paramSize = parameterTypes.length;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,652,//        Method[] methods = clazz.getMethods();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,653,"//        for (int i = 0, size = methods.length; i < size ; i++) {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,654,//            if (methods[i].getName().equals(methodName)) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,655,//                // log some trace information
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,656,//                if (log.isTraceEnabled()) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,657,"//                    log.trace(""Found matching name:"");"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,658,//                    log.trace(methods[i]);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,661,//                // compare parameters
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,662,//                Class[] methodsParams = methods[i].getParameterTypes();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,663,//                int methodParamSize = methodsParams.length;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,664,//                if (methodParamSize == paramSize) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,665,//                    boolean match = true;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,666,//                    for (int n = 0 ; n < methodParamSize; n++) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,667,//                        if (log.isTraceEnabled()) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,668,"//                            log.trace(""Param="" + parameterTypes[n].getName());"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,669,"//                            log.trace(""Method="" + methodsParams[n].getName());"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,671,"//                        if (!isAssignmentCompatible(methodsParams[n], parameterTypes[n])) {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,672,//                            if (log.isTraceEnabled()) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,673,"//                                log.trace(methodsParams[n] + "" is not assignable from """
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,674,//                                            + parameterTypes[n]);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,676,//                            match = false;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,677,//                            break;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,681,//                    if (match) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,682,//                        // get accessible version of method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,683,//                        Method method = getAccessibleMethod(methods[i]);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,684,//                        if (method != null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,685,//                            if (log.isTraceEnabled()) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,686,"//                                log.trace(method + "" accessible version of """
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,687,//                                            + methods[i]);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,689,//                            return method;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,692,"//                        log.trace(""Couldn't find accessible method."");"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,698,//        // didn't find a match
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,699,"//        log.trace(""No match found."");"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,700,//        return null;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,704,//     * <p>Determine whether a type can be used as a parameter in a method invocation.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,705,//     * This method handles primitive conversions correctly.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,707,"//     * <p>In order words, it will match a <code>Boolean</code> to a <code>boolean</code>,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,708,"//     * a <code>Long</code> to a <code>long</code>,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,709,"//     * a <code>Float</code> to a <code>float</code>,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,710,"//     * a <code>Integer</code> to a <code>int</code>,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,711,//     * and a <code>Double</code> to a <code>double</code>.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,712,//     * Now logic widening matches are allowed.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,713,"//     * For example, a <code>Long</code> will not match a <code>int</code>."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,715,//     * @param parameterType the type of parameter accepted by the method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,716,//     * @param parameterization the type of parameter being tested
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,718,//     * @return true if the assignement is compatible.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,720,"//    private static final boolean isAssignmentCompatible(Class parameterType, Class parameterization) {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,721,//        // try plain assignment
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,722,//        if (parameterType.isAssignableFrom(parameterization)) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,723,//            return true;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,726,//        if (parameterType.isPrimitive()) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,727,//            // does anyone know a better strategy than comparing names?
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,728,"//            // also, this method does *not* do widening - you must specify exactly"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,729,//            // is this the right behaviour?
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,730,//            if (boolean.class.equals(parameterType)) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,731,//                return Boolean.class.equals(parameterization);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,733,//            if (float.class.equals(parameterType)) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,734,//                return Float.class.equals(parameterization);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,736,//            if (long.class.equals(parameterType)) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,737,//                return Long.class.equals(parameterization);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,739,//            if (int.class.equals(parameterType)) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,740,//                return Integer.class.equals(parameterization);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,742,//            if (double.class.equals(parameterType)) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,743,//                return Double.class.equals(parameterization);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,747,//        return false;
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,5,* reserved.
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,9,* are met:
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,17,*    distribution.
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,54,package org.apache.commons.lang.reflect;
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,56,import org.apache.commons.lang.exception.NestableRuntimeException;
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,58,* Exception thrown when the Reflection process fails. The original
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,59,* error is wrapped within this one.
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,61,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,62,"* @version $Id: ReflectionException.java,v 1.1 2002/10/24 23:12:54 scolebourne Exp $"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,64,public class ReflectionException extends NestableRuntimeException {
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,67,* Constructs a new <code>ReflectionException</code> without specified
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,68,* detail message.
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,70,public ReflectionException() {
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,71,super();
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,75,* Constructs a new <code>ReflectionException</code> with specified
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,76,* detail message.
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,78,* @param msg  The error message.
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,80,public ReflectionException(String msg) {
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,81,super(msg);
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,85,* Constructs a new <code>ReflectionException</code> with specified
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,86,* nested <code>Throwable</code>.
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,88,* @param cause  The exception or error that caused this exception
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,89,*               to be thrown.
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,91,public ReflectionException(Throwable cause) {
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,92,super(cause);
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,96,* Constructs a new <code>ReflectionException</code> with specified
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,97,* detail message and nested <code>Throwable</code>.
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,99,* @param msg    The error message.
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,100,* @param cause  The exception or error that caused this exception
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,101,*               to be thrown.
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,103,"public ReflectionException(String msg, Throwable cause) {"
True,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,104,"super(msg, cause);"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,5,* reserved.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,9,* are met:
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,17,*    distribution.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,54,package org.apache.commons.lang.reflect;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,56,import java.lang.reflect.InvocationTargetException;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,57,import java.lang.reflect.Member;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,58,import java.lang.reflect.Method;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,59,import java.lang.reflect.Modifier;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,60,import java.util.ArrayList;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,61,import java.util.Iterator;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,62,import java.util.List;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,64,import org.apache.commons.lang.*;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,65,import org.apache.commons.lang.ArrayUtils;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,66,import org.apache.commons.lang.StringUtils;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,68,* <code>ReflectionUtils</code> contains utility methods for working for
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,69,* reflection.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,71,"* @author <a href=""mailto:scolebourne@apache.org"">Stephen Colebourne</a>"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,72,"* @version $Id: ReflectionUtils.java,v 1.1 2002/10/24 23:12:54 scolebourne Exp $"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,74,public class ReflectionUtils {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,77,* ReflectionUtils instances should NOT be constructed in standard programming.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,78,"* Instead, the class should be used as <code>ReflectionUtils.getShortClassName(obj)</code>."
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,79,* This constructor is public to permit tools that require a JavaBean instance
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,80,* to operate.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,82,public ReflectionUtils() {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,88,* Tests whether the specified field or method is
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,89,* <code>static</code>.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,91,"* @param member  the member to test, must not be null"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,92,* @return true if the member is static
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,94,public static boolean isStatic(Member member) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,95,if (member == null) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,96,"throw new IllegalArgumentException(""The member must not be null"");"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,98,return Modifier.isStatic(member.getModifiers());
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,102,* Tests whether the specified field or method is
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,103,* <code>static</code>.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,105,"* @param member  the member to test, must not be null"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,106,* @return true if the member is final
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,108,public static boolean isFinal(Member member) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,109,if (member == null) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,110,"throw new IllegalArgumentException(""The member must not be null"");"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,112,return Modifier.isFinal(member.getModifiers());
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,116,"* Tests whether the specified field, method or constructor is"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,117,* <code>public</code>.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,119,"* @param member  the member to test, must not be null"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,120,* @return true if the member is public scoped
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,122,public static boolean isPublicScope(Member member) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,123,if (member == null) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,124,"throw new IllegalArgumentException(""The member must not be null"");"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,126,return Modifier.isStatic(member.getModifiers());
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,130,"* Tests whether the specified field, method or constructor is"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,131,* <code>protected</code>.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,133,"* @param member  the member to test, must not be null"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,134,* @return true if the member is protected scoped
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,136,public static boolean isProtectedScope(Member member) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,137,if (member == null) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,138,"throw new IllegalArgumentException(""The member must not be null"");"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,140,return Modifier.isProtected(member.getModifiers());
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,144,"* Tests whether the specified field, method or constructor is"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,145,* package (default) scoped.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,147,"* @param member  the member to test, must not be null"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,148,* @return true if the member is package scoped
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,150,public static boolean isPackageScope(Member member) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,151,return !(isPublicScope(member) || isProtectedScope(member) || isPrivateScope(member));
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,155,"* Tests whether the specified field, method or constructor is"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,156,* <code>private</code>.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,158,"* @param member  the member to test, must not be null"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,159,* @return true if the member is private scoped
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,161,public static boolean isPrivateScope(Member member) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,162,if (member == null) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,163,"throw new IllegalArgumentException(""The member must not be null"");"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,165,return Modifier.isPrivate(member.getModifiers());
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,171,* Gets a class object for the specified string.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,173,"* @param className  fully qualified class name to find, must not be empty"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,174,* @return Class object for class
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,175,* @throws ReflectionException if an error occurs during reflection
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,176,* @throws IllegalArgumentException if the class name is empty
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,178,public static Class getClass(String className) throws ReflectionException {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,179,if (StringUtils.isEmpty(className)) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,180,"throw new IllegalArgumentException(""The class name must not be null"");"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,182,try {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,183,return Class.forName(className);
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,185,} catch (LinkageError ex) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,186,"throw new ReflectionException(getThrowableText(ex, ""getting class"", className, null, null), ex);"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,187,} catch (Exception ex) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,188,"throw new ReflectionException(getThrowableText(ex, ""getting class"", className, null, null), ex);"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,195,* Checks if the requested Class array is compatable with the specified
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,196,* parameter array.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,197,* Primitive classes are handled correctly .
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,198,* <p>
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,199,"* In other words, a <code>boolean</code> Class will be converted to"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,200,* a <code>Boolean</code> Class and so on.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,202,* @param requestedTypes  the class array requested
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,203,* @param paramTypes  the actual class array for the method
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,204,* @return true if the parameters are compatable
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,206,"public static boolean isCompatable(Class[] requestedTypes, Class[] paramTypes) {"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,207,"if (ArrayUtils.isSameLength(requestedTypes, paramTypes) == false) {"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,208,return false;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,210,if (requestedTypes == null) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,211,requestedTypes = ArrayUtils.EMPTY_CLASS_ARRAY;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,213,if (paramTypes == null) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,214,paramTypes = ArrayUtils.EMPTY_CLASS_ARRAY;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,216,for (int i = 0; i < requestedTypes.length; i++) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,217,"if (ClassUtils.isAssignable(requestedTypes[i], paramTypes[i]) == false) {"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,218,return false;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,221,return true;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,225,* Converts a primitive class to its matching object class.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,226,* Non-primitive classes are unaffected.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,227,* <p>
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,228,"* In other words, a <code>boolean</code> Class will be converted to"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,229,* a <code>Boolean</code> Class and so on.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,231,* @param cls  the class to convert
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,232,* @return converted class
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,233,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,235,public static Class convertPrimitiveClass(Class cls) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,236,if (cls == null) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,237,"throw new IllegalArgumentException(""The class must not be null"");"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,239,if (cls.isPrimitive()) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,240,if (Integer.TYPE.equals(cls)) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,241,return Integer.class;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,242,} else if (Long.TYPE.equals(cls)) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,243,return Long.class;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,244,} else if (Boolean.TYPE.equals(cls)) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,245,return Boolean.class;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,246,} else if (Double.TYPE.equals(cls)) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,247,return Double.class;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,248,} else if (Float.TYPE.equals(cls)) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,249,return Float.class;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,250,} else if (Character.TYPE.equals(cls)) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,251,return Character.class;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,252,} else if (Short.TYPE.equals(cls)) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,253,return Short.class;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,254,} else if (Byte.TYPE.equals(cls)) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,255,return Byte.class;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,258,return cls;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,264,* Produces nicely formatted informational error messages for reflection errors.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,266,* @param th  the throwable
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,267,"* @param desc  the short description of the action, such as 'getting field'"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,268,* @param className  the class name being used
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,269,* @param types  the parameter types
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,270,* @param memberName  the name of the field or method
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,271,* @return a suitable error message
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,273,"public static String getThrowableText(Throwable th, String desc, String className, Class[] types, String memberName) {"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,274,String message = null;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,275,try {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,276,throw th;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,278,} catch (NoSuchMethodException ex) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,279,"message = ""the method does not exist"";"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,280,} catch (NoSuchFieldException ex) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,281,"message = ""the field does not exist"";"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,282,} catch (ClassNotFoundException ex) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,283,"message = ""the class could not be found in the classpath"";"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,284,} catch (InvocationTargetException ex) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,285,"message = ""the method threw an exception"";"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,286,} catch (InstantiationException ex) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,287,"message = ""the class is abstract/interface/array/primitive"";"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,288,} catch (IllegalAccessException ex) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,289,"message = ""the method was not public/accessible"";"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,290,} catch (IllegalArgumentException ex) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,291,"message = ""the parameters did not match those expected"";"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,292,} catch (SecurityException ex) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,293,"message = ""the security manager prevents reflection"";"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,294,} catch (ExceptionInInitializerError ex) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,295,"message = ""the class initialization for static variables threw an exception"";"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,296,} catch (ClassCircularityError ex) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,297,"message = ""a circularity has been detected while initializing a class"";"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,298,} catch (ClassFormatError ex) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,299,"message = ""the class file is malformed or otherwise cannot be interpreted as a class"";"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,300,} catch (IncompatibleClassChangeError ex) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,301,"message = ""the method references another class that has changed incompatibly since compile time"";"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,302,} catch (UnsatisfiedLinkError ex) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,303,"message = ""no implementation found for a native method"";"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,304,} catch (VerifyError ex) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,305,"message = ""the class file contains an internal inconsistency or security problem"";"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,306,} catch (NoClassDefFoundError ex) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,307,"message = ""the class references another class that was present at compile time but is no longer available"";"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,308,} catch (LinkageError ex) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,309,"message = ""the class references another class that has changed incompatibly since compile time"";"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,310,} catch (Throwable ex) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,311,message = null;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,313,StringBuffer buf = new StringBuffer();
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,314,buf.append(ClassUtils.getShortClassName(th));
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,315,"buf.append("" while "");"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,316,buf.append(desc);
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,317,"buf.append("" on Class '"");"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,318,buf.append(className);
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,319,"buf.append(""'"");"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,320,if (types != null) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,321,"buf.append("" for types "");"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,322,buf.append(ArrayUtils.toString(types));
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,324,if (memberName != null) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,325,"buf.append("" for method '"");"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,326,buf.append(memberName);
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,327,"buf.append(""'"");"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,329,if (message != null) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,330,"buf.append("" - "");"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,331,buf.append(message);
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,333,return buf.toString();

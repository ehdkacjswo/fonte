is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,1,package org.apache.commons.lang;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,4,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,6,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,7,* reserved.
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,9,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,10,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,11,* are met:
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,13,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,14,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,16,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,17,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,18,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,19,*    distribution.
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,21,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,22,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,23,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,24,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,25,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,26,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,28,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,29,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,30,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,31,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,33,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,34,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,35,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,37,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,38,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,39,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,40,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,41,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,42,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,43,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,44,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,45,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,46,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,47,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,48,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,51,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,52,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,53,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,54,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,57,import java.text.*;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,58,import java.util.*;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,61,* A suite of utilities surrounding the use of the Calendar and Date object.
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,63,"* @author <a href=""mailto:sergek@lokitech.com"">Serge Knystautas</a>"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,65,public class CalendarUtils {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,68,"* This is half a month, so this represents whether a date is in the top"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,69,* or bottom half of the month.
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,71,public final static int SEMI_MONTH = 1001;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,73,private static final int[][] fields = {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,74,"{Calendar.MILLISECOND},"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,75,"{Calendar.SECOND},"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,76,"{Calendar.MINUTE},"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,77,"{Calendar.HOUR_OF_DAY, Calendar.HOUR},"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,78,"{Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM /* Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, Calendar.DAY_OF_WEEK_IN_MONTH */},"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,79,"{Calendar.MONTH, CalendarUtils.SEMI_MONTH},"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,80,"{Calendar.YEAR},"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,81,{Calendar.ERA}};
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,83,private static DateFormat[] dateFormats = {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,84,//3/31/92 10:00:07 PST
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,85,"new SimpleDateFormat(""M/dd/yy h:mm:ss z""),"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,86,"//January 23, 1987 10:05pm"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,87,"new SimpleDateFormat(""MMM d, yyyy h:mm a""),"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,88,//22:00 GMT
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,89,"new SimpleDateFormat(""h:mm z"")};"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,92,"* A week range, starting on Sunday."
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,94,public final static int RANGE_WEEK_SUNDAY = 1;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,97,"* A week range, starting on Monday."
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,99,public final static int RANGE_WEEK_MONDAY = 2;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,102,"* A week range, starting on the day focused."
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,104,public final static int RANGE_WEEK_RELATIVE = 3;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,107,"* A week range, centered around the day focused."
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,109,public final static int RANGE_WEEK_CENTER = 4;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,112,"* A month range, the week starting on Sunday."
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,114,public final static int RANGE_MONTH_SUNDAY = 5;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,117,"* A month range, the week starting on Monday."
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,119,public final static int RANGE_MONTH_MONDAY = 6;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,122,* See the other round method.  Works with a Date object.
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,124,"public static Date round(Date val, int field) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,125,GregorianCalendar gval = new GregorianCalendar();
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,126,gval.setTime(val);
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,127,"modify(gval, field, true);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,128,return gval.getTime();
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,132,"* Round this date, leaving the field specified as the most significant"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,133,"* field.  For example, if you had the datetime of 28 Mar 2002"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,134,"* 13:45:01.231, if this was passed with HOUR, it would return 28 Mar"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,135,"* 2002 14:00:00.000.  If this was passed with MONTH, it would return"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,136,* 1 April 2002 0:00:00.000.
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,138,"public static Calendar round(Calendar val, int field) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,139,Calendar rounded = (Calendar) val.clone();
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,140,"modify(rounded, field, true);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,141,return rounded;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,145,"* See the other round method.  Works with an Object, trying to"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,146,* use it as either a Date or Calendar.
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,148,"public static Date round(Object val, int field) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,149,if (val instanceof Date) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,150,"return round((Date) val, field);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,151,} else if (val instanceof Calendar) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,152,"return round((Calendar) val, field).getTime();"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,153,} else {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,154,"throw new ClassCastException(""Could not round "" + val);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,159,* See the other trunc method.  Works with a Date.
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,161,"public static Date trunc(Date val, int field) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,162,GregorianCalendar gval = new GregorianCalendar();
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,163,gval.setTime(val);
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,164,"modify(gval, field, false);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,165,return gval.getTime();
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,169,"* Truncate this date, leaving the field specified as the most significant"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,170,"* field.  For example, if you had the datetime of 28 Mar 2002"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,171,"* 13:45:01.231, if you passed with HOUR, it would return 28 Mar"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,172,"* 2002 13:00:00.000.  If this was passed with MONTH, it would return"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,173,* 1 Mar 2002 0:00:00.000.
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,175,"public static Calendar trunc(Calendar val, int field) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,176,Calendar truncated = (Calendar) val.clone();
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,177,"modify(truncated, field, false);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,178,return truncated;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,182,"* See the other trunc method.  Works with an Object, trying to"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,183,* use it as either a Date or Calendar.
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,185,"public static Date trunc(Object val, int field) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,186,if (val instanceof Date) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,187,"return trunc((Date) val, field);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,188,} else if (val instanceof Calendar) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,189,"return trunc((Calendar) val, field).getTime();"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,190,} else {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,191,"throw new ClassCastException(""Could not trunc "" + val);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,195,"private static void modify(Calendar val, int field, boolean round) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,196,boolean roundUp = false;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,197,for (int i = 0; i < fields.length; i++) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,198,for (int j = 0; j < fields[i].length; j++) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,199,if (fields[i][j] == field) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,200,//This is our field... we stop looping
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,201,if (round && roundUp) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,202,if (field == CalendarUtils.SEMI_MONTH) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,203,//This is a special case that's hard to generalize
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,204,"//If the date is 1, we round up to 16, otherwise"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,205,//  we subtract 15 days and add 1 month
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,206,if (val.get(Calendar.DATE) == 1) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,207,"val.add(Calendar.DATE, 15);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,208,} else {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,209,"val.add(Calendar.DATE, -15);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,210,"val.add(Calendar.MONTH, 1);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,212,} else {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,213,//We need at add one to this field since the
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,214,//  last number causes us to round up
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,215,"val.add(fields[i][0], 1);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,218,return;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,221,//We have various fields that are not easy roundings
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,222,int offset = 0;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,223,boolean offsetSet = false;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,224,//These are special types of fields that require different rounding rules
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,225,switch (field) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,226,case CalendarUtils.SEMI_MONTH:
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,227,if (fields[i][0] == Calendar.DATE) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,228,"//If we're going to drop the DATE field's value,"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,229,//  we want to do this our own way.
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,230,//We need to subtrace 1 since the date has a minimum of 1
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,231,offset = val.get(Calendar.DATE) - 1;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,232,"//If we're above 15 days adjustment, that means we're in the"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,233,//  bottom half of the month and should stay accordingly.
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,234,if (offset >= 15) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,235,offset -= 15;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,237,//Record whether we're in the top or bottom half of that range
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,238,roundUp = offset > 7;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,239,offsetSet = true;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,241,break;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,242,case Calendar.AM_PM:
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,243,if (fields[i][0] == Calendar.HOUR) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,244,"//If we're going to drop the HOUR field's value,"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,245,//  we want to do this our own way.
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,246,offset = val.get(Calendar.HOUR);
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,247,if (offset >= 12) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,248,offset -= 12;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,250,roundUp = offset > 6;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,251,offsetSet = true;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,253,break;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,255,if (!offsetSet) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,256,int min = val.getActualMinimum(fields[i][0]);
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,257,int max = val.getActualMaximum(fields[i][0]);
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,258,//Calculate the offset from the minimum allowed value
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,259,offset = val.get(fields[i][0]) - min;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,260,//Set roundUp if this is more than half way between the minimum and maximum
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,261,roundUp = offset > ((max - min) / 2);
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,263,//We need to remove this field
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,264,"val.add(fields[i][0], -offset);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,266,"throw new RuntimeException(""We do not support that field."");"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,271,* Parses strings the way that CVS supports it... very human readable
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,273,public static Calendar parse(String original) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,274,"return parse(original, Locale.getDefault());"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,278,* Parses strings the way that CVS supports it... very human readable
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,280,"public static Calendar parse(String original, Locale locale) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,281,//Get the symbol names
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,282,DateFormatSymbols symbols = new DateFormatSymbols(locale);
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,284,//Prep the string to parse
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,285,String value = original.toLowerCase().trim();
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,287,//Get the current date/time
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,288,Calendar now = Calendar.getInstance();
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,289,"if (value.endsWith("" ago"")) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,290,"//If this was a date that was ""ago"" the current time..."
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,291,//Strip out the ' ago' part
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,292,"value = value.substring(0, value.length() - 4);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,294,//Split the value and unit
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,295,"int start = value.indexOf("" "");"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,296,if (start < 0) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,297,"throw new RuntimeException(""Could not find space in between value and unit"");"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,299,String unit = value.substring(start + 1);
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,300,"value = value.substring(0, start);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,301,"//We support ""a week"", so we need to parse the value as ""a"""
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,302,int val = 0;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,303,"if (value.equals(""a"") || value.equals(""an"")) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,304,val = 1;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,305,} else {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,306,val = Integer.parseInt(value);
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,309,//Determine the unit
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,310,"if (unit.equals(""milliseconds"") || unit.equals(""millisecond"")) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,311,"now.add(Calendar.MILLISECOND, -val);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,312,"} else if (unit.equals(""seconds"") || unit.equals(""second"")) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,313,"now.add(Calendar.SECOND, -val);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,314,"} else if (unit.equals(""minutes"") || unit.equals(""minute"")) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,315,"now.add(Calendar.MINUTE, -val);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,316,"} else if (unit.equals(""hours"") || unit.equals(""hour"")) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,317,"now.add(Calendar.HOUR, -val);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,318,"} else if (unit.equals(""days"") || unit.equals(""day"")) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,319,"now.add(Calendar.DATE, -val);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,320,"} else if (unit.equals(""weeks"") || unit.equals(""week"")) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,321,"now.add(Calendar.DATE, -val * 7);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,322,"} else if (unit.equals(""fortnights"") || unit.equals(""fortnight"")) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,323,"now.add(Calendar.DATE, -val * 14);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,324,"} else if (unit.equals(""months"") || unit.equals(""month"")) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,325,"now.add(Calendar.MONTH, -val);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,326,"} else if (unit.equals(""years"") || unit.equals(""year"")) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,327,"now.add(Calendar.YEAR, -val);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,328,} else {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,329,"throw new RuntimeException(""We do not understand that many units ago"");"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,331,return now;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,332,"} else if (value.startsWith(""last "")) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,333,//If this was the last time a certain field was met
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,334,//Strip out the 'last ' part
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,335,value = value.substring(5);
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,336,//Get the current date/time
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,337,String[] strings = symbols.getWeekdays();
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,338,for (int i = 0; i < strings.length; i++) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,339,if (value.equalsIgnoreCase(strings[i])) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,340,//How many days after Sunday
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,341,int daysAgo = now.get(Calendar.DAY_OF_WEEK) - i;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,342,if (daysAgo <= 0) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,343,daysAgo += 7;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,345,"now.add(Calendar.DATE, -daysAgo);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,346,return now;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,349,strings = symbols.getMonths();
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,350,for (int i = 0; i < strings.length; i++) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,351,if (value.equalsIgnoreCase(strings[i])) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,352,//How many days after January
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,353,int monthsAgo = now.get(Calendar.MONTH) - i;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,354,if (monthsAgo <= 0) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,355,monthsAgo += 12;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,357,"now.add(Calendar.MONTH, -monthsAgo);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,358,return now;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,361,"if (value.equals(""week"")) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,362,"now.add(Calendar.DATE, -7);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,363,return now;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,365,"} else if (value.equals(""yesterday"")) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,366,"now.add(Calendar.DATE, -1);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,367,return now;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,368,"} else if (value.equals(""tomorrow"")) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,369,"now.add(Calendar.DATE, 1);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,370,return now;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,372,//Try to parse the date a number of different ways
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,373,for (int i = 0; i < dateFormats.length; i++) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,374,try {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,375,Date datetime = dateFormats[i].parse(original);
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,376,Calendar cal = Calendar.getInstance();
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,377,cal.setTime(datetime);
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,378,return cal;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,379,} catch (ParseException pe) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,380,//we ignore this and just keep trying
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,384,"throw new RuntimeException(""Unable to parse '"" + original + ""'."");"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,388,* This constructs an Iterator that will start and stop over a date
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,389,"* range based on the focused date and the range style.  For instance,"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,390,"* passing Thursday, July 4, 2002 and a RANGE_MONTH_SUNDAY will return"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,391,"* an Iterator that starts with Sunday, June 30, 2002 and ends with"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,392,"* Saturday, August 3, 2002."
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,394,"public static Iterator getCalendarIterator(Calendar focus, int rangeStyle) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,395,Calendar start = null;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,396,Calendar end = null;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,397,int startCutoff = Calendar.SUNDAY;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,398,int endCutoff = Calendar.SATURDAY;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,399,switch (rangeStyle) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,400,case RANGE_MONTH_SUNDAY:
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,401,case RANGE_MONTH_MONDAY:
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,402,//Set start to the first of the month
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,403,"start = trunc(focus, Calendar.MONTH);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,404,//Set end to the last of the month
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,405,end = (Calendar) start.clone();
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,406,"end.add(Calendar.MONTH, 1);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,407,"end.add(Calendar.DATE, -1);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,408,//Loop start back to the previous sunday or monday
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,409,if (rangeStyle == RANGE_MONTH_MONDAY) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,410,startCutoff = Calendar.MONDAY;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,411,endCutoff = Calendar.SUNDAY;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,413,break;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,414,case RANGE_WEEK_SUNDAY:
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,415,case RANGE_WEEK_MONDAY:
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,416,case RANGE_WEEK_RELATIVE:
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,417,case RANGE_WEEK_CENTER:
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,418,//Set start and end to the current date
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,419,"start = trunc(focus, Calendar.DATE);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,420,"end = trunc(focus, Calendar.DATE);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,421,switch (rangeStyle) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,422,case RANGE_WEEK_SUNDAY:
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,423,//already set by default
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,424,break;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,425,case RANGE_WEEK_MONDAY:
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,426,startCutoff = Calendar.MONDAY;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,427,endCutoff = Calendar.SUNDAY;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,428,break;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,429,case RANGE_WEEK_RELATIVE:
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,430,startCutoff = focus.get(Calendar.DAY_OF_WEEK);
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,431,endCutoff = startCutoff - 1;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,432,break;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,433,case RANGE_WEEK_CENTER:
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,434,startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,435,endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,436,break;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,438,break;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,439,default:
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,440,"throw new RuntimeException(""The range style "" + rangeStyle + "" is not valid."");"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,442,if (startCutoff < Calendar.SUNDAY) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,443,startCutoff += 7;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,445,if (endCutoff > Calendar.SATURDAY) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,446,endCutoff -= 7;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,448,while (start.get(Calendar.DAY_OF_WEEK) != startCutoff) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,449,"start.add(Calendar.DATE, -1);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,451,while (end.get(Calendar.DAY_OF_WEEK) != endCutoff) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,452,"end.add(Calendar.DATE, 1);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,454,final Calendar startFinal = start;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,455,final Calendar endFinal = end;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,456,Iterator it = new Iterator() {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,457,Calendar spot = null;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,459,spot = startFinal;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,460,"spot.add(Calendar.DATE, -1);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,463,public boolean hasNext() {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,464,return spot.before(endFinal);
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,467,public Object next() {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,468,if (spot.equals(endFinal)) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,469,throw new NoSuchElementException();
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,471,"spot.add(Calendar.DATE, 1);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,472,return spot.clone();
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,475,public void remove() {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,476,throw new UnsupportedOperationException();
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,479,return it;
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,483,* See the other getCalendarIterator.  Works with a Date.
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,485,"public static Iterator getCalendarIterator(Date focus, int rangeStyle) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,486,GregorianCalendar gval = new GregorianCalendar();
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,487,gval.setTime(focus);
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,488,"return getCalendarIterator(gval, rangeStyle);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,492,"* See the other getCalendarIterator.  Works with an Object, trying"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,493,* to use it as a Date or Calendar.
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,495,"public static Iterator getCalendarIterator(Object focus, int rangeStyle) {"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,496,if (focus instanceof Date) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,497,"return getCalendarIterator((Date) focus, rangeStyle);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,498,} else if (focus instanceof Calendar) {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,499,"return getCalendarIterator((Calendar) focus, rangeStyle);"
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,500,} else {
True,src/java/org/apache/commons/lang/CalendarUtils.java,src/java/org/apache/commons/lang/CalendarUtils.java,501,"throw new ClassCastException(""Could not iterate based on "" + focus);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,1,package org.apache.commons.lang;
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,4,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,6,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,7,* reserved.
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,9,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,10,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,11,* are met:
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,13,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,14,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,16,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,17,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,18,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,19,*    distribution.
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,21,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,22,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,23,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,24,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,25,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,26,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,28,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,29,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,30,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,31,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,33,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,34,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,35,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,37,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,38,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,39,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,40,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,41,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,42,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,43,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,44,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,45,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,46,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,47,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,48,* SUCH DAMAGE.
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,51,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,52,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,53,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,54,* <http://www.apache.org/>.
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,57,import java.text.DateFormat;
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,58,import java.util.*;
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,60,import junit.framework.AssertionFailedError;
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,61,import junit.framework.Test;
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,62,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,63,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,64,import junit.textui.TestRunner;
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,67,* Unit tests {@link org.apache.commons.lang.CalendarUtils}.
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,69,"* @author <a href=""mailto:sergek@lokitech.com"">Serge Knystautas</a>"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,71,public class CalendarUtilsTest extends TestCase {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,72,DateFormat parser = null;
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,73,Date date1 = null;
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,74,Date date2 = null;
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,76,public CalendarUtilsTest(String name) {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,77,super(name);
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,80,public static void main(String[] args) {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,81,TestRunner.run(suite());
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,84,public static Test suite() {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,85,TestSuite suite = new TestSuite(CalendarUtilsTest.class);
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,86,"suite.setName(""CalendarUtilsTest Tests"");"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,87,return suite;
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,90,protected void setUp() throws Exception {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,91,super.setUp();
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,93,"parser = new java.text.SimpleDateFormat(""MMM dd, yyyy H:mm:ss.SSS"");"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,95,"date1 = parser.parse(""February 12, 2002 12:34:56.789"");"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,96,"date2 = parser.parse(""November 18, 2001 1:23:11.321"");"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,99,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,100,super.tearDown();
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,107,* Tests various values with the round method
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,109,public void testRound() throws Exception {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,110,"assertEquals(""round year-1 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,111,"new Date(""2002 January 1""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,112,"CalendarUtils.round(date1, Calendar.YEAR));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,113,"assertEquals(""round year-2 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,114,"new Date(""2002 January 1""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,115,"CalendarUtils.round(date2, Calendar.YEAR));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,116,"assertEquals(""round month-1 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,117,"new Date(""2002 February 1""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,118,"CalendarUtils.round(date1, Calendar.MONTH));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,119,"assertEquals(""round month-2 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,120,"new Date(""2001 December 1""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,121,"CalendarUtils.round(date2, Calendar.MONTH));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,122,"assertEquals(""round semimonth-1 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,123,"new Date(""2002 February 16""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,124,"CalendarUtils.round(date1, CalendarUtils.SEMI_MONTH));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,125,"assertEquals(""round semimonth-2 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,126,"new Date(""2001 November 16""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,127,"CalendarUtils.round(date2, CalendarUtils.SEMI_MONTH));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,128,"assertEquals(""round date-1 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,129,"new Date(""2002 February 13""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,130,"CalendarUtils.round(date1, Calendar.DATE));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,131,"assertEquals(""round date-2 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,132,"new Date(""2001 November 18""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,133,"CalendarUtils.round(date2, Calendar.DATE));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,134,"assertEquals(""round hour-1 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,135,"parser.parse(""February 12, 2002 13:00:00.000""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,136,"CalendarUtils.round(date1, Calendar.HOUR));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,137,"assertEquals(""round hour-2 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,138,"parser.parse(""November 18, 2001 1:00:00.000""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,139,"CalendarUtils.round(date2, Calendar.HOUR));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,140,"assertEquals(""round minute-1 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,141,"parser.parse(""February 12, 2002 12:35:00.000""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,142,"CalendarUtils.round(date1, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,143,"assertEquals(""round minute-2 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,144,"parser.parse(""November 18, 2001 1:23:00.000""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,145,"CalendarUtils.round(date2, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,146,"assertEquals(""round second-1 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,147,"parser.parse(""February 12, 2002 12:34:57.000""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,148,"CalendarUtils.round(date1, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,149,"assertEquals(""round second-2 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,150,"parser.parse(""November 18, 2001 1:23:11.000""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,151,"CalendarUtils.round(date2, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,155,* Tests various values with the trunc method
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,157,public void testTrunc() throws Exception {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,158,"assertEquals(""trunc year-1 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,159,"new Date(""2002 January 1""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,160,"CalendarUtils.trunc(date1, Calendar.YEAR));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,161,"assertEquals(""trunc year-2 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,162,"new Date(""2001 January 1""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,163,"CalendarUtils.trunc(date2, Calendar.YEAR));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,164,"assertEquals(""trunc month-1 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,165,"new Date(""2002 February 1""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,166,"CalendarUtils.trunc(date1, Calendar.MONTH));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,167,"assertEquals(""trunc month-2 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,168,"new Date(""2001 November 1""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,169,"CalendarUtils.trunc(date2, Calendar.MONTH));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,170,"assertEquals(""trunc semimonth-1 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,171,"new Date(""2002 February 1""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,172,"CalendarUtils.trunc(date1, CalendarUtils.SEMI_MONTH));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,173,"assertEquals(""trunc semimonth-2 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,174,"new Date(""2001 November 16""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,175,"CalendarUtils.trunc(date2, CalendarUtils.SEMI_MONTH));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,176,"assertEquals(""trunc date-1 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,177,"new Date(""2002 February 12""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,178,"CalendarUtils.trunc(date1, Calendar.DATE));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,179,"assertEquals(""trunc date-2 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,180,"new Date(""2001 November 18""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,181,"CalendarUtils.trunc(date2, Calendar.DATE));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,182,"assertEquals(""trunc hour-1 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,183,"parser.parse(""February 12, 2002 12:00:00.000""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,184,"CalendarUtils.trunc(date1, Calendar.HOUR));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,185,"assertEquals(""trunc hour-2 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,186,"parser.parse(""November 18, 2001 1:00:00.000""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,187,"CalendarUtils.trunc(date2, Calendar.HOUR));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,188,"assertEquals(""trunc minute-1 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,189,"parser.parse(""February 12, 2002 12:34:00.000""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,190,"CalendarUtils.trunc(date1, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,191,"assertEquals(""trunc minute-2 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,192,"parser.parse(""November 18, 2001 1:23:00.000""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,193,"CalendarUtils.trunc(date2, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,194,"assertEquals(""trunc second-1 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,195,"parser.parse(""February 12, 2002 12:34:56.000""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,196,"CalendarUtils.trunc(date1, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,197,"assertEquals(""trunc second-2 failed"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,198,"parser.parse(""November 18, 2001 1:23:11.000""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,199,"CalendarUtils.trunc(date2, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,204,"* Tests the parse method, which is supposed to handle various strings"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,205,* as flexibly as CVS supports.
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,207,public void testParse() throws Exception {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,208,"//This is difficult to test since the ""now"" used in the"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,209,//  parse function cannot be controlled.  We could possibly control
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,210,//  it by trying before and after and making sure the value we expect
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,211,//  is between the two values calculated.
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,212,//For now we're just using the custom assertEquals that takes a delta
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,214,Calendar now = null;
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,216,now = Calendar.getInstance();
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,217,"now.add(Calendar.MINUTE, -1);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,218,"assertEquals(""parse 1 minute ago"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,219,"now, CalendarUtils.parse(""1 minute ago""), 50);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,220,now = Calendar.getInstance();
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,221,"now.add(Calendar.MINUTE, -8);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,222,"assertEquals(""parse 8 minutes ago"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,223,"now, CalendarUtils.parse(""8 minutes ago""), 50);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,225,now = Calendar.getInstance();
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,226,"now.add(Calendar.DATE, -1);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,227,"assertEquals(""parse yesterday"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,228,"now, CalendarUtils.parse(""yesterday""), 50);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,230,now = Calendar.getInstance();
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,231,"now.add(Calendar.DATE, 1);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,232,"assertEquals(""parse tomorrow"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,233,"now, CalendarUtils.parse(""tomorrow""), 50);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,235,now = Calendar.getInstance();
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,236,"//Sunday would be 1, Saturday would be 7, so we walk back up to 6 days."
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,237,if (now.get(Calendar.DATE) == 1) {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,238,"//If Sunday already, we go back a full week"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,239,"now.add(Calendar.DATE, -7);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,240,} else {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,241,"now.add(Calendar.DATE, 1 - now.get(Calendar.DAY_OF_WEEK));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,243,"assertEquals(""parse last Sunday"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,244,"now, CalendarUtils.parse(""last Sunday""), 50);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,246,now = Calendar.getInstance();
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,247,"now.add(Calendar.DATE, -7);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,248,"assertEquals(""parse last week"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,249,"now, CalendarUtils.parse(""last week""), 50);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,251,now = Calendar.getInstance();
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,252,"//January would be 0, December would be 11, so we walk back up to 11 months"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,253,if (now.get(Calendar.MONTH) == 0) {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,254,"//If January already, we go back a full year"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,255,"now.add(Calendar.MONTH, -12);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,256,} else {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,257,"now.add(Calendar.MONTH, 0 - now.get(Calendar.MONTH));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,259,"assertEquals(""parse last January"","
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,260,"now, CalendarUtils.parse(""last January""), 50);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,264,* Tests the calendar iterator for week ranges
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,266,public void testWeekIterator() throws Exception {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,267,Calendar now = Calendar.getInstance();
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,268,"Calendar today = CalendarUtils.trunc(now, Calendar.DATE);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,269,"Calendar sunday = CalendarUtils.trunc(now, Calendar.DATE);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,270,"sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,271,"Calendar monday = CalendarUtils.trunc(now, Calendar.DATE);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,272,if (monday.get(Calendar.DATE) == 1) {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,273,//This is sunday... roll back 6 days
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,274,"monday.add(Calendar.DATE, -6);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,275,} else {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,276,"monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,278,"Calendar centered = CalendarUtils.trunc(now, Calendar.DATE);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,279,"centered.add(Calendar.DATE, -3);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,281,"Iterator it = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_SUNDAY);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,282,"assertWeekIterator(it, sunday);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,283,"it = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_MONDAY);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,284,"assertWeekIterator(it, monday);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,285,"it = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_RELATIVE);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,286,"assertWeekIterator(it, today);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,287,"it = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_CENTER);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,288,"assertWeekIterator(it, centered);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,292,* Tests the calendar iterator for month-based ranges
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,294,public void testMonthIterator() throws Exception {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,295,"Iterator it = CalendarUtils.getCalendarIterator(date1, CalendarUtils.RANGE_MONTH_SUNDAY);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,296,"assertWeekIterator(it,"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,297,"new Date(""January 27, 2002""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,298,"new Date(""March 2, 2002""));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,300,"it = CalendarUtils.getCalendarIterator(date1, CalendarUtils.RANGE_MONTH_MONDAY);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,301,"assertWeekIterator(it,"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,302,"new Date(""January 28, 2002""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,303,"new Date(""March 3, 2002""));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,305,"it = CalendarUtils.getCalendarIterator(date2, CalendarUtils.RANGE_MONTH_SUNDAY);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,306,"assertWeekIterator(it,"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,307,"new Date(""October 28, 2001""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,308,"new Date(""December 1, 2001""));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,310,"it = CalendarUtils.getCalendarIterator(date2, CalendarUtils.RANGE_MONTH_MONDAY);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,311,"assertWeekIterator(it,"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,312,"new Date(""October 29, 2001""),"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,313,"new Date(""December 2, 2001""));"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,317,* This checks that this is a 7 element iterator of Calendar objects
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,318,"* that are dates (no time), and exactly 1 day spaced after each other."
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,320,"private static void assertWeekIterator(Iterator it, Calendar start) {"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,321,Calendar end = (Calendar) start.clone();
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,322,"end.add(Calendar.DATE, 6);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,324,"assertWeekIterator(it, start, end);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,328,* Convenience method for when working with Date objects
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,330,"private static void assertWeekIterator(Iterator it, Date start, Date end) {"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,331,Calendar calStart = Calendar.getInstance();
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,332,calStart.setTime(start);
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,333,Calendar calEnd = Calendar.getInstance();
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,334,calEnd.setTime(end);
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,336,"assertWeekIterator(it, calStart, calEnd);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,340,* This checks that this is a 7 divisble iterator of Calendar objects
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,341,"* that are dates (no time), and exactly 1 day spaced after each other"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,342,* (in addition to the proper start and stop dates)
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,344,"private static void assertWeekIterator(Iterator it, Calendar start, Calendar end) {"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,345,Calendar cal = (Calendar) it.next();
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,346,"assertEquals("""", start, cal, 0);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,347,Calendar last = null;
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,348,int count = 1;
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,349,while (it.hasNext()) {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,350,//Check this is just a date (no time component)
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,351,"assertEquals("""", cal, CalendarUtils.trunc(cal, Calendar.DATE), 0);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,353,last = cal;
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,354,cal = (Calendar) it.next();
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,355,count++;
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,357,//Check that this is one day more than the last date
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,358,"last.add(Calendar.DATE, 1);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,359,"assertEquals("""", last, cal, 0);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,361,if (count % 7 != 0) {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,362,"throw new AssertionFailedError(""There were "" + count + "" days in this iterator"");"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,364,"assertEquals("""", end, cal, 0);"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,368,* Used to check that Calendar objects are close enough
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,369,* delta is in milliseconds
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,371,"public static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {"
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,372,if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,373,throw new AssertionFailedError(
True,src/test/org/apache/commons/lang/CalendarUtilsTest.java,src/test/org/apache/commons/lang/CalendarUtilsTest.java,374,"message + "" expected "" + cal1.getTime() + "" but got "" + cal2.getTime());"
False,src/test/org/apache/commons/lang/LangTestSuite.java,src/test/org/apache/commons/lang/LangTestSuite.java,65," @version $Id: LangTestSuite.java,v 1.9 2002/12/16 21:48:41 bayard Exp $"
True,src/test/org/apache/commons/lang/LangTestSuite.java,src/test/org/apache/commons/lang/LangTestSuite.java,65,"* @version $Id: LangTestSuite.java,v 1.10 2002/12/16 21:55:20 bayard Exp $"
True,src/test/org/apache/commons/lang/LangTestSuite.java,src/test/org/apache/commons/lang/LangTestSuite.java,91,suite.addTest(CalendarUtilsTest.suite());

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,62,* <p>Invokes a named method without parameters.</p>
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,64,"* <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>"
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,66,* <p>This method supports calls to methods taking primitive parameters
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,67,"* via passing in wrapping classes. So, for example, a <code>Boolean</code> object"
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,68,* would match a <code>boolean</code> primitive.</p>
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,70,* <p>This is a convenient wrapper for
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,71,"* {@link #invokeMethod(Object object,String methodName, Object[] args, Class[] parameterTypes)}."
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,72,* </p>
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,74,* @param object invoke method on this object
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,75,* @param methodName get method with this name
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,76,* @return The value returned by the invoked method
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,78,* @throws NoSuchMethodException if there is no such accessible method
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,79,* @throws InvocationTargetException wraps an exception thrown by the method invoked
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,80,* @throws IllegalAccessException if the requested method is not accessible via reflection
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,81,* @since 3.0.2
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,83,"public static Object invokeMethod(Object object, String methodName) throws NoSuchMethodException,"
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,84,"IllegalAccessException, InvocationTargetException {"
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,85,"return invokeMethod(object, methodName, ArrayUtils.EMPTY_OBJECT_ARRAY);"
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,164,* <p>Invokes a method without parameters.</p>
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,166,* <p>This uses reflection to invoke the method obtained from a call to
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,167,* <code>getAccessibleMethod()</code>.</p>
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,169,* @param object invoke method on this object
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,170,* @param methodName get method with this name
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,171,* @return The value returned by the invoked method
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,173,* @throws NoSuchMethodException if there is no such accessible method
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,174,* @throws InvocationTargetException wraps an exception thrown by the
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,175,*  method invoked
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,176,* @throws IllegalAccessException if the requested method is not accessible
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,177,*  via reflection
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,178,* @since 3.0.2
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,180,"public static Object invokeExactMethod(Object object, String methodName) throws NoSuchMethodException,"
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,181,"IllegalAccessException, InvocationTargetException {"
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,182,"return invokeExactMethod(object, methodName, ArrayUtils.EMPTY_OBJECT_ARRAY);"
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,294,* <p>Invokes a named static method without parameters.</p>
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,296,"* <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>"
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,298,* <p>This method supports calls to methods taking primitive parameters
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,299,"* via passing in wrapping classes. So, for example, a <code>Boolean</code> class"
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,300,* would match a <code>boolean</code> primitive.</p>
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,302,* <p>This is a convenient wrapper for
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,303,"* {@link #invokeStaticMethod(Class objectClass,String methodName,Object [] args,Class[] parameterTypes)}."
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,304,* </p>
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,306,* @param cls invoke static method on this class
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,307,* @param methodName get method with this name
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,308,* @return The value returned by the invoked method
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,310,* @throws NoSuchMethodException if there is no such accessible method
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,311,* @throws InvocationTargetException wraps an exception thrown by the
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,312,*  method invoked
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,313,* @throws IllegalAccessException if the requested method is not accessible
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,314,*  via reflection
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,315,* @since 3.0.2
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,317,"public static Object invokeStaticMethod(Class<?> cls, String methodName) throws NoSuchMethodException,"
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,318,"IllegalAccessException, InvocationTargetException {"
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,319,"return invokeStaticMethod(cls, methodName, ArrayUtils.EMPTY_OBJECT_ARRAY);"
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,402,* <p>Invokes a static method without parameters.</p>
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,404,* <p>This uses reflection to invoke the method obtained from a call to
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,405,"* {@link #getAccessibleMethod(Class, String, Class[])}.</p>"
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,407,* @param cls invoke static method on this class
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,408,* @param methodName get method with this name
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,409,* @return The value returned by the invoked method
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,411,* @throws NoSuchMethodException if there is no such accessible method
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,412,* @throws InvocationTargetException wraps an exception thrown by the
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,413,*  method invoked
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,414,* @throws IllegalAccessException if the requested method is not accessible
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,415,*  via reflection
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,416,* @since 3.0.2
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,418,"public static Object invokeExactStaticMethod(Class<?> cls, String methodName) throws NoSuchMethodException,"
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,419,"IllegalAccessException, InvocationTargetException {"
True,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,420,"return invokeExactStaticMethod(cls, methodName, ArrayUtils.EMPTY_OBJECT_ARRAY);"
False,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,37,mport org.junit.BeforeClass;
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,79,public static void oneParameterStatic(String s) {
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,80,// empty
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,164,@Test
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,165,public void testInvokeMethodNoParam() throws Exception {
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,166,"assertEquals(""foo()"", MethodUtils.invokeMethod(testBean, ""foo""));"
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,169,@Test(expected = NoSuchMethodException.class)
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,170,public void testInvokeMethodNoParamFailure() throws Exception {
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,171,"assertEquals(""oneParameter()"", MethodUtils.invokeMethod(testBean, ""oneParameter""));"
False,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,200,"/assertEquals(""foo()"", MethodUtils.invokeExactMethod(testBean, ""foo""));"
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,213,"assertEquals(""foo()"", MethodUtils.invokeExactMethod(testBean, ""foo""));"
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,216,@Test(expected = NoSuchMethodException.class)
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,217,public void testInvokeExactMethodNoParamFailure() throws Exception {
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,218,"MethodUtils.invokeExactMethod(testBean, ""oneParameter"");"
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,251,@Test
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,252,public void testInvokeStaticMethodNoParam() throws Exception {
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,253,"assertEquals(""bar()"", MethodUtils.invokeStaticMethod(TestBean.class, ""bar""));"
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,256,@Test(expected = NoSuchMethodException.class)
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,257,public void testInvokeStaticMethodNoParamFailure() throws Exception {
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,258,"assertEquals(""oneParameter()"", MethodUtils.invokeStaticMethod(TestBean.class, ""oneParameter""));"
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,299,@Test
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,300,public void testInvokeExactStaticMethodNoParam() throws Exception {
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,301,"assertEquals(""bar()"", MethodUtils.invokeExactStaticMethod(TestBean.class, ""bar""));"
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,304,@Test(expected = NoSuchMethodException.class)
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,305,public void testInvokeExactStaticMethodNoParamFailure() throws Exception {
True,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,306,"assertEquals(""oneParameterStatic()"", MethodUtils.invokeExactStaticMethod(TestBean.class, ""oneParameterStatic""));"

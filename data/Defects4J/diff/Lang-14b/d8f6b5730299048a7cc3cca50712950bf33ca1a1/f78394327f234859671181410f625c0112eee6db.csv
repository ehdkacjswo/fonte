is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,65," @version $Id: JVMRandom.java,v 1.4 2003/05/12 04:41:40 bayard Exp $"
True,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,65,"* @version $Id: JVMRandom.java,v 1.5 2003/05/14 02:41:26 bayard Exp $"
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,69,/ important to not call super() as this will
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,70,/ call setSeed with the current Time
True,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,69,/** ensures that only the constructor can call reseed */
True,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,70,private boolean constructed = false;
True,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,73,this.constructed = true;
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,75,hrow new UnsupportedOperationException();
True,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,77,if (this.constructed) {
True,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,78,throw new UnsupportedOperationException();
False,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,64," @version $Id: MathTestSuite.java,v 1.2 2002/12/22 19:39:39 scolebourne Exp $"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,64,"* @version $Id: MathTestSuite.java,v 1.3 2003/05/14 02:41:26 bayard Exp $"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,94,suite.addTest(RandomUtilsTest.suite());
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,4,* Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,5,* reserved.
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,9,* are met:
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,17,*    distribution.
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,54,package org.apache.commons.lang.math;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,59,import java.util.Random;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,62,* Test cases for the {@link RandomUtils} class.
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,64,"* @author <a href=""mailto:phil@steitz.com"">Phil Steitz</a>"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,65,* @version $Revision: 1.1 $ $Date: 2003/05/14 02:41:26 $
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,68,public final class RandomUtilsTest extends TestCase {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,70,public RandomUtilsTest(String name) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,71,super(name);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,74,public void setUp() {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,77,public static Test suite() {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,78,TestSuite suite = new TestSuite(RandomUtilsTest.class);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,79,"suite.setName(""RandomUtils Tests"");"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,80,return suite;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,83,/** test distribution of nextInt() */
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,84,public void testNextInt() {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,85,tstNextInt(null);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,88,/** test distribution of nextInt(Random) */
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,89,public void testNextInt2() {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,90,Random rnd = new Random();
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,91,rnd.setSeed(System.currentTimeMillis());
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,92,tstNextInt(rnd);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,96,* Generate 1000 values for nextInt(bound) and compare
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,97,* the observed frequency counts to expected counts using
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,98,* a chi-square test.
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,99,* @param rnd Random to use if not null
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,101,private void tstNextInt(Random rnd) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,102,int bound = 0;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,103,int result = 0;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,104,// test boundary condition: n = Integer.MAX_VALUE;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,105,bound = Integer.MAX_VALUE;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,106,if (rnd == null) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,107,result = RandomUtils.nextInt(bound);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,108,} else {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,109,"result = RandomUtils.nextInt(rnd,bound);"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,111,"assertTrue(""result less than bound"",result < bound);"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,112,"assertTrue(""result non-negative"",result >= 0);"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,114,// test uniformity -- use Chi-Square test at .01 level
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,115,bound = 4;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,116,"int[] expected = new int[] {250,250,250,250};"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,117,"int[] observed = new int[] {0,0,0,0};"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,118,for (int i = 0; i < 1000; i ++) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,119,if (rnd == null) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,120,result = RandomUtils.nextInt(bound);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,121,} else {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,122,"result = RandomUtils.nextInt(rnd,bound);"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,124,assertTrue(result < bound);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,125,assertTrue(result >= 0);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,126,observed[result]++;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,128,"/* Use ChiSquare dist with df = 4-1 = 3, alpha = .01"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,129,* Change to 16.27 for alpha = .001
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,131,assertTrue(
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,132,"""chi-square test -- will fail about 1 in 100 times"","
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,133,"chiSquare(expected,observed) < 11.34);"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,136,/** test distribution of nextLong() */
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,137,public void testNextLong() {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,138,tstNextLong(null);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,141,/** test distribution of nextLong(Random) BROKEN
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,142,*  contract of nextLong(Random) is different from
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,143,* nextLong() */
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,144,public void testNextLong2() {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,145,Random rnd = new Random();
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,146,rnd.setSeed(System.currentTimeMillis());
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,147,tstNextLong(rnd);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,151,* Generate 1000 values for nextLong and check that
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,152,* p(value < long.MAXVALUE/2) ~ 0.5. Use chi-square test
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,153,* with df = 2-1 = 1
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,154,* @param rnd Random to use if not null
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,156,private void tstNextLong(Random rnd) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,157,"int[] expected = new int[] {500,500};"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,158,"int[] observed = new int[] {0,0};"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,159,long result = 0;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,160,long midPoint = Long.MAX_VALUE/2;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,161,for (int i = 0; i < 1000; i ++) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,162,if (rnd == null) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,163,result = Math.abs(RandomUtils.nextLong());
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,164,} else {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,165,result = Math.abs(RandomUtils.nextLong(rnd));
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,167,if (result < midPoint) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,168,observed[0]++;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,169,} else {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,170,observed[1]++;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,173,"/* Use ChiSquare dist with df = 2-1 = 1, alpha = .01"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,174,* Change to 10.83 for alpha = .001
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,176,assertTrue(
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,177,"""chi-square test -- will fail about 1 in 100 times"","
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,178,"chiSquare(expected,observed) < 6.64);"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,182,/** test distribution of nextBoolean() */
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,183,public void testNextBoolean() {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,184,tstNextBoolean(null);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,187,/** test distribution of nextBoolean(Random) */
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,188,public void testNextBoolean2() {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,189,Random rnd = new Random();
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,190,rnd.setSeed(System.currentTimeMillis());
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,191,tstNextBoolean(rnd);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,195,* Generate 1000 values for nextBoolean and check that
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,196,* p(value = false) ~ 0.5. Use chi-square test
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,197,* with df = 2-1 = 1
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,198,* @param rnd Random to use if not null
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,200,private void tstNextBoolean(Random rnd) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,201,"int[] expected = new int[] {500,500};"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,202,"int[] observed = new int[] {0,0};"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,203,boolean result = false;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,204,for (int i = 0; i < 1000; i ++) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,205,if (rnd == null) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,206,result = RandomUtils.nextBoolean();
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,207,} else {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,208,result = RandomUtils.nextBoolean(rnd);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,210,if (result) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,211,observed[0]++;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,212,} else {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,213,observed[1]++;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,216,"/* Use ChiSquare dist with df = 2-1 = 1, alpha = .01"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,217,* Change to 10.83 for alpha = .001
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,219,assertTrue(
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,220,"""chi-square test -- will fail about 1 in 100 times"","
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,221,"chiSquare(expected,observed) < 6.64);"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,224,/** test distribution of nextFloat() */
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,225,public void testNextFloat() {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,226,tstNextFloat(null);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,229,/** test distribution of nextFloat(Random) */
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,230,public void testNextFloat2() {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,231,Random rnd = new Random();
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,232,rnd.setSeed(System.currentTimeMillis());
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,233,tstNextFloat(rnd);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,237,* Generate 1000 values for nextFloat and check that
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,238,* p(value < 0.5) ~ 0.5. Use chi-square test
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,239,* with df = 2-1 = 1
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,240,* @param rnd Random to use if not null
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,242,private void tstNextFloat(Random rnd) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,243,"int[] expected = new int[] {500,500};"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,244,"int[] observed = new int[] {0,0};"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,245,float result = 0;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,246,for (int i = 0; i < 1000; i ++) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,247,if (rnd == null) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,248,result = RandomUtils.nextFloat();
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,249,} else {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,250,result = RandomUtils.nextFloat(rnd);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,252,if (result < 0.5) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,253,observed[0]++;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,254,} else {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,255,observed[1]++;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,258,"/* Use ChiSquare dist with df = 2-1 = 1, alpha = .01"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,259,* Change to 10.83 for alpha = .001
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,261,assertTrue(
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,262,"""chi-square test -- will fail about 1 in 100 times"","
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,263,"chiSquare(expected,observed) < 6.64);"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,266,/** test distribution of nextDouble() */
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,267,public void testNextDouble() {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,268,tstNextDouble(null);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,271,/** test distribution of nextDouble(Random) */
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,272,public void testNextDouble2() {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,273,Random rnd = new Random();
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,274,rnd.setSeed(System.currentTimeMillis());
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,275,tstNextDouble(rnd);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,279,* Generate 1000 values for nextFloat and check that
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,280,* p(value < 0.5) ~ 0.5. Use chi-square test
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,281,* with df = 2-1 = 1
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,282,* @param rnd Random to use if not null
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,284,private void tstNextDouble(Random rnd) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,285,"int[] expected = new int[] {500,500};"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,286,"int[] observed = new int[] {0,0};"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,287,double result = 0;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,288,for (int i = 0; i < 1000; i ++) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,289,if (rnd == null) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,290,result = RandomUtils.nextDouble();
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,291,} else {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,292,result = RandomUtils.nextDouble(rnd);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,294,if (result < 0.5) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,295,observed[0]++;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,296,} else {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,297,observed[1]++;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,300,"/* Use ChiSquare dist with df = 2-1 = 1, alpha = .01"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,301,* Change to 10.83 for alpha = .001
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,303,assertTrue(
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,304,"""chi-square test -- will fail about 1 in 100 times"","
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,305,"chiSquare(expected,observed) < 6.64);"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,308,/** make sure that setSeed fails */
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,309,public void testSetSeed() {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,310,try {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,311,RandomUtils.JVM_RANDOM.setSeed(1000);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,312,"fail(""expecting UnsupportedOperationException"");"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,313,} catch (UnsupportedOperationException ex) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,319,* Computes Chi-Square statistic given observed and expected counts
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,320,* @param observed array of observed frequency counts
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,321,* @param expected array of exptected frequency counts
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,323,"private double chiSquare(int[] expected, int[] observed) {"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,324,double sumSq = 0.0d;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,325,double dev = 0.0d;
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,326,for (int i = 0; i< observed.length; i++) {
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,327,dev = (double)(observed[i] - expected[i]);
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,328,sumSq += dev*dev/(double)expected[i];
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,330,return sumSq;

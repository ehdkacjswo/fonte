is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,219,"or (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,220,ype toTypeArg = entry.getValue();
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,221,ype fromTypeArg = fromTypeVarAssigns.get(entry.getKey());
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,219,for (TypeVariable<?> var : toTypeVarAssigns.keySet()) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,220,"Type toTypeArg = unrollVariableAssignments(var, toTypeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,221,"Type fromTypeArg = unrollVariableAssignments(var, fromTypeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,237,"private static Type unrollVariableAssignments(TypeVariable<?> var, Map<TypeVariable<?>, Type> typeVarAssigns) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,238,Type result;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,239,do {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,240,result = typeVarAssigns.get(var);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,241,if (result instanceof TypeVariable<?> && !result.equals(var)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,242,var = (TypeVariable<?>) result;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,243,continue;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,245,break;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,246,} while (true);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,247,return result;
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,661,"/ no arguments for the parameters, or target class has been reached"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,662,f (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,674,// has target class been reached?
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,675,if (toClass.equals(cls)) {

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,17,ackage org.apache.commons.lang.math;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,22, <p><code>DoubleRange</code> represents an inclusive range of <code>double</code>s.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,24, @author Apache Software Foundation
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,25, @since 2.0
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,26, @version $Id$
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,28,ublic final class DoubleRange extends Range implements Serializable {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,31, Required for serialization support.
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,33, @see java.io.Serializable
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,35,rivate static final long serialVersionUID = 71849363892740L;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,38, The minimum number in this range (inclusive).
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,40,rivate final double min;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,42, The maximum number in this range (inclusive).
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,44,rivate final double max;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,47, Cached output minObject (class is immutable).
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,49,rivate transient Double minObject = null;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,51, Cached output maxObject (class is immutable).
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,53,rivate transient Double maxObject = null;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,55, Cached output hashCode (class is immutable).
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,57,rivate transient int hashCode = 0;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,59, Cached output toString (class is immutable).
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,61,rivate transient String toString = null;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,64, <p>Constructs a new <code>DoubleRange</code> using the specified
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,65, number as both the minimum and maximum in this range.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,67, @param number  the number to use for this range
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,68, @throws IllegalArgumentException if the number is <code>NaN</code>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,70,ublic DoubleRange(double number) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,71,uper();
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,72,f (Double.isNaN(number)) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,73,"hrow new IllegalArgumentException(""The number must not be NaN"");"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,75,his.min = number;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,76,his.max = number;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,80, <p>Constructs a new <code>DoubleRange</code> using the specified
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,81, number as both the minimum and maximum in this range.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,83," @param number  the number to use for this range, must not"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,84,  be <code>null</code>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,85, @throws IllegalArgumentException if the number is <code>null</code>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,86, @throws IllegalArgumentException if the number is <code>NaN</code>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,88,ublic DoubleRange(Number number) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,89,uper();
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,90,f (number == null) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,91,"hrow new IllegalArgumentException(""The number must not be null"");"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,93,his.min = number.doubleValue();
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,94,his.max = number.doubleValue();
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,95,f (Double.isNaN(min) || Double.isNaN(max)) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,96,"hrow new IllegalArgumentException(""The number must not be NaN"");"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,98,f (number instanceof Double) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,99,his.minObject = (Double) number;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,100,his.maxObject = (Double) number;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,105, <p>Constructs a new <code>DoubleRange</code> with the specified
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,106, minimum and maximum numbers (both inclusive).</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,108," <p>The arguments may be passed in the order (min,max) or (max,min). The"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,109, getMinimum and getMaximum methods will return the correct values.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,111," @param number1  first number that defines the edge of the range, inclusive"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,112," @param number2  second number that defines the edge of the range, inclusive"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,113, @throws IllegalArgumentException if either number is <code>NaN</code>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,115,"ublic DoubleRange(double number1, double number2) {"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,116,uper();
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,117,f (Double.isNaN(number1) || Double.isNaN(number2)) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,118,"hrow new IllegalArgumentException(""The numbers must not be NaN"");"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,120,f (number2 < number1) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,121,his.min = number2;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,122,his.max = number1;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,123, else {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,124,his.min = number1;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,125,his.max = number2;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,130, <p>Constructs a new <code>DoubleRange</code> with the specified
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,131, minimum and maximum numbers (both inclusive).</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,133," <p>The arguments may be passed in the order (min,max) or (max,min). The"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,134, getMinimum and getMaximum methods will return the correct values.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,136," @param number1  first number that defines the edge of the range, inclusive"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,137," @param number2  second number that defines the edge of the range, inclusive"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,138, @throws IllegalArgumentException if either number is <code>null</code>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,139, @throws IllegalArgumentException if either number is <code>NaN</code>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,141,"ublic DoubleRange(Number number1, Number number2) {"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,142,uper();
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,143,f (number1 == null || number2 == null) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,144,"hrow new IllegalArgumentException(""The numbers must not be null"");"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,146,ouble number1val = number1.doubleValue();
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,147,ouble number2val = number2.doubleValue();
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,148,f (Double.isNaN(number1val) || Double.isNaN(number2val)) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,149,"hrow new IllegalArgumentException(""The numbers must not be NaN"");"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,151,f (number2val < number1val) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,152,his.min = number2val;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,153,his.max = number1val;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,154,f (number2 instanceof Double) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,155,his.minObject = (Double) number2;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,157,f (number1 instanceof Double) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,158,his.maxObject = (Double) number1;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,160, else {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,161,his.min = number1val;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,162,his.max = number2val;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,163,f (number1 instanceof Double) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,164,his.minObject = (Double) number1;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,166,f (number2 instanceof Double) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,167,his.maxObject = (Double) number2;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,172,/ Accessors
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,176, <p>Returns the minimum number in this range.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,178, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,180,Override
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,181,ublic Number getMinimumNumber() {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,182,f (minObject == null) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,183,inObject = new Double(min);
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,185,eturn minObject;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,189, <p>Gets the minimum number in this range as a <code>long</code>.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,191, <p>This conversion can lose information for large values or decimals.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,193, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,195,Override
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,196,ublic long getMinimumLong() {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,197,eturn (long) min;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,201, <p>Gets the minimum number in this range as a <code>int</code>.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,203, <p>This conversion can lose information for large values or decimals.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,205, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,207,Override
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,208,ublic int getMinimumInteger() {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,209,eturn (int) min;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,213, <p>Gets the minimum number in this range as a <code>double</code>.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,215, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,217,Override
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,218,ublic double getMinimumDouble() {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,219,eturn min;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,223, <p>Gets the minimum number in this range as a <code>float</code>.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,225, <p>This conversion can lose information for large values.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,227, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,229,Override
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,230,ublic float getMinimumFloat() {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,231,eturn (float) min;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,235, <p>Returns the maximum number in this range.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,237, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,239,Override
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,240,ublic Number getMaximumNumber() {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,241,f (maxObject == null) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,242,axObject = new Double(max);
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,244,eturn maxObject;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,248, <p>Gets the maximum number in this range as a <code>long</code>.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,250, <p>This conversion can lose information for large values or decimals.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,252, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,254,Override
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,255,ublic long getMaximumLong() {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,256,eturn (long) max;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,260, <p>Gets the maximum number in this range as a <code>int</code>.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,262, <p>This conversion can lose information for large values or decimals.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,264, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,266,Override
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,267,ublic int getMaximumInteger() {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,268,eturn (int) max;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,272, <p>Gets the maximum number in this range as a <code>double</code>.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,274, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,276,Override
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,277,ublic double getMaximumDouble() {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,278,eturn max;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,282, <p>Gets the maximum number in this range as a <code>float</code>.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,284, <p>This conversion can lose information for large values.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,286, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,288,Override
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,289,ublic float getMaximumFloat() {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,290,eturn (float) max;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,293,/ Tests
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,297, <p>Tests whether the specified <code>number</code> occurs within
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,298, this range using <code>double</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,300, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,302," @param number  the number to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,303, @return <code>true</code> if the specified number occurs within this range
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,305,Override
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,306,ublic boolean containsNumber(Number number) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,307,f (number == null) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,308,eturn false;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,310,eturn containsDouble(number.doubleValue());
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,314, <p>Tests whether the specified <code>double</code> occurs within
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,315, this range using <code>double</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,317, <p>This implementation overrides the superclass for performance as it is
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,318, the most common case.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,320, @param value  the double to test
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,321, @return <code>true</code> if the specified number occurs within this
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,322,  range by <code>double</code> comparison
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,324,Override
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,325,ublic boolean containsDouble(double value) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,326,eturn value >= min && value <= max;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,329,/ Range tests
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,333, <p>Tests whether the specified range occurs entirely within this range
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,334, using <code>double</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,336, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,338," @param range  the range to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,339, @return <code>true</code> if the specified range occurs entirely within this range
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,340, @throws IllegalArgumentException if the range is not of this type
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,342,Override
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,343,ublic boolean containsRange(Range range) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,344,f (range == null) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,345,eturn false;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,347,eturn containsDouble(range.getMinimumDouble())
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,348,& containsDouble(range.getMaximumDouble());
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,352, <p>Tests whether the specified range overlaps with this range
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,353, using <code>double</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,355, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,357," @param range  the range to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,358, @return <code>true</code> if the specified range overlaps with this range
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,360,Override
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,361,ublic boolean overlapsRange(Range range) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,362,f (range == null) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,363,eturn false;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,365,eturn range.containsDouble(min)
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,366,| range.containsDouble(max)
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,367,| containsDouble(range.getMinimumDouble());
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,370,/ Basics
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,374, <p>Compares this range to another object to test if they are equal.</p>.
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,376," <p>To be equal, the class, minimum and maximum must be equal.</p>"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,378, @param obj the reference object with which to compare
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,379, @return <code>true</code> if this object is equal
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,381,Override
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,382,ublic boolean equals(Object obj) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,383,f (obj == this) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,384,eturn true;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,386,f (obj instanceof DoubleRange == false) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,387,eturn false;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,389,oubleRange range = (DoubleRange) obj;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,390,eturn (Double.doubleToLongBits(min) == Double.doubleToLongBits(range.min) &&
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,391,ouble.doubleToLongBits(max) == Double.doubleToLongBits(range.max));
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,395, <p>Gets a hashCode for the range.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,397, @return a hash code value for this object
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,399,Override
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,400,ublic int hashCode() {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,401,nt temp = hashCode;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,402,f (temp == 0) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,403,emp = 17;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,404,emp = 37 * temp + getClass().hashCode();
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,405,ong lng = Double.doubleToLongBits(min);
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,406,emp = 37 * temp + ((int) (lng ^ (lng >> 32)));
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,407,ng = Double.doubleToLongBits(max);
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,408,emp = 37 * temp + ((int) (lng ^ (lng >> 32)));
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,409,ashCode = temp;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,411,eturn hashCode;
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,415, <p>Gets the range as a <code>String</code>.</p>
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,417," <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,419, @return the <code>String</code> representation of this range
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,421,Override
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,422,ublic String toString() {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,423,f (toString == null) {
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,424,tringBuilder buf = new StringBuilder(32);
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,425,"uf.append(""Range["");"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,426,uf.append(min);
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,427,"uf.append(',');"
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,428,uf.append(max);
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,429,uf.append(']');
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,430,oString = buf.toString();
False,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,432,eturn toString;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,17,ackage org.apache.commons.lang.math;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,22, <p><code>FloatRange</code> represents an inclusive range of <code>float</code>s.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,24, @author Apache Software Foundation
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,25, @since 2.0
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,26, @version $Id$
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,28,ublic final class FloatRange extends Range implements Serializable {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,31, Required for serialization support.
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,33, @see java.io.Serializable
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,35,rivate static final long serialVersionUID = 71849363892750L;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,38, The minimum number in this range (inclusive).
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,40,rivate final float min;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,42, The maximum number in this range (inclusive).
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,44,rivate final float max;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,47, Cached output minObject (class is immutable).
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,49,rivate transient Float minObject = null;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,51, Cached output maxObject (class is immutable).
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,53,rivate transient Float maxObject = null;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,55, Cached output hashCode (class is immutable).
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,57,rivate transient int hashCode = 0;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,59, Cached output toString (class is immutable).
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,61,rivate transient String toString = null;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,64, <p>Constructs a new <code>FloatRange</code> using the specified
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,65, number as both the minimum and maximum in this range.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,67, @param number  the number to use for this range
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,68, @throws IllegalArgumentException if the number is <code>NaN</code>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,70,ublic FloatRange(float number) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,71,uper();
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,72,f (Float.isNaN(number)) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,73,"hrow new IllegalArgumentException(""The number must not be NaN"");"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,75,his.min = number;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,76,his.max = number;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,80, <p>Constructs a new <code>FloatRange</code> using the specified
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,81, number as both the minimum and maximum in this range.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,83," @param number  the number to use for this range, must not"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,84,  be <code>null</code>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,85, @throws IllegalArgumentException if the number is <code>null</code>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,86, @throws IllegalArgumentException if the number is <code>NaN</code>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,88,ublic FloatRange(Number number) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,89,uper();
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,90,f (number == null) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,91,"hrow new IllegalArgumentException(""The number must not be null"");"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,93,his.min = number.floatValue();
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,94,his.max = number.floatValue();
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,95,f (Float.isNaN(min) || Float.isNaN(max)) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,96,"hrow new IllegalArgumentException(""The number must not be NaN"");"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,98,f (number instanceof Float) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,99,his.minObject = (Float) number;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,100,his.maxObject = (Float) number;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,105, <p>Constructs a new <code>FloatRange</code> with the specified
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,106, minimum and maximum numbers (both inclusive).</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,108," <p>The arguments may be passed in the order (min,max) or (max,min). The"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,109, getMinimum and getMaximum methods will return the correct values.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,111," @param number1  first number that defines the edge of the range, inclusive"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,112," @param number2  second number that defines the edge of the range, inclusive"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,113, @throws IllegalArgumentException if either number is <code>NaN</code>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,115,"ublic FloatRange(float number1, float number2) {"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,116,uper();
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,117,f (Float.isNaN(number1) || Float.isNaN(number2)) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,118,"hrow new IllegalArgumentException(""The numbers must not be NaN"");"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,120,f (number2 < number1) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,121,his.min = number2;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,122,his.max = number1;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,123, else {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,124,his.min = number1;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,125,his.max = number2;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,130, <p>Constructs a new <code>FloatRange</code> with the specified
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,131, minimum and maximum numbers (both inclusive).</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,133," <p>The arguments may be passed in the order (min,max) or (max,min). The"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,134, getMinimum and getMaximum methods will return the correct values.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,136," @param number1  first number that defines the edge of the range, inclusive"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,137," @param number2  second number that defines the edge of the range, inclusive"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,138, @throws IllegalArgumentException if either number is <code>null</code>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,139, @throws IllegalArgumentException if either number is <code>NaN</code>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,141,"ublic FloatRange(Number number1, Number number2) {"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,142,uper();
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,143,f (number1 == null || number2 == null) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,144,"hrow new IllegalArgumentException(""The numbers must not be null"");"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,146,loat number1val = number1.floatValue();
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,147,loat number2val = number2.floatValue();
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,148,f (Float.isNaN(number1val) || Float.isNaN(number2val)) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,149,"hrow new IllegalArgumentException(""The numbers must not be NaN"");"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,151,f (number2val < number1val) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,152,his.min = number2val;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,153,his.max = number1val;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,154,f (number2 instanceof Float) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,155,his.minObject = (Float) number2;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,157,f (number1 instanceof Float) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,158,his.maxObject = (Float) number1;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,160, else {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,161,his.min = number1val;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,162,his.max = number2val;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,163,f (number1 instanceof Float) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,164,his.minObject = (Float) number1;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,166,f (number2 instanceof Float) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,167,his.maxObject = (Float) number2;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,172,/ Accessors
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,176, <p>Returns the minimum number in this range.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,178, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,180,Override
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,181,ublic Number getMinimumNumber() {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,182,f (minObject == null) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,183,inObject = new Float(min);
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,185,eturn minObject;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,189, <p>Gets the minimum number in this range as a <code>long</code>.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,191, <p>This conversion can lose information for large values or decimals.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,193, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,195,Override
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,196,ublic long getMinimumLong() {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,197,eturn (long) min;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,201, <p>Gets the minimum number in this range as a <code>int</code>.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,203, <p>This conversion can lose information for large values or decimals.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,205, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,207,Override
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,208,ublic int getMinimumInteger() {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,209,eturn (int) min;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,213, <p>Gets the minimum number in this range as a <code>double</code>.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,215, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,217,Override
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,218,ublic double getMinimumDouble() {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,219,eturn min;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,223, <p>Gets the minimum number in this range as a <code>float</code>.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,225, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,227,Override
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,228,ublic float getMinimumFloat() {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,229,eturn min;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,233, <p>Returns the maximum number in this range.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,235, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,237,Override
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,238,ublic Number getMaximumNumber() {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,239,f (maxObject == null) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,240,axObject = new Float(max);
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,242,eturn maxObject;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,246, <p>Gets the maximum number in this range as a <code>long</code>.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,248, <p>This conversion can lose information for large values or decimals.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,250, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,252,Override
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,253,ublic long getMaximumLong() {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,254,eturn (long) max;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,258, <p>Gets the maximum number in this range as a <code>int</code>.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,260, <p>This conversion can lose information for large values or decimals.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,262, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,264,Override
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,265,ublic int getMaximumInteger() {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,266,eturn (int) max;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,270, <p>Gets the maximum number in this range as a <code>double</code>.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,272, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,274,Override
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,275,ublic double getMaximumDouble() {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,276,eturn max;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,280, <p>Gets the maximum number in this range as a <code>float</code>.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,282, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,284,Override
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,285,ublic float getMaximumFloat() {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,286,eturn max;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,289,/ Tests
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,293, <p>Tests whether the specified <code>number</code> occurs within
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,294, this range using <code>float</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,296, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,298," @param number  the number to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,299, @return <code>true</code> if the specified number occurs within this range
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,301,Override
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,302,ublic boolean containsNumber(Number number) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,303,f (number == null) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,304,eturn false;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,306,eturn containsFloat(number.floatValue());
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,310, <p>Tests whether the specified <code>float</code> occurs within
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,311, this range using <code>float</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,313, <p>This implementation overrides the superclass for performance as it is
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,314, the most common case.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,316, @param value  the float to test
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,317, @return <code>true</code> if the specified number occurs within this
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,318,  range by <code>float</code> comparison
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,320,Override
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,321,ublic boolean containsFloat(float value) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,322,eturn value >= min && value <= max;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,325,/ Range tests
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,329, <p>Tests whether the specified range occurs entirely within this range
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,330, using <code>float</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,332, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,334," @param range  the range to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,335, @return <code>true</code> if the specified range occurs entirely within this range
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,336, @throws IllegalArgumentException if the range is not of this type
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,338,Override
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,339,ublic boolean containsRange(Range range) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,340,f (range == null) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,341,eturn false;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,343,eturn containsFloat(range.getMinimumFloat()) &&
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,344,ontainsFloat(range.getMaximumFloat());
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,348, <p>Tests whether the specified range overlaps with this range
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,349, using <code>float</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,351, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,353," @param range  the range to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,354, @return <code>true</code> if the specified range overlaps with this range
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,356,Override
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,357,ublic boolean overlapsRange(Range range) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,358,f (range == null) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,359,eturn false;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,361,eturn range.containsFloat(min) ||
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,362,ange.containsFloat(max) ||
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,363,ontainsFloat(range.getMinimumFloat());
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,366,/ Basics
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,370, <p>Compares this range to another object to test if they are equal.</p>.
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,372," <p>To be equal, the class, minimum and maximum must be equal.</p>"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,374, @param obj the reference object with which to compare
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,375, @return <code>true</code> if this object is equal
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,377,Override
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,378,ublic boolean equals(Object obj) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,379,f (obj == this) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,380,eturn true;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,382,f (obj instanceof FloatRange == false) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,383,eturn false;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,385,loatRange range = (FloatRange) obj;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,386,eturn (Float.floatToIntBits(min) == Float.floatToIntBits(range.min) &&
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,387,loat.floatToIntBits(max) == Float.floatToIntBits(range.max));
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,391, <p>Gets a hashCode for the range.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,393, @return a hash code value for this object
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,395,Override
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,396,ublic int hashCode() {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,397,nt temp = hashCode;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,398,f (temp == 0) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,399,emp = 17;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,400,emp = 37 * temp + getClass().hashCode();
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,401,emp = 37 * temp + Float.floatToIntBits(min);
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,402,emp = 37 * temp + Float.floatToIntBits(max);
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,403,ashCode = temp;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,405,eturn hashCode;
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,409, <p>Gets the range as a <code>String</code>.</p>
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,411," <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,413, @return the <code>String</code> representation of this range
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,415,Override
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,416,ublic String toString() {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,417,f (toString == null) {
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,418,tringBuilder buf = new StringBuilder(32);
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,419,"uf.append(""Range["");"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,420,uf.append(min);
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,421,"uf.append(',');"
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,422,uf.append(max);
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,423,uf.append(']');
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,424,oString = buf.toString();
False,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,426,eturn toString;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,17,ackage org.apache.commons.lang.math;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,22, <p><code>IntRange</code> represents an inclusive range of <code>int</code>s.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,24, @author Apache Software Foundation
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,25, @since 2.0
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,26, @version $Id$
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,28,ublic final class IntRange extends Range implements Serializable {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,31, Required for serialization support.
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,33, @see java.io.Serializable
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,35,rivate static final long serialVersionUID = 71849363892730L;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,38, The minimum number in this range (inclusive).
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,40,rivate final int min;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,42, The maximum number in this range (inclusive).
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,44,rivate final int max;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,47, Cached output minObject (class is immutable).
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,49,rivate transient Integer minObject = null;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,51, Cached output maxObject (class is immutable).
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,53,rivate transient Integer maxObject = null;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,55, Cached output hashCode (class is immutable).
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,57,rivate transient int hashCode = 0;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,59, Cached output toString (class is immutable).
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,61,rivate transient String toString = null;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,64, <p>Constructs a new <code>IntRange</code> using the specified
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,65, number as both the minimum and maximum in this range.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,67, @param number  the number to use for this range
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,69,ublic IntRange(int number) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,70,uper();
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,71,his.min = number;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,72,his.max = number;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,76, <p>Constructs a new <code>IntRange</code> using the specified
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,77, number as both the minimum and maximum in this range.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,79," @param number  the number to use for this range, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,80, @throws IllegalArgumentException if the number is <code>null</code>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,82,ublic IntRange(Number number) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,83,uper();
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,84,f (number == null) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,85,"hrow new IllegalArgumentException(""The number must not be null"");"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,87,his.min = number.intValue();
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,88,his.max = number.intValue();
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,89,f (number instanceof Integer) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,90,his.minObject = (Integer) number;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,91,his.maxObject = (Integer) number;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,96, <p>Constructs a new <code>IntRange</code> with the specified
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,97, minimum and maximum numbers (both inclusive).</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,99," <p>The arguments may be passed in the order (min,max) or (max,min). The"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,100, getMinimum and getMaximum methods will return the correct values.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,102," @param number1  first number that defines the edge of the range, inclusive"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,103," @param number2  second number that defines the edge of the range, inclusive"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,105,"ublic IntRange(int number1, int number2) {"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,106,uper();
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,107,f (number2 < number1) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,108,his.min = number2;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,109,his.max = number1;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,110, else {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,111,his.min = number1;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,112,his.max = number2;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,117, <p>Constructs a new <code>IntRange</code> with the specified
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,118, minimum and maximum numbers (both inclusive).</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,120," <p>The arguments may be passed in the order (min,max) or (max,min). The"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,121, getMinimum and getMaximum methods will return the correct values.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,123," @param number1  first number that defines the edge of the range, inclusive"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,124," @param number2  second number that defines the edge of the range, inclusive"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,125, @throws IllegalArgumentException if either number is <code>null</code>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,127,"ublic IntRange(Number number1, Number number2) {"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,128,uper();
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,129,f (number1 == null || number2 == null) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,130,"hrow new IllegalArgumentException(""The numbers must not be null"");"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,132,nt number1val = number1.intValue();
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,133,nt number2val = number2.intValue();
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,134,f (number2val < number1val) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,135,his.min = number2val;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,136,his.max = number1val;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,137,f (number2 instanceof Integer) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,138,his.minObject = (Integer) number2;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,140,f (number1 instanceof Integer) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,141,his.maxObject = (Integer) number1;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,143, else {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,144,his.min = number1val;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,145,his.max = number2val;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,146,f (number1 instanceof Integer) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,147,his.minObject = (Integer) number1;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,149,f (number2 instanceof Integer) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,150,his.maxObject = (Integer) number2;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,155,/ Accessors
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,159, <p>Returns the minimum number in this range.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,161, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,163,Override
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,164,ublic Number getMinimumNumber() {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,165,f (minObject == null) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,166,inObject = new Integer(min);
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,168,eturn minObject;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,172, <p>Gets the minimum number in this range as a <code>long</code>.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,174, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,176,Override
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,177,ublic long getMinimumLong() {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,178,eturn min;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,182, <p>Gets the minimum number in this range as a <code>int</code>.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,184, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,186,Override
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,187,ublic int getMinimumInteger() {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,188,eturn min;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,192, <p>Gets the minimum number in this range as a <code>double</code>.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,194, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,196,Override
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,197,ublic double getMinimumDouble() {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,198,eturn min;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,202, <p>Gets the minimum number in this range as a <code>float</code>.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,204, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,206,Override
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,207,ublic float getMinimumFloat() {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,208,eturn min;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,212, <p>Returns the maximum number in this range.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,214, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,216,Override
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,217,ublic Number getMaximumNumber() {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,218,f (maxObject == null) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,219,axObject = new Integer(max);
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,221,eturn maxObject;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,225, <p>Gets the maximum number in this range as a <code>long</code>.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,227, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,229,Override
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,230,ublic long getMaximumLong() {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,231,eturn max;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,235, <p>Gets the maximum number in this range as a <code>int</code>.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,237, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,239,Override
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,240,ublic int getMaximumInteger() {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,241,eturn max;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,245, <p>Gets the maximum number in this range as a <code>double</code>.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,247, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,249,Override
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,250,ublic double getMaximumDouble() {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,251,eturn max;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,255, <p>Gets the maximum number in this range as a <code>float</code>.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,257, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,259,Override
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,260,ublic float getMaximumFloat() {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,261,eturn max;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,264,/ Tests
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,268, <p>Tests whether the specified <code>number</code> occurs within
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,269, this range using <code>int</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,271, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,273," @param number  the number to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,274, @return <code>true</code> if the specified number occurs within this range
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,276,Override
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,277,ublic boolean containsNumber(Number number) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,278,f (number == null) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,279,eturn false;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,281,eturn containsInteger(number.intValue());
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,285, <p>Tests whether the specified <code>int</code> occurs within
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,286, this range using <code>int</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,288, <p>This implementation overrides the superclass for performance as it is
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,289, the most common case.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,291, @param value  the int to test
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,292, @return <code>true</code> if the specified number occurs within this
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,293,  range by <code>int</code> comparison
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,295,Override
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,296,ublic boolean containsInteger(int value) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,297,eturn value >= min && value <= max;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,300,/ Range tests
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,304, <p>Tests whether the specified range occurs entirely within this range
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,305, using <code>int</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,307, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,309," @param range  the range to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,310, @return <code>true</code> if the specified range occurs entirely within this range
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,311, @throws IllegalArgumentException if the range is not of this type
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,313,Override
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,314,ublic boolean containsRange(Range range) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,315,f (range == null) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,316,eturn false;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,318,eturn containsInteger(range.getMinimumInteger()) &&
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,319,ontainsInteger(range.getMaximumInteger());
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,323, <p>Tests whether the specified range overlaps with this range
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,324, using <code>int</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,326, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,328," @param range  the range to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,329, @return <code>true</code> if the specified range overlaps with this range
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,331,Override
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,332,ublic boolean overlapsRange(Range range) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,333,f (range == null) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,334,eturn false;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,336,eturn range.containsInteger(min) ||
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,337,ange.containsInteger(max) ||
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,338,ontainsInteger(range.getMinimumInteger());
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,341,/ Basics
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,345, <p>Compares this range to another object to test if they are equal.</p>.
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,347," <p>To be equal, the class, minimum and maximum must be equal.</p>"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,349, @param obj the reference object with which to compare
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,350, @return <code>true</code> if this object is equal
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,352,Override
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,353,ublic boolean equals(Object obj) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,354,f (obj == this) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,355,eturn true;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,357,f (obj instanceof IntRange == false) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,358,eturn false;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,360,ntRange range = (IntRange) obj;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,361,eturn min == range.min && max == range.max;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,365, <p>Gets a hashCode for the range.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,367, @return a hash code value for this object
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,369,Override
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,370,ublic int hashCode() {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,371,nt temp = hashCode;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,372,f (temp == 0) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,373,emp = 17;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,374,emp = 37 * temp + getClass().hashCode();
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,375,emp = 37 * temp + min;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,376,emp = 37 * temp + max;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,377,ashCode = temp;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,379,eturn hashCode;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,383, <p>Gets the range as a <code>String</code>.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,385," <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,387, @return the <code>String</code> representation of this range
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,389,Override
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,390,ublic String toString() {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,391,f (toString == null) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,392,tringBuilder buf = new StringBuilder(32);
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,393,"uf.append(""Range["");"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,394,uf.append(min);
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,395,"uf.append(',');"
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,396,uf.append(max);
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,397,uf.append(']');
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,398,oString = buf.toString();
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,400,eturn toString;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,404, <p>Returns an array containing all the integer values in the range.</p>
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,406, @return the <code>int[]</code> representation of this range
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,407, @since 2.4
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,409,ublic int[] toArray() {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,410,nt[] array = new int[max - min + 1];
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,411,or (int i = 0; i < array.length; i++) {
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,412,rray[i] = min + i;
False,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,415,eturn array;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,17,ackage org.apache.commons.lang.math;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,22, <p><code>LongRange</code> represents an inclusive range of <code>long</code>s.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,24, @author Apache Software Foundation
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,25, @since 2.0
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,26, @version $Id$
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,28,ublic final class LongRange extends Range implements Serializable {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,31, Required for serialization support.
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,33, @see java.io.Serializable
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,35,rivate static final long serialVersionUID = 71849363892720L;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,38, The minimum number in this range (inclusive).
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,40,rivate final long min;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,42, The maximum number in this range (inclusive).
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,44,rivate final long max;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,47, Cached output minObject (class is immutable).
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,49,rivate transient Long minObject = null;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,51, Cached output maxObject (class is immutable).
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,53,rivate transient Long maxObject = null;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,55, Cached output hashCode (class is immutable).
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,57,rivate transient int hashCode = 0;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,59, Cached output toString (class is immutable).
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,61,rivate transient String toString = null;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,64, <p>Constructs a new <code>LongRange</code> using the specified
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,65, number as both the minimum and maximum in this range.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,67, @param number  the number to use for this range
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,69,ublic LongRange(long number) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,70,uper();
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,71,his.min = number;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,72,his.max = number;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,76, <p>Constructs a new <code>LongRange</code> using the specified
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,77, number as both the minimum and maximum in this range.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,79," @param number  the number to use for this range, must not"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,80,  be <code>null</code>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,81, @throws IllegalArgumentException if the number is <code>null</code>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,83,ublic LongRange(Number number) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,84,uper();
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,85,f (number == null) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,86,"hrow new IllegalArgumentException(""The number must not be null"");"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,88,his.min = number.longValue();
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,89,his.max = number.longValue();
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,90,f (number instanceof Long) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,91,his.minObject = (Long) number;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,92,his.maxObject = (Long) number;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,97, <p>Constructs a new <code>LongRange</code> with the specified
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,98, minimum and maximum numbers (both inclusive).</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,100," <p>The arguments may be passed in the order (min,max) or (max,min). The"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,101, getMinimum and getMaximum methods will return the correct values.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,103," @param number1  first number that defines the edge of the range, inclusive"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,104," @param number2  second number that defines the edge of the range, inclusive"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,106,"ublic LongRange(long number1, long number2) {"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,107,uper();
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,108,f (number2 < number1) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,109,his.min = number2;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,110,his.max = number1;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,111, else {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,112,his.min = number1;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,113,his.max = number2;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,118, <p>Constructs a new <code>LongRange</code> with the specified
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,119, minimum and maximum numbers (both inclusive).</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,121," <p>The arguments may be passed in the order (min,max) or (max,min). The"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,122, getMinimum and getMaximum methods will return the correct values.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,124," @param number1  first number that defines the edge of the range, inclusive"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,125," @param number2  second number that defines the edge of the range, inclusive"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,126, @throws IllegalArgumentException if either number is <code>null</code>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,128,"ublic LongRange(Number number1, Number number2) {"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,129,uper();
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,130,f (number1 == null || number2 == null) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,131,"hrow new IllegalArgumentException(""The numbers must not be null"");"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,133,ong number1val = number1.longValue();
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,134,ong number2val = number2.longValue();
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,135,f (number2val < number1val) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,136,his.min = number2val;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,137,his.max = number1val;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,138,f (number2 instanceof Long) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,139,his.minObject = (Long) number2;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,141,f (number1 instanceof Long) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,142,his.maxObject = (Long) number1;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,144, else {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,145,his.min = number1val;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,146,his.max = number2val;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,147,f (number1 instanceof Long) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,148,his.minObject = (Long) number1;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,150,f (number2 instanceof Long) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,151,his.maxObject = (Long) number2;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,156,/ Accessors
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,160, <p>Returns the minimum number in this range.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,162, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,164,Override
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,165,ublic Number getMinimumNumber() {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,166,f (minObject == null) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,167,inObject = new Long(min);
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,169,eturn minObject;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,173, <p>Gets the minimum number in this range as a <code>long</code>.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,175, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,177,Override
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,178,ublic long getMinimumLong() {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,179,eturn min;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,183, <p>Gets the minimum number in this range as a <code>int</code>.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,185, <p>This conversion can lose information for large values.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,187, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,189,Override
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,190,ublic int getMinimumInteger() {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,191,eturn (int) min;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,195, <p>Gets the minimum number in this range as a <code>double</code>.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,197, <p>This conversion can lose information for large values.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,199, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,201,Override
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,202,ublic double getMinimumDouble() {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,203,eturn min;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,207, <p>Gets the minimum number in this range as a <code>float</code>.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,209, <p>This conversion can lose information for large values.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,211, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,213,Override
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,214,ublic float getMinimumFloat() {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,215,eturn min;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,219, <p>Returns the maximum number in this range.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,221, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,223,Override
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,224,ublic Number getMaximumNumber() {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,225,f (maxObject == null) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,226,axObject = new Long(max);
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,228,eturn maxObject;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,232, <p>Gets the maximum number in this range as a <code>long</code>.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,234, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,236,Override
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,237,ublic long getMaximumLong() {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,238,eturn max;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,242, <p>Gets the maximum number in this range cast to an <code>int</code>.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,244, <p>This conversion can lose information for large values.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,246, @return the maximum number in this range cast to an <code>int</code>.
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,248,Override
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,249,ublic int getMaximumInteger() {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,250,eturn (int) max;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,254, <p>Gets the maximum number in this range as a <code>double</code>.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,256, <p>This conversion can lose information for large values.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,258, @return The maximum number in this range as a <code>double</code>.
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,260,Override
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,261,ublic double getMaximumDouble() {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,262,eturn max;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,266, <p>Gets the maximum number in this range as a <code>float</code>.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,268, <p>This conversion can lose information for large values.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,270, @return The maximum number in this range as a <code>float</code>.
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,272,Override
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,273,ublic float getMaximumFloat() {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,274,eturn max;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,277,/ Tests
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,281, <p>Tests whether the specified <code>number</code> occurs within
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,282, this range using <code>long</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,284, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,286," @param number  the number to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,287, @return <code>true</code> if the specified number occurs within this range
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,289,Override
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,290,ublic boolean containsNumber(Number number) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,291,f (number == null) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,292,eturn false;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,294,eturn containsLong(number.longValue());
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,298, <p>Tests whether the specified <code>long</code> occurs within
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,299, this range using <code>long</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,301, <p>This implementation overrides the superclass for performance as it is
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,302, the most common case.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,304, @param value  the long to test
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,305, @return <code>true</code> if the specified number occurs within this
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,306,  range by <code>long</code> comparison
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,308,Override
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,309,ublic boolean containsLong(long value) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,310,eturn value >= min && value <= max;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,313,/ Range tests
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,317, <p>Tests whether the specified range occurs entirely within this range
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,318, using <code>long</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,320, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,322," @param range  the range to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,323, @return <code>true</code> if the specified range occurs entirely within this range
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,324, @throws IllegalArgumentException if the range is not of this type
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,326,Override
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,327,ublic boolean containsRange(Range range) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,328,f (range == null) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,329,eturn false;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,331,eturn containsLong(range.getMinimumLong()) &&
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,332,ontainsLong(range.getMaximumLong());
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,336, <p>Tests whether the specified range overlaps with this range
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,337, using <code>long</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,339, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,341," @param range  the range to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,342, @return <code>true</code> if the specified range overlaps with this range
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,344,Override
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,345,ublic boolean overlapsRange(Range range) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,346,f (range == null) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,347,eturn false;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,349,eturn range.containsLong(min) ||
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,350,ange.containsLong(max) ||
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,351,ontainsLong(range.getMinimumLong());
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,354,/ Basics
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,358, <p>Compares this range to another object to test if they are equal.</p>.
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,360," <p>To be equal, the class, minimum and maximum must be equal.</p>"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,362, @param obj the reference object with which to compare
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,363, @return <code>true</code> if this object is equal
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,365,Override
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,366,ublic boolean equals(Object obj) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,367,f (obj == this) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,368,eturn true;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,370,f (obj instanceof LongRange == false) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,371,eturn false;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,373,ongRange range = (LongRange) obj;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,374,eturn min == range.min && max == range.max;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,378, <p>Gets a hashCode for the range.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,380, @return a hash code value for this object
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,382,Override
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,383,ublic int hashCode() {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,384,nt temp = hashCode;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,385,f (temp == 0) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,386,emp = 17;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,387,emp = 37 * temp + getClass().hashCode();
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,388,emp = 37 * temp + ((int) (min ^ (min >> 32)));
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,389,emp = 37 * temp + ((int) (max ^ (max >> 32)));
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,390,ashCode = temp;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,392,eturn hashCode;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,396, <p>Gets the range as a <code>String</code>.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,398," <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,400, @return the <code>String</code> representation of this range
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,402,Override
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,403,ublic String toString() {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,404,f (toString == null) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,405,tringBuilder buf = new StringBuilder(32);
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,406,"uf.append(""Range["");"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,407,uf.append(min);
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,408,"uf.append(',');"
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,409,uf.append(max);
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,410,uf.append(']');
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,411,oString = buf.toString();
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,413,eturn toString;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,417, <p>Returns an array containing all the long values in the range.</p>
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,419, @return the <code>long[]</code> representation of this range
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,420, @since 2.4
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,422,ublic long[] toArray() {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,423,ong[] array = new long[(int)(max - min + 1L)];
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,424,or(int i = 0; i < array.length; i++) {
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,425,rray[i] = min + i;
False,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,427,eturn array;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,17,ackage org.apache.commons.lang.math;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,22, <p><code>NumberRange</code> represents an inclusive range of
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,23, {@link java.lang.Number} objects of the same type.</p>
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,25, @author Apache Software Foundation
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,26," @author <a href=""mailto:chrise@esha.com"">Christopher Elkins</a>"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,27, @since 2.0 (previously in org.apache.commons.lang)
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,28, @version $Id$
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,30,ublic final class NumberRange extends Range implements Serializable {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,33, Required for serialization support.
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,35, @see java.io.Serializable
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,37,rivate static final long serialVersionUID = 71849363892710L;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,40, The minimum number in this range.
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,42,rivate final Number min;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,44, The maximum number in this range.
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,46,rivate final Number max;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,49, Cached output hashCode (class is immutable).
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,51,rivate transient int hashCode = 0;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,53, Cached output toString (class is immutable).
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,55,rivate transient String toString = null;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,58, <p>Constructs a new <code>NumberRange</code> using the specified
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,59, number as both the minimum and maximum in this range.</p>
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,61, @param num the number to use for this range
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,62, @throws IllegalArgumentException if the number is <code>null</code>
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,63, @throws IllegalArgumentException if the number doesn't implement <code>Comparable</code>
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,64, @throws IllegalArgumentException if the number is <code>Double.NaN</code> or <code>Float.NaN</code>
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,66,ublic NumberRange(Number num) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,67,f (num == null) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,68,"hrow new IllegalArgumentException(""The number must not be null"");"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,70,f (num instanceof Comparable<?> == false) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,71,"hrow new IllegalArgumentException(""The number must implement Comparable"");"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,73,f (num instanceof Double && ((Double) num).isNaN()) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,74,"hrow new IllegalArgumentException(""The number must not be NaN"");"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,76,f (num instanceof Float && ((Float) num).isNaN()) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,77,"hrow new IllegalArgumentException(""The number must not be NaN"");"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,80,his.min = num;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,81,his.max = num;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,85, <p>Constructs a new <code>NumberRange</code> with the specified
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,86, minimum and maximum numbers (both inclusive).</p>
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,88," <p>The arguments may be passed in the order (min,max) or (max,min). The"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,89, {@link #getMinimumNumber()} and {@link #getMaximumNumber()} methods will return the
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,90, correct value.</p>
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,92, <p>This constructor is designed to be used with two <code>Number</code>
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,93," objects of the same type. If two objects of different types are passed in,"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,94, an exception is thrown.</p>
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,96," @param num1  first number that defines the edge of the range, inclusive"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,97," @param num2  second number that defines the edge of the range, inclusive"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,98, @throws IllegalArgumentException if either number is <code>null</code>
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,99, @throws IllegalArgumentException if the numbers are of different types
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,100, @throws IllegalArgumentException if the numbers don't implement <code>Comparable</code>
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,102,"ublic NumberRange(Number num1, Number num2) {"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,103,f (num1 == null || num2 == null) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,104,"hrow new IllegalArgumentException(""The numbers must not be null"");"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,106,f (num1.getClass() != num2.getClass()) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,107,"hrow new IllegalArgumentException(""The numbers must be of the same type"");"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,109,f (num1 instanceof Comparable<?> == false) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,110,"hrow new IllegalArgumentException(""The numbers must implement Comparable"");"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,112,f (num1 instanceof Double) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,113,f (((Double) num1).isNaN() || ((Double) num2).isNaN()) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,114,"hrow new IllegalArgumentException(""The number must not be NaN"");"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,116, else if (num1 instanceof Float) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,117,f (((Float) num1).isNaN() || ((Float) num2).isNaN()) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,118,"hrow new IllegalArgumentException(""The number must not be NaN"");"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,122,"SuppressWarnings(""unchecked"") // this is checked above"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,123,nt compare = ((Comparable<Number>) num1).compareTo(num2);
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,124,f (compare == 0) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,125,his.min = num1;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,126,his.max = num1;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,127, else if (compare > 0) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,128,his.min = num2;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,129,his.max = num1;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,130, else {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,131,his.min = num1;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,132,his.max = num2;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,136,/ Accessors
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,140, <p>Returns the minimum number in this range.</p>
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,142, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,144,Override
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,145,ublic Number getMinimumNumber() {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,146,eturn min;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,150, <p>Returns the maximum number in this range.</p>
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,152, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,154,Override
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,155,ublic Number getMaximumNumber() {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,156,eturn max;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,159,/ Tests
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,163, <p>Tests whether the specified <code>number</code> occurs within
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,164, this range.</p>
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,166, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,168," @param number  the number to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,169, @return <code>true</code> if the specified number occurs within this range
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,170, @throws IllegalArgumentException if the number is of a different type to the range
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,172,Override
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,173,ublic boolean containsNumber(Number number) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,174,f (number == null) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,175,eturn false;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,177,f (number.getClass() != min.getClass()) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,178,"hrow new IllegalArgumentException(""The number must be of the same type as the range numbers"");"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,180,"SuppressWarnings(""unchecked"") // this was checked in the ctor"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,181,nt compareMin = ((Comparable<Number>) min).compareTo(number);
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,182,"SuppressWarnings(""unchecked"") // this was checked in the ctor"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,183,nt compareMax = ((Comparable<Number>) max).compareTo(number);
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,184,eturn compareMin <= 0 && compareMax >= 0;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,187,/ Range tests
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,189,/ use Range implementations
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,191,/ Basics
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,195, <p>Compares this range to another object to test if they are equal.</p>.
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,197," <p>To be equal, the class, minimum and maximum must be equal.</p>"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,199, @param obj the reference object with which to compare
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,200, @return <code>true</code> if this object is equal
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,202,Override
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,203,ublic boolean equals(Object obj) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,204,f (obj == this) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,205,eturn true;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,207,f (obj instanceof NumberRange == false) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,208,eturn false;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,210,umberRange range = (NumberRange) obj;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,211,eturn min.equals(range.min) && max.equals(range.max);
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,215, <p>Gets a hashCode for the range.</p>
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,217, @return a hash code value for this object
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,219,Override
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,220,ublic int hashCode() {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,221,nt temp = hashCode;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,222,f (temp == 0) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,223,emp = 17;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,224,emp = 37 * temp + getClass().hashCode();
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,225,emp = 37 * temp + min.hashCode();
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,226,emp = 37 * temp + max.hashCode();
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,227,ashCode = temp;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,229,eturn hashCode;
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,233, <p>Gets the range as a <code>String</code>.</p>
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,235," <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,237, @return the <code>String</code> representation of this range
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,239,Override
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,240,ublic String toString() {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,241,f (toString == null) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,242,tringBuilder buf = new StringBuilder(32);
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,243,"uf.append(""Range["");"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,244,uf.append(min);
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,245,"uf.append(',');"
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,246,uf.append(max);
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,247,uf.append(']');
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,248,oString = buf.toString();
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,250,eturn toString;
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,17,ackage org.apache.commons.lang.math;
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,20, <p><code>Range</code> represents a range of numbers of the same type.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,22, <p>Specific subclasses hold the range values as different types. Each
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,23, subclass should be immutable and {@link java.io.Serializable Serializable}
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,24, if possible.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,26, @author Apache Software Foundation
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,27, @since 2.0
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,28, @version $Id$
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,30,ublic abstract class Range {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,33, <p>Constructs a new range.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,35,ublic Range() {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,36,uper();
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,39,/ Accessors
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,43, <p>Gets the minimum number in this range.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,45, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,47,ublic abstract Number getMinimumNumber();
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,50, <p>Gets the minimum number in this range as a <code>long</code>.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,52, <p>This implementation uses the {@link #getMinimumNumber()} method.
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,53, Subclasses may be able to optimise this.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,55, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,57,ublic long getMinimumLong() {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,58,eturn getMinimumNumber().longValue();
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,62, <p>Gets the minimum number in this range as a <code>int</code>.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,64, <p>This implementation uses the {@link #getMinimumNumber()} method.
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,65, Subclasses may be able to optimise this.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,67, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,69,ublic int getMinimumInteger() {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,70,eturn getMinimumNumber().intValue();
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,74, <p>Gets the minimum number in this range as a <code>double</code>.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,76, <p>This implementation uses the {@link #getMinimumNumber()} method.
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,77, Subclasses may be able to optimise this.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,79, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,81,ublic double getMinimumDouble() {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,82,eturn getMinimumNumber().doubleValue();
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,86, <p>Gets the minimum number in this range as a <code>float</code>.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,88, <p>This implementation uses the {@link #getMinimumNumber()} method.
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,89, Subclasses may be able to optimise this.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,91, @return the minimum number in this range
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,93,ublic float getMinimumFloat() {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,94,eturn getMinimumNumber().floatValue();
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,98, <p>Gets the maximum number in this range.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,100, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,102,ublic abstract Number getMaximumNumber();
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,105, <p>Gets the maximum number in this range as a <code>long</code>.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,107, <p>This implementation uses the {@link #getMaximumNumber()} method.
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,108, Subclasses may be able to optimise this.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,110, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,112,ublic long getMaximumLong() {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,113,eturn getMaximumNumber().longValue();
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,117, <p>Gets the maximum number in this range as a <code>int</code>.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,119, <p>This implementation uses the {@link #getMaximumNumber()} method.
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,120, Subclasses may be able to optimise this.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,122, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,124,ublic int getMaximumInteger() {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,125,eturn getMaximumNumber().intValue();
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,129, <p>Gets the maximum number in this range as a <code>double</code>.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,131, <p>This implementation uses the {@link #getMaximumNumber()} method.
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,132, Subclasses may be able to optimise this.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,134, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,136,ublic double getMaximumDouble() {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,137,eturn getMaximumNumber().doubleValue();
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,141, <p>Gets the maximum number in this range as a <code>float</code>.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,143, <p>This implementation uses the {@link #getMaximumNumber()} method.
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,144, Subclasses may be able to optimise this.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,146, @return the maximum number in this range
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,148,ublic float getMaximumFloat() {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,149,eturn getMaximumNumber().floatValue();
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,152,/ Include tests
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,156, <p>Tests whether the specified <code>Number</code> occurs within
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,157, this range.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,159, <p>The exact comparison implementation varies by subclass. It is
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,160, intended that an <code>int</code> specific subclass will compare using
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,161, <code>int</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,163, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,165," @param number  the number to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,166, @return <code>true</code> if the specified number occurs within this range
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,167, @throws IllegalArgumentException if the <code>Number</code> cannot be compared
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,169,ublic abstract boolean containsNumber(Number number);
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,172, <p>Tests whether the specified <code>Number</code> occurs within
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,173, this range using <code>long</code> comparison..</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,175, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,177, <p>This implementation forwards to the {@link #containsLong(long)} method.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,179," @param value  the long to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,180, @return <code>true</code> if the specified number occurs within this
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,181,  range by <code>long</code> comparison
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,183,ublic boolean containsLong(Number value) {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,184,f (value == null) {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,185,eturn false;
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,187,eturn containsLong(value.longValue());
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,191, <p>Tests whether the specified <code>long</code> occurs within
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,192, this range using <code>long</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,194, <p>This implementation uses the {@link #getMinimumLong()} and
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,195, {@link #getMaximumLong()} methods and should be good for most uses.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,197, @param value  the long to test
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,198, @return <code>true</code> if the specified number occurs within this
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,199,  range by <code>long</code> comparison
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,201,ublic boolean containsLong(long value) {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,202,eturn value >= getMinimumLong() && value <= getMaximumLong();
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,206, <p>Tests whether the specified <code>Number</code> occurs within
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,207, this range using <code>int</code> comparison..</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,209, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,211, <p>This implementation forwards to the {@link #containsInteger(int)} method.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,213," @param value  the integer to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,214, @return <code>true</code> if the specified number occurs within this
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,215,  range by <code>int</code> comparison
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,217,ublic boolean containsInteger(Number value) {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,218,f (value == null) {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,219,eturn false;
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,221,eturn containsInteger(value.intValue());
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,225, <p>Tests whether the specified <code>int</code> occurs within
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,226, this range using <code>int</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,228, <p>This implementation uses the {@link #getMinimumInteger()} and
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,229, {@link #getMaximumInteger()} methods and should be good for most uses.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,231, @param value  the int to test
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,232, @return <code>true</code> if the specified number occurs within this
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,233,  range by <code>int</code> comparison
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,235,ublic boolean containsInteger(int value) {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,236,eturn value >= getMinimumInteger() && value <= getMaximumInteger();
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,240, <p>Tests whether the specified <code>Number</code> occurs within
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,241, this range using <code>double</code> comparison..</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,243, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,245, <p>This implementation forwards to the {@link #containsDouble(double)} method.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,247," @param value  the double to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,248, @return <code>true</code> if the specified number occurs within this
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,249,  range by <code>double</code> comparison
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,251,ublic boolean containsDouble(Number value) {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,252,f (value == null) {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,253,eturn false;
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,255,eturn containsDouble(value.doubleValue());
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,259, <p>Tests whether the specified <code>double</code> occurs within
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,260, this range using <code>double</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,262, <p>This implementation uses the {@link #getMinimumDouble()} and
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,263, {@link #getMaximumDouble()} methods and should be good for most uses.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,265, @param value  the double to test
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,266, @return <code>true</code> if the specified number occurs within this
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,267,  range by <code>double</code> comparison
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,269,ublic boolean containsDouble(double value) {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,270,"nt compareMin = Double.compare(getMinimumDouble(), value);"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,271,"nt compareMax = Double.compare(getMaximumDouble(), value);"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,272,eturn compareMin <= 0 && compareMax >= 0;
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,276, <p>Tests whether the specified <code>Number</code> occurs within
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,277, this range using <code>float</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,279, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,281, <p>This implementation forwards to the {@link #containsFloat(float)} method.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,283," @param value  the float to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,284, @return <code>true</code> if the specified number occurs within this
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,285,  range by <code>float</code> comparison
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,287,ublic boolean containsFloat(Number value) {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,288,f (value == null) {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,289,eturn false;
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,291,eturn containsFloat(value.floatValue());
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,295, <p>Tests whether the specified <code>float</code> occurs within
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,296, this range using <code>float</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,298, <p>This implementation uses the {@link #getMinimumFloat()} and
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,299, {@link #getMaximumFloat()} methods and should be good for most uses.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,301, @param value  the float to test
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,302, @return <code>true</code> if the specified number occurs within this
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,303,  range by <code>float</code> comparison
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,305,ublic boolean containsFloat(float value) {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,306,"nt compareMin = Float.compare(getMinimumFloat(), value);"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,307,"nt compareMax = Float.compare(getMaximumFloat(), value);"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,308,eturn compareMin <= 0 && compareMax >= 0;
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,311,/ Range tests
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,315, <p>Tests whether the specified range occurs entirely within this range.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,317, <p>The exact comparison implementation varies by subclass. It is
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,318, intended that an <code>int</code> specific subclass will compare using
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,319, <code>int</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,321, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,323, <p>This implementation uses the {@link #containsNumber(Number)} method.
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,324, Subclasses may be able to optimise this.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,326," @param range  the range to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,327, @return <code>true</code> if the specified range occurs entirely within
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,328,"  this range; otherwise, <code>false</code>"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,329, @throws IllegalArgumentException if the <code>Range</code> cannot be compared
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,331,ublic boolean containsRange(Range range) {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,332,f (range == null) {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,333,eturn false;
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,335,eturn containsNumber(range.getMinimumNumber())
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,336,& containsNumber(range.getMaximumNumber());
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,340, <p>Tests whether the specified range overlaps with this range.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,342, <p>The exact comparison implementation varies by subclass. It is
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,343, intended that an <code>int</code> specific subclass will compare using
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,344, <code>int</code> comparison.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,346, <p><code>null</code> is handled and returns <code>false</code>.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,348, <p>This implementation uses the {@link #containsNumber(Number)} and
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,349, {@link #containsRange(Range)} methods.
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,350, Subclasses may be able to optimise this.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,352," @param range  the range to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,353, @return <code>true</code> if the specified range overlaps with this
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,354,"  range; otherwise, <code>false</code>"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,355, @throws IllegalArgumentException if the <code>Range</code> cannot be compared
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,357,ublic boolean overlapsRange(Range range) {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,358,f (range == null) {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,359,eturn false;
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,361,eturn range.containsNumber(getMinimumNumber())
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,362,| range.containsNumber(getMaximumNumber())
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,363,| containsNumber(range.getMinimumNumber());
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,366,/ Basics
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,370, <p>Compares this range to another object to test if they are equal.</p>.
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,372," <p>To be equal, the class, minimum and maximum must be equal.</p>"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,374, <p>This implementation uses the {@link #getMinimumNumber()} and
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,375, {@link #getMaximumNumber()} methods.
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,376, Subclasses may be able to optimise this.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,378, @param obj the reference object with which to compare
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,379, @return <code>true</code> if this object is equal
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,381,Override
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,382,ublic boolean equals(Object obj) {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,383,f (obj == this) {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,384,eturn true;
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,385, else if (obj == null || obj.getClass() != getClass()) {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,386,eturn false;
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,387, else {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,388,ange range = (Range) obj;
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,389,eturn getMinimumNumber().equals(range.getMinimumNumber()) &&
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,390,etMaximumNumber().equals(range.getMaximumNumber());
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,395, <p>Gets a hashCode for the range.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,397, <p>This implementation uses the {@link #getMinimumNumber()} and
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,398, {@link #getMaximumNumber()} methods.
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,399, Subclasses may be able to optimise this.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,401, @return a hash code value for this object
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,403,Override
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,404,ublic int hashCode() {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,405,nt result = 17;
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,406,esult = 37 * result + getClass().hashCode();
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,407,esult = 37 * result + getMinimumNumber().hashCode();
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,408,esult = 37 * result + getMaximumNumber().hashCode();
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,409,eturn result;
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,413, <p>Gets the range as a <code>String</code>.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,415," <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,417, <p>This implementation uses the {@link #getMinimumNumber()} and
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,418, {@link #getMaximumNumber()} methods.
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,419, Subclasses may be able to optimise this.</p>
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,421, @return the <code>String</code> representation of this range
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,423,Override
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,424,ublic String toString() {
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,425,tringBuilder buf = new StringBuilder(32);
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,426,"uf.append(""Range["");"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,427,uf.append(getMinimumNumber());
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,428,"uf.append(',');"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,429,uf.append(getMaximumNumber());
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,430,uf.append(']');
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,431,eturn buf.toString();
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,3, or more contributor license agreements.  See the NOTICE file
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,4, distributed with this work for additional information
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,6," to you under the Apache License, Version 2.0 (the"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,7," ""License""); you may not use this file except in compliance"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,8, with the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,12," Unless required by applicable law or agreed to in writing,"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,13, software distributed under the License is distributed on an
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,15," KIND, either express or implied.  See the License for the"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,16, specific language governing permissions and limitations
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,17, under the License.
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,19,ackage org.apache.commons.lang.math;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,21,mport junit.framework.TestCase;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,24, Test cases for the {@link Range} classes.
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,26, @author Apache Software Foundation
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,27, @version $Id$
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,29,ublic abstract class AbstractRangeTest extends TestCase {
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,31,rotected Range tenToTwenty;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,32,rotected Range otherRange;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,34,rotected Integer five;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,35,rotected Integer ten;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,36,rotected Integer twelve;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,37,rotected Integer fifteen;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,38,rotected Integer twenty;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,39,rotected Integer twentyFive;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,40,rotected Long long8;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,41,rotected Long long10;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,42,rotected Long long12;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,43,rotected Long long20;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,44,rotected Long long21;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,45,rotected Double double8;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,46,rotected Double double10;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,47,rotected Double double12;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,48,rotected Double double20;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,49,rotected Double double21;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,50,rotected Float float8;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,51,rotected Float float10;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,52,rotected Float float12;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,53,rotected Float float20;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,54,rotected Float float21;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,56,rivate static class InnerNumber extends Number {
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,57,Override
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,58,ublic double doubleValue() {
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,59,eturn 12d;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,61,Override
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,62,ublic float floatValue() {
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,63,eturn 12f;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,65,Override
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,66,ublic int intValue() {
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,67,eturn 12;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,69,Override
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,70,ublic long longValue() {
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,71,eturn 12L;
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,75,rotected InnerNumber nonComparableNumber = new InnerNumber();
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,78,ublic AbstractRangeTest(String name) {
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,79,uper(name);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,82,Override
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,83,ublic void setUp() {
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,84,ive = new Integer(5);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,85,en = new Integer(10);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,86,welve = new Integer(12);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,87,ifteen = new Integer(15);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,88,wenty = new Integer(20);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,89,wentyFive = new Integer(25);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,90,ong8 = new Long(8);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,91,ong10 = new Long(10);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,92,ong12 = new Long(12);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,93,ong20 = new Long(20);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,94,ong21 = new Long(21);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,95,ouble8 = new Double(8);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,96,ouble10 = new Double(10);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,97,ouble12 = new Double(12);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,98,ouble20 = new Double(20);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,99,ouble21 = new Double(21);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,100,loat8 = new Float(8);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,101,loat10 = new Float(10);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,102,loat12 = new Float(12);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,103,loat20 = new Float(20);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,104,loat21 = new Float(21);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,109,ublic void testGetMinimum() {
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,110,"ssertEquals(10L, tenToTwenty.getMinimumLong());"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,111,"ssertEquals(10, tenToTwenty.getMinimumInteger());"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,112,"ssertEquals(10d, tenToTwenty.getMinimumDouble(), 0.00001d);"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,113,"ssertEquals(10f, tenToTwenty.getMinimumFloat(), 0.00001f);"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,116,ublic void testGetMaximum() {
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,117,"ssertEquals(20L, tenToTwenty.getMaximumLong());"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,118,"ssertEquals(20, tenToTwenty.getMaximumInteger());"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,119,"ssertEquals(20d, tenToTwenty.getMaximumDouble(), 0.00001d);"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,120,"ssertEquals(20f, tenToTwenty.getMaximumFloat(), 0.00001f);"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,125,ublic void testContainsLong() {
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,126,"ssertEquals(false, tenToTwenty.containsLong(null));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,127,"ssertEquals(true, tenToTwenty.containsLong(nonComparableNumber));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,129,"ssertEquals(false, tenToTwenty.containsLong(five));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,130,"ssertEquals(true, tenToTwenty.containsLong(ten));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,131,"ssertEquals(true, tenToTwenty.containsLong(fifteen));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,132,"ssertEquals(true, tenToTwenty.containsLong(twenty));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,133,"ssertEquals(false, tenToTwenty.containsLong(twentyFive));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,135,"ssertEquals(false, tenToTwenty.containsLong(long8));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,136,"ssertEquals(true, tenToTwenty.containsLong(long10));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,137,"ssertEquals(true, tenToTwenty.containsLong(long12));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,138,"ssertEquals(true, tenToTwenty.containsLong(long20));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,139,"ssertEquals(false, tenToTwenty.containsLong(long21));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,141,"ssertEquals(false, tenToTwenty.containsLong(double8));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,142,"ssertEquals(true, tenToTwenty.containsLong(double10));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,143,"ssertEquals(true, tenToTwenty.containsLong(double12));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,144,"ssertEquals(true, tenToTwenty.containsLong(double20));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,145,"ssertEquals(false, tenToTwenty.containsLong(double21));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,147,"ssertEquals(false, tenToTwenty.containsLong(float8));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,148,"ssertEquals(true, tenToTwenty.containsLong(float10));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,149,"ssertEquals(true, tenToTwenty.containsLong(float12));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,150,"ssertEquals(true, tenToTwenty.containsLong(float20));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,151,"ssertEquals(false, tenToTwenty.containsLong(float21));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,153,"ssertEquals(false, tenToTwenty.containsLong(9L));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,154,"ssertEquals(true, tenToTwenty.containsLong(10L));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,155,"ssertEquals(true, tenToTwenty.containsLong(15L));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,156,"ssertEquals(true, tenToTwenty.containsLong(20L));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,157,"ssertEquals(false, tenToTwenty.containsLong(21L));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,160,ublic void testContainsInteger() {
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,161,"ssertEquals(false, tenToTwenty.containsInteger(null));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,162,"ssertEquals(true, tenToTwenty.containsInteger(nonComparableNumber));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,164,"ssertEquals(false, tenToTwenty.containsInteger(five));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,165,"ssertEquals(true, tenToTwenty.containsInteger(ten));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,166,"ssertEquals(true, tenToTwenty.containsInteger(fifteen));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,167,"ssertEquals(true, tenToTwenty.containsInteger(twenty));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,168,"ssertEquals(false, tenToTwenty.containsInteger(twentyFive));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,170,"ssertEquals(false, tenToTwenty.containsInteger(long8));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,171,"ssertEquals(true, tenToTwenty.containsInteger(long10));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,172,"ssertEquals(true, tenToTwenty.containsInteger(long12));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,173,"ssertEquals(true, tenToTwenty.containsInteger(long20));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,174,"ssertEquals(false, tenToTwenty.containsInteger(long21));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,176,"ssertEquals(false, tenToTwenty.containsInteger(double8));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,177,"ssertEquals(true, tenToTwenty.containsInteger(double10));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,178,"ssertEquals(true, tenToTwenty.containsInteger(double12));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,179,"ssertEquals(true, tenToTwenty.containsInteger(double20));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,180,"ssertEquals(false, tenToTwenty.containsInteger(double21));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,182,"ssertEquals(false, tenToTwenty.containsInteger(float8));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,183,"ssertEquals(true, tenToTwenty.containsInteger(float10));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,184,"ssertEquals(true, tenToTwenty.containsInteger(float12));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,185,"ssertEquals(true, tenToTwenty.containsInteger(float20));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,186,"ssertEquals(false, tenToTwenty.containsInteger(float21));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,188,"ssertEquals(false, tenToTwenty.containsInteger(9));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,189,"ssertEquals(true, tenToTwenty.containsInteger(10));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,190,"ssertEquals(true, tenToTwenty.containsInteger(15));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,191,"ssertEquals(true, tenToTwenty.containsInteger(20));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,192,"ssertEquals(false, tenToTwenty.containsInteger(21));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,195,ublic void testContainsDouble() {
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,196,"ssertEquals(false, tenToTwenty.containsDouble(null));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,197,"ssertEquals(true, tenToTwenty.containsDouble(nonComparableNumber));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,199,"ssertEquals(false, tenToTwenty.containsDouble(five));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,200,"ssertEquals(true, tenToTwenty.containsDouble(ten));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,201,"ssertEquals(true, tenToTwenty.containsDouble(fifteen));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,202,"ssertEquals(true, tenToTwenty.containsDouble(twenty));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,203,"ssertEquals(false, tenToTwenty.containsDouble(twentyFive));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,205,"ssertEquals(false, tenToTwenty.containsDouble(long8));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,206,"ssertEquals(true, tenToTwenty.containsDouble(long10));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,207,"ssertEquals(true, tenToTwenty.containsDouble(long12));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,208,"ssertEquals(true, tenToTwenty.containsDouble(long20));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,209,"ssertEquals(false, tenToTwenty.containsDouble(long21));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,211,"ssertEquals(false, tenToTwenty.containsDouble(double8));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,212,"ssertEquals(true, tenToTwenty.containsDouble(double10));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,213,"ssertEquals(true, tenToTwenty.containsDouble(double12));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,214,"ssertEquals(true, tenToTwenty.containsDouble(double20));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,215,"ssertEquals(false, tenToTwenty.containsDouble(double21));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,217,"ssertEquals(false, tenToTwenty.containsDouble(float8));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,218,"ssertEquals(true, tenToTwenty.containsDouble(float10));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,219,"ssertEquals(true, tenToTwenty.containsDouble(float12));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,220,"ssertEquals(true, tenToTwenty.containsDouble(float20));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,221,"ssertEquals(false, tenToTwenty.containsDouble(float21));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,223,"ssertEquals(false, tenToTwenty.containsDouble(9d));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,224,"ssertEquals(true, tenToTwenty.containsDouble(10d));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,225,"ssertEquals(true, tenToTwenty.containsDouble(15d));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,226,"ssertEquals(true, tenToTwenty.containsDouble(20d));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,227,"ssertEquals(false, tenToTwenty.containsDouble(21d));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,230,ublic void testContainsFloat() {
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,231,"ssertEquals(false, tenToTwenty.containsFloat(null));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,232,"ssertEquals(true, tenToTwenty.containsFloat(nonComparableNumber));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,234,"ssertEquals(false, tenToTwenty.containsFloat(five));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,235,"ssertEquals(true, tenToTwenty.containsFloat(ten));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,236,"ssertEquals(true, tenToTwenty.containsFloat(fifteen));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,237,"ssertEquals(true, tenToTwenty.containsFloat(twenty));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,238,"ssertEquals(false, tenToTwenty.containsFloat(twentyFive));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,240,"ssertEquals(false, tenToTwenty.containsFloat(long8));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,241,"ssertEquals(true, tenToTwenty.containsFloat(long10));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,242,"ssertEquals(true, tenToTwenty.containsFloat(long12));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,243,"ssertEquals(true, tenToTwenty.containsFloat(long20));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,244,"ssertEquals(false, tenToTwenty.containsFloat(long21));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,246,"ssertEquals(false, tenToTwenty.containsFloat(double8));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,247,"ssertEquals(true, tenToTwenty.containsFloat(double10));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,248,"ssertEquals(true, tenToTwenty.containsFloat(double12));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,249,"ssertEquals(true, tenToTwenty.containsFloat(double20));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,250,"ssertEquals(false, tenToTwenty.containsFloat(double21));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,252,"ssertEquals(false, tenToTwenty.containsFloat(float8));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,253,"ssertEquals(true, tenToTwenty.containsFloat(float10));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,254,"ssertEquals(true, tenToTwenty.containsFloat(float12));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,255,"ssertEquals(true, tenToTwenty.containsFloat(float20));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,256,"ssertEquals(false, tenToTwenty.containsFloat(float21));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,258,"ssertEquals(false, tenToTwenty.containsFloat(9f));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,259,"ssertEquals(true, tenToTwenty.containsFloat(10f));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,260,"ssertEquals(true, tenToTwenty.containsFloat(15f));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,261,"ssertEquals(true, tenToTwenty.containsFloat(20f));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,262,"ssertEquals(false, tenToTwenty.containsFloat(21f));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,267,ublic void testContainsRange() {
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,268,"ssertEquals(false, tenToTwenty.containsRange(null));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,269,"ssertEquals(false, tenToTwenty.containsRange(createRange(five, five)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,270,"ssertEquals(false, tenToTwenty.containsRange(createRange(five, ten)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,271,"ssertEquals(false, tenToTwenty.containsRange(createRange(five, twelve)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,272,"ssertEquals(false, tenToTwenty.containsRange(createRange(five, fifteen)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,273,"ssertEquals(false, tenToTwenty.containsRange(createRange(five, twenty)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,274,"ssertEquals(false, tenToTwenty.containsRange(createRange(five, twentyFive)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,276,"ssertEquals(true, tenToTwenty.containsRange(createRange(ten, ten)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,277,"ssertEquals(true, tenToTwenty.containsRange(createRange(ten, twelve)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,278,"ssertEquals(true, tenToTwenty.containsRange(createRange(ten, fifteen)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,279,"ssertEquals(true, tenToTwenty.containsRange(createRange(ten, twenty)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,280,"ssertEquals(false, tenToTwenty.containsRange(createRange(ten, twentyFive)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,282,"ssertEquals(true, tenToTwenty.containsRange(createRange(twelve, twelve)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,283,"ssertEquals(true, tenToTwenty.containsRange(createRange(twelve, fifteen)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,284,"ssertEquals(true, tenToTwenty.containsRange(createRange(twelve, twenty)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,285,"ssertEquals(false, tenToTwenty.containsRange(createRange(twelve, twentyFive)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,287,"ssertEquals(true, tenToTwenty.containsRange(createRange(fifteen, fifteen)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,288,"ssertEquals(true, tenToTwenty.containsRange(createRange(fifteen, twenty)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,289,"ssertEquals(false, tenToTwenty.containsRange(createRange(fifteen, twentyFive)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,291,"ssertEquals(true, tenToTwenty.containsRange(createRange(twenty, twenty)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,292,"ssertEquals(false, tenToTwenty.containsRange(createRange(twenty, twentyFive)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,294,"ssertEquals(false, tenToTwenty.containsRange(createRange(twentyFive, twentyFive)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,297,ublic void testOverlapsRange() {
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,298,"ssertEquals(false, tenToTwenty.overlapsRange(null));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,299,"ssertEquals(false, tenToTwenty.overlapsRange(createRange(five, five)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,300,"ssertEquals(true, tenToTwenty.overlapsRange(createRange(five, ten)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,301,"ssertEquals(true, tenToTwenty.overlapsRange(createRange(five, twelve)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,302,"ssertEquals(true, tenToTwenty.overlapsRange(createRange(five, fifteen)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,303,"ssertEquals(true, tenToTwenty.overlapsRange(createRange(five, twenty)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,304,"ssertEquals(true, tenToTwenty.overlapsRange(createRange(five, twentyFive)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,306,"ssertEquals(true, tenToTwenty.overlapsRange(createRange(ten, ten)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,307,"ssertEquals(true, tenToTwenty.overlapsRange(createRange(ten, twelve)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,308,"ssertEquals(true, tenToTwenty.overlapsRange(createRange(ten, fifteen)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,309,"ssertEquals(true, tenToTwenty.overlapsRange(createRange(ten, twenty)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,310,"ssertEquals(true, tenToTwenty.overlapsRange(createRange(ten, twentyFive)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,312,"ssertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, twelve)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,313,"ssertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, fifteen)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,314,"ssertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, twenty)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,315,"ssertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, twentyFive)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,317,"ssertEquals(true, tenToTwenty.overlapsRange(createRange(fifteen, fifteen)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,318,"ssertEquals(true, tenToTwenty.overlapsRange(createRange(fifteen, twenty)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,319,"ssertEquals(true, tenToTwenty.overlapsRange(createRange(fifteen, twentyFive)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,321,"ssertEquals(true, tenToTwenty.overlapsRange(createRange(twenty, twenty)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,322,"ssertEquals(true, tenToTwenty.overlapsRange(createRange(twenty, twentyFive)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,324,"ssertEquals(false, tenToTwenty.overlapsRange(createRange(twentyFive, twentyFive)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,329,ublic void testEquals() {
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,330,"ssertEquals(false, tenToTwenty.equals(createRange(ten, fifteen)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,331,"ssertEquals(false, tenToTwenty.equals(createRange(ten, twentyFive)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,333,"ssertEquals(false, tenToTwenty.equals(createRange(fifteen, twenty)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,334,"ssertEquals(false, tenToTwenty.equals(createRange(five, twenty)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,336,"ssertEquals(false, tenToTwenty.equals(createRange(five, ten)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,337,"ssertEquals(false, tenToTwenty.equals(createRange(ten)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,339,"ssertEquals(true, tenToTwenty.equals(tenToTwenty));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,340,"ssertEquals(true, tenToTwenty.equals(createRange(ten, twenty)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,341,"ssertEquals(true, tenToTwenty.equals(createRange(twenty, ten)));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,343,"ssertEquals(false, tenToTwenty.equals(null));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,344,"ssertEquals(false, tenToTwenty.equals(new Object()));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,345,"ssertEquals(false, tenToTwenty.equals(otherRange));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,348,ublic void testHashCode() {
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,349,"ssertEquals(tenToTwenty.hashCode(), tenToTwenty.hashCode());"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,350,ssertTrue(tenToTwenty.hashCode() != 0);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,353,ublic void testToString() {
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,354,tring str = tenToTwenty.toString();
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,355,"ssertEquals(""Range[10,20]"", str);"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,356,"ssertSame(str, tenToTwenty.toString());"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,357,"ssertEquals(""Range[-20,-10]"", createRange(new Integer(-20), new Integer(-10)).toString());"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,361,rotected abstract Range createRange(Integer integer);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,362,"rotected abstract Range createRange(Integer integer1, Integer integer2);"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,3, or more contributor license agreements.  See the NOTICE file
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,4, distributed with this work for additional information
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,6," to you under the Apache License, Version 2.0 (the"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,7," ""License""); you may not use this file except in compliance"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,8, with the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,12," Unless required by applicable law or agreed to in writing,"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,13, software distributed under the License is distributed on an
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,15," KIND, either express or implied.  See the License for the"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,16, specific language governing permissions and limitations
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,17, under the License.
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,19,ackage org.apache.commons.lang.math;
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,21,mport junit.framework.Test;
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,22,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,25, Test cases for the {@link DoubleRange} class.
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,27, @author Apache Software Foundation
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,28, @version $Id$
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,30,ublic final class DoubleRangeTest extends AbstractRangeTest {
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,32,ublic DoubleRangeTest(String name) {
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,33,uper(name);
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,36,ublic static Test suite() {
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,37,estSuite suite = new TestSuite(DoubleRangeTest.class);
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,38,"uite.setName(""DoubleRange Tests"");"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,39,eturn suite;
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,42,Override
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,43,ublic void setUp() {
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,44,uper.setUp();
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,45,"enToTwenty = new DoubleRange(double10, double20);"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,46,"therRange = new NumberRange(ten, twenty);"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,49,Override
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,50,"rotected Range createRange(Integer integer1, Integer integer2) {"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,51,"eturn new DoubleRange(integer1, integer2);"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,53,Override
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,54,rotected Range createRange(Integer integer) {
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,55,eturn new NumberRange(integer);
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,60,ublic void testConstructor1a() {
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,61,oubleRange nr = new DoubleRange(8d);
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,62,"ssertEquals(double8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,63,"ssertEquals(double8, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,65,ry {
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,66,ew DoubleRange(Double.NaN);
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,67,ail();
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,68, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,71,ublic void testConstructor1b() {
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,72,oubleRange nr = new DoubleRange(double8);
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,73,"ssertSame(double8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,74,"ssertSame(double8, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,76,ew DoubleRange(nonComparableNumber);
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,78,ry {
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,79,ew DoubleRange(null);
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,80,ail();
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,81, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,82,ry {
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,83,ew DoubleRange(new Double(Double.NaN));
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,84,ail();
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,85, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,88,ublic void testConstructor2a() {
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,89,"oubleRange nr = new DoubleRange(8d, 10d);"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,90,"ssertEquals(double8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,91,"ssertEquals(double10, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,93,"r = new DoubleRange(10d, 8d);"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,94,"ssertEquals(double8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,95,"ssertEquals(double10, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,97,ry {
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,98,"ew DoubleRange(Double.NaN, 8d);"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,99,ail();
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,100, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,103,ublic void testConstructor2b() {
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,104,"oubleRange nr = new DoubleRange(double8, double10);"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,105,"ssertSame(double8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,106,"ssertSame(double10, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,108,"r = new DoubleRange(double10, double8);"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,109,"ssertSame(double8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,110,"ssertSame(double10, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,112,"r = new DoubleRange(double8, double10);"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,113,"ssertSame(double8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,114,"ssertEquals(double10, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,116,/ not null
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,117,ry {
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,118,"ew DoubleRange(double8, null);"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,119,ail();
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,120, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,121,ry {
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,122,"ew DoubleRange(null, double8);"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,123,ail();
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,124, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,125,ry {
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,126,"ew DoubleRange(null, null);"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,127,ail();
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,128, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,130,ry {
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,131,"ew DoubleRange(new Double(Double.NaN), double10);"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,132,ail();
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,133, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,138,ublic void testContainsNumber() {
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,139,"ssertEquals(false, tenToTwenty.containsNumber(null));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,140,"ssertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,142,"ssertEquals(false, tenToTwenty.containsNumber(five));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,143,"ssertEquals(true, tenToTwenty.containsNumber(ten));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,144,"ssertEquals(true, tenToTwenty.containsNumber(fifteen));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,145,"ssertEquals(true, tenToTwenty.containsNumber(twenty));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,146,"ssertEquals(false, tenToTwenty.containsNumber(twentyFive));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,148,"ssertEquals(false, tenToTwenty.containsNumber(long8));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,149,"ssertEquals(true, tenToTwenty.containsNumber(long10));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,150,"ssertEquals(true, tenToTwenty.containsNumber(long12));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,151,"ssertEquals(true, tenToTwenty.containsNumber(long20));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,152,"ssertEquals(false, tenToTwenty.containsNumber(long21));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,154,"ssertEquals(false, tenToTwenty.containsNumber(double8));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,155,"ssertEquals(true, tenToTwenty.containsNumber(double10));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,156,"ssertEquals(true, tenToTwenty.containsNumber(double12));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,157,"ssertEquals(true, tenToTwenty.containsNumber(double20));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,158,"ssertEquals(false, tenToTwenty.containsNumber(double21));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,160,"ssertEquals(false, tenToTwenty.containsNumber(float8));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,161,"ssertEquals(true, tenToTwenty.containsNumber(float10));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,162,"ssertEquals(true, tenToTwenty.containsNumber(float12));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,163,"ssertEquals(true, tenToTwenty.containsNumber(float20));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,164,"ssertEquals(false, tenToTwenty.containsNumber(float21));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,167,Override
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,168,ublic void testToString() {
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,169,tring str = tenToTwenty.toString();
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,170,"ssertEquals(""Range[10.0,20.0]"", str);"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,171,"ssertSame(str, tenToTwenty.toString());"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,172,"ssertEquals(""Range[-20.0,-10.0]"", createRange(new Integer(-20), new Integer(-10)).toString());"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,3, or more contributor license agreements.  See the NOTICE file
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,4, distributed with this work for additional information
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,6," to you under the Apache License, Version 2.0 (the"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,7," ""License""); you may not use this file except in compliance"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,8, with the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,12," Unless required by applicable law or agreed to in writing,"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,13, software distributed under the License is distributed on an
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,15," KIND, either express or implied.  See the License for the"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,16, specific language governing permissions and limitations
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,17, under the License.
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,19,ackage org.apache.commons.lang.math;
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,21,mport junit.framework.Test;
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,22,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,25, Test cases for the {@link FloatRange} class.
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,27, @author Apache Software Foundation
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,28, @version $Id$
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,30,ublic final class FloatRangeTest extends AbstractRangeTest {
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,32,ublic FloatRangeTest(String name) {
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,33,uper(name);
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,36,ublic static Test suite() {
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,37,estSuite suite = new TestSuite(FloatRangeTest.class);
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,38,"uite.setName(""FloatRange Tests"");"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,39,eturn suite;
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,42,Override
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,43,ublic void setUp() {
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,44,uper.setUp();
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,45,"enToTwenty = new FloatRange(float10, float20);"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,46,"therRange = new NumberRange(ten, twenty);"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,49,Override
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,50,"rotected Range createRange(Integer integer1, Integer integer2) {"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,51,"eturn new FloatRange(integer1, integer2);"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,53,Override
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,54,rotected Range createRange(Integer integer) {
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,55,eturn new NumberRange(integer);
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,60,ublic void testConstructor1a() {
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,61,loatRange nr = new FloatRange(8f);
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,62,"ssertEquals(float8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,63,"ssertEquals(float8, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,65,ry {
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,66,ew FloatRange(Float.NaN);
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,67,ail();
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,68, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,71,ublic void testConstructor1b() {
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,72,loatRange nr = new FloatRange(float8);
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,73,"ssertSame(float8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,74,"ssertSame(float8, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,76,ew FloatRange(nonComparableNumber);
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,78,ry {
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,79,ew FloatRange(null);
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,80,ail();
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,81, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,82,ry {
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,83,ew FloatRange(new Double(Double.NaN));
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,84,ail();
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,85, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,88,ublic void testConstructor2a() {
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,89,"loatRange nr = new FloatRange(8f, 10f);"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,90,"ssertEquals(float8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,91,"ssertEquals(float10, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,93,"r = new FloatRange(10f, 8f);"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,94,"ssertEquals(float8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,95,"ssertEquals(float10, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,97,ry {
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,98,"ew FloatRange(Float.NaN, 8f);"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,99,ail();
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,100, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,103,ublic void testConstructor2b() {
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,104,"loatRange nr = new FloatRange(float8, float10);"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,105,"ssertSame(float8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,106,"ssertSame(float10, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,108,"r = new FloatRange(float10, float8);"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,109,"ssertSame(float8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,110,"ssertSame(float10, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,112,"r = new FloatRange(float8, float10);"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,113,"ssertSame(float8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,114,"ssertEquals(float10, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,116,/ not null
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,117,ry {
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,118,"ew FloatRange(float8, null);"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,119,ail();
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,120, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,121,ry {
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,122,"ew FloatRange(null, float8);"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,123,ail();
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,124, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,125,ry {
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,126,"ew FloatRange(null, null);"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,127,ail();
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,128, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,130,ry {
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,131,"ew FloatRange(new Double(Double.NaN), float10);"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,132,ail();
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,133, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,138,ublic void testContainsNumber() {
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,139,"ssertEquals(false, tenToTwenty.containsNumber(null));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,140,"ssertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,142,"ssertEquals(false, tenToTwenty.containsNumber(five));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,143,"ssertEquals(true, tenToTwenty.containsNumber(ten));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,144,"ssertEquals(true, tenToTwenty.containsNumber(fifteen));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,145,"ssertEquals(true, tenToTwenty.containsNumber(twenty));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,146,"ssertEquals(false, tenToTwenty.containsNumber(twentyFive));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,148,"ssertEquals(false, tenToTwenty.containsNumber(long8));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,149,"ssertEquals(true, tenToTwenty.containsNumber(long10));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,150,"ssertEquals(true, tenToTwenty.containsNumber(long12));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,151,"ssertEquals(true, tenToTwenty.containsNumber(long20));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,152,"ssertEquals(false, tenToTwenty.containsNumber(long21));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,154,"ssertEquals(false, tenToTwenty.containsNumber(double8));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,155,"ssertEquals(true, tenToTwenty.containsNumber(double10));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,156,"ssertEquals(true, tenToTwenty.containsNumber(double12));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,157,"ssertEquals(true, tenToTwenty.containsNumber(double20));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,158,"ssertEquals(false, tenToTwenty.containsNumber(double21));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,160,"ssertEquals(false, tenToTwenty.containsNumber(float8));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,161,"ssertEquals(true, tenToTwenty.containsNumber(float10));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,162,"ssertEquals(true, tenToTwenty.containsNumber(float12));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,163,"ssertEquals(true, tenToTwenty.containsNumber(float20));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,164,"ssertEquals(false, tenToTwenty.containsNumber(float21));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,167,Override
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,168,ublic void testToString() {
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,169,tring str = tenToTwenty.toString();
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,170,"ssertEquals(""Range[10.0,20.0]"", str);"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,171,"ssertSame(str, tenToTwenty.toString());"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,172,"ssertEquals(""Range[-20.0,-10.0]"", createRange(new Integer(-20), new Integer(-10)).toString());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,3, or more contributor license agreements.  See the NOTICE file
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,4, distributed with this work for additional information
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,6," to you under the Apache License, Version 2.0 (the"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,7," ""License""); you may not use this file except in compliance"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,8, with the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,12," Unless required by applicable law or agreed to in writing,"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,13, software distributed under the License is distributed on an
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,15," KIND, either express or implied.  See the License for the"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,16, specific language governing permissions and limitations
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,17, under the License.
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,19,ackage org.apache.commons.lang.math;
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,21,mport junit.framework.Test;
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,22,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,24,mport java.util.Arrays;
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,27, Test cases for the {@link IntRange} class.
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,29, @author Apache Software Foundation
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,30, @author Janek Bogucki
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,31, @author Phil Steitz
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,32, @version $Id$
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,34,ublic final class IntRangeTest extends AbstractRangeTest {
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,36,ublic IntRangeTest(String name) {
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,37,uper(name);
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,40,ublic static Test suite() {
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,41,estSuite suite = new TestSuite(IntRangeTest.class);
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,42,"uite.setName(""IntRange Tests"");"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,43,eturn suite;
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,46,Override
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,47,ublic void setUp() {
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,48,uper.setUp();
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,49,"enToTwenty = new IntRange(ten, twenty);"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,50,"therRange = new NumberRange(ten, twenty);"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,53,Override
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,54,"rotected Range createRange(Integer integer1, Integer integer2) {"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,55,"eturn new IntRange(integer1, integer2);"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,57,Override
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,58,rotected Range createRange(Integer integer) {
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,59,eturn new NumberRange(integer);
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,64,ublic void testConstructor1a() {
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,65,ntRange nr = new IntRange(5);
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,66,"ssertEquals(five, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,67,"ssertEquals(five, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,70,ublic void testConstructor1b() {
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,71,ntRange nr = new IntRange(five);
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,72,"ssertSame(five, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,73,"ssertSame(five, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,75,ew IntRange(nonComparableNumber);
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,77,ry {
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,78,ew IntRange(null);
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,79,ail();
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,80, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,83,ublic void testConstructor2a() {
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,84,"ntRange nr = new IntRange(5, 10);"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,85,"ssertEquals(five, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,86,"ssertEquals(ten, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,88,"r = new IntRange(5, 10);"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,89,"ssertEquals(five, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,90,"ssertEquals(ten, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,93,ublic void testConstructor2b() {
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,94,"ntRange nr = new IntRange(five, ten);"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,95,"ssertSame(five, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,96,"ssertSame(ten, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,98,"r = new IntRange(ten, five);"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,99,"ssertSame(five, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,100,"ssertSame(ten, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,102,"r = new IntRange(five, long10);"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,103,"ssertSame(five, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,104,"ssertEquals(ten, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,106,"/ test non Integer, for full coverage"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,107,ong fiveL = new Long(5L);
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,108,ong tenL = new Long(10L);
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,109,"r = new IntRange(fiveL, tenL);"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,110,"ssertEquals(five, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,111,"ssertEquals(ten, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,112,"r = new IntRange(tenL, fiveL);"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,113,"ssertEquals(five, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,114,"ssertEquals(ten, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,116,/ not null
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,117,ry {
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,118,"ew IntRange(five, null);"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,119,ail();
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,120, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,121,ry {
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,122,"ew IntRange(null, five);"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,123,ail();
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,124, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,125,ry {
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,126,"ew IntRange(null, null);"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,127,ail();
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,128, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,133,ublic void testContainsNumber() {
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,134,"ssertEquals(false, tenToTwenty.containsNumber(null));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,135,"ssertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,137,"ssertEquals(false, tenToTwenty.containsNumber(five));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,138,"ssertEquals(true, tenToTwenty.containsNumber(ten));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,139,"ssertEquals(true, tenToTwenty.containsNumber(fifteen));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,140,"ssertEquals(true, tenToTwenty.containsNumber(twenty));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,141,"ssertEquals(false, tenToTwenty.containsNumber(twentyFive));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,143,"ssertEquals(false, tenToTwenty.containsNumber(long8));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,144,"ssertEquals(true, tenToTwenty.containsNumber(long10));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,145,"ssertEquals(true, tenToTwenty.containsNumber(long12));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,146,"ssertEquals(true, tenToTwenty.containsNumber(long20));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,147,"ssertEquals(false, tenToTwenty.containsNumber(long21));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,149,"ssertEquals(false, tenToTwenty.containsNumber(double8));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,150,"ssertEquals(true, tenToTwenty.containsNumber(double10));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,151,"ssertEquals(true, tenToTwenty.containsNumber(double12));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,152,"ssertEquals(true, tenToTwenty.containsNumber(double20));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,153,"ssertEquals(false, tenToTwenty.containsNumber(double21));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,155,"ssertEquals(false, tenToTwenty.containsNumber(float8));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,156,"ssertEquals(true, tenToTwenty.containsNumber(float10));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,157,"ssertEquals(true, tenToTwenty.containsNumber(float12));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,158,"ssertEquals(true, tenToTwenty.containsNumber(float20));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,159,"ssertEquals(false, tenToTwenty.containsNumber(float21));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,162,ublic void testContainsIntegerBig() {
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,163,"ntRange big = new IntRange(Integer.MAX_VALUE, Integer.MAX_VALUE- 2);"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,164,"ssertEquals(true, big.containsInteger(Integer.MAX_VALUE - 1));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,165,"ssertEquals(false, big.containsInteger(Integer.MAX_VALUE - 3));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,168,ublic void testToArray() {
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,169,"nt[] threeItems = new IntRange(3, 5).toArray();"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,170,"ssertTrue(Arrays.equals(new int[]{3, 4, 5}, threeItems));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,171,nt[] oneItem = new IntRange(4).toArray();
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,172,"ssertTrue(Arrays.equals(new int[]{4}, oneItem));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,3, or more contributor license agreements.  See the NOTICE file
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,4, distributed with this work for additional information
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,6," to you under the Apache License, Version 2.0 (the"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,7," ""License""); you may not use this file except in compliance"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,8, with the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,12," Unless required by applicable law or agreed to in writing,"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,13, software distributed under the License is distributed on an
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,15," KIND, either express or implied.  See the License for the"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,16, specific language governing permissions and limitations
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,17, under the License.
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,19,ackage org.apache.commons.lang.math;
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,21,mport junit.framework.Test;
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,22,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,24,mport java.util.Arrays;
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,27, Test cases for the {@link LongRange} class.
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,29, @author Apache Software Foundation
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,30, @version $Id$
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,32,ublic final class LongRangeTest extends AbstractRangeTest {
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,34,ublic LongRangeTest(String name) {
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,35,uper(name);
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,38,ublic static Test suite() {
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,39,estSuite suite = new TestSuite(LongRangeTest.class);
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,40,"uite.setName(""LongRange Tests"");"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,41,eturn suite;
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,44,Override
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,45,ublic void setUp() {
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,46,uper.setUp();
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,47,"enToTwenty = new LongRange(long10, long20);"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,48,"therRange = new NumberRange(ten, twenty);"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,51,Override
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,52,"rotected Range createRange(Integer integer1, Integer integer2) {"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,53,"eturn new LongRange(integer1, integer2);"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,55,Override
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,56,rotected Range createRange(Integer integer) {
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,57,eturn new NumberRange(integer);
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,62,ublic void testConstructor1a() {
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,63,ongRange nr = new LongRange(8L);
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,64,"ssertEquals(long8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,65,"ssertEquals(long8, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,68,ublic void testConstructor1b() {
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,69,ongRange nr = new LongRange(long8);
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,70,"ssertSame(long8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,71,"ssertSame(long8, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,73,ew LongRange(nonComparableNumber);
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,75,ry {
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,76,ew LongRange(null);
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,77,ail();
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,78, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,81,ublic void testConstructor2a() {
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,82,"ongRange nr = new LongRange(8L, 10L);"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,83,"ssertEquals(long8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,84,"ssertEquals(long10, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,86,"r = new LongRange(10L, 8L);"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,87,"ssertEquals(long8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,88,"ssertEquals(long10, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,91,ublic void testConstructor2b() {
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,92,"ongRange nr = new LongRange(long8, long10);"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,93,"ssertSame(long8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,94,"ssertSame(long10, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,96,"r = new LongRange(long10, long8);"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,97,"ssertSame(long8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,98,"ssertSame(long10, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,100,"r = new LongRange(long8, long10);"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,101,"ssertSame(long8, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,102,"ssertEquals(long10, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,104,/ not null
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,105,ry {
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,106,"ew LongRange(long8, null);"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,107,ail();
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,108, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,109,ry {
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,110,"ew LongRange(null, long8);"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,111,ail();
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,112, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,113,ry {
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,114,"ew LongRange(null, null);"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,115,ail();
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,116, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,121,ublic void testContainsNumber() {
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,122,"ssertEquals(false, tenToTwenty.containsNumber(null));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,123,"ssertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,125,"ssertEquals(false, tenToTwenty.containsNumber(five));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,126,"ssertEquals(true, tenToTwenty.containsNumber(ten));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,127,"ssertEquals(true, tenToTwenty.containsNumber(fifteen));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,128,"ssertEquals(true, tenToTwenty.containsNumber(twenty));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,129,"ssertEquals(false, tenToTwenty.containsNumber(twentyFive));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,131,"ssertEquals(false, tenToTwenty.containsNumber(long8));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,132,"ssertEquals(true, tenToTwenty.containsNumber(long10));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,133,"ssertEquals(true, tenToTwenty.containsNumber(long12));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,134,"ssertEquals(true, tenToTwenty.containsNumber(long20));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,135,"ssertEquals(false, tenToTwenty.containsNumber(long21));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,137,"ssertEquals(false, tenToTwenty.containsNumber(double8));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,138,"ssertEquals(true, tenToTwenty.containsNumber(double10));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,139,"ssertEquals(true, tenToTwenty.containsNumber(double12));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,140,"ssertEquals(true, tenToTwenty.containsNumber(double20));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,141,"ssertEquals(false, tenToTwenty.containsNumber(double21));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,143,"ssertEquals(false, tenToTwenty.containsNumber(float8));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,144,"ssertEquals(true, tenToTwenty.containsNumber(float10));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,145,"ssertEquals(true, tenToTwenty.containsNumber(float12));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,146,"ssertEquals(true, tenToTwenty.containsNumber(float20));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,147,"ssertEquals(false, tenToTwenty.containsNumber(float21));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,150,ublic void testContainsLongBig() {
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,151,"ongRange big = new LongRange(Long.MAX_VALUE, Long.MAX_VALUE- 2);"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,152,"ssertEquals(true, big.containsLong(Long.MAX_VALUE - 1));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,153,"ssertEquals(false, big.containsLong(Long.MAX_VALUE - 3));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,156,ublic void testToArray() {
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,157,"ong[] threeItems = new LongRange(3, 5).toArray();"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,158,"ssertTrue(Arrays.equals(new long[]{3, 4, 5}, threeItems));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,159,ong[] oneItem = new LongRange(4).toArray();
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,160,"ssertTrue(Arrays.equals(new long[]{4}, oneItem));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,3, or more contributor license agreements.  See the NOTICE file
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,4, distributed with this work for additional information
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,6," to you under the Apache License, Version 2.0 (the"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,7," ""License""); you may not use this file except in compliance"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,8, with the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,12," Unless required by applicable law or agreed to in writing,"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,13, software distributed under the License is distributed on an
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,15," KIND, either express or implied.  See the License for the"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,16, specific language governing permissions and limitations
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,17, under the License.
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,20,ackage org.apache.commons.lang.math;
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,22,mport junit.framework.Test;
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,23,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,26, Test cases for the {@link NumberRange} class.
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,28, @author Apache Software Foundation
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,29," @author <a href=""mailto:chrise@esha.com"">Christopher Elkins</a>"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,30," @author <a href=""mailto:ridesmet@users.sourceforge.net"">Ringo De Smet</a>"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,31, @version $Id$
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,33,ublic final class NumberRangeTest extends AbstractRangeTest {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,35,ublic static Test suite() {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,36,estSuite suite = new TestSuite(NumberRangeTest.class);
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,37,"uite.setName(""NumberRange Tests"");"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,38,eturn suite;
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,41,ublic NumberRangeTest(String name) {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,42,uper(name);
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,45,oid checkConstructorException(Number num) {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,46,ry {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,47,ew NumberRange(num);
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,48,"ail(""Expected an IllegalArgumentException"");"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,49, catch (IllegalArgumentException e) {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,50,/ Expected.
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,54,"oid checkConstructorException(Number num1, Number num2) {"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,55,ry {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,56,"ew NumberRange(num1, num2);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,57,"ail(""Expected an IllegalArgumentException"");"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,58, catch (IllegalArgumentException e) {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,59,/ Expected.
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,63,Override
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,64,rotected Range createRange(Integer integer) {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,65,eturn new NumberRange(integer);
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,70,Override
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,71,"rotected Range createRange(Integer integer1, Integer integer2) {"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,72,"eturn new NumberRange(integer1, integer2);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,75,Override
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,76,ublic void setUp() {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,77,uper.setUp();
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,78,"enToTwenty = new NumberRange(ten, twenty);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,79,"therRange = new IntRange(ten, twenty);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,83, Tests non-exceptional conditions for the one argument constructor.
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,85,ublic void testConstructor1() {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,86,umberRange nr = new NumberRange(five);
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,87,"ssertSame(five, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,88,"ssertSame(five, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,92, Tests exceptional conditions for the one argument constructor.
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,94,ublic void testConstructor1Exceptions() {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,95,his.checkConstructorException(null);
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,96,his.checkConstructorException(nonComparableNumber);
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,97,his.checkConstructorException(new Float(Float.NaN));
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,98,his.checkConstructorException(new Double(Double.NaN));
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,102, Tests non-exceptional conditions for the two argument constructor.
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,104,ublic void testConstructor2() {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,105,"umberRange nr = new NumberRange(five, ten);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,106,"ssertSame(five, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,107,"ssertSame(ten, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,109,"r = new NumberRange(ten, five);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,110,"ssertSame(five, nr.getMinimumNumber());"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,111,"ssertSame(ten, nr.getMaximumNumber());"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,115, Tests exceptional conditions for the two argument constructor.
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,117,ublic void testConstructor2Exceptions() {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,118,"his.checkConstructorException(null, null);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,120,"his.checkConstructorException(new Float(12.2f), new Double(12.2));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,121,"his.checkConstructorException(new Float(Float.NaN), new Double(12.2));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,122,"his.checkConstructorException(new Double(Double.NaN), new Double(12.2));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,123,"his.checkConstructorException(new Double(12.2), new Double(Double.NaN));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,124,"his.checkConstructorException(new Double(Double.NaN), new Double(Double.NaN));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,125,"his.checkConstructorException(null, new Double(12.2));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,126,"his.checkConstructorException(new Double(12.2), null);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,128,"his.checkConstructorException(new Double(12.2f), new Float(12.2));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,129,"his.checkConstructorException(new Double(Double.NaN), new Float(12.2));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,130,"his.checkConstructorException(new Float(Float.NaN), new Float(12.2));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,131,"his.checkConstructorException(new Float(12.2), new Float(Float.NaN));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,132,"his.checkConstructorException(new Float(Float.NaN), new Float(Float.NaN));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,133,"his.checkConstructorException(null, new Float(12.2));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,134,"his.checkConstructorException(new Float(12.2), null);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,136,"his.checkConstructorException(nonComparableNumber, nonComparableNumber);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,137,"his.checkConstructorException(null, nonComparableNumber);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,138,"his.checkConstructorException(nonComparableNumber, null);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,139,"his.checkConstructorException(new Float(12.2), nonComparableNumber);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,140,"his.checkConstructorException(nonComparableNumber, new Float(12.2));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,145,ublic void testContainsLongBig() {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,146,/ original NumberRange class failed this test
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,147,"umberRange big = new NumberRange(new Long(Long.MAX_VALUE), new Long(Long.MAX_VALUE - 2));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,148,"ssertEquals(true, big.containsLong(Long.MAX_VALUE - 1));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,149,"ssertEquals(false, big.containsLong(Long.MAX_VALUE - 3));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,152,ublic void testContainsNumber() {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,153,"ssertEquals(false, tenToTwenty.containsNumber(null));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,154,"ssertEquals(false, tenToTwenty.containsNumber(five));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,155,"ssertEquals(true, tenToTwenty.containsNumber(ten));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,156,"ssertEquals(true, tenToTwenty.containsNumber(fifteen));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,157,"ssertEquals(true, tenToTwenty.containsNumber(twenty));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,158,"ssertEquals(false, tenToTwenty.containsNumber(twentyFive));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,160,ry {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,161,enToTwenty.containsNumber(long21);
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,162,ail();
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,163, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,15, limitations under the License.
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,18,ackage org.apache.commons.lang.math;
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,20,mport junit.framework.Test;
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,21,mport junit.framework.TestCase;
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,22,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,25, <p>
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,26, Tests the base methods in the {@link org.apache.commons.lang.math.Range} class.
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,27, </p>
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,29, @author Nathan Beyer
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,30, @version $Id$
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,32,ublic class RangeTest extends TestCase {
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,34,rivate static class RangeTestFixture extends Range {
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,35,rivate byte max;
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,37,rivate byte min;
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,39,"angeTestFixture(byte min, byte max) {"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,40,uper();
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,41,his.min = min;
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,42,his.max = max;
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,45,Override
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,46,ublic boolean containsNumber(Number number) {
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,47,f (number.byteValue() >= min && number.byteValue() <= max) {
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,48,eturn true;
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,50,eturn false;
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,53,Override
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,54,ublic Number getMaximumNumber() {
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,55,eturn Byte.valueOf(max);
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,58,Override
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,59,ublic Number getMinimumNumber() {
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,60,eturn Byte.valueOf(min);
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,64,ublic static Test suite() {
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,65,estSuite suite = new TestSuite(RangeTest.class);
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,66,"uite.setName(""Range Tests"");"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,67,eturn suite;
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,70,ublic RangeTest(String name) {
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,71,uper(name);
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,74,Override
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,75,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,76,uper.setUp();
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,79,Override
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,80,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,81,uper.tearDown();
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,85, Test method for 'org.apache.commons.lang.math.Range.equals(Object)'
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,87,ublic void testEqualsObject() {
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,88,"angeTestFixture r1 = new RangeTestFixture((byte) 0, (byte) 5);"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,89,"angeTestFixture r2 = new RangeTestFixture((byte) 0, (byte) 5);"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,90,"angeTestFixture r3 = new RangeTestFixture((byte) 0, (byte) 10);"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,92,"ssertEquals(r1, r1);"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,93,"ssertEquals(r1, r2);"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,94,"ssertEquals(r2, r2);"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,95,ssertTrue(r1.equals(r1));
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,96,ssertTrue(r2.equals(r2));
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,97,ssertTrue(r3.equals(r3));
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,98,ssertFalse(r2.equals(r3));
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,99,ssertFalse(r2.equals(null));
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,100,"ssertFalse(r2.equals(""Ni!""));"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,104, Test method for 'org.apache.commons.lang.math.Range.hashCode()'
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,106,ublic void testHashCode() {
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,107,"angeTestFixture r1 = new RangeTestFixture((byte) 0, (byte) 5);"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,108,"angeTestFixture r2 = new RangeTestFixture((byte) 0, (byte) 5);"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,109,"angeTestFixture r3 = new RangeTestFixture((byte) 0, (byte) 10);"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,111,"ssertEquals(r1.hashCode(), r2.hashCode());"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,112,ssertFalse(r1.hashCode() == r3.hashCode());
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,116, Test method for 'org.apache.commons.lang.math.Range.toString()'
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,118,ublic void testToString() {
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,119,"angeTestFixture r1 = new RangeTestFixture((byte) 0, (byte) 5);"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,120,ssertNotNull(r1.toString());
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,121,ssertNotNull(r1.toString());
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,122,"angeTestFixture r2 = new RangeTestFixture((byte) 0, (byte) 5);"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,123,ssertNotNull(r2.toString());
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,124,ssertNotNull(r2.toString());
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,125,"angeTestFixture r3 = new RangeTestFixture((byte) 0, (byte) 10);"
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,126,ssertNotNull(r3.toString());
False,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,127,ssertNotNull(r3.toString());

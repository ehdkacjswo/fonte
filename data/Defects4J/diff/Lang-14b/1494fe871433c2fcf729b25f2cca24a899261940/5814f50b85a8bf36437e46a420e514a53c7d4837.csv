is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,4, Copyright (c) 2002 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,5, reserved.
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,9, are met:
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,17,    distribution.
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,32,"    nor may ""Apache"" appear in their names without prior written"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,54,ackage org.apache.commons.lang.reflect;
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,56,mport java.lang.reflect.Constructor;
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,57,mport java.lang.reflect.Modifier;
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,59,mport org.apache.commons.lang.ArrayUtils;
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,61, <p><code>ConstructorUtils</code> contains utility methods for working for
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,62, constructors by reflection.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,64, <p>The ability is provided to break the scoping restrictions coded by the
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,65," programmer. This can allow classes to be created that shouldn't be, for"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,66," example new instances of an enumerated type. Thus, this facility should"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,67, be used with care.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,69," @author <a href=""mailto:scolebourne@apache.org"">Stephen Colebourne</a>"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,70," @version $Id: ConstructorUtils.java,v 1.3 2003/08/18 02:22:25 bayard Exp $"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,72,ublic class ConstructorUtils {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,75, An empty constructor array.
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,77,ublic static final Constructor[] EMPTY_CONSTRUCTOR_ARRAY = new Constructor[0];
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,80, <p>ConstructorUtils instances should NOT be constructed in standard programming.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,82," <p>Instead, the class should be used as <code>ConstructorUtils.newInstance(...)</code>."
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,83, This constructor is public to permit tools that require a JavaBean instance
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,84, to operate.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,86,ublic ConstructorUtils() {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,92, <p>Gets a public <code>Constructor</code> object by matching the
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,93, parameter types as per the Java Language Specification.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,95," @param cls  Class object to find constructor for, must not"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,96,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,97, @param types  array of Class objects representing parameter
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,98,"  types, may be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,99, @return Constructor object
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,100, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,101, @throws IllegalArgumentException if the class is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,103,"ublic static Constructor getConstructor(Class cls, Class[] types) {"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,104,"eturn getConstructor(cls, types, false);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,108, <p>Gets a public <code>Constructor</code> object by matching the
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,109, parameter types as per the Java Language Specification.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,111," @param cls  Class object to find constructor for, must not"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,112,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,113, @param types  array of Class objects representing parameter
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,114,"  types, may be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,115, @param breakScope  whether to break scope restrictions using
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,116,  the <code>setAccessible</code> method. <code>False</code> will
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,117,  only match public methods.
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,118, @return Constructor object
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,119, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,120, @throws IllegalArgumentException if the class is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,122,"ublic static Constructor getConstructor(Class cls, Class[] types, boolean breakScope) {"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,123,f (cls == null) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,124,"hrow new IllegalArgumentException(""The class must not be null"");"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,126,/ try exact call first for speed
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,127,ry {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,128,"etConstructorExact(cls, types, breakScope);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,130, catch (ReflectionException ex) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,131,f (types == null || types.length == 0) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,132,hrow ex;
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,134,f (ex.getCause() instanceof NoSuchMethodException == false) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,135,hrow ex;
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,138,/ try to find best match
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,139,ry {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,140,onstructor[] cons = cls.getDeclaredConstructors();
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,141,or (int i = 0; i < cons.length; i++) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,142,f (cons[i].getParameterTypes().length == types.length) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,143,/ TODO
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,146,eturn null;
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,148, catch (ReflectionException ex) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,149,hrow ex;
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,150, catch (LinkageError ex) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,151,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,152,"x, ""getting constructor"", cls.getName(), types, null), ex);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,153, catch (Exception ex) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,154,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,155,"x, ""getting constructor"", cls.getName(), types, null), ex);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,162, <p>Gets a public <code>Constructor</code> object by exactly matching the
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,163, parameter types.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,165," @param cls  Class object to find constructor for, must not"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,166,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,167, @param types  array of Class objects representing parameter
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,168,"  types, may be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,169, @return Constructor object
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,170, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,171, @throws IllegalArgumentException if the class is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,173,"ublic static Constructor getConstructorExact(Class cls, Class[] types) {"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,174,"eturn getConstructorExact(cls, types, false);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,178, <p>Gets a <code>Constructor</code> object by exactly matching the
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,179, parameter types.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,181," @param cls  Class object to find constructor for, must not"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,182,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,183," @param types  array of Class objects representing parameter types, may"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,184,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,185, @param breakScope  whether to break scope restrictions using the
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,186,  <code>setAccessible</code> method. False will only match public methods.
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,187, @return Constructor object
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,188, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,189, @throws IllegalArgumentException if the class is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,191,"ublic static Constructor getConstructorExact(Class cls, Class[] types, boolean breakScope) {"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,192,f (cls == null) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,193,"hrow new IllegalArgumentException(""The class must not be null"");"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,195,ry {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,196,f (breakScope) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,197,onstructor con = cls.getDeclaredConstructor(types);
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,198,f (Modifier.isPublic(con.getModifiers()) == false) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,199,on.setAccessible(true);
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,201,eturn con;
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,203, else {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,204,eturn cls.getConstructor(types);
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,207, catch (ReflectionException ex) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,208,hrow ex;
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,209, catch (LinkageError ex) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,210,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,211,"x, ""getting constructor"", cls.getName(), types, null), ex);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,212, catch (Exception ex) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,213,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,214,"x, ""getting constructor"", cls.getName(), types, null), ex);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,221, <p>Creates a new instance using a <code>Constructor</code> and parameters.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,223," @param con  Class object to find constructor for, must not"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,224,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,225," @param param  the single parameter to pass to the constructor, may"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,226,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,227, @return the newly created object
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,228, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,229, @throws IllegalArgumentException if the constructor is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,231,"ublic static Object newInstance(Constructor con, Object param) {"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,232,"eturn newInstance(con, new Object[] {param}, false);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,236, <p>Creates a new instance using a <code>Constructor</code> and parameters.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,238," @param con  Class object to find constructor for, must not"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,239,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,240," @param params  array of objects to pass as parameters, may"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,241,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,242, @return the newly created object
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,243, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,244, @throws IllegalArgumentException if the constructor is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,246,"ublic static Object newInstance(Constructor con, Object[] params) {"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,247,"eturn newInstance(con, params, false);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,251, <p>Creates a new instance using a <code>Constructor</code> and parameters.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,253," @param con  Class object to find constructor for, must not"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,254,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,255," @param params  array of objects to pass as parameters, may"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,256,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,257, @param breakScope  whether to break scope restrictions using the
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,258,  <code>setAccessible</code> method. <code>False</code> will only
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,259,  match public methods.
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,260, @return the newly created object
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,261, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,262, @throws IllegalArgumentException if the constructor is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,264,"ublic static Object newInstance(Constructor con, Object[] params, boolean breakScope) {"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,265,f (con == null) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,266,"hrow new IllegalArgumentException(""The constructor must not be null"");"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,268,ry {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,269,f (breakScope && Modifier.isPublic(con.getModifiers()) == false) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,270,on.setAccessible(true);
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,272,eturn con.newInstance(params);
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,274, catch (ReflectionException ex) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,275,hrow ex;
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,276, catch (LinkageError ex) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,277,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,278,"x, ""invoking constructor"", con.getDeclaringClass().getName(), con.getParameterTypes(), null), ex);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,279, catch (Exception ex) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,280,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,281,"x, ""invoking constructor"", con.getDeclaringClass().getName(), con.getParameterTypes(), null), ex);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,288, <p>Creates a new instance of the specified <code>Class</code> by name.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,290," @param className  String class name to instantiate, must not be empty"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,291, @return the newly created object
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,292, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,293, @throws IllegalArgumentException if the class name is empty
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,295,ublic static Object newInstance(String className) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,296,"eturn newInstance(className, false);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,300, <p>Creates a new instance of the specified <code>Class</code> by name.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,302," <p>If the constructor is not public, <code>setAccessible(true)</code>"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,303, is used to make it accessible.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,305," @param className  String class name to instantiate, must not be empty"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,306, @param breakScope  whether to break scope restrictions using the
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,307,  <code>setAccessible</code> method. False will only match public methods.
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,308, @return the newly created object
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,309, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,310, @throws IllegalArgumentException if the class name is empty
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,312,"ublic static Object newInstance(String className, boolean breakScope) {"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,313,lass cls = ReflectionUtils.getClass(className);
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,314,"eturn newInstance(cls, breakScope);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,320, <p>Creates a new instance of the specified <code>Class</code>.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,322," @param cls  Class object to instantiate, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,323, @return the newly created object
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,324, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,325, @throws IllegalArgumentException if the class is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,327,ublic static Object newInstance(Class cls) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,328,"eturn newInstance(cls, false);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,332, <p>Creates a new instance of the specified <code>Class</code>.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,334," <p>If the constructor is not public, <code>setAccessible(true)</code>"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,335, is used to make it accessible.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,337," @param cls  Class object to instantiate, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,338, @param breakScope  whether to break scope restrictions using the
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,339,  <code>setAccessible</code> method. <code>False</code> will only
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,340,  match public methods.
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,341, @return the newly created object
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,342, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,343, @throws IllegalArgumentException if the class is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,345,"ublic static Object newInstance(Class cls, boolean breakScope) {"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,346,f (breakScope) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,347,"eturn newInstanceExact(cls, null, null, true);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,349, else {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,350,f (cls == null) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,351,"hrow new IllegalArgumentException(""The constructor must not be null"");"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,353,ry {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,354,eturn cls.newInstance();
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,356, catch (ReflectionException ex) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,357,hrow ex;
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,358, catch (LinkageError ex) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,359,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,360,"x, ""instantiating class"", cls.getName(), null, null), ex);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,361, catch (Exception ex) {
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,362,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,363,"x, ""instantiating class"", cls.getName(), null, null), ex);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,371, <p>Creates a new instance of the specified <code>Class</code>.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,373, <p>The constructor is found by matching the
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,374, parameter types as per the Java Language Specification.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,376," @param cls  Class object to instantiate, must not"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,377,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,378," @param types  array of Class objects representing parameter types,"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,379,  may be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,380," @param params  array of objects to pass as parameters, may"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,381,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,382, @return the newly created object
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,383, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,384, @throws IllegalArgumentException if the class is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,386,"ublic static Object newInstance(Class cls, Class[] types, Object[] params) {"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,387,"eturn newInstance(cls, types, params, false);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,391, <p>Creates a new instance of the specified <code>Class</code>.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,393, <p>The constructor is found by matching the
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,394, parameter types as per the Java Language Specification.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,396," @param cls  Class object to instantiate, must not"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,397,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,398," @param types  array of Class objects representing parameter types,"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,399,  may be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,400," @param params  array of objects to pass as parameters, may"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,401,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,402, @param breakScope  whether to break scope restrictions using the
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,403,  <code>setAccessible</code> method. <code>False</code> will only
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,404,  match public methods.
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,405, @return the newly created object
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,406, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,407, @throws IllegalArgumentException if the types and params lengths differ
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,408, @throws IllegalArgumentException if the class is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,410,"ublic static Object newInstance(Class cls, Class[] types, Object[] params, boolean breakScope) {"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,411,"f (ArrayUtils.isSameLength(types, params) == false) {"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,412,"hrow new IllegalArgumentException(""The types and params lengths must be the same"");"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,414,"onstructor con = getConstructor(cls, types, breakScope);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,415,"eturn newInstance(con, params, breakScope);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,421, <p>Creates a new instance of the specified <code>Class</code>.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,423, <p>The constructor is found by matching the parameter types exactly.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,425," @param cls  Class object to instantiate, must not"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,426,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,427," @param types  array of Class objects representing parameter types,"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,428,  may be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,429," @param params  array of objects to pass as parameters, may"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,430,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,431, @return the newly created object
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,432, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,433, @throws IllegalArgumentException if the class is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,435,"ublic static Object newInstanceExact(Class cls, Class[] types, Object[] params) {"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,436,"eturn newInstanceExact(cls, types, params, false);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,440, <p>Creates a new instance of the specified <code>Class</code>.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,442, <p>The constructor is found by matching the parameter types exactly.</p>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,444," @param cls  Class object to instantiate, must not"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,445,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,446," @param types  array of Class objects representing parameter types,"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,447,  may be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,448," @param params  array of objects to pass as parameters, may"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,449,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,450, @param breakScope  whether to break scope restrictions using the
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,451,  <code>setAccessible</code> method. <code>False</code> will only match
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,452,  public methods.
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,453, @return the newly created object
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,454, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,455, @throws IllegalArgumentException if the types and params lengths differ
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,456, @throws IllegalArgumentException if the class is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,458,"ublic static Object newInstanceExact(Class cls, Class[] types, Object[] params, boolean breakScope) {"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,459,"f (ArrayUtils.isSameLength(types, params) == false) {"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,460,"hrow new IllegalArgumentException(""The types and params lengths must be the same"");"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,462,"onstructor con = getConstructorExact(cls, types, breakScope);"
False,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,463,"eturn newInstance(con, params, breakScope);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,4, Copyright (c) 2002 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,5, reserved.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,9, are met:
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,17,    distribution.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,32,"    nor may ""Apache"" appear in their names without prior written"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,54,ackage org.apache.commons.lang.reflect;
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,56,mport java.lang.reflect.Field;
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,57,mport java.lang.reflect.Modifier;
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,59, <p><code>FieldUtils</code> contains utility methods for working with
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,60, fields by reflection.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,62, <p>The ability is provided to break the scoping restrictions coded by the
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,63, programmer. This can allow fields to be changed that shouldn't be. This
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,64, facility should be used with care.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,66," @author <a href=""mailto:scolebourne@apache.org"">Stephen Colebourne</a>"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,67," @version $Id: FieldUtils.java,v 1.4 2003/09/07 14:32:35 psteitz Exp $"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,69,ublic class FieldUtils {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,72, An empty field array.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,74,ublic static final Field[] EMPTY_FIELD_ARRAY = new Field[0];
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,77, <p>FieldUtils instances should NOT be constructed in standard programming.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,79," <p>Instead, the class should be used as <code>FieldUtils.getField(cls, name)</code>."
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,80, This constructor is public to permit tools that require a JavaBean instance
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,81, to operate.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,83,ublic FieldUtils() {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,89, <p>Gets an accessible <code>Field</code> by name respecting scope.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,90, Superclasses/interfaces will be considered.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,92," @param cls  the class to reflect, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,93, @param fieldName  the field name to obtain
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,94, @return the Field object
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,95, @throws IllegalArgumentException if the class or field name
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,96,  is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,97, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,99,"ublic static Field getField(Class cls, String fieldName) {"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,100,"eturn getField(cls, fieldName, false);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,104, <p>Gets an accessible <code>Field</code> by name breaking scope
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,105, if requested. Superclasses/interfaces will be considered.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,107," @param cls  the class to reflect, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,108, @param fieldName  the field name to obtain
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,109, @param breakScope  whether to break scope restrictions using the
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,110,  <code>setAccessible</code> method. <code>False</code> will only
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,111,  match public fields.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,112, @return the Field object
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,113, @throws IllegalArgumentException if the class or field name
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,114,  is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,115, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,117,"ublic static Field getField(Class cls, String fieldName, boolean breakScope) {"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,118,f (cls == null) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,119,"hrow new IllegalArgumentException(""The class must not be null"");"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,121,f (fieldName == null) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,122,"hrow new IllegalArgumentException(""The field name must not be null"");"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,124,/ Sun Java 1.3 has a bugged implementation of getField hence we write the
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,125,/ code ourselves
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,127,/ getField() will return the Field object with the declaring class
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,128,/ set correctly to the class that declares the field. Thus requesting the
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,129,/ field on a subclass will return the field from the superclass.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,131,/ priority order for lookup:
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,132,/ searchclass private/protected/package/public
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,133,/ superclass protected/package/public
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,134,/  private/different package blocks access to further superclasses
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,135,/ implementedinterface public
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,136,ry {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,137,/ check up the superclass hierarchy
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,138,lass acls = cls;
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,139,ield match = null;
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,140,hile (acls != null && acls != Object.class) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,141,/ getDeclaredField checks for non-public scopes as well
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,142,/ and it returns accurate results
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,143,ry {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,144,ield field = acls.getDeclaredField(fieldName);
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,145,f (Modifier.isPublic(field.getModifiers()) == false) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,146,ield.setAccessible(breakScope);
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,147,eturn field;
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,149,f (breakScope == false) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,150,/ only public acceptable if not breaking scope
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,151,"hrow new IllegalAccessException(""The field '"" + fieldName +"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,152,"' was found, but it's scope prevents direct access by reflection"");"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,154,ield.setAccessible(true);
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,155,atch = field;
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,156,reak;
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,158, catch (NoSuchFieldException ex) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,159,/ ignore
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,161,/ next superclass
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,162,cls = acls.getSuperclass();
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,164,/ check the public interface case. This must be manually searched for
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,165,/ incase there is a public supersuperclass field hidden by a private/package
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,166,/ superclass field.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,167,/ check up the superclass hierarchy
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,168,lass[] ints = cls.getInterfaces();
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,169,or (int i = 0; i < ints.length; i++) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,170,"/ getField is fine here, because everything is public, and thus it works"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,171,ry {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,172,ield field = ints[i].getField(fieldName);
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,173,eturn field;
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,175, catch (NoSuchFieldException ex) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,176,/ ignore
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,179,f (match != null) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,180,eturn match;
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,182,"hrow new NoSuchFieldException(""The field '"" + fieldName + ""' could not be found"");"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,184, catch (ReflectionException ex) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,185,hrow ex;
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,186, catch (LinkageError ex) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,187,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,188,"x, ""getting field"", cls.getName(), null, fieldName), ex);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,189, catch (Exception ex) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,190,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,191,"x, ""getting field"", cls.getName(), null, fieldName), ex);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,198, <p>Gets an accessible <code>Field</code> by name respecting scope.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,199, Only the specified class will be considered.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,201," @param cls  the class to reflect, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,202, @param fieldName  the field name to obtain
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,203, @return the Field object
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,204, @throws IllegalArgumentException if the class or field name
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,205,  is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,206, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,208,"ublic static Field getFieldExact(Class cls, String fieldName) {"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,209,"eturn getFieldExact(cls, fieldName, false);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,213, <p>Gets an accessible <code>Field</code> by name breaking scope
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,214, if requested. Only the specified class will be considered.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,216," @param cls  the class to reflect, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,217, @param fieldName  the field name to obtain
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,218, @param breakScope  whether to break scope restrictions using the
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,219,  <code>setAccessible</code> method. False will only match public fields.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,220, @return the Field object
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,221, @throws IllegalArgumentException if the class or field name
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,222,  is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,223, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,225,"ublic static Field getFieldExact(Class cls, String fieldName, boolean breakScope) {"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,226,f (cls == null) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,227,"hrow new IllegalArgumentException(""The class must not be null"");"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,229,f (fieldName == null) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,230,"hrow new IllegalArgumentException(""The field name must not be null"");"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,232,ry {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,233,/ only consider the specified class by using getDeclaredField()
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,234,ield field = cls.getDeclaredField(fieldName);
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,235,f (Modifier.isPublic(field.getModifiers()) == false) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,236,f (breakScope) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,237,ield.setAccessible(true);
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,238, else {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,239,"hrow new IllegalAccessException(""The field '"" + fieldName + ""' was found, but it's scope prevents direct access by reflection"");"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,242,eturn field;
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,244, catch (ReflectionException ex) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,245,hrow ex;
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,246, catch (LinkageError ex) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,247,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,248,"x, ""getting field"", cls.getName(), null, fieldName), ex);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,249, catch (Exception ex) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,250,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,251,"x, ""getting field"", cls.getName(), null, fieldName), ex);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,258, <p>Gets a static Field value from a <code>Field</code> object.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,260, @param field  the field to use
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,261, @return the field value
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,262, @throws IllegalArgumentException if the field is
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,263,  <code>null</code> or not static
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,264, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,266,ublic static Object getStaticFieldValue(Field field) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,267,f (field == null) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,268,"hrow new IllegalArgumentException(""The field must not be null"");"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,270,f (Modifier.isStatic(field.getModifiers()) == false) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,271,"hrow new IllegalArgumentException(""The field '"" + field.getName() + ""' is not static"");"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,273,"eturn getFieldValue(field, (Object) null, false);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,277, <p>Gets a static Field value from a <code>Field</code> object.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,279, @param field  the field to use
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,280, @param breakScope  whether to break scope restrictions using the
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,281,  <code>setAccessible</code> method. <code>False</code> will only
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,282,  match public methods.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,283, @return the field value
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,284, @throws IllegalArgumentException if the field is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,285,  or not static
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,286, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,288,"ublic static Object getStaticFieldValue(Field field, boolean breakScope) {"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,289,f (field == null) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,290,"hrow new IllegalArgumentException(""The field must not be null"");"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,292,f (Modifier.isStatic(field.getModifiers()) == false) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,293,"hrow new IllegalArgumentException(""The field '"" + field.getName() + ""' is not static"");"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,295,"eturn getFieldValue(field, (Object) null, breakScope);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,299, <p>Gets a Field value from a <code>Field</code> object.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,301, @param field  the field to use
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,302," @param object  the object to call on, may be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,303,  for static fields
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,304, @return the field value
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,305, @throws IllegalArgumentException if the field is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,306, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,308,"ublic static Object getFieldValue(Field field, Object object) {"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,309,"eturn getFieldValue(field, object, false);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,313, <p>Gets a Field value from a Field object.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,315, @param field  the field to use
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,316," @param object  the object to call on, may be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,317,  for static fields
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,318, @param breakScope  whether to break scope restrictions using the
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,319,  <code>setAccessible</code> method. <code>False</code> will only
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,320,  match public methods.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,321, @return the field value
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,322, @throws IllegalArgumentException if the field is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,323, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,325,"ublic static Object getFieldValue(Field field, Object object, boolean breakScope) {"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,326,f (field == null) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,327,"hrow new IllegalArgumentException(""The field must not be null"");"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,329,ry {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,330,f (breakScope && Modifier.isPublic(field.getModifiers()) == false) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,331,ield.setAccessible(true);
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,333,eturn field.get(object);
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,335, catch (ReflectionException ex) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,336,hrow ex;
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,337, catch (LinkageError ex) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,338,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,339,"x, ""getting field value"", field.getDeclaringClass().getName(), null, field.getName()), ex);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,340, catch (Exception ex) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,341,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,342,"x, ""getting field value"", field.getDeclaringClass().getName(), null, field.getName()), ex);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,349, <p>Gets a static Field value by name. The field must be public.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,350, Superclasses will be considered.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,352," @param cls  the class to reflect, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,353, @param fieldName  the field name to obtain
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,354, @return the value of the field
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,355, @throws IllegalArgumentException if the class or field name
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,356,  is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,357, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,359,"ublic static Object getStaticFieldValue(Class cls, String fieldName) {"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,360,"eturn getStaticFieldValue(cls, fieldName, false);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,364, <p>Gets a static Field value by name. Only the specified class
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,365, will be considered.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,367," @param cls  the class to reflect, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,368, @param fieldName  the field name to obtain
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,369, @param breakScope  whether to break scope restrictions using the
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,370,  <code>setAccessible</code> method. <code>False</code> will only
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,371,  match public fields.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,372, @return the Field object
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,373, @throws IllegalArgumentException if the class or field name
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,374,  is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,375, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,377,"ublic static Object getStaticFieldValue(Class cls, String fieldName, boolean breakScope) {"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,378,ry {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,379,"ield field = getField(cls, fieldName, breakScope);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,380,f (Modifier.isStatic(field.getModifiers()) == false) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,381,"hrow new NoSuchMethodException(""The field '"" + fieldName + ""' is not static"");"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,383,"eturn getStaticFieldValue(field, breakScope);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,385, catch (ReflectionException ex) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,386,hrow ex;
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,387, catch (LinkageError ex) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,388,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,389,"x, ""getting field value"", cls.getName(), null, fieldName), ex);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,390, catch (Exception ex) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,391,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,392,"x, ""getting field value"", cls.getName(), null, fieldName), ex);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,399, <p>Gets a static Field value by name. The field must be public.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,400, Only the specified class will be considered.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,402," @param cls  the class to reflect, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,403, @param fieldName  the field name to obtain
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,404, @return the value of the field
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,405, @throws IllegalArgumentException if the class or field name
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,406,  is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,407, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,409,"ublic static Object getStaticFieldValueExact(Class cls, String fieldName) {"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,410,"eturn getStaticFieldValueExact(cls, fieldName, false);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,414, <p>Gets a static Field value by name. Only the specified class will
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,415, be considered.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,417," @param cls  the class to reflect, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,418, @param fieldName  the field name to obtain
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,419, @param breakScope  whether to break scope restrictions using the
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,420,  <code>setAccessible</code> method. <code>False</code> will only
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,421,  match public fields.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,422, @return the Field object
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,423, @throws IllegalArgumentException if the class or field name
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,424,  is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,425, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,427,"ublic static Object getStaticFieldValueExact(Class cls, String fieldName, boolean breakScope) {"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,428,ry {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,429,"ield field = getFieldExact(cls, fieldName, breakScope);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,430,f (Modifier.isStatic(field.getModifiers()) == false) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,431,"hrow new NoSuchMethodException(""The field '"" + fieldName + ""' is not static"");"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,433,"eturn getStaticFieldValue(field, breakScope);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,435, catch (ReflectionException ex) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,436,hrow ex;
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,437, catch (LinkageError ex) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,438,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,439,"x, ""getting field value"", cls.getName(), null, fieldName), ex);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,440, catch (Exception ex) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,441,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,442,"x, ""getting field value"", cls.getName(), null, fieldName), ex);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,449, <p>Gets a Field value by name. The field must be public. Superclasses
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,450, will be considered.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,452," @param object  the object to reflect, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,453, @param fieldName  the field name to obtain
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,454, @return the value of the field
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,455, @throws IllegalArgumentException if the class or field name
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,456,  is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,457, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,459,"ublic static Object getFieldValue(Object object, String fieldName) {"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,460,"eturn getFieldValue(object, fieldName, false);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,464, <p>Gets a Field value by name. Only the specified class will be
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,465, considered.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,467," @param object  the object to reflect, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,468, @param fieldName  the field name to obtain
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,469, @param breakScope  whether to break scope restrictions using the
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,470,  <code>setAccessible</code> method. <code>False</code> will only
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,471,  match public fields.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,472, @return the Field object
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,473, @throws IllegalArgumentException if the class or field name
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,474,  is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,475, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,477,"ublic static Object getFieldValue(Object object, String fieldName, boolean breakScope) {"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,478,"ield field = getField(object.getClass(), fieldName, breakScope);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,479,"eturn getFieldValue(field, object, breakScope);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,485, <p>Gets a Field value by name. The field must be public.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,486, Only the class of the specified object will be considered.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,488," @param object  the object to reflect, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,489, @param fieldName  the field name to obtain
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,490, @return the value of the field
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,491, @throws IllegalArgumentException if the class or field name
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,492,  is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,493, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,495,"ublic static Object getFieldValueExact(Object object, String fieldName) {"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,496,"eturn getFieldValueExact(object, fieldName, false);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,500, <p<>Gets a Field value by name. Only the class of the specified
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,501, object will be considered.</p>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,503," @param object  the object to reflect, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,504, @param fieldName  the field name to obtain
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,505, @param breakScope  whether to break scope restrictions using the
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,506,  <code>setAccessible</code> method. <code>False</code> will only
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,507,  match public fields.
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,508, @return the Field object
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,509, @throws IllegalArgumentException if the class or field name
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,510,  is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,511, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,513,"ublic static Object getFieldValueExact(Object object, String fieldName, boolean breakScope) {"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,514,"ield field = getFieldExact(object.getClass(), fieldName, breakScope);"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,515,"eturn getFieldValue(field, object, breakScope);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,4, Copyright (c) 2002 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,5, reserved.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,9, are met:
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,17,    distribution.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,32,"    nor may ""Apache"" appear in their names without prior written"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,54,ackage org.apache.commons.lang.reflect;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,56,mport java.lang.reflect.InvocationTargetException;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,57,mport java.lang.reflect.Method;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,58,mport java.lang.reflect.Modifier;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,59,mport java.util.ArrayList;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,61,mport org.apache.commons.lang.ArrayUtils;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,63, <p><code>MethodUtils</code> contains utility methods for working for
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,64, methods by reflection.</p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,66, <p>The ability is provided to break the scoping restrictions coded by the
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,67, programmer. This can break an implementation if used incorrectly. This
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,68, facility should be used with care.</p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,70," @author <a href=""mailto:scolebourne@apache.org"">Stephen Colebourne</a>"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,71, @author Based on code from <code>BeanUtils</code> by: Craig R. McClanahan
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,72, @author Ralph Schaer
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,73, @author Chris Audley
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,74, @author Rey Fran�ois
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,75, @author Gregor Ra�man
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,76, @author Jan Sorensen
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,77, @author Robert Burrell Donkin
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,78, @author Gary Gregory
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,79," @version $Id: MethodUtils.java,v 1.17 2003/09/13 03:11:30 psteitz Exp $"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,81,ublic class MethodUtils {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,84, Debug flag.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,86,ublic static final boolean debug = false;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,89, An empty method array.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,91,ublic static final Method[] EMPTY_METHOD_ARRAY = new Method[0];
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,94, <p>MethodUtils instances should NOT be constructed in standard programming.</p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,96," <p>Instead, the class should be used as <code>MethodUtils.getMethod(cls, name)</code>."
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,97, This constructor is public to permit tools that require a JavaBean instance
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,98, to operate.</p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,100,ublic MethodUtils() {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,106, <p>Gets a <code>Method</code> by name. The method must be public and take
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,107, no parameters. Superclasses will be considered.</p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,109," @param cls  the class to reflect, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,110, @param methodName  the field name to obtain
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,111, @return the Method object
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,112, @throws IllegalArgumentException if the class or method name
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,113,  is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,114, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,116,"ublic static Method getMethod(Class cls, String methodName) {"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,117,"eturn getMethod(cls, methodName, ArrayUtils.EMPTY_CLASS_ARRAY, false);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,121, <p>Gets a <code>Method</code> by name. The method must be public.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,122, Superclasses will be considered.</p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,124," @param cls  the class to reflect, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,125, @param methodName  the field name to obtain
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,126, @param paramType  the class of the parameter
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,127, @return the Method object
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,128, @throws IllegalArgumentException if the class or method name
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,129,  is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,130, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,132,"ublic static Method getMethod(Class cls, String methodName, Class paramType) {"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,133,lass[] paramTypes = {paramType};
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,134,"eturn getMethod(cls, methodName, paramTypes);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,138, <p>Gets a <code>Method</code> by name.</p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,140, <p>The method must be public.  Superclasses will be considered.</p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,142," @param cls  the class to reflect, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,143, @param methodName  the field name to obtain
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,144, @param paramTypes  the classes of the parameters
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,145, @return the Method object
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,146, @throws IllegalArgumentException if the class or method name
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,147,  is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,148, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,150,"ublic static Method getMethod(Class cls, String methodName, Class[] paramTypes) {"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,151,"eturn getMethod(cls, methodName, paramTypes, false);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,155, <p>Gets a <code>Method</code> by name. Superclasses will be considered.</p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,157," @param cls  the class to reflect, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,158, @param methodName  the method name to obtain
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,159, @param paramTypes  the classes of the parameters
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,160, @param breakScope  whether to break scope restrictions using the
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,161,  <code>setAccessible</code> method. <code>False</code> will only
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,162,  match public fields.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,163, @return the Method object
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,164, @throws IllegalArgumentException if the class or field name
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,165,  is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,166, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,168,"ublic static Method getMethod(Class cls, String methodName, Class[] paramTypes, boolean breakScope) {"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,169,f (cls == null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,170,"hrow new IllegalArgumentException(""The class must not be null"");"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,172,f (methodName == null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,173,"hrow new IllegalArgumentException(""The method name must not be null"");"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,175,ry {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,176,f (breakScope) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,177,ry {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,178,"/ most common case, always do this for speed"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,179,"eturn cls.getMethod(methodName, paramTypes);  // must be public"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,180, catch (NoSuchMethodException ex) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,181,/ ignore
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,183,lass acls = cls;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,184,hile (acls != null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,185,ethod[] methods = acls.getDeclaredMethods();
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,186,or (int i = 0; i < methods.length; i++) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,187,f (methods[i].getName().equals(methodName) &&
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,188,"eflectionUtils.isCompatible(paramTypes, methods[i].getParameterTypes())) {"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,189,f (Modifier.isPublic(methods[i].getModifiers())) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,190,ethods[i].setAccessible(true);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,192,eturn methods[i];
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,195,cls = acls.getSuperclass();  // TODO interfaces
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,197,"hrow new NoSuchMethodException(""The method '"" + methodName + ""' could not be found"");"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,198, else {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,199,/ apply workarounds
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,200,ethod method = null;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,201,ry {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,203,"ethod = cls.getMethod(methodName, paramTypes);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,205, catch(NoSuchMethodException e) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,206,/ swallow
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,209,f (method == null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,210,/ use the same as beanutils for the moment
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,211,"ethod[] compatibles = getCompatibleMethods(cls, methodName, paramTypes);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,212,f (compatibles.length > 0) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,213,ethod = compatibles[0];
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,216,eturn getMethod(method);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,219, catch (ReflectionException ex) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,220,hrow ex;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,221, catch (LinkageError ex) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,222,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,223,"x, ""getting method"", cls.getName(), null, methodName), ex);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,224, catch (Exception ex) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,225,hrow new ReflectionException(ReflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,226,"x, ""getting method"", cls.getName(), null, methodName), ex);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,231," <p>Return an accessible method (that is, one that can be invoked via"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,232, reflection) that implements the specified <code>Method</code>. If
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,233," no such method can be found, return <code>null</code>.</p>"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,235, @param method The method that we wish to call
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,236, @return Method
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,238,ublic static Method getMethod(Method method) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,240,ethod accessibleMethod = getAccessibleMethod(method);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,241,f (accessibleMethod == null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,242,ry {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,244,/ XXX Default access superclass workaround
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,246,/ When a public class has a default access superclass
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,247,"/ with public methods, these methods are accessible."
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,248,/ Calling them from compiled code works fine.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,250,"/ Unfortunately, using reflection to invoke these methods"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,251,/ seems to (wrongly) to prevent access even when the method
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,252,/ modifer is public.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,254,/ The following workaround solves the problem but will only
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,255,/ work from sufficiently privileges code.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,257,/ Better workarounds would be gratefully accepted.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,259,f (ReflectionUtils.isPublicScope(method)) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,260,ethod.setAccessible(true);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,261,ccessibleMethod = method;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,264, catch (SecurityException se) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,265,/ log but continue just in case the method.invoke works anyway
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,266,og(
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,267,"Cannot setAccessible on method. Therefore cannot use jvm access bug workaround."","
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,268,e);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,271,eturn (accessibleMethod);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,278, <p>Invoke a named method whose parameter type matches the object type.</p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,280, <p>This method supports calls to methods taking primitive parameters
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,281," via passing in wrapping classes. So, for example, a <code>Boolean</code> class"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,282, would match a <code>boolean</code> primitive.</p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,284, <p> This is a convenient wrapper for
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,285," {@link #invokeMethod(Object object,String methodName,Object [] args)}."
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,286, </p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,288," @param objectToInvoke  invoke method on this object, must"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,289,  not be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,290," @param methodName  get method with this name, must not"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,291,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,292," @param arg  use this argument, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,293, @return Object
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,294, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,295, @throws IllegalArgumentException if any parameter is
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,296,  <code>null</code>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,298,ublic static Object invokeMethod(
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,299,"bject objectToInvoke,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,300,"tring methodName,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,301,bject arg)
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,302,hrows
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,303,eflectionException {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,305,f (objectToInvoke == null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,306,"hrow new IllegalArgumentException(""The object to invoke must not be null"");"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,308,f (methodName == null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,309,"hrow new IllegalArgumentException(""The method name must not be null"");"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,311,f (arg == null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,312,"hrow new IllegalArgumentException(""The argument must not be null"");"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,314,bject[] args = {arg};
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,315,"eturn invokeMethod(objectToInvoke, methodName, args);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,319, <p>Invoke a named method whose parameter type matches the object type.</p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,321, <p>This method supports calls to methods taking primitive parameters
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,322," via passing in wrapping classes. So, for example, a <code>Boolean</code> class"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,323, would match a <code>boolean</code> primitive.</p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,325, <p> This is a convenient wrapper for
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,326," {@link #invokeMethod(Object object, String methodName, Object[] args, Class[] parameterTypes)}."
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,327, </p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,329," @param objectToInvoke  invoke method on this object, must not"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,330,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,331," @param methodName  get method with this name, must not"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,332,  be <code>null</code>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,333, @param args  use these arguments - treat <code>null</code>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,334,  as empty array
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,335, @return Object
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,336, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,337," @throws IllegalArgumentException if the objectToInvoke, methodName"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,338,  or any argument is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,340,ublic static Object invokeMethod(
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,341,"bject objectToInvoke,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,342,"tring methodName,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,343,bject[] args)
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,344,hrows
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,345,eflectionException {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,347,f (objectToInvoke == null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,348,"hrow new IllegalArgumentException(""The object to invoke must not be null"");"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,350,f (methodName == null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,351,"hrow new IllegalArgumentException(""The method name must not be null"");"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,353,f (args == null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,354,"eturn invokeMethod(objectToInvoke, methodName, null, null);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,355, else {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,356,nt arguments = args.length;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,357,lass parameterTypes [] = new Class[arguments];
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,358,or (int i = 0; i < arguments; i++) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,359,f (args[i] == null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,360,"hrow new IllegalArgumentException(""The arguments must not be null. Index "" + i + "" was null."");"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,362,arameterTypes[i] = args[i].getClass();
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,364,"eturn invokeMethod(objectToInvoke, methodName, args, parameterTypes);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,369, <p>Invoke a named method whose parameter type matches the object type.</p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,371, <p>This method supports calls to methods taking primitive parameters
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,372," via passing in wrapping classes. So, for example, a <code>Boolean</code> class"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,373, would match a <code>boolean</code> primitive.</p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,376, @param object  invoke method on this object
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,377, @param methodName  get method with this name
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,378, @param args  use these arguments - treat null as empty array
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,379, @param parameterTypes  match these parameters - treat
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,380,  <code>null</code> as empty array
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,381, @return Object
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,382, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,384,ublic static Object invokeMethod(
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,385,"bject object,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,386,"tring methodName,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,387,"bject[] args,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,388,lass[] parameterTypes)
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,389,hrows
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,390,eflectionException {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,392,f (parameterTypes == null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,393,arameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,395,f (args == null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,396,rgs = ArrayUtils.EMPTY_OBJECT_ARRAY;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,399,ethod method = getMethod(
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,400,"bject.getClass(),"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,401,"ethodName,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,402,arameterTypes);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,403,f (method == null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,404,"hrow new ReflectionException(""No such accessible method: "" +"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,405,"ethodName + ""() on object: "" + object.getClass().getName());"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,408,ry {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,410,"eturn method.invoke(object, args);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,412, catch (IllegalAccessException ex) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,413,hrow new ReflectionException(
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,414,eflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,415,"x, ""invoking method"", object.getClass().getName(), parameterTypes, methodName)"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,416, ex);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,418, catch (InvocationTargetException ex) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,419,hrow new ReflectionException(
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,420,eflectionUtils.getThrowableText(
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,421,"x, ""invoking method"", object.getClass().getName(), parameterTypes, methodName)"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,422, ex);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,429,/ -------------------------------------------------------- Private Methods
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,431,rivate static Method getAccessibleMethod(Method method) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,433,/ Make sure we have a method to check
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,434,f (method == null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,435,eturn (null);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,438,/ If the requested method is not public we cannot call it
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,439,f (!Modifier.isPublic(method.getModifiers())) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,440,"og(""Method is not public"");"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,441,eturn (null);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,444,"/ If the declaring class is public, we are done"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,445,lass clazz = method.getDeclaringClass();
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,446,f (Modifier.isPublic(clazz.getModifiers())) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,447,"og(""Class is public"");"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,448,eturn (method);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,451,f (debug) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,452,"og(""Method is in non-public class "" + clazz);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,455,/ Check the implemented interfaces and subinterfaces
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,456,ethod =
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,457,"etAccessibleMethodFromInterfaceNest(clazz,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,458,"ethod.getName(),"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,459,ethod.getParameterTypes());
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,461,eturn (method);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,467," <p>Return an accessible method (that is, one that can be invoked via"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,468," reflection) that implements the specified method, by scanning through"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,469, all implemented interfaces and subinterfaces.  If no such method
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,470," can be found, return <code>null</code>.</p>"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,472, <p> There isn't any good reason why this method must be private.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,473, It is because there doesn't seem any reason why other classes should
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,474, call this rather than the higher level methods.</p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,476, @param clazz Parent class for the interfaces to be checked
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,477, @param methodName Method name of the method we wish to call
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,478, @param parameterTypes The parameter type signatures
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,480,rivate static Method getAccessibleMethodFromInterfaceNest
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,481,"Class clazz, String methodName, Class parameterTypes[]) {"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,482,f (debug) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,483,"og(""Finding accessible method "" + methodName + "" from interface nest"");"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,485,ethod method = null;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,487,/ Search up the superclass chain
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,488,or (; clazz != null; clazz = clazz.getSuperclass()) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,490,/ Check the implemented interfaces of the parent class
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,491,lass interfaces[] = clazz.getInterfaces();
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,492,or (int i = 0; i < interfaces.length; i++) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,494,/ Is this interface public?
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,495,f (!Modifier.isPublic(interfaces[i].getModifiers())) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,496,ontinue;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,499,/ Does the method exist on this interface?
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,500,ry {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,501,"ethod = interfaces[i].getDeclaredMethod(methodName,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,502,arameterTypes);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,503, catch (NoSuchMethodException e) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,504,/ empty
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,506,f (method != null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,507,reak;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,510,/ Recursively check our parent interfaces
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,511,ethod =
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,512,"etAccessibleMethodFromInterfaceNest(interfaces[i],"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,513,"ethodName,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,514,arameterTypes);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,515,f (method != null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,516,reak;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,523,/ If we found a method return it
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,524,f (method != null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,525,f (debug) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,526,"og(""Found method in class "" + method.getDeclaringClass());"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,528,eturn (method);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,530,/ We did not find anything
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,531,eturn (null);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,535,rivate static Method[] getCompatibleMethods(
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,536,"lass clazz,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,537,"tring methodName,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,538,lass[] parameterTypes) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,539,/ trace logging
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,540,f (debug) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,541,"og(""Matching name="" + methodName + "" on "" + clazz);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,544,/ search through all methods
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,545,ethod[] methods = clazz.getMethods();
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,546,rrayList compatibles = new ArrayList(methods.length);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,547,"or (int i = 0, size = methods.length; i < size ; i++) {"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,548,f (debug) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,549,"og(""Checking: "" + methods[i]);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,551,f (methods[i].getName().equals(methodName)) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,552,/ log some trace information
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,553,f (debug) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,554,"og(""Found matching name:"" + methods[i]);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,557,/ compare parameters
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,558,lass[] methodsParams = methods[i].getParameterTypes();
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,559,"f (ReflectionUtils.isCompatible(parameterTypes, methodsParams)) {"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,560,/ get accessible version of method
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,561,ethod method = getMethod(methods[i]);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,562,f (method != null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,563,ompatibles.add(method);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,564, else {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,565,"og(""Couldn't find accessible method for: "" + methods[i]);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,571,eturn (Method[]) compatibles.toArray(new Method[compatibles.size()]);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,574,rivate static void log(Object o) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,575,f (debug) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,576,ystem.err.println(o);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,580,"rivate static void log(Object o, Throwable t) {"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,581,f (debug) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,582,ystem.err.println(o);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,583,ystem.err.println(t);
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,4, Copyright (c) 2002 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,5, reserved.
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,9, are met:
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,17,    distribution.
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,32,"    nor may ""Apache"" appear in their names without prior written"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,54,ackage org.apache.commons.lang.reflect;
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,56,mport org.apache.commons.lang.exception.NestableRuntimeException;
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,58, <p>Exception thrown when the Reflection process fails. The original
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,59, error is wrapped within this one.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,61," @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,62," @version $Id: ReflectionException.java,v 1.3 2003/08/18 02:22:25 bayard Exp $"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,64,ublic class ReflectionException extends NestableRuntimeException {
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,67, <p>Constructs a new <code>ReflectionException</code> without specified
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,68, detail message.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,70,ublic ReflectionException() {
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,71,uper();
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,75, <p>Constructs a new <code>ReflectionException</code> with specified
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,76, detail message.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,78, @param msg  The error message.
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,80,ublic ReflectionException(String msg) {
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,81,uper(msg);
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,85, <p>Constructs a new <code>ReflectionException</code> with specified
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,86, nested <code>Throwable</code>.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,88, @param cause  The exception or error that caused this exception
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,89,  to be thrown.
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,91,ublic ReflectionException(Throwable cause) {
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,92,uper(cause);
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,96, <p>Constructs a new <code>ReflectionException</code> with specified
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,97, detail message and nested <code>Throwable</code>.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,99, @param msg  The error message.
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,100, @param cause  The exception or error that caused this exception
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,101,  to be thrown.
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,103,"ublic ReflectionException(String msg, Throwable cause) {"
False,src/java/org/apache/commons/lang/reflect/ReflectionException.java,src/java/org/apache/commons/lang/reflect/ReflectionException.java,104,"uper(msg, cause);"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,4, Copyright (c) 2002 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,5, reserved.
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,9, are met:
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,17,    distribution.
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,32,"    nor may ""Apache"" appear in their names without prior written"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,54,ackage org.apache.commons.lang.reflect;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,56,mport java.lang.reflect.InvocationTargetException;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,57,mport java.lang.reflect.Member;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,58,mport java.lang.reflect.Modifier;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,60,mport org.apache.commons.lang.ArrayUtils;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,61,mport org.apache.commons.lang.ClassUtils;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,62,mport org.apache.commons.lang.StringUtils;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,64, <p><code>ReflectionUtils</code> contains utility methods for working for
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,65, reflection.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,67," @author <a href=""mailto:scolebourne@apache.org"">Stephen Colebourne</a>"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,68," @version $Id: ReflectionUtils.java,v 1.11 2003/09/07 14:32:35 psteitz Exp $"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,70,ublic class ReflectionUtils {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,73, <p>ReflectionUtils instances should NOT be constructed in standard programming.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,75," <p>Instead, the class should be used as <code>ReflectionUtils.getShortClassName(obj)</code>."
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,76, This constructor is public to permit tools that require a JavaBean instance
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,77, to operate.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,79,ublic ReflectionUtils() {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,85, <p>Tests whether the specified field or method is
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,86, <code>static</code>.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,88," @param member  the member to test, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,89, @return <code>true</code> if the member is static
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,91,ublic static boolean isStatic(Member member) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,92,f (member == null) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,93,"hrow new IllegalArgumentException(""The member must not be null"");"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,95,eturn Modifier.isStatic(member.getModifiers());
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,99, <p>Tests whether the specified field or method is
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,100, <code>final</code>.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,102," @param member  the member to test, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,103, @return <code>true</code> if the member is final
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,105,ublic static boolean isFinal(Member member) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,106,f (member == null) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,107,"hrow new IllegalArgumentException(""The member must not be null"");"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,109,eturn Modifier.isFinal(member.getModifiers());
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,113," <p>Tests whether the specified field, method or constructor is"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,114, <code>public</code>.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,116," @param member  the member to test, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,117, @return <code>true</code> if the member is public scoped
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,119,ublic static boolean isPublicScope(Member member) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,120,f (member == null) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,121,"hrow new IllegalArgumentException(""The member must not be null"");"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,123,eturn Modifier.isPublic(member.getModifiers());
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,127," <p>Tests whether the specified field, method or constructor is"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,128, <code>protected</code>.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,130," @param member  the member to test, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,131, @return <code>true</code> if the member is protected scoped
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,133,ublic static boolean isProtectedScope(Member member) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,134,f (member == null) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,135,"hrow new IllegalArgumentException(""The member must not be null"");"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,137,eturn Modifier.isProtected(member.getModifiers());
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,141," <p>Tests whether the specified field, method or constructor is"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,142, package (default) scoped.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,144," @param member  the member to test, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,145, @return <code>true</code> if the member is package scoped
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,147,ublic static boolean isPackageScope(Member member) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,148,eturn !(isPublicScope(member) || isProtectedScope(member) || isPrivateScope(member));
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,152," <p>Tests whether the specified field, method or constructor is"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,153, <code>private</code>.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,155," @param member  the member to test, must not be <code>null</code>"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,156, @return <code>true</code> if the member is private scoped
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,158,ublic static boolean isPrivateScope(Member member) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,159,f (member == null) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,160,"hrow new IllegalArgumentException(""The member must not be null"");"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,162,eturn Modifier.isPrivate(member.getModifiers());
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,168, <p>Gets a class object for the specified string.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,170," @param className  fully qualified class name to find,"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,171,  must not be empty or <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,172, @return Class object for class
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,173, @throws ReflectionException if an error occurs during reflection
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,174, @throws IllegalArgumentException if the class name is empty
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,176,ublic static Class getClass(String className) throws ReflectionException {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,177,f (StringUtils.isEmpty(className)) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,178,"hrow new IllegalArgumentException(""The class name must not be null"");"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,180,ry {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,181,eturn Class.forName(className);
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,183, catch (LinkageError ex) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,184,"hrow new ReflectionException(getThrowableText(ex, ""getting class"", className, null, null), ex);"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,185, catch (Exception ex) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,186,"hrow new ReflectionException(getThrowableText(ex, ""getting class"", className, null, null), ex);"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,193, <p>Checks if the requested Class array is compatible with the specified
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,194, parameter array.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,196, <p>Primitive classes are handled correctly .</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,198," <p>In other words, a <code>boolean</code> Class will be converted to"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,199, a <code>Boolean</code> Class and so on.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,201, <p>This method also handles widening for primitives as given in section 5.1.2 of the
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,202," <em><a href=""http://java.sun.com/docs/books/jls/"">The Java Language Specification</a></em>."
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,204, @param requestedTypes  the class array requested
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,205, @param paramTypes  the actual class array for the method
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,206, @return <code>true</code> if the parameters are compatible
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,208,"ublic static boolean isCompatible(Class[] requestedTypes, Class[] paramTypes) {"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,209,"f (ArrayUtils.isSameLength(requestedTypes, paramTypes) == false) {"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,210,eturn false;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,212,f (requestedTypes == null) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,213,equestedTypes = ArrayUtils.EMPTY_CLASS_ARRAY;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,215,f (paramTypes == null) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,216,aramTypes = ArrayUtils.EMPTY_CLASS_ARRAY;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,218,or (int i = 0; i < requestedTypes.length; i++) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,219,"f (isCompatible(requestedTypes[i], paramTypes[i]) == false) {"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,220,eturn false;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,223,eturn true;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,228, <p>Determine whether a type can be used as a parameter in a method invocation.
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,229, This method handles primitive conversions correctly.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,231, <p>This method also handles widening for primitives as given in section 5.1.2 of the
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,232," <em><a href=""http://java.sun.com/docs/books/jls/"">The Java Language Specification</a></em>."
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,234, @param parameterType the type of parameter accepted by the method
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,235, @param requestedType the type of parameter being requested
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,237, @return <code>true</code> if the assignment is compatible.
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,239,"ublic static boolean isCompatible(Class requestedType, Class parameterType) {"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,240,/ try plain assignment
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,241,"f (ClassUtils.isAssignable(requestedType, parameterType)) {"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,242,eturn true;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,245,f (parameterType.isPrimitive()) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,246,"/ also, this method does *not* do widening - you must specify exactly"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,247,/ is this the right behaviour?
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,248,f (boolean.class.equals(parameterType)) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,249,eturn Boolean.class.equals(requestedType);
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,252,f (byte.class.equals(parameterType)) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,253,eturn Byte.class.equals(requestedType);
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,256,f (short.class.equals(parameterType)) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,257,eturn (Short.class.equals(requestedType)
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,258,| Byte.class.equals(requestedType));
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,261,f (char.class.equals(parameterType)) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,262,eturn Character.class.equals(requestedType);
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,265,f (int.class.equals(parameterType)) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,266,eturn (Integer.class.equals(requestedType)
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,267,| Character.class.equals(requestedType)
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,268,| Short.class.equals(requestedType)
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,269,| Byte.class.equals(requestedType));
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,271,f (long.class.equals(parameterType)) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,272,eturn (Long.class.equals(requestedType)
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,273,| Integer.class.equals(requestedType)
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,274,| Character.class.equals(requestedType)
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,275,| Short.class.equals(requestedType)
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,276,| Byte.class.equals(requestedType));
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,279,f (float.class.equals(parameterType)) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,280,eturn (Float.class.equals(requestedType)
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,281,| Long.class.equals(requestedType)
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,282,| Integer.class.equals(requestedType)
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,283,| Character.class.equals(requestedType)
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,284,| Short.class.equals(requestedType)
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,285,| Byte.class.equals(requestedType));
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,288,f (double.class.equals(parameterType)) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,289,eturn (Double.class.equals(requestedType)
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,290,| Float.class.equals(requestedType)
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,291,| Long.class.equals(requestedType)
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,292,| Integer.class.equals(requestedType)
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,293,| Character.class.equals(requestedType)
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,294,| Short.class.equals(requestedType)
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,295,| Byte.class.equals(requestedType));
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,299,eturn false;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,304, <p>Converts a primitive class to its matching object class.
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,305, Non-primitive classes are unaffected.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,307," <p>In other words, a <code>boolean</code> Class will be converted to"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,308, a <code>Boolean</code> Class and so on.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,310, @param cls  the class to convert
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,311, @return converted class
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,312, @throws IllegalArgumentException if the class is <code>null</code>
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,314,ublic static Class convertPrimitiveClass(Class cls) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,315,f (cls == null) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,316,"hrow new IllegalArgumentException(""The class must not be null"");"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,318,f (cls.isPrimitive()) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,319,f (Integer.TYPE.equals(cls)) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,320,eturn Integer.class;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,321, else if (Long.TYPE.equals(cls)) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,322,eturn Long.class;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,323, else if (Boolean.TYPE.equals(cls)) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,324,eturn Boolean.class;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,325, else if (Double.TYPE.equals(cls)) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,326,eturn Double.class;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,327, else if (Float.TYPE.equals(cls)) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,328,eturn Float.class;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,329, else if (Character.TYPE.equals(cls)) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,330,eturn Character.class;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,331, else if (Short.TYPE.equals(cls)) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,332,eturn Short.class;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,333, else if (Byte.TYPE.equals(cls)) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,334,eturn Byte.class;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,337,eturn cls;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,343, <p>Produces nicely formatted informational error messages for reflection
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,344, errors.</p>
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,346, @param th  the throwable
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,347," @param desc  the short description of the action, such as 'getting field'"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,348, @param className  the class name being used
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,349, @param types  the parameter types
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,350, @param memberName  the name of the field or method
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,351, @return a suitable error message
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,353,"ublic static String getThrowableText(Throwable th, String desc, String className, Class[] types, String memberName) {"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,354,tring message = null;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,355,ry {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,356,hrow th;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,358, catch (NoSuchMethodException ex) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,359,"essage = ""the method does not exist"";"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,360, catch (NoSuchFieldException ex) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,361,"essage = ""the field does not exist"";"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,362, catch (ClassNotFoundException ex) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,363,"essage = ""the class could not be found in the classpath"";"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,364, catch (InvocationTargetException ex) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,365,"essage = ""the method threw an exception"";"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,366, catch (InstantiationException ex) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,367,"essage = ""the class is abstract/interface/array/primitive"";"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,368, catch (IllegalAccessException ex) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,369,"essage = ""the method was not public/accessible"";"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,370, catch (IllegalArgumentException ex) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,371,"essage = ""the parameters did not match those expected"";"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,372, catch (SecurityException ex) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,373,"essage = ""the security manager prevents reflection"";"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,374, catch (ExceptionInInitializerError ex) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,375,"essage = ""the class initialization for static variables threw an exception"";"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,376, catch (ClassCircularityError ex) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,377,"essage = ""a circularity has been detected while initializing a class"";"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,378, catch (ClassFormatError ex) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,379,"essage = ""the class file is malformed or otherwise cannot be interpreted as a class"";"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,380, catch (IncompatibleClassChangeError ex) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,381,"essage = ""the method references another class that has changed incompatibly since compile time"";"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,382, catch (UnsatisfiedLinkError ex) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,383,"essage = ""no implementation found for a native method"";"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,384, catch (VerifyError ex) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,385,"essage = ""the class file contains an internal inconsistency or security problem"";"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,386, catch (NoClassDefFoundError ex) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,387,"essage = ""the class references another class that was present at compile time but is no longer available"";"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,388, catch (LinkageError ex) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,389,"essage = ""the class references another class that has changed incompatibly since compile time"";"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,390, catch (Throwable ex) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,391,essage = null;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,393,tringBuffer buf = new StringBuffer();
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,394,"uf.append(ClassUtils.getShortClassName(th, """"));"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,395,"uf.append("" while "");"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,396,uf.append(desc);
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,397,"uf.append("" on Class '"");"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,398,uf.append(className);
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,399,uf.append('\'');
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,400,f (types != null) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,401,"uf.append("" for types "");"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,402,uf.append(ArrayUtils.toString(types));
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,404,f (memberName != null) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,405,"uf.append("" for method '"");"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,406,uf.append(memberName);
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,407,uf.append('\'');
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,409,f (message != null) {
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,410,"uf.append("" - "");"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,411,uf.append(message);
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,413,eturn buf.toString();
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,4," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,6, Copyright (c) 1999-2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,7, reserved.
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,9," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,10," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,11, are met:
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,13, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,14,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,16, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,17,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,18,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,19,    distribution.
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,21," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,22,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,23,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,24,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,25,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,26,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,28," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,29,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,30,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,31,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,33," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,34,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,35,    permission of the Apache Group.
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,37, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,38," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,39, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,40, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,41," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,42," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,43," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,44," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,45," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,46, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,47," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,48, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,51, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,52, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,53," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,54, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,58,ackage org.apache.commons.lang.reflect;
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,60,ublic class AbstractChild implements Child {
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,62,rivate String name;
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,64,rotected void setName(String name)
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,66,his.name = name;
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,69,ublic String getName()
False,src/test/org/apache/commons/lang/reflect/AbstractChild.java,src/test/org/apache/commons/lang/reflect/AbstractChild.java,71,eturn name;
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,4," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,6, Copyright (c) 1999-2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,7, reserved.
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,9," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,10," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,11, are met:
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,13, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,14,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,16, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,17,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,18,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,19,    distribution.
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,21," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,22,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,23,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,24,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,25,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,26,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,28," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,29,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,30,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,31,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,33," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,34,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,35,    permission of the Apache Group.
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,37, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,38," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,39, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,40, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,41," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,42," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,43," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,44," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,45," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,46, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,47," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,48, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,51, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,52, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,53," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,54, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,58,ackage org.apache.commons.lang.reflect;
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,60,ublic abstract class AbstractParent {
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,62,rivate Child child;
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,64,ublic Child getChild()
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,66,eturn child;
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,70, Method which matches signature but which has wrong parameters
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,72,ublic String testAddChild(String badParameter) {
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,73,eturn null;
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,77, Method which matches signature but which has wrong parameters
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,79,"ublic String testAddChild2(String ignore, String badParameter) {"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,80,eturn null;
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,83,ublic String testAddChild(Child child) {
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,84,his.child = child;
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,85,eturn child.getName();
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,89,"ublic String testAddChild2(String ignore, Child child) {"
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,90,his.child = child;
False,src/test/org/apache/commons/lang/reflect/AbstractParent.java,src/test/org/apache/commons/lang/reflect/AbstractParent.java,91,eturn child.getName();
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,4," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,6, Copyright (c) 1999-2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,7, reserved.
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,9," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,10," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,11, are met:
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,13, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,14,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,16, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,17,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,18,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,19,    distribution.
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,21," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,22,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,23,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,24,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,25,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,26,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,28," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,29,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,30,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,31,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,33," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,34,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,35,    permission of the Apache Group.
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,37, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,38," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,39, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,40, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,41," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,42," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,43," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,44," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,45," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,46, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,47," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,48, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,51, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,52, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,53," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,54, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,58,ackage org.apache.commons.lang.reflect;
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,60,ublic class AlphaBean extends AbstractParent implements Child {
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,62,rivate String name;
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,64,ublic AlphaBean(String name) {
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,65,etName(name);
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,68,ublic String getName() {
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,69,eturn name;
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,72,ublic void setName(String name) {
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,73,his.name = name;
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,77, Used for testing that correct exception is thrown.
False,src/test/org/apache/commons/lang/reflect/AlphaBean.java,src/test/org/apache/commons/lang/reflect/AlphaBean.java,79,ublic void bogus(String badParameter){}
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,4," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,6, Copyright (c) 1999-2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,7, reserved.
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,9," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,10," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,11, are met:
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,13, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,14,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,16, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,17,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,18,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,19,    distribution.
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,21," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,22,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,23,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,24,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,25,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,26,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,28," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,29,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,30,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,31,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,33," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,34,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,35,    permission of the Apache Group.
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,37, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,38," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,39, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,40, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,41," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,42," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,43," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,44," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,45," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,46, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,47," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,48, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,51, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,52, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,53," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,54, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,58,ackage org.apache.commons.lang.reflect;
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,60,ublic class BetaBean extends AbstractChild {
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,62,ublic BetaBean(String name) {
False,src/test/org/apache/commons/lang/reflect/BetaBean.java,src/test/org/apache/commons/lang/reflect/BetaBean.java,63,etName(name);
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,4," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,6, Copyright (c) 1999-2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,7, reserved.
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,9," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,10," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,11, are met:
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,13, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,14,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,16, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,17,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,18,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,19,    distribution.
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,21," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,22,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,23,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,24,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,25,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,26,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,28," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,29,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,30,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,31,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,33," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,34,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,35,    permission of the Apache Group.
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,37, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,38," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,39, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,40, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,41," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,42," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,43," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,44," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,45," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,46, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,47," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,48, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,51, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,52, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,53," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,54, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,59,ackage org.apache.commons.lang.reflect;
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,61,ublic interface Child {
False,src/test/org/apache/commons/lang/reflect/Child.java,src/test/org/apache/commons/lang/reflect/Child.java,63,ublic String getName();
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,4," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,6, Copyright (c) 1999-2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,7, reserved.
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,9," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,10," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,11, are met:
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,13, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,14,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,16, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,17,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,18,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,19,    distribution.
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,21," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,22,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,23,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,24,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,25,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,26,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,28," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,29,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,30,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,31,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,33," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,34,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,35,    permission of the Apache Group.
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,37, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,38," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,39, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,40, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,41," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,42," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,43," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,44," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,45," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,46, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,47," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,48, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,51, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,52, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,53," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,54, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,57,ackage org.apache.commons.lang.reflect;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,59,mport java.lang.reflect.Method;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,60,mport java.lang.reflect.Modifier;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,62,mport junit.framework.Test;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,63,mport junit.framework.TestCase;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,64,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,66,mport org.apache.commons.lang.reflect.priv.PrivateBeanFactory;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,67,mport org.apache.commons.lang.reflect.priv.PublicSubBean;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,70, <p> Test case for <code>MethodUtils</code> </p>
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,73,ublic class MethodUtilsTestCase extends TestCase {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,75,/ ---------------------------------------------------- Instance Variables
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,77,rotected PrivateBeanFactory privateBeanFactory;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,79,/ ---------------------------------------------------------- Constructors
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,82, Construct a new instance of this test case.
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,84, @param name Name of the test case
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,86,ublic MethodUtilsTestCase(String name) {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,87,uper(name);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,91,/ -------------------------------------------------- Overall Test Methods
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,95, Set up instance variables required by this test case.
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,97,ublic void setUp() {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,98,rivateBeanFactory = new PrivateBeanFactory();
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,103, Return the tests included in this test suite.
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,105,ublic static Test suite() {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,106,eturn (new TestSuite(MethodUtilsTestCase.class));
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,110, Tear down instance variables required by this test case.
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,112,ublic void tearDown() {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,113,rivateBeanFactory = null;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,117,/ ------------------------------------------------ Individual Test Methods
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,120, <p> Test <code>getAccessibleMethod</code>.
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,122,ublic void testGetAccessibleMethod() {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,123,/ test MethodUtils.getAccessibleMethod
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,124,/ we'll make things easier by using the convenience methods
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,126,/ easy bit first - find a public method
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,127,/ METHOD ONE
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,128,ethod method = MethodUtils.getMethod
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,129,"TestBean.class, ""setStringProperty"", String.class);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,131,/ check that we've found one that matches
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,132,ssertNotNull(method);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,133,"ssertEquals(""method ONE is named correctly"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,134,"setStringProperty"", method.getName());"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,135,"ssertTrue(""Method ONE is public"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,136,odifier.isPublic(method.getModifiers()));
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,138,/ trickier this one - find a method in a direct interface
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,139,/ METHOD TWO
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,140,ethod = MethodUtils.getMethod
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,141,"privateBeanFactory.create().getClass(),"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,142,"methodBar"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,143,tring.class);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,145,/ check that we've found one that matches
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,146,ssertNotNull(method);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,147,"ssertEquals(""Method TWO is named correctly"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,148,"methodBar"", method.getName());"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,149,"ssertTrue(""Method TWO is public"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,150,odifier.isPublic(method.getModifiers()));
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,152,/ trickier this one - find a method in a indirect interface
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,153,/ METHOD THREE
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,154,ethod = MethodUtils.getMethod
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,155,"privateBeanFactory.createSubclass().getClass(),"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,156,"methodBaz"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,157,tring.class);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,159,/ check that we've found one that matches
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,160,ssertNotNull(method);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,161,"ssertEquals(""Method THREE is named correctly"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,162,"methodBaz"", method.getName());"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,163,"ssertTrue(""Method THREE is public"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,164,odifier.isPublic(method.getModifiers()));
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,170, <p> Test <code>invokeMethod</code>.
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,172,ublic void testinvokeMethod2() {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,173,/ test MethodUtils.invokeMethod
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,174,/ easy bit first - invoke a public method
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,175,/ METHOD ONE
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,176,ry {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,178,estBean bean = new TestBean();
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,179,"bject ret = MethodUtils.invokeMethod(bean, ""setStringProperty"", ""TEST"");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,180,/ check that the return's right and that the properties been set
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,181,ssertNull(ret);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,182,"ssertEquals(""Method ONE was invoked"", ""TEST"", bean.getStringProperty());"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,184, catch (Throwable t) {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,185,/ ONE
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,186,"ail(""Exception in method ONE prevented invocation: "" + t.toString());"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,189,/ trickier this one - find a method in a direct interface
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,190,/ METHOD TWO FAILURE
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,191,ry {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,193,bject ret = MethodUtils.invokeMethod(
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,194,"rivateBeanFactory.create(),"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,195,"methodBar"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,196,"ANOTHER TEST"");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,198,/ check that we've found one that matches
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,199,"ssertEquals(""Method TWO was invoked correctly"", ""ANOTHER TEST"", ret);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,201, catch (Throwable t) {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,202,/ METHOD TWO FAILURE
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,203,"ail(""Exception in method TWO prevented invocation: "" + t.toString());"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,207,/ trickier this one - find a method in a indirect interface
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,208,/ METHOD THREE
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,209,ry {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,211,bject ret = MethodUtils.invokeMethod(
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,212,"rivateBeanFactory.createSubclass(),"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,213,"methodBaz"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,214,"YET ANOTHER TEST"");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,217,/ check that we've found one that matches
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,218,"ssertEquals(""Method TWO was invoked correctly"", ""YET ANOTHER TEST"", ret);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,221, catch (Throwable t) {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,222,/ METHOD THREE FAILURE
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,223,"ail(""Exception in method THREE prevented invocation: "" + t.toString());"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,229, <p> Test <code>invokeMethod</code>.
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,231,ublic void testInvokeMethod() throws Exception {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,232,/ i'm going to test that the actual calls work first and then try them via reflection
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,234,"bstractParent parent = new AlphaBean(""parent"");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,236,/ try testAddChild through abstract superclass
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,237,"etaBean childOne = new BetaBean(""ChildOne"");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,239,"ssertEquals(""Oh no! Badly coded test case! (1)"", ""ChildOne"", parent.testAddChild(childOne));"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,241,/ let's try MethodUtils version
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,242,ssertEquals(
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,243,"Cannot invoke through abstract class (1)"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,244,"ChildOne"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,245,"ethodUtils.invokeMethod(parent, ""testAddChild"", childOne));"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,248,/ try adding through interface
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,249,"lphaBean childTwo = new AlphaBean(""ChildTwo"");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,251,"ssertEquals(""Oh no! Badly coded test case! (2)"", ""ChildTwo"", parent.testAddChild(childTwo));"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,253,/ let's try MethodUtils version
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,254,ssertEquals(
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,255,"Cannot invoke through interface (1)"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,256,"ChildTwo"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,257,"ethodUtils.invokeMethod(parent, ""testAddChild"", childTwo));"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,260,bject[] params = new Object[2];
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,262,"ssertEquals(""Oh no! Badly coded test case! (3)"", ""ChildOne"", parent.testAddChild2(""parameter"", childOne));"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,265,/ let's try MethodUtils version
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,266,"arams[0] = ""parameter"";"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,267,arams[1] = childOne;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,269,ssertEquals(
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,270,"Cannot invoke through abstract class (1)"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,271,"ChildOne"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,272,"ethodUtils.invokeMethod(parent, ""testAddChild2"", params));"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,274,"ssertEquals(""Oh no! Badly coded test case! (4)"", ""ChildTwo"", parent.testAddChild2(""parameter"", childTwo));"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,276,/ let's try MethodUtils version
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,277,"arams[0] = ""parameter"";"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,278,arams[1] = childTwo;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,280,ssertEquals(
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,281,"Cannot invoke through abstract class (1)"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,282,"ChildTwo"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,283,"ethodUtils.invokeMethod(parent, ""testAddChild2"", params));"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,285,/ test that exception is correctly thrown when a method cannot be found with matching params
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,286,ry {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,287,/ the next line
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,288,"arent = new AlphaBean(""parent"");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,289,"hildOne = new BetaBean(""ChildOne"");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,290,"ethodUtils.invokeMethod(parent, ""bogus"", childOne);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,291,/ should get here!
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,292,"ail(""No exception thrown when no appropriate method exists"");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,294, catch (ReflectionException e) {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,295,/ this is what we're expecting!
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,298,"ethodUtils.invokeMethod(parent, ""getName"", null);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,299,"ethodUtils.invokeMethod(parent, ""getName"", null, null);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,300,"ethodUtils.invokeMethod(parent, ""getName"", null);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,301,"ethodUtils.invokeMethod(parent, ""getName"", null, null);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,306, <p> Test <code>invokeMethod</code> with a primitive.
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,308,ublic void testInvokeMethodWithPrimitives() throws Exception {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,309,/ first test that the bean works
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,310,rimitiveBean bean = new PrimitiveBean();
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,311,ean.setFloat(20.0f);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,312,ean.setLong(10l);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,313,ean.setBoolean(true);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,314,ean.setInt(12);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,315,ean.setDouble(25.5d);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,317,"ssertEquals(""Bug in PrimitiveBean (1)"", 20.0f, bean.getFloat(), 0.01f);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,318,"ssertEquals(""Bug in PrimitiveBean (2)"", 10, bean.getLong());"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,319,"ssertEquals(""Bug in PrimitiveBean (3)"", true, bean.getBoolean());"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,320,"ssertEquals(""Bug in PrimitiveBean (4)"", 12, bean.getInt());"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,321,"ssertEquals(""Bug in PrimitiveBean (5)"", 25.5d, bean.getDouble(), 0.01f);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,323,ean = new PrimitiveBean();
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,324,"ethodUtils.invokeMethod(bean, ""setBoolean"", new Boolean(true));"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,325,"ssertEquals(""Call boolean property using invokeMethod"", true, bean.getBoolean());"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,327,ean = new PrimitiveBean();
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,328,"ethodUtils.invokeMethod(bean, ""setFloat"", new Float(20.0f));"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,329,"ssertEquals(""Call float property using invokeMethod"", 20.0f, bean.getFloat(), 0.01f);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,331,ean = new PrimitiveBean();
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,332,"ethodUtils.invokeMethod(bean, ""setLong"", new Long(10));"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,333,"ssertEquals(""Call float property using invokeMethod"", 10, bean.getLong());"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,335,ean = new PrimitiveBean();
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,336,"ethodUtils.invokeMethod(bean, ""setInt"", new Integer(12));"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,337,"ssertEquals(""Set float property using invokeMethod"", 12, bean.getInt());"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,339,ean = new PrimitiveBean();
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,340,"ethodUtils.invokeMethod(bean, ""setDouble"", new Double(25.5d));"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,341,"ssertEquals(""Set float property using invokeMethod"", 25.5d, bean.getDouble(), 0.01d);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,346, Simple tests for accessing static methods via invokeMethod().
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,348,ublic void testSimpleStatic1() {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,350,estBean bean = new TestBean();
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,351,bject value = null;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,352,nt current = TestBean.currentCounter();
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,354,ry {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,356,/ Return initial value of the counter
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,357,alue = MethodUtils.invokeMethod
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,358,"bean, ""currentCounter"", new Object[0], new Class[0]);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,359,"ssertNotNull(""currentCounter exists"", value);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,360,"ssertTrue(""currentCounter type"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,361,alue instanceof Integer);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,362,"ssertEquals(""currentCounter value"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,363,"urrent,"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,364,(Integer) value).intValue());
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,366,/ Increment via no-arguments version
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,367,ethodUtils.invokeMethod
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,368,"bean, ""incrementCounter"", new Object[0], new Class[0]);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,370,/ Validate updated value
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,371,urrent++;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,372,alue = MethodUtils.invokeMethod
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,373,"bean, ""currentCounter"", new Object[0], new Class[0]);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,374,"ssertNotNull(""currentCounter exists"", value);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,375,"ssertTrue(""currentCounter type"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,376,alue instanceof Integer);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,377,"ssertEquals(""currentCounter value"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,378,"urrent,"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,379,(Integer) value).intValue());
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,381,/ Increment via specified-argument version
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,382,ethodUtils.invokeMethod
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,383,"bean, ""incrementCounter"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,384,"ew Object[] { new Integer(5) },"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,385,ew Class[] { Integer.TYPE });
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,387,/ Validate updated value
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,388,urrent += 5;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,389,alue = MethodUtils.invokeMethod
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,390,"bean, ""currentCounter"", new Object[0], new Class[0]);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,391,"ssertNotNull(""currentCounter exists"", value);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,392,"ssertTrue(""currentCounter type"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,393,alue instanceof Integer);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,394,"ssertEquals(""currentCounter value"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,395,"urrent,"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,396,(Integer) value).intValue());
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,398, catch (Exception e) {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,399,"ail(""Threw exception"" + e);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,406, Simple tests for accessing static methods via invokeMethod().
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,408,ublic void testSimpleStatic2() {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,410,estBean bean = new TestBean();
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,411,bject value = null;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,412,nt current = TestBean.currentCounter();
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,414,ry {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,416,/ Return initial value of the counter
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,417,alue = MethodUtils.invokeMethod
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,418,"bean, ""currentCounter"", new Object[0], new Class[0]);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,419,"ssertNotNull(""currentCounter exists"", value);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,420,"ssertTrue(""currentCounter type"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,421,alue instanceof Integer);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,422,"ssertEquals(""currentCounter value"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,423,"urrent,"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,424,(Integer) value).intValue());
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,426,/ Increment via no-arguments version
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,427,ethodUtils.invokeMethod
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,428,"bean, ""incrementCounter"", new Object[0], new Class[0]);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,430,/ Validate updated value
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,431,urrent++;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,432,alue = MethodUtils.invokeMethod
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,433,"bean, ""currentCounter"", new Object[0], new Class[0]);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,434,"ssertNotNull(""currentCounter exists"", value);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,435,"ssertTrue(""currentCounter type"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,436,alue instanceof Integer);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,437,"ssertEquals(""currentCounter value"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,438,"urrent,"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,439,(Integer) value).intValue());
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,441,/ Increment via specified-argument version
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,442,ethodUtils.invokeMethod
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,443,"bean, ""incrementCounter"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,444,"ew Object[] { new Integer(5) },"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,445,ew Class[] { Integer.TYPE });
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,447,/ Validate updated value
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,448,urrent += 5;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,449,alue = MethodUtils.invokeMethod
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,450,"bean, ""currentCounter"", new Object[0], new Class[0]);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,451,"ssertNotNull(""currentCounter exists"", value);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,452,"ssertTrue(""currentCounter type"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,453,alue instanceof Integer);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,454,"ssertEquals(""currentCounter value"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,455,"urrent,"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,456,(Integer) value).intValue());
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,459, catch (Exception e) {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,460,"ail(""Threw exception"" + e);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,467, Simple tests for accessing static methods via getAccessibleMethod()
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,469,ublic void testSimpleStatic3() {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,471,bject value = null;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,472,nt current = TestBean.currentCounter();
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,474,ry {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,476,/ Acquire the methods we need
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,477,ethod currentCounterMethod = MethodUtils.getMethod
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,478,"TestBean.class, ""currentCounter"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,479,ew Class[0]);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,480,"ssertNotNull(""currentCounterMethod exists"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,481,urrentCounterMethod);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,482,"ssertEquals(""currentCounterMethod name"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,483,"currentCounter"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,484,urrentCounterMethod.getName());
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,485,"ssertEquals(""currentCounterMethod args"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,486,","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,487,urrentCounterMethod.getParameterTypes().length);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,488,"ssertTrue(""currentCounterMethod public"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,489,odifier.isPublic(currentCounterMethod.getModifiers()));
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,490,"ssertTrue(""currentCounterMethod static"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,491,odifier.isStatic(currentCounterMethod.getModifiers()));
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,492,ethod incrementCounterMethod1 = MethodUtils.getMethod
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,493,"TestBean.class, ""incrementCounter"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,494,ew Class[0]);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,495,"ssertNotNull(""incrementCounterMethod1 exists"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,496,ncrementCounterMethod1);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,497,"ssertEquals(""incrementCounterMethod1 name"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,498,"incrementCounter"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,499,ncrementCounterMethod1.getName());
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,500,"ssertEquals(""incrementCounterMethod1 args"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,501,","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,502,ncrementCounterMethod1.getParameterTypes().length);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,503,"ssertTrue(""incrementCounterMethod1 public"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,504,odifier.isPublic(incrementCounterMethod1.getModifiers()));
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,505,"ssertTrue(""incrementCounterMethod1 static"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,506,odifier.isStatic(incrementCounterMethod1.getModifiers()));
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,507,ethod incrementCounterMethod2 = MethodUtils.getMethod
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,508,"TestBean.class, ""incrementCounter"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,509,ew Class[] { Integer.TYPE });
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,510,"ssertNotNull(""incrementCounterMethod2 exists"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,511,ncrementCounterMethod2);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,512,"ssertEquals(""incrementCounterMethod2 name"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,513,"incrementCounter"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,514,ncrementCounterMethod2.getName());
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,515,"ssertEquals(""incrementCounterMethod2 args"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,516,","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,517,ncrementCounterMethod2.getParameterTypes().length);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,518,"ssertTrue(""incrementCounterMethod2 public"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,519,odifier.isPublic(incrementCounterMethod2.getModifiers()));
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,520,"ssertTrue(""incrementCounterMethod2 static"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,521,odifier.isStatic(incrementCounterMethod2.getModifiers()));
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,523,/ Return initial value of the counter
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,524,"alue = currentCounterMethod.invoke(null, new Object[0]);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,525,"ssertNotNull(""currentCounter exists"", value);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,526,"ssertTrue(""currentCounter type"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,527,alue instanceof Integer);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,528,"ssertEquals(""currentCounter value"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,529,"urrent,"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,530,(Integer) value).intValue());
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,532,/ Increment via no-arguments version
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,533,"ncrementCounterMethod1.invoke(null, new Object[0]);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,535,/ Validate updated value
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,536,urrent++;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,537,"alue = currentCounterMethod.invoke(null, new Object[0]);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,538,"ssertNotNull(""currentCounter exists"", value);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,539,"ssertTrue(""currentCounter type"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,540,alue instanceof Integer);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,541,"ssertEquals(""currentCounter value"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,542,"urrent,"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,543,(Integer) value).intValue());
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,545,/ Increment via specified-argument version
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,546,"ncrementCounterMethod2.invoke(null,"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,547,ew Object[] { new Integer(5) });
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,549,/ Validate updated value
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,550,urrent += 5;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,551,"alue = currentCounterMethod.invoke(null, new Object[0]);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,552,"ssertNotNull(""currentCounter exists"", value);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,553,"ssertTrue(""currentCounter type"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,554,alue instanceof Integer);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,555,"ssertEquals(""currentCounter value"","
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,556,"urrent,"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,557,(Integer) value).intValue());
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,559, catch (Exception e) {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,560,"ail(""Threw exception"" + e);"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,565,ublic void testPublicSub() throws Exception {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,566,/ make sure that bean does what it should
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,567,ublicSubBean bean = new PublicSubBean();
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,568,"ssertEquals(""Start value (foo)"", bean.getFoo(), ""This is foo"");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,569,"ssertEquals(""Start value (bar)"", bean.getBar(), ""This is bar"");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,570,"ean.setFoo(""new foo"");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,571,"ean.setBar(""new bar"");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,572,"ssertEquals(""Set value (foo)"", bean.getFoo(), ""new foo"");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,573,"ssertEquals(""Set value (bar)"", bean.getBar(), ""new bar"");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,575,/ see if we can access public methods in a default access superclass
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,576,/ from a public access subclass instance
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,577,"ethodUtils.invokeMethod(bean, ""setFoo"", ""alpha"");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,578,"ssertEquals(""Set value (foo:2)"", bean.getFoo(), ""alpha"");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,579,"ethodUtils.invokeMethod(bean, ""setBar"", ""beta"");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java,580,"ssertEquals(""Set value (bar:2)"", bean.getFoo(), ""alpha"");"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,4," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,6, Copyright (c) 1999-2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,7, reserved.
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,9," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,10," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,11, are met:
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,13, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,14,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,16, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,17,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,18,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,19,    distribution.
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,21," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,22,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,23,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,24,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,25,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,26,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,28," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,29,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,30,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,31,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,33," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,34,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,35,    permission of the Apache Group.
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,37, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,38," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,39, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,40, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,41," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,42," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,43," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,44," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,45," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,46, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,47," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,48, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,51, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,52, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,53," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,54, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,58,ackage org.apache.commons.lang.reflect;
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,61, Bean that has primitive properties
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,63,ublic class PrimitiveBean {
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,65,rivate float _float;
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,66,rivate double _double;
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,67,rivate boolean _boolean;
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,68,rivate long _long;
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,69,rivate int _int;
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,70,rivate short _short;
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,72,ublic short getShort() {
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,73,eturn _short;
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,76,ublic void setShort(short _short) {
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,77,his._short = _short;
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,80,ublic float getFloat() {
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,81,eturn _float;
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,84,ublic void setFloat(float _float) {
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,85,his._float = _float;
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,88,ublic double getDouble() {
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,89,eturn _double;
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,92,ublic void setDouble(double _double) {
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,93,his._double = _double;
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,96,ublic boolean getBoolean() {
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,97,eturn _boolean;
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,100,ublic void setBoolean(boolean _boolean) {
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,101,his._boolean = _boolean;
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,104,ublic long getLong() {
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,105,eturn _long;
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,108,ublic void setLong(long _long) {
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,109,his._long = _long;
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,112,ublic int getInt() {
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,113,eturn _int;
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,116,ublic void setInt(int _int) {
False,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,117,his._int = _int;
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,4, Copyright (c) 2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,5, reserved.
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,9, are met:
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,17,    distribution.
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,32,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,54,ackage org.apache.commons.lang.reflect;
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,58,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,59,mport junit.textui.TestRunner;
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,62, Test suite for the Reflect packages.
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,64," @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a> (of original copied from)"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,65, @author Robert Burrell Donkin
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,66," @version $Id: ReflectTestSuite.java,v 1.3 2003/08/18 02:22:28 bayard Exp $"
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,68,ublic class ReflectTestSuite extends TestCase {
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,71, Construct a new instance.
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,73,ublic ReflectTestSuite(String name) {
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,74,uper(name);
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,78, Executor-line interface.
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,80,ublic static void main(String[] args) {
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,81,estRunner.run(suite());
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,85, Get the suite of tests
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,87,ublic static Test suite() {
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,88,estSuite suite = new TestSuite();
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,89,uite.addTest(MethodUtilsTestCase.suite());
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,90,uite.addTest(ReflectionUtilsTestCase.suite());
False,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,91,eturn suite;
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,4," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,6, Copyright (c) 1999-2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,7, reserved.
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,9," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,10," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,11, are met:
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,13, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,14,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,16, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,17,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,18,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,19,    distribution.
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,21," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,22,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,23,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,24,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,25,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,26,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,28," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,29,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,30,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,31,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,33," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,34,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,35,    permission of the Apache Group.
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,37, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,38," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,39, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,40, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,41," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,42," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,43," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,44," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,45," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,46, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,47," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,48, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,51, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,52, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,53," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,54, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,57,ackage org.apache.commons.lang.reflect;
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,59,mport java.lang.reflect.Member;
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,61,mport junit.framework.Test;
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,62,mport junit.framework.TestCase;
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,63,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,66, <p> Test case for <code>ReflectionUtils</code> </p>
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,69,ublic class ReflectionUtilsTestCase extends TestCase {
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,71,/ ---------------------------------------------------- Instance Variables
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,73,/ ---------------------------------------------------------- Constructors
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,76, Construct a new instance of this test case.
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,78, @param name Name of the test case
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,80,ublic ReflectionUtilsTestCase(String name) {
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,81,uper(name);
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,85,/ -------------------------------------------------- Overall Test Methods
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,89, Set up instance variables required by this test case.
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,91,ublic void setUp() {
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,92,/ any set up goes here
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,97, Return the tests included in this test suite.
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,99,ublic static Test suite() {
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,100,eturn (new TestSuite(ReflectionUtilsTestCase.class));
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,104, Tear down instance variables required by this test case.
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,106,ublic void tearDown() {
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,107,/ any tear down goes here
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,111,/ ------------------------------------------------ Individual Test Methods
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,114,ublic void testScopeUtils() throws Exception {
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,115,copeBean bean = new ScopeBean();
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,116,ember field = bean.getPrivateField();
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,117,"ssertEquals(""Private scope (field) [isFinal]"", false ,ReflectionUtils.isFinal(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,118,"ssertEquals(""Private scope (field) [isPackageScope]"", false, ReflectionUtils.isPackageScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,119,"ssertEquals(""Private scope (field) [isPrivateScope]"", true, ReflectionUtils.isPrivateScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,120,"ssertEquals(""Private scope (field) [isProtectedScope]"", false, ReflectionUtils.isProtectedScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,121,"ssertEquals(""Private scope (field) [isPublicScope]"", false, ReflectionUtils.isPublicScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,122,"ssertEquals(""Private scope (field) [isStatic]"", false, ReflectionUtils.isStatic(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,124,ember method = bean.getPrivateMethod();
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,125,"ssertEquals(""Private scope (method) [isFinal]"", false, ReflectionUtils.isFinal(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,126,"ssertEquals(""Private scope (method) [isPackageScope]"", false, ReflectionUtils.isPackageScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,127,"ssertEquals(""Private scope (method) [isPrivateScope]"", true, ReflectionUtils.isPrivateScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,128,"ssertEquals(""Private scope (method) [isProtectedScope]"", false, ReflectionUtils.isProtectedScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,129,"ssertEquals(""Private scope (method) [isPublicScope]"", false, ReflectionUtils.isPublicScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,130,"ssertEquals(""Private scope (method) [isStatic]"", false, ReflectionUtils.isStatic(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,132,ield = bean.getPackageField();
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,133,"ssertEquals(""Package scope (field) [isFinal]"", false, ReflectionUtils.isFinal(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,134,"ssertEquals(""Package scope (field) [isPackageScope]"", true, ReflectionUtils.isPackageScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,135,"ssertEquals(""Package scope (field) [isPrivateScope]"", false, ReflectionUtils.isPrivateScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,136,"ssertEquals(""Package scope (field) [isProtectedScope]"", false, ReflectionUtils.isProtectedScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,137,"ssertEquals(""Package scope (field) [isPublicScope]"", false, ReflectionUtils.isPublicScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,138,"ssertEquals(""Package scope (field) [isStatic]"", false, ReflectionUtils.isStatic(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,140,ethod = bean.getPackageMethod();
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,141,"ssertEquals(""Package scope (method) [isFinal]"", false, ReflectionUtils.isFinal(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,142,"ssertEquals(""Package scope (method) [isPackageScope]"", true, ReflectionUtils.isPackageScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,143,"ssertEquals(""Package scope (method) [isPrivateScope]"", false, ReflectionUtils.isPrivateScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,144,"ssertEquals(""Package scope (method) [isProtectedScope]"", false, ReflectionUtils.isProtectedScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,145,"ssertEquals(""Package scope (method) [isPublicScope]"", false, ReflectionUtils.isPublicScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,146,"ssertEquals(""Packages scope (method) [isStatic]"", false, ReflectionUtils.isStatic(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,148,ield = bean.getPublicField();
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,149,"ssertEquals(""Public scope (field) [isFinal]"", false, ReflectionUtils.isFinal(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,150,"ssertEquals(""Public scope (field) [isPackageScope]"", false, ReflectionUtils.isPackageScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,151,"ssertEquals(""Public scope (field) [isPrivateScope]"", false, ReflectionUtils.isPrivateScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,152,"ssertEquals(""Public scope (field) [isProtectedScope]"", false, ReflectionUtils.isProtectedScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,153,"ssertEquals(""Public scope (field) [isPublicScope]"", true, ReflectionUtils.isPublicScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,154,"ssertEquals(""Public scope (field) [isStatic]"", false, ReflectionUtils.isStatic(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,156,ethod = bean.getPublicMethod();
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,157,"ssertEquals(""Public scope (method) [isFinal]"", false, ReflectionUtils.isFinal(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,158,"ssertEquals(""Public scope (method) [isPackageScope]"", false, ReflectionUtils.isPackageScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,159,"ssertEquals(""Public scope (method) [isPrivateScope]"", false, ReflectionUtils.isPrivateScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,160,"ssertEquals(""Public scope (method) [isProtectedScope]"", false, ReflectionUtils.isProtectedScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,161,"ssertEquals(""Public scope (method) [isPublicScope]"", true, ReflectionUtils.isPublicScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,162,"ssertEquals(""Public scope (method) [isStatic]"", false, ReflectionUtils.isStatic(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,164,ield = bean.getFinalField();
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,165,"ssertEquals(""Final scope (field) [isFinal]"", true, ReflectionUtils.isFinal(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,166,"ssertEquals(""Final scope (field) [isPackageScope]"", false, ReflectionUtils.isPackageScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,167,"ssertEquals(""Final scope (field) [isPrivateScope]"", false, ReflectionUtils.isPrivateScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,168,"ssertEquals(""Final scope (field) [isProtectedScope]"", false, ReflectionUtils.isProtectedScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,169,"ssertEquals(""Final scope (field) [isPublicScope]"", true, ReflectionUtils.isPublicScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,170,"ssertEquals(""Final scope (field) [isStatic]"", false, ReflectionUtils.isStatic(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,172,ethod = bean.getFinalMethod();
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,173,"ssertEquals(""Final scope (method) [isFinal]"", true, ReflectionUtils.isFinal(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,174,"ssertEquals(""Final scope (method) [isPackageScope]"", false, ReflectionUtils.isPackageScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,175,"ssertEquals(""Final scope (method) [isPrivateScope]"", false, ReflectionUtils.isPrivateScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,176,"ssertEquals(""Final scope (method) [isProtectedScope]"", false, ReflectionUtils.isProtectedScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,177,"ssertEquals(""Final scope (method) [isPublicScope]"", true, ReflectionUtils.isPublicScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,178,"ssertEquals(""Final scope (method) [isStatic]"", false, ReflectionUtils.isStatic(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,180,ield = bean.getStaticField();
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,181,"ssertEquals(""Static scope (field) [isFinal]"", false, ReflectionUtils.isFinal(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,182,"ssertEquals(""Static scope (field) [isPackageScope]"", false, ReflectionUtils.isPackageScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,183,"ssertEquals(""Static scope (field) [isPrivateScope]"", false, ReflectionUtils.isPrivateScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,184,"ssertEquals(""Static scope (field) [isProtectedScope]"", false, ReflectionUtils.isProtectedScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,185,"ssertEquals(""Static scope (field) [isPublicScope]"", true, ReflectionUtils.isPublicScope(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,186,"ssertEquals(""Static scope (field) [isStatic]"", true, ReflectionUtils.isStatic(field));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,188,ethod = bean.getStaticMethod();
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,189,"ssertEquals(""Static scope (method) [isFinal]"", false, ReflectionUtils.isFinal(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,190,"ssertEquals(""Static scope (method) [isPackageScope]"", false, ReflectionUtils.isPackageScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,191,"ssertEquals(""Static scope (method) [isPrivateScope]"", false, ReflectionUtils.isPrivateScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,192,"ssertEquals(""Static scope (method) [isProtectedScope]"", false, ReflectionUtils.isProtectedScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,193,"ssertEquals(""Static scope (method) [isPublicScope]"", true, ReflectionUtils.isPublicScope(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,194,"ssertEquals(""Static scope (method) [isStatic]"", true, ReflectionUtils.isStatic(method));"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,197,ublic void testWidening() throws Exception
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,199,/ test byte conversions
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,200,"ssertEquals(""byte -> char"", ReflectionUtils.isCompatible(Byte.class, char.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,201,"ssertEquals(""byte -> byte"", ReflectionUtils.isCompatible(Byte.class, byte.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,202,"ssertEquals(""byte -> short"", ReflectionUtils.isCompatible(Byte.class, short.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,203,"ssertEquals(""byte -> int"", ReflectionUtils.isCompatible(Byte.class, int.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,204,"ssertEquals(""byte -> long"", ReflectionUtils.isCompatible(Byte.class, long.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,205,"ssertEquals(""byte -> float"", ReflectionUtils.isCompatible(Byte.class, float.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,206,"ssertEquals(""byte -> double"", ReflectionUtils.isCompatible(Byte.class, double.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,207,"ssertEquals(""byte -> boolean"", ReflectionUtils.isCompatible(Byte.class, boolean.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,209,/ test short conversions
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,210,"ssertEquals(""short -> char"", ReflectionUtils.isCompatible(Short.class, char.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,211,"ssertEquals(""short -> byte"", ReflectionUtils.isCompatible(Short.class, byte.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,212,"ssertEquals(""short -> short"", ReflectionUtils.isCompatible(Short.class, short.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,213,"ssertEquals(""short -> int"", ReflectionUtils.isCompatible(Short.class, int.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,214,"ssertEquals(""short -> long"", ReflectionUtils.isCompatible(Short.class, long.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,215,"ssertEquals(""short -> float"", ReflectionUtils.isCompatible(Short.class, float.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,216,"ssertEquals(""short -> double"", ReflectionUtils.isCompatible(Short.class, double.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,217,"ssertEquals(""short -> boolean"", ReflectionUtils.isCompatible(Short.class, boolean.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,219,/ test char conversions
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,220,"ssertEquals(""char -> char"", ReflectionUtils.isCompatible(Character.class, char.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,221,"ssertEquals(""char -> byte"", ReflectionUtils.isCompatible(Character.class, byte.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,222,"ssertEquals(""char -> short"", ReflectionUtils.isCompatible(Character.class, short.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,223,"ssertEquals(""char -> int"", ReflectionUtils.isCompatible(Character.class, int.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,224,"ssertEquals(""char -> long"", ReflectionUtils.isCompatible(Character.class, long.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,225,"ssertEquals(""char -> float"", ReflectionUtils.isCompatible(Character.class, float.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,226,"ssertEquals(""char -> double"", ReflectionUtils.isCompatible(Character.class, double.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,227,"ssertEquals(""char -> boolean"", ReflectionUtils.isCompatible(Character.class, boolean.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,229,/ test int conversions
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,230,"ssertEquals(""int -> char"", ReflectionUtils.isCompatible(Integer.class, char.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,231,"ssertEquals(""int -> byte"", ReflectionUtils.isCompatible(Integer.class, byte.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,232,"ssertEquals(""int -> short"", ReflectionUtils.isCompatible(Integer.class, short.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,233,"ssertEquals(""int -> int"", ReflectionUtils.isCompatible(Integer.class, int.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,234,"ssertEquals(""int -> long"", ReflectionUtils.isCompatible(Integer.class, long.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,235,"ssertEquals(""int -> float"", ReflectionUtils.isCompatible(Integer.class, float.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,236,"ssertEquals(""int -> double"", ReflectionUtils.isCompatible(Integer.class, double.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,237,"ssertEquals(""int -> boolean"", ReflectionUtils.isCompatible(Integer.class, boolean.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,239,/ test long conversions
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,240,"ssertEquals(""long -> char"", ReflectionUtils.isCompatible(Long.class, char.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,241,"ssertEquals(""long -> byte"", ReflectionUtils.isCompatible(Long.class, byte.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,242,"ssertEquals(""long -> short"", ReflectionUtils.isCompatible(Long.class, short.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,243,"ssertEquals(""long -> int"", ReflectionUtils.isCompatible(Long.class, int.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,244,"ssertEquals(""long -> long"", ReflectionUtils.isCompatible(Long.class, long.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,245,"ssertEquals(""long -> float"", ReflectionUtils.isCompatible(Long.class, float.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,246,"ssertEquals(""long -> double"", ReflectionUtils.isCompatible(Long.class, double.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,247,"ssertEquals(""long -> boolean"", ReflectionUtils.isCompatible(Long.class, boolean.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,249,/ test float conversions
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,250,"ssertEquals(""float -> char"", ReflectionUtils.isCompatible(Float.class, char.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,251,"ssertEquals(""float -> byte"", ReflectionUtils.isCompatible(Float.class, byte.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,252,"ssertEquals(""float -> short"", ReflectionUtils.isCompatible(Float.class, short.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,253,"ssertEquals(""float -> int"", ReflectionUtils.isCompatible(Float.class, int.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,254,"ssertEquals(""float -> long"", ReflectionUtils.isCompatible(Float.class, long.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,255,"ssertEquals(""float -> float"", ReflectionUtils.isCompatible(Float.class, float.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,256,"ssertEquals(""float -> double"", ReflectionUtils.isCompatible(Float.class, double.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,257,"ssertEquals(""float -> boolean"", ReflectionUtils.isCompatible(Float.class, boolean.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,259,/ test float conversions
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,260,"ssertEquals(""double -> char"", ReflectionUtils.isCompatible(Double.class, char.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,261,"ssertEquals(""double -> byte"", ReflectionUtils.isCompatible(Double.class, byte.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,262,"ssertEquals(""double -> short"", ReflectionUtils.isCompatible(Double.class, short.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,263,"ssertEquals(""double -> int"", ReflectionUtils.isCompatible(Double.class, int.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,264,"ssertEquals(""double -> long"", ReflectionUtils.isCompatible(Double.class, long.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,265,"ssertEquals(""double -> float"", ReflectionUtils.isCompatible(Double.class, float.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,266,"ssertEquals(""double -> double"", ReflectionUtils.isCompatible(Double.class, double.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,267,"ssertEquals(""double -> boolean"", ReflectionUtils.isCompatible(Double.class, boolean.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,269,/ test float conversions
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,270,"ssertEquals(""boolean -> char"", ReflectionUtils.isCompatible(Boolean.class, char.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,271,"ssertEquals(""boolean -> byte"", ReflectionUtils.isCompatible(Boolean.class, byte.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,272,"ssertEquals(""boolean -> short"", ReflectionUtils.isCompatible(Boolean.class, short.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,273,"ssertEquals(""boolean -> int"", ReflectionUtils.isCompatible(Boolean.class, int.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,274,"ssertEquals(""boolean -> long"", ReflectionUtils.isCompatible(Boolean.class, long.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,275,"ssertEquals(""boolean -> float"", ReflectionUtils.isCompatible(Boolean.class, float.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,276,"ssertEquals(""boolean -> double"", ReflectionUtils.isCompatible(Boolean.class, double.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,277,"ssertEquals(""boolean -> boolean"", ReflectionUtils.isCompatible(Boolean.class, boolean.class), true);"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,4, Copyright (c) 2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,5, reserved.
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,9, are met:
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,17,    distribution.
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,32,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,54,ackage org.apache.commons.lang.reflect;
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,56,mport java.lang.reflect.Field;
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,57,mport java.lang.reflect.Method;
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,60, Bean with examples of different scoped fields and methods.
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,62,ublic class ScopeBean {
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,64,rivate int privateField;
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,65,nt packageField;
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,66,rotected int protectedField;
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,67,ublic int publicField;
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,68,ublic static int staticField;
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,69,ublic final int finalField = 42;
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,71,ublic ScopeBean() {}
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,73,rivate void privateMethod() {}
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,74,rotected void protectedMethod() {}
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,75,oid packageMethod() {}
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,76,ublic void publicMethod() {}
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,77,ublic static void staticMethod() {}
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,78,ublic final void finalMethod() {}
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,80,ublic Field getPrivateField() throws NoSuchFieldException {
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,81,"eturn ScopeBean.class.getDeclaredField(""privateField"");"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,84,ublic Field getProtectedField() throws NoSuchFieldException {
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,85,"eturn ScopeBean.class.getDeclaredField(""protectedField"");"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,88,ublic Field getPackageField() throws NoSuchFieldException {
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,89,"eturn ScopeBean.class.getDeclaredField(""packageField"");"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,92,ublic Field getPublicField() throws NoSuchFieldException {
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,93,"eturn ScopeBean.class.getDeclaredField(""publicField"");"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,96,ublic Field getStaticField() throws NoSuchFieldException {
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,97,"eturn ScopeBean.class.getDeclaredField(""staticField"");"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,100,ublic Field getFinalField() throws NoSuchFieldException {
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,101,"eturn ScopeBean.class.getDeclaredField(""finalField"");"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,104,ublic Method getPrivateMethod() throws NoSuchMethodException {
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,105,"eturn ScopeBean.class.getDeclaredMethod(""privateMethod"", null);"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,108,ublic Method getProtectedMethod() throws NoSuchMethodException {
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,109,"eturn ScopeBean.class.getDeclaredMethod(""protectedMethod"", null);"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,112,ublic Method getPackageMethod() throws NoSuchMethodException {
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,113,"eturn ScopeBean.class.getDeclaredMethod(""packageMethod"", null);"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,116,ublic Method getPublicMethod() throws NoSuchMethodException {
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,117,"eturn ScopeBean.class.getDeclaredMethod(""publicMethod"", null);"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,120,ublic Method getStaticMethod() throws NoSuchMethodException {
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,121,"eturn ScopeBean.class.getDeclaredMethod(""staticMethod"", null);"
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,124,ublic Method getFinalMethod() throws NoSuchMethodException {
False,src/test/org/apache/commons/lang/reflect/ScopeBean.java,src/test/org/apache/commons/lang/reflect/ScopeBean.java,125,"eturn ScopeBean.class.getDeclaredMethod(""finalMethod"", null);"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//lang/src/test/org/apache/commons/lang/reflect/Attic/TestBean.java,v 1.2 2003/08/18 02:22:28 bayard Exp $"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,3, $Revision: 1.2 $
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,4, $Date: 2003/08/18 02:22:28 $
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,8," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,10, Copyright (c) 1999-2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,11, reserved.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,13," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,14," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,15, are met:
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,17, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,18,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,20, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,21,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,22,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,23,    distribution.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,25," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,26,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,27,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,28,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,29,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,30,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,32," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,33,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,34,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,35,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,37," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,38,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,39,    permission of the Apache Group.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,41, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,42," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,43, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,44, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,45," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,46," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,47," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,48," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,49," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,50, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,51," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,52, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,55, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,56, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,57," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,58, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,63,ackage org.apache.commons.lang.reflect;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,66,mport java.util.ArrayList;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,67,mport java.util.HashMap;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,68,mport java.util.List;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,69,mport java.util.Map;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,73," General purpose test bean for JUnit tests for the ""beanutils"" component."
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,75, @author Craig R. McClanahan
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,76, @version $Revision: 1.2 $ $Date: 2003/08/18 02:22:28 $
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,79,ublic class TestBean {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,82,/ ------------------------------------------------------------- Properties
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,86, A boolean property.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,88,rivate boolean booleanProperty = true;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,90,ublic boolean getBooleanProperty() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,91,eturn (booleanProperty);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,94,ublic void setBooleanProperty(boolean booleanProperty) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,95,his.booleanProperty = booleanProperty;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,100," A boolean property that uses an ""is"" method for the getter."
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,102,rivate boolean booleanSecond = true;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,104,ublic boolean isBooleanSecond() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,105,eturn (booleanSecond);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,108,ublic void setBooleanSecond(boolean booleanSecond) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,109,his.booleanSecond = booleanSecond;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,114, A double property.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,116,rivate double doubleProperty = 321.0;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,118,ublic double getDoubleProperty() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,119,eturn (this.doubleProperty);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,122,ublic void setDoubleProperty(double doubleProperty) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,123,his.doubleProperty = doubleProperty;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,128," An ""indexed property"" accessible via both array and subscript"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,129, based getters and setters.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,131,rivate String dupProperty[] =
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,132," ""Dup 0"", ""Dup 1"", ""Dup 2"", ""Dup 3"", ""Dup 4"" };"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,134,ublic String[] getDupProperty() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,135,eturn (this.dupProperty);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,138,ublic String getDupProperty(int index) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,139,eturn (this.dupProperty[index]);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,142,"ublic void setDupProperty(int index, String value) {"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,143,his.dupProperty[index] = value;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,146,ublic void setDupProperty(String dupProperty[]) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,147,his.dupProperty = dupProperty;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,152, A float property.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,154,rivate float floatProperty = (float) 123.0;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,156,ublic float getFloatProperty() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,157,eturn (this.floatProperty);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,160,ublic void setFloatProperty(float floatProperty) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,161,his.floatProperty = floatProperty;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,166, An integer array property accessed as an array.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,168,"rivate int intArray[] = { 0, 10, 20, 30, 40 };"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,170,ublic int[] getIntArray() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,171,eturn (this.intArray);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,174,ublic void setIntArray(int intArray[]) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,175,his.intArray = intArray;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,180, An integer array property accessed as an indexed property.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,182,"rivate int intIndexed[] = { 0, 10, 20, 30, 40 };"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,184,ublic int getIntIndexed(int index) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,185,eturn (intIndexed[index]);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,188,"ublic void setIntIndexed(int index, int value) {"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,189,ntIndexed[index] = value;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,194, An integer property.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,196,rivate int intProperty = 123;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,198,ublic int getIntProperty() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,199,eturn (this.intProperty);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,202,ublic void setIntProperty(int intProperty) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,203,his.intProperty = intProperty;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,208, A List property accessed as an indexed property.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,210,rivate static List listIndexed = new ArrayList();
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,212,tatic {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,213,"istIndexed.add(""String 0"");"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,214,"istIndexed.add(""String 1"");"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,215,"istIndexed.add(""String 2"");"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,216,"istIndexed.add(""String 3"");"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,217,"istIndexed.add(""String 4"");"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,220,ublic List getListIndexed() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,221,eturn (listIndexed);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,226, A long property.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,228,rivate long longProperty = 321;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,230,ublic long getLongProperty() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,231,eturn (this.longProperty);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,234,ublic void setLongProperty(long longProperty) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,235,his.longProperty = longProperty;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,240, A mapped property with only a getter and setter for a Map.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,242,rivate Map mapProperty = null;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,244,ublic Map getMapProperty() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,245,/ Create the map the very first time
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,246,f (mapProperty == null) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,247,apProperty = new HashMap();
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,248,"apProperty.put(""First Key"", ""First Value"");"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,249,"apProperty.put(""Second Key"", ""Second Value"");"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,251,eturn (mapProperty);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,254,ublic void setMapProperty(Map mapProperty) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,255,/ Create the map the very first time
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,256,f (mapProperty == null) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,257,apProperty = new HashMap();
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,258,"apProperty.put(""First Key"", ""First Value"");"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,259,"apProperty.put(""Second Key"", ""Second Value"");"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,261,his.mapProperty = mapProperty;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,266, A mapped property that has String keys and Object values.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,268,rivate HashMap mappedObjects = null;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,270,ublic Object getMappedObjects(String key) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,271,/ Create the map the very first time
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,272,f (mappedObjects == null) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,273,appedObjects = new HashMap();
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,274,"appedObjects.put(""First Key"", ""First Value"");"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,275,"appedObjects.put(""Second Key"", ""Second Value"");"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,277,eturn (mappedObjects.get(key));
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,280,"ublic void setMappedObjects(String key, Object value) {"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,281,/ Create the map the very first time
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,282,f (mappedObjects == null) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,283,appedObjects = new HashMap();
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,284,"appedObjects.put(""First Key"", ""First Value"");"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,285,"appedObjects.put(""Second Key"", ""Second Value"");"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,287,"appedObjects.put(key, value);"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,292, A mapped property that has String keys and String values.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,294,rivate HashMap mappedProperty = null;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,296,ublic String getMappedProperty(String key) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,297,/ Create the map the very first time
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,298,f (mappedProperty == null) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,299,appedProperty = new HashMap();
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,300,"appedProperty.put(""First Key"", ""First Value"");"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,301,"appedProperty.put(""Second Key"", ""Second Value"");"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,303,eturn ((String) mappedProperty.get(key));
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,306,"ublic void setMappedProperty(String key, String value) {"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,307,/ Create the map the very first time
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,308,f (mappedProperty == null) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,309,appedProperty = new HashMap();
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,310,"appedProperty.put(""First Key"", ""First Value"");"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,311,"appedProperty.put(""Second Key"", ""Second Value"");"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,313,"appedProperty.put(key, value);"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,318, A mapped property that has String keys and int values.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,320,rivate HashMap mappedIntProperty = null;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,322,ublic int getMappedIntProperty(String key) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,323,/ Create the map the very first time
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,324,f (mappedProperty == null) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,325,appedProperty = new HashMap();
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,326,"appedProperty.put(""One"", new Integer(1));"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,327,"appedProperty.put(""Two"", new Integer(2));"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,329,nteger x = (Integer) mappedIntProperty.get(key);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,330,eturn ((x == null) ? 0 : x.intValue());
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,333,"ublic void setMappedIntProperty(String key, int value) {"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,334,"appedIntProperty.put(key, new Integer(value));"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,339, A nested reference to another test bean (populated as needed).
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,341,rivate TestBean nested = null;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,343,ublic TestBean getNested() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,344,f (nested == null)
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,345,ested = new TestBean();
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,346,eturn (nested);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,351, Another nested reference to a bean containing mapp properties
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,353,lass MappedTestBean {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,354,"ublic void setValue(String key,String val) { }"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,355,"ublic String getValue(String key) { return ""Mapped Value""; }"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,358,rivate MappedTestBean mappedNested = null;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,360,ublic MappedTestBean getMappedNested() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,361,f (mappedNested == null)
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,363,appedNested = new MappedTestBean();
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,365,eturn mappedNested;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,369, A String property with an initial value of null.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,371,rivate String nullProperty = null;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,373,ublic String getNullProperty() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,374,eturn (this.nullProperty);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,377,ublic void setNullProperty(String nullProperty) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,378,his.nullProperty = nullProperty;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,383, A read-only String property.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,385,"rivate String readOnlyProperty = ""Read Only String Property"";"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,387,ublic String getReadOnlyProperty() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,388,eturn (this.readOnlyProperty);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,393, A short property.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,395,rivate short shortProperty = (short) 987;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,397,ublic short getShortProperty() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,398,eturn (this.shortProperty);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,401,ublic void setShortProperty(short shortProperty) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,402,his.shortProperty = shortProperty;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,407, A String array property accessed as a String.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,409,rivate String stringArray[] =
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,410," ""String 0"", ""String 1"", ""String 2"", ""String 3"", ""String 4"" };"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,412,ublic String[] getStringArray() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,413,eturn (this.stringArray);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,416,ublic void setStringArray(String stringArray[]) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,417,his.stringArray = stringArray;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,422, A String array property accessed as an indexed property.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,424,rivate String stringIndexed[] =
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,425," ""String 0"", ""String 1"", ""String 2"", ""String 3"", ""String 4"" };"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,427,ublic String getStringIndexed(int index) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,428,eturn (stringIndexed[index]);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,431,"ublic void setStringIndexed(int index, String value) {"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,432,tringIndexed[index] = value;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,437, A String property.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,439,"rivate String stringProperty = ""This is a string"";"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,441,ublic String getStringProperty() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,442,eturn (this.stringProperty);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,445,ublic void setStringProperty(String stringProperty) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,446,his.stringProperty = stringProperty;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,451, A write-only String property.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,453,"rivate String writeOnlyProperty = ""Write Only String Property"";"
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,455,ublic String getWriteOnlyPropertyValue() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,456,eturn (this.writeOnlyProperty);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,459,ublic void setWriteOnlyProperty(String writeOnlyProperty) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,460,his.writeOnlyProperty = writeOnlyProperty;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,464,/ ------------------------------------------------------- Static Variables
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,468, A static variable that is accessed and updated via static methods
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,469, for MethodUtils testing.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,471,rivate static int counter = 0;
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,475, Return the current value of the counter.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,477,ublic static int currentCounter() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,479,eturn (counter);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,485, Increment the current value of the counter by 1.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,487,ublic static void incrementCounter() {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,489,ncrementCounter(1);
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,495, Increment the current value of the counter by the specified amount.
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,497, @param amount Amount to be added to the current counter
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,499,ublic static void incrementCounter(int amount) {
False,src/test/org/apache/commons/lang/reflect/TestBean.java,src/test/org/apache/commons/lang/reflect/TestBean.java,501,ounter += amount;
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//lang/src/test/org/apache/commons/lang/reflect/priv/Attic/PackageBean.java,v 1.2 2003/08/18 02:22:28 bayard Exp $"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,3, $Revision: 1.2 $
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,4, $Date: 2003/08/18 02:22:28 $
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,8," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,10, Copyright (c) 1999-2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,11, reserved.
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,13," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,14," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,15, are met:
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,17, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,18,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,20, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,21,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,22,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,23,    distribution.
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,25," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,26,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,27,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,28,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,29,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,30,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,32," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,33,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,34,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,35,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,37," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,38,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,39,    permission of the Apache Group.
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,41, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,42," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,43, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,44, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,45," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,46," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,47," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,48," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,49," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,50, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,51," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,52, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,55, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,56, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,57," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,58, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,63,ackage org.apache.commons.lang.reflect.priv;
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,67, <p>This class is designed to test the default access jvm problem workaround.
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,68, The issue is that public methods of a public subclass contained in a default access
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,69, superclass are returned by reflection but an IllegalAccessException is thrown
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,70, when they are invoked.</p>
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,72, <p>This is the default access superclass</p>
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,74, @author Robert Burrell Donkin
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,75, @version $Revision: 1.2 $ $Date: 2003/08/18 02:22:28 $
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,78,lass PackageBean {
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,81,/ ----------------------------------------------------------- Constructors
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,85, Package private constructor - can only use factory method to create
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,86, beans.
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,88,ackageBean() {
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,90,uper();
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,95,/ ------------------------------------------------------------- Properties
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,100,"rivate String bar = ""This is bar"";"
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,102,ublic String getBar() {
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,104,eturn (this.bar);
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,108,ublic void setBar(String bar) {
False,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,src/test/org/apache/commons/lang/reflect/priv/PackageBean.java,110,his.bar = bar;
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//lang/src/test/org/apache/commons/lang/reflect/priv/Attic/PrivateBean.java,v 1.2 2003/08/18 02:22:28 bayard Exp $"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,3, $Revision: 1.2 $
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,4, $Date: 2003/08/18 02:22:28 $
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,8," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,10, Copyright (c) 1999-2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,11, reserved.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,13," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,14," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,15, are met:
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,17, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,18,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,20, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,21,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,22,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,23,    distribution.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,25," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,26,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,27,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,28,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,29,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,30,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,32," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,33,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,34,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,35,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,37," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,38,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,39,    permission of the Apache Group.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,41, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,42," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,43, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,44, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,45," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,46," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,47," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,48," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,49," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,50, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,51," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,52, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,55, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,56, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,57," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,58, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,63,ackage org.apache.commons.lang.reflect.priv;
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,67, Bean that has a private constructor that exposes properties via
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,68, various mechanisms (based on property name):
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,69, <ul>
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,70, <li><strong>foo</strong> - Via direct public method
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,71, <li><strong>bar</strong> - Via directly implemented interface
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,72, <li><strong>baz</strong> - Via indirectly implemented interface
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,73, </ul>
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,75, @author Craig R. McClanahan
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,76, @version $Revision: 1.2 $ $Date: 2003/08/18 02:22:28 $
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,79,lass PrivateBean implements PrivateDirect {
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,82,/ ----------------------------------------------------------- Constructors
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,86, Package private constructor - can only use factory method to create
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,87, beans.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,89,rivateBean() {
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,91,uper();
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,96,/ ------------------------------------------------------------- Properties
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,100, A directly implemented property.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,102,"rivate String foo = ""This is foo"";"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,104,ublic String getFoo() {
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,106,eturn (this.foo);
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,112, A property accessible via a directly implemented interface.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,114,"rivate String bar = ""This is bar"";"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,116,ublic String getBar() {
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,118,eturn (this.bar);
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,124, A method accessible via a directly implemented interface.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,126,ublic String methodBar(String in) {
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,128,eturn (in);
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,134, A property accessible via an indirectly implemented interface.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,136,"rivate String baz = ""This is baz"";"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,138,ublic String getBaz() {
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,140,eturn (this.baz);
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,146, A method accessible via an indirectly implemented interface.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,148,ublic String methodBaz(String in) {
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java,150,eturn (in);
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//lang/src/test/org/apache/commons/lang/reflect/priv/Attic/PrivateBeanFactory.java,v 1.2 2003/08/18 02:22:28 bayard Exp $"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,3, $Revision: 1.2 $
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,4, $Date: 2003/08/18 02:22:28 $
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,8," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,10, Copyright (c) 1999-2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,11, reserved.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,13," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,14," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,15, are met:
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,17, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,18,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,20, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,21,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,22,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,23,    distribution.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,25," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,26,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,27,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,28,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,29,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,30,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,32," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,33,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,34,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,35,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,37," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,38,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,39,    permission of the Apache Group.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,41, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,42," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,43, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,44, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,45," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,46," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,47," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,48," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,49," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,50, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,51," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,52, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,55, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,56, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,57," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,58, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,63,ackage org.apache.commons.lang.reflect.priv;
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,67, Factory class for PrivateBean instances.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,69, @author Craig R. McClanahan
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,70, @author Jan Sorensen
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,71, @version $Revision: 1.2 $ $Date: 2003/08/18 02:22:28 $
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,74,ublic class PrivateBeanFactory {
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,78, Factory method to create new beans.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,80,ublic static PrivateDirect create() {
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,82,eturn (new PrivateBean());
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,88, Factory method to create new beans.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,90,ublic static PrivateDirect createSubclass() {
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java,92,eturn (new PrivateBeanSubclass());
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//lang/src/test/org/apache/commons/lang/reflect/priv/Attic/PrivateBeanSubclass.java,v 1.2 2003/08/18 02:22:28 bayard Exp $"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,3, $Revision: 1.2 $
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,4, $Date: 2003/08/18 02:22:28 $
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,8," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,10, Copyright (c) 1999-2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,11, reserved.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,13," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,14," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,15, are met:
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,17, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,18,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,20, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,21,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,22,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,23,    distribution.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,25," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,26,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,27,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,28,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,29,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,30,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,32," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,33,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,34,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,35,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,37," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,38,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,39,    permission of the Apache Group.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,41, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,42," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,43, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,44, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,45," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,46," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,47," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,48," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,49," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,50, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,51," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,52, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,55, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,56, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,57," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,58, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,63,ackage org.apache.commons.lang.reflect.priv;
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,67, Bean that exposes methods defined by an interface that is implemented
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,68, in the superclass.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,70, @author Jan Sorensen
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,71, @version $Revision: 1.2 $ $Date: 2003/08/18 02:22:28 $
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,74,lass PrivateBeanSubclass extends PrivateBean {
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,77,/ ----------------------------------------------------------- Constructors
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,81, Create a new PrivateBeanSubclass instance.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,83,rivateBeanSubclass() {
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,85,uper();
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,90,/ ------------------------------------------------------------- Properties
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,94, A property accessible via the superclass.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,96,ublic String getBar() {
False,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java,98,eturn (super.getBar());
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//lang/src/test/org/apache/commons/lang/reflect/priv/Attic/PrivateDirect.java,v 1.2 2003/08/18 02:22:28 bayard Exp $"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,3, $Revision: 1.2 $
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,4, $Date: 2003/08/18 02:22:28 $
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,8," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,10, Copyright (c) 1999-2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,11, reserved.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,13," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,14," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,15, are met:
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,17, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,18,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,20, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,21,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,22,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,23,    distribution.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,25," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,26,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,27,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,28,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,29,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,30,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,32," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,33,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,34,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,35,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,37," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,38,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,39,    permission of the Apache Group.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,41, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,42," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,43, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,44, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,45," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,46," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,47," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,48," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,49," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,50, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,51," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,52, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,55, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,56, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,57," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,58, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,63,ackage org.apache.commons.lang.reflect.priv;
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,67, Interface that is directly implemented by PrivateBean.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,69, @author Craig R. McClanahan
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,70, @version $Revision: 1.2 $ $Date: 2003/08/18 02:22:28 $
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,73,ublic interface PrivateDirect extends PrivateIndirect {
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,76,/ ------------------------------------------------------------- Properties
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,80, A property accessible via a directly implemented interface.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,82,tring getBar();
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,86, A method accessible via a directly implemented interface.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java,88,tring methodBar(String in);
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//lang/src/test/org/apache/commons/lang/reflect/priv/Attic/PrivateIndirect.java,v 1.2 2003/08/18 02:22:28 bayard Exp $"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,3, $Revision: 1.2 $
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,4, $Date: 2003/08/18 02:22:28 $
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,8," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,10, Copyright (c) 1999-2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,11, reserved.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,13," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,14," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,15, are met:
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,17, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,18,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,20, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,21,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,22,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,23,    distribution.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,25," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,26,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,27,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,28,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,29,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,30,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,32," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,33,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,34,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,35,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,37," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,38,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,39,    permission of the Apache Group.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,41, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,42," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,43, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,44, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,45," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,46," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,47," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,48," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,49," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,50, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,51," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,52, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,55, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,56, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,57," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,58, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,63,ackage org.apache.commons.lang.reflect.priv;
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,67, Interface that is indirectly implemented by PrivateBean.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,69, @author Craig R. McClanahan
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,70, @version $Revision: 1.2 $ $Date: 2003/08/18 02:22:28 $
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,73,ublic interface PrivateIndirect {
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,76,/ ------------------------------------------------------------- Properties
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,80, A property accessible via an indirectly implemented interface.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,82,ublic String getBaz();
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,86, A method accessible via an indirectly implemented interface.
False,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java,88,ublic String methodBaz(String in);
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//lang/src/test/org/apache/commons/lang/reflect/priv/Attic/PublicSubBean.java,v 1.2 2003/08/18 02:22:28 bayard Exp $"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,3, $Revision: 1.2 $
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,4, $Date: 2003/08/18 02:22:28 $
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,8," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,10, Copyright (c) 1999-2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,11, reserved.
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,13," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,14," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,15, are met:
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,17, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,18,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,20, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,21,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,22,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,23,    distribution.
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,25," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,26,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,27,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,28,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,29,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,30,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,32," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,33,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,34,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,35,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,37," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,38,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,39,    permission of the Apache Group.
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,41, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,42," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,43, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,44, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,45," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,46," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,47," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,48," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,49," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,50, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,51," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,52, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,55, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,56, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,57," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,58, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,63,ackage org.apache.commons.lang.reflect.priv;
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,67, <p>This class is designed to test the default access jvm problem workaround.
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,68, The issue is that public methods of a public subclass contained in a default access
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,69, superclass are returned by reflection but an IllegalAccessException is thrown
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,70, when they are invoked.</p>
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,72, <p>This is the default access superclass</p>
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,74, @author Robert Burrell Donkin
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,75, @version $Revision: 1.2 $ $Date: 2003/08/18 02:22:28 $
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,78,ublic class PublicSubBean extends PackageBean {
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,81,/ ----------------------------------------------------------- Constructors
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,85, Package private constructor - can only use factory method to create
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,86, beans.
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,88,ublic PublicSubBean() {
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,90,uper();
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,95,/ ------------------------------------------------------------- Properties
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,99, A directly implemented property.
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,101,"rivate String foo = ""This is foo"";"
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,103,ublic String getFoo() {
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,105,eturn (this.foo);
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,109,ublic void setFoo(String foo) {
False,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java,111,his.foo = foo;

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,17,package org.apache.commons.lang3.concurrent;
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,19,import java.util.concurrent.atomic.AtomicReference;
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,22,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,23,* A specialized implementation of the {@code ConcurrentInitializer} interface
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,24,* based on an {@link AtomicReference} variable.
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,25,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,26,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,27,* This class maintains a member field of type {@code AtomicReference}. It
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,28,* implements the following algorithm to create and initialize an object in its
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,29,* {@link #get()} method:
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,30,* <ul>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,31,* <li>First it is checked whether the {@code AtomicReference} variable contains
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,32,"* already a value. If this is the case, the value is directly returned.</li>"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,33,* <li>Otherwise the {@link #initialize()} method is called. This method must be
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,34,* defined in concrete subclasses to actually create the managed object.</li>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,35,* <li>After the object was created by {@link #initialize()} it is checked
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,36,* whether the {@code AtomicReference} variable is still undefined. This has to
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,37,* be done because in the meantime another thread may have initialized the
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,38,"* object. If the reference is still empty, the newly created object is stored"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,39,* in it and returned by this method.</li>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,40,* <li>Otherwise the value stored in the {@code AtomicReference} is returned.</li>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,41,* </ul>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,42,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,43,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,44,* Because atomic variables are used this class does not need any
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,45,"* synchronization. So there is no danger of deadlock, and access to the managed"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,46,"* object is efficient. However, if multiple threads access the {@code"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,47,* AtomicInitializer} object before it has been initialized almost at the same
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,48,"* time, it can happen that {@link #initialize()} is called multiple times. The"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,49,* algorithm outlined above guarantees that {@link #get()} always returns the
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,50,* same object though.
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,51,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,52,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,53,"* Compared with the {@link LazyInitializer} class, this class can be more"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,54,* efficient because it does not need synchronization. The drawback is that the
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,55,* {@link #initialize()} method can be called multiple times which may be
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,56,* problematic if the creation of the managed object is expensive. As a rule of
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,57,* thumb this initializer implementation is preferable if there are not too many
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,58,* threads involved and the probability that multiple threads access an
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,59,"* uninitialized object is small. If there is high parallelism,"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,60,* {@link LazyInitializer} is more appropriate.
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,61,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,63,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,64,* @version $Id$
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,65,* @param <T> the type of the object managed by this initializer class
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,67,public abstract class AtomicInitializer<T> implements ConcurrentInitializer<T> {
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,68,/** Holds the reference to the managed object. */
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,69,private final AtomicReference<T> reference = new AtomicReference<T>();
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,72,* Returns the object managed by this initializer. The object is created if
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,73,* it is not available yet and stored internally. This method always returns
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,74,* the same object.
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,76,* @return the object created by this {@code AtomicInitializer}
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,77,* @throws ConcurrentException if an error occurred during initialization of
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,78,* the object
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,80,public T get() throws ConcurrentException {
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,81,T result = reference.get();
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,83,if (result == null) {
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,84,result = initialize();
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,85,"if (!reference.compareAndSet(null, result)) {"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,86,// another thread has initialized the reference
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,87,result = reference.get();
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,91,return result;
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,95,* Creates and initializes the object managed by this {@code
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,96,* AtomicInitializer}. This method is called by {@link #get()} when the
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,97,* managed object is not available yet. An implementation can focus on the
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,98,"* creation of the object. No synchronization is needed, as this is already"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,99,"* handled by {@code get()}. As stated by the class comment, it is possible"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,100,* that this method is called multiple times.
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,102,* @return the managed data object
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,103,* @throws ConcurrentException if an error occurs during object creation
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java,105,protected abstract T initialize() throws ConcurrentException;
False,src/main/java/org/apache/commons/lang3/concurrent/BackgroundInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/BackgroundInitializer.java,85,ublic abstract class BackgroundInitializer<T> {
True,src/main/java/org/apache/commons/lang3/concurrent/BackgroundInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/BackgroundInitializer.java,85,public abstract class BackgroundInitializer<T> implements
True,src/main/java/org/apache/commons/lang3/concurrent/BackgroundInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/BackgroundInitializer.java,86,ConcurrentInitializer<T> {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,17,package org.apache.commons.lang3.concurrent;
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,20,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,21,* Definition of an interface for the thread-safe initialization of objects.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,22,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,23,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,24,* The idea behind this interface is to provide access to an object in a
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,25,* thread-safe manner. A {@code ConcurrentInitializer} can be passed to multiple
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,26,* threads which can all access the object produced by the initializer. Through
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,27,* the {@link #getInitializedObject()} method the object can be queried.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,28,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,29,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,30,* Concrete implementations of this interface will use different strategies for
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,31,"* the creation of the managed object, e.g. lazy initialization or"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,32,* initialization in a background thread. This is completely transparent to
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,33,"* client code, so it is possible to change the initialization strategy without"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,34,* affecting clients.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,35,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,37,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,38,* @version $Id$
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,39,* @param <T> the type of the object managed by this initializer class
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,41,public interface ConcurrentInitializer<T> {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,43,* Returns the fully initialized object produced by this {@code
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,44,* ConcurrentInitializer}. A concrete implementation here returns the
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,45,* results of the initialization process. This method may block until
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,46,"* results are available. Typically, once created the result object is"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,47,* always the same.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,49,* @return the object created by this {@code ConcurrentException}
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,50,* @throws ConcurrentException if an error occurred during initialization of
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,51,* the object
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java,53,T get() throws ConcurrentException;
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,169,* Invokes the specified {@code ConcurrentInitializer} and returns the
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,170,* object produced by the initializer. This method just invokes the {@code
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,171,* get()} method of the given {@code ConcurrentInitializer}. It is
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,172,"* <b>null</b>-safe: if the argument is <b>null</b>, result is also"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,173,* <b>null</b>.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,175,* @param <T> the type of the object produced by the initializer
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,176,* @param initializer the {@code ConcurrentInitializer} to be invoked
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,177,* @return the object managed by the {@code ConcurrentInitializer}
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,178,* @throws ConcurrentException if the {@code ConcurrentInitializer} throws
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,179,* an exception
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,181,public static <T> T initialize(ConcurrentInitializer<T> initializer)
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,182,throws ConcurrentException {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,183,return (initializer != null) ? initializer.get() : null;
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,187,* Invokes the specified {@code ConcurrentInitializer} and transforms
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,188,* occurring exceptions to runtime exceptions. This method works like
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,189,"* {@link #initialize(ConcurrentInitializer)}, but if the {@code"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,190,"* ConcurrentInitializer} throws a {@link ConcurrentException}, it is"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,191,"* caught, and the cause is wrapped in a {@link ConcurrentRuntimeException}."
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,192,* So client code does not have to deal with checked exceptions.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,194,* @param <T> the type of the object produced by the initializer
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,195,* @param initializer the {@code ConcurrentInitializer} to be invoked
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,196,* @return the object managed by the {@code ConcurrentInitializer}
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,197,* @throws ConcurrentRuntimeException if the initializer throws an exception
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,199,public static <T> T initializeUnchecked(ConcurrentInitializer<T> initializer) {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,200,try {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,201,return initialize(initializer);
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,202,} catch (ConcurrentException cex) {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,203,throw new ConcurrentRuntimeException(cex.getCause());
False,src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java,79,ublic abstract class LazyInitializer<T> {
True,src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java,79,public abstract class LazyInitializer<T> implements ConcurrentInitializer<T> {
True,src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java,88,* @throws ConcurrentException if an error occurred during initialization of
True,src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java,89,* the object
False,src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java,89,ublic T get() {
True,src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java,91,public T get() throws ConcurrentException {
True,src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java,116,* @throws ConcurrentException if an error occurs during object creation
False,src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java,115,rotected abstract T initialize();
True,src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java,118,protected abstract T initialize() throws ConcurrentException;
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,17,package org.apache.commons.lang3.concurrent;
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,19,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,20,import static org.junit.Assert.assertNotNull;
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,22,import java.util.concurrent.CountDownLatch;
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,24,import org.junit.Test;
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,27,* <p>
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,28,* An abstract base class for tests of concrete {@code ConcurrentInitializer}
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,29,* implementations.
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,30,* </p>
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,31,* <p>
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,32,* This class provides some basic tests for initializer implementations. Derived
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,33,* class have to create a {@link ConcurrentInitializer} object on which the
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,34,* tests are executed.
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,35,* </p>
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,37,* @author Apache Software Foundation
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,38,* @version $Id$
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,40,public abstract class AbstractConcurrentInitializerTest {
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,42,* Tests a simple invocation of the get() method.
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,44,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,45,public void testGet() throws ConcurrentException {
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,46,"assertNotNull(""No managed object"", createInitializer().get());"
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,50,* Tests whether sequential get() invocations always return the same
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,51,* instance.
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,53,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,54,public void testGetMultipleTimes() throws ConcurrentException {
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,55,ConcurrentInitializer<Object> initializer = createInitializer();
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,56,Object obj = initializer.get();
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,57,for (int i = 0; i < 10; i++) {
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,58,"assertEquals(""Got different object at "" + i, obj, initializer.get());"
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,63,* Tests whether get() can be invoked from multiple threads concurrently.
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,64,* Always the same object should be returned.
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,66,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,67,"public void testGetConcurrent() throws ConcurrentException,"
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,68,InterruptedException {
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,69,final ConcurrentInitializer<Object> initializer = createInitializer();
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,70,final int threadCount = 20;
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,71,final CountDownLatch startLatch = new CountDownLatch(1);
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,72,class GetThread extends Thread {
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,73,Object object;
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,75,@Override
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,76,public void run() {
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,77,try {
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,78,// wait until all threads are ready for maximum parallelism
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,79,startLatch.await();
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,80,// access the initializer
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,81,object = initializer.get();
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,82,} catch (InterruptedException iex) {
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,83,// ignore
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,84,} catch (ConcurrentException cex) {
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,85,object = cex;
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,90,GetThread[] threads = new GetThread[threadCount];
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,91,for (int i = 0; i < threadCount; i++) {
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,92,threads[i] = new GetThread();
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,93,threads[i].start();
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,96,// fire all threads and wait until they are ready
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,97,startLatch.countDown();
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,98,for (Thread t : threads) {
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,99,t.join();
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,102,// check results
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,103,Object managedObject = initializer.get();
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,104,for (GetThread t : threads) {
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,105,"assertEquals(""Wrong object"", managedObject, t.object);"
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,110,* Creates the {@link ConcurrentInitializer} object to be tested. This
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,111,* method is called whenever the test fixture needs to be obtained.
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,113,* @return the initializer object to be tested
True,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java,115,protected abstract ConcurrentInitializer<Object> createInitializer();
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,17,package org.apache.commons.lang3.concurrent;
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,20,* Test class for {@code AtomicInitializer}.
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,22,* @author Apache Software Foundation
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,23,* @version $Id$
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,25,public class AtomicInitializerTest extends AbstractConcurrentInitializerTest {
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,27,* Returns the initializer to be tested.
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,29,* @return the {@code AtomicInitializer}
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,31,@Override
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,32,protected ConcurrentInitializer<Object> createInitializer() {
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,33,return new AtomicInitializer<Object>() {
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,34,@Override
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,35,protected Object initialize() throws ConcurrentException {
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java,36,return new Object();
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,28,import org.easymock.EasyMock;
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,307,* Tests initialize() for a null argument.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,309,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,310,public void testInitializeNull() throws ConcurrentException {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,311,"assertNull(""Got a result"", ConcurrentUtils.initialize(null));"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,315,* Tests a successful initialize() operation.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,317,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,318,public void testInitialize() throws ConcurrentException {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,319,"@SuppressWarnings(""unchecked"")"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,320,ConcurrentInitializer<Object> init = EasyMock
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,321,.createMock(ConcurrentInitializer.class);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,322,final Object result = new Object();
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,323,EasyMock.expect(init.get()).andReturn(result);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,324,EasyMock.replay(init);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,325,"assertSame(""Wrong result object"", result, ConcurrentUtils"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,326,.initialize(init));
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,327,EasyMock.verify(init);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,331,* Tests initializeUnchecked() for a null argument.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,333,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,334,public void testInitializeUncheckedNull() {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,335,"assertNull(""Got a result"", ConcurrentUtils.initializeUnchecked(null));"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,339,* Tests a successful initializeUnchecked() operation.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,341,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,342,public void testInitializeUnchecked() throws ConcurrentException {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,343,"@SuppressWarnings(""unchecked"")"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,344,ConcurrentInitializer<Object> init = EasyMock
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,345,.createMock(ConcurrentInitializer.class);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,346,final Object result = new Object();
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,347,EasyMock.expect(init.get()).andReturn(result);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,348,EasyMock.replay(init);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,349,"assertSame(""Wrong result object"", result, ConcurrentUtils"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,350,.initializeUnchecked(init));
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,351,EasyMock.verify(init);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,355,* Tests whether exceptions are correctly handled by initializeUnchecked().
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,357,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,358,public void testInitializeUncheckedEx() throws ConcurrentException {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,359,"@SuppressWarnings(""unchecked"")"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,360,ConcurrentInitializer<Object> init = EasyMock
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,361,.createMock(ConcurrentInitializer.class);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,362,final Exception cause = new Exception();
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,363,EasyMock.expect(init.get()).andThrow(new ConcurrentException(cause));
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,364,EasyMock.replay(init);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,365,try {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,366,ConcurrentUtils.initializeUnchecked(init);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,367,"fail(""Exception not thrown!"");"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,368,} catch (ConcurrentRuntimeException crex) {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,369,"assertSame(""Wrong cause"", cause, crex.getCause());"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,371,EasyMock.verify(init);
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,19,mport java.util.concurrent.CountDownLatch;
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,21,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,19,import org.junit.Before;
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,28,ublic class LazyInitializerTest extends TestCase {
True,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,26,public class LazyInitializerTest extends AbstractConcurrentInitializerTest {
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,32,Override
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,33,rotected void setUp() throws Exception {
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,34,uper.setUp();
True,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,30,@Before
True,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,31,public void setUp() throws Exception {
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,39, Tests obtaining the managed object.
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,41,ublic void testGet() {
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,42,"ssertNotNull(""No managed object"", initializer.get());"
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,46, Tests whether sequential get() invocations always return the same
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,47, instance.
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,49,ublic void testGetMultipleTimes() {
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,50,bject obj = initializer.get();
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,51,or (int i = 0; i < 10; i++) {
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,52,"ssertEquals(""Got different object at "" + i, obj, initializer.get());"
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,57, Tests invoking get() from multiple threads concurrently.
True,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,36,* Returns the initializer to be tested. This implementation returns the
True,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,37,* {@code LazyInitializer} created in the {@code setUp()} method.
True,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,39,* @return the initializer to be tested
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,59,ublic void testGetConcurrent() throws InterruptedException {
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,60,inal int threadCount = 20;
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,61,inal CountDownLatch startLatch = new CountDownLatch(1);
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,62,lass GetThread extends Thread {
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,63,bject object;
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,65,Override
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,66,ublic void run() {
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,67,ry {
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,68,/ wait until all threads are ready for maximum parallelism
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,69,tartLatch.await();
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,70,/ access the initializer
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,71,bject = initializer.get();
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,72, catch (InterruptedException iex) {
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,73,/ ignore
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,78,etThread[] threads = new GetThread[threadCount];
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,79,or (int i = 0; i < threadCount; i++) {
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,80,hreads[i] = new GetThread();
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,81,hreads[i].start();
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,84,/ fire all threads and wait until they are ready
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,85,tartLatch.countDown();
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,86,or (Thread t : threads) {
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,87,.join();
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,90,/ check results
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,91,bject managedObject = initializer.get();
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,92,or (GetThread t : threads) {
False,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,93,"ssertEquals(""Wrong object"", managedObject, t.object);"
True,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,41,@Override
True,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,42,protected ConcurrentInitializer<Object> createInitializer() {
True,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java,43,return initializer;

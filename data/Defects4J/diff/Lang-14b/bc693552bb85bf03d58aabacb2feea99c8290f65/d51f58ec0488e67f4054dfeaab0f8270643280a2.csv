is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,22,mport java.util.HashMap;
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,26,mport java.util.Map;
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,26,import java.util.concurrent.ConcurrentHashMap;
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,27,import java.util.concurrent.ConcurrentMap;
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,42,** Unmodifiable list of available locales. */
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,43,"/@GuardedBy(""this"")"
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,44,rivate static List<Locale> cAvailableLocaleList; // lazily created by availableLocaleList()
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,42,/** Concurrent map of language locales by country. */
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,43,"private static final ConcurrentMap<String, List<Locale>> cLanguagesByCountry ="
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,44,"new ConcurrentHashMap<String, List<Locale>>();"
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,46,** Unmodifiable set of available locales. */
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,47,"/@GuardedBy(""this"")"
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,48,rivate static Set<Locale> cAvailableLocaleSet;   // lazily created by availableLocaleSet()
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,50,** Unmodifiable map of language locales by country. */
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,51,"rivate static final Map<String, List<Locale>> cLanguagesByCountry ="
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,52,"ollections.synchronizedMap(new HashMap<String, List<Locale>>());"
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,54,** Unmodifiable map of country locales by language. */
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,55,"rivate static final Map<String, List<Locale>> cCountriesByLanguage ="
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,56,"ollections.synchronizedMap(new HashMap<String, List<Locale>>());"
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,46,/** Concurrent map of country locales by language. */
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,47,"private static final ConcurrentMap<String, List<Locale>> cCountriesByLanguage ="
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,48,"new ConcurrentHashMap<String, List<Locale>>();"
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,146," @return the unmodifiable list of Locale objects, 0 being locale, never null"
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,138,"* @return the unmodifiable list of Locale objects, 0 being locale, not null"
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,168," @return the unmodifiable list of Locale objects, 0 being locale, never null"
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,160,"* @return the unmodifiable list of Locale objects, 0 being locale, not null"
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,198,f(cAvailableLocaleList == null) {
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,199,nitAvailableLocaleList();
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,201,eturn cAvailableLocaleList;
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,205, Initializes the availableLocaleList. It is separate from availableLocaleList()
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,206," to avoid the synchronized block affecting normal use, yet synchronized and"
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,207, lazy loading to avoid a static block affecting other methods in this class.
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,209,rivate static synchronized void initAvailableLocaleList() {
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,210,f(cAvailableLocaleList == null) {
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,211,ist<Locale> list = Arrays.asList(Locale.getAvailableLocales());
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,212,AvailableLocaleList = Collections.unmodifiableList(list);
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,190,return SyncAvoid.AVAILABLE_LOCALE_LIST;
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,227,f(cAvailableLocaleSet == null) {
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,228,nitAvailableLocaleSet();
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,230,eturn cAvailableLocaleSet;
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,234, Initializes the availableLocaleSet. It is separate from availableLocaleSet()
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,235," to avoid the synchronized block affecting normal use, yet synchronized and"
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,236, lazy loading to avoid a static block affecting other methods in this class.
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,238,rivate static synchronized void initAvailableLocaleSet() {
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,239,f(cAvailableLocaleSet == null) {
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,240,AvailableLocaleSet = Collections.unmodifiableSet( new HashSet<Locale>(availableLocaleList()) );
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,204,return SyncAvoid.AVAILABLE_LOCALE_SET;
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,263," @return an unmodifiable List of Locale objects, never null"
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,226,"* @return an unmodifiable List of Locale objects, not null"
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,266,ist<Locale> langs = cLanguagesByCountry.get(countryCode);  //syncd
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,229,if (countryCode == null) {
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,230,return Collections.emptyList();
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,232,List<Locale> langs = cLanguagesByCountry.get(countryCode);
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,268,f (countryCode != null) {
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,269,angs = new ArrayList<Locale>();
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,270,ist<Locale> locales = availableLocaleList();
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,271,or (int i = 0; i < locales.size(); i++) {
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,272,ocale locale = locales.get(i);
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,273,f (countryCode.equals(locale.getCountry()) &&
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,274,ocale.getVariant().length() == 0) {
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,275,angs.add(locale);
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,234,langs = new ArrayList<Locale>();
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,235,List<Locale> locales = availableLocaleList();
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,236,for (int i = 0; i < locales.size(); i++) {
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,237,Locale locale = locales.get(i);
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,238,if (countryCode.equals(locale.getCountry()) &&
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,239,locale.getVariant().length() == 0) {
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,240,langs.add(locale);
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,278,angs = Collections.unmodifiableList(langs);
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,279, else {
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,280,angs = Collections.emptyList();
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,282,"LanguagesByCountry.put(countryCode, langs);  //syncd"
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,243,langs = Collections.unmodifiableList(langs);
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,244,"cLanguagesByCountry.putIfAbsent(countryCode, langs);"
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,245,langs = cLanguagesByCountry.get(countryCode);
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,295," @return an unmodifiable List of Locale objects, never null"
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,258,"* @return an unmodifiable List of Locale objects, not null"
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,298,ist<Locale> countries = cCountriesByLanguage.get(languageCode);  //syncd
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,261,if (languageCode == null) {
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,262,return Collections.emptyList();
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,264,List<Locale> countries = cCountriesByLanguage.get(languageCode);
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,300,f (languageCode != null) {
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,301,ountries = new ArrayList<Locale>();
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,302,ist<Locale> locales = availableLocaleList();
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,303,or (int i = 0; i < locales.size(); i++) {
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,304,ocale locale = locales.get(i);
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,305,f (languageCode.equals(locale.getLanguage()) &&
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,306,ocale.getCountry().length() != 0 &&
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,307,ocale.getVariant().length() == 0) {
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,308,ountries.add(locale);
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,266,countries = new ArrayList<Locale>();
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,267,List<Locale> locales = availableLocaleList();
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,268,for (int i = 0; i < locales.size(); i++) {
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,269,Locale locale = locales.get(i);
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,270,if (languageCode.equals(locale.getLanguage()) &&
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,271,locale.getCountry().length() != 0 &&
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,272,locale.getVariant().length() == 0) {
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,273,countries.add(locale);
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,311,ountries = Collections.unmodifiableList(countries);
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,312, else {
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,313,ountries = Collections.emptyList();
False,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,315,"CountriesByLanguage.put(languageCode, countries);  //syncd"
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,276,countries = Collections.unmodifiableList(countries);
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,277,"cCountriesByLanguage.putIfAbsent(languageCode, countries);"
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,278,countries = cCountriesByLanguage.get(languageCode);
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,284,// class to avoid synchronization
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,285,static class SyncAvoid {
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,286,/** Unmodifiable list of available locales. */
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,287,private static List<Locale> AVAILABLE_LOCALE_LIST;
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,288,/** Unmodifiable set of available locales. */
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,289,private static Set<Locale> AVAILABLE_LOCALE_SET;
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,291,static {
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,292,List<Locale> list = new ArrayList<Locale>(Arrays.asList(Locale.getAvailableLocales()));  // extra safe
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,293,AVAILABLE_LOCALE_LIST = Collections.unmodifiableList(list);
True,src/main/java/org/apache/commons/lang3/LocaleUtils.java,src/main/java/org/apache/commons/lang3/LocaleUtils.java,294,AVAILABLE_LOCALE_SET = Collections.unmodifiableSet(new HashSet<Locale>(availableLocaleList()));

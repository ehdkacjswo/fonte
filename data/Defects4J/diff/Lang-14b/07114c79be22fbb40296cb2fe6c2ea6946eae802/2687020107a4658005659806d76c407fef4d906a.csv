is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,17,package org.apache.commons.lang3.tuple;
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,20,* <p>An immutable triple consisting of three {@code Object} elements.</p>
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,22,"* <p>Although the implementation is immutable, there is no restriction on the objects"
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,23,"* that may be stored. If mutable objects are stored in the triple, then the triple"
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,24,"* itself effectively becomes mutable. The class is also not {@code final}, so a subclass"
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,25,* could add undesirable behaviour.</p>
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,27,* <p>#ThreadSafe# if all three objects are thread-safe</p>
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,29,* @param <L> the left element type
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,30,* @param <M> the middle element type
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,31,* @param <R> the right element type
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,33,* @version $Id$
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,35,"public final class ImmutableTriple<L, M, R> extends Triple<L, M, R> {"
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,37,/** Serialization version */
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,38,private static final long serialVersionUID = 1L;
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,40,/** Left object */
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,41,public final L left;
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,42,/** Middle object */
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,43,public final M middle;
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,44,/** Right object */
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,45,public final R right;
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,48,* <p>Obtains an immutable triple of from three objects inferring the generic types.</p>
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,50,* <p>This factory allows the triple to be created using inference to
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,51,* obtain the generic types.</p>
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,53,* @param <L> the left element type
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,54,* @param <M> the middle element type
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,55,* @param <R> the right element type
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,56,"* @param left  the left element, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,57,"* @param middle  the middle element, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,58,"* @param right  the right element, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,59,"* @return a triple formed from the three parameters, not null"
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,61,"public static <L, M, R> ImmutableTriple<L, M, R> of(L left, M middle, R right) {"
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,62,"return new ImmutableTriple<L, M, R>(left, middle, right);"
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,66,* Create a new triple instance.
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,68,"* @param left  the left value, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,69,"* @param middle the middle value, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,70,"* @param right  the right value, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,72,"public ImmutableTriple(L left, M middle, R right) {"
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,73,super();
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,74,this.left = left;
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,75,this.middle = middle;
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,76,this.right = right;
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,81,* {@inheritDoc}
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,83,@Override
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,84,public L getLeft() {
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,85,return left;
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,89,* {@inheritDoc}
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,91,@Override
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,92,public M getMiddle() {
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,93,return middle;
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,97,* {@inheritDoc}
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,99,@Override
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,100,public R getRight() {
True,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java,101,return right;
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,17,package org.apache.commons.lang3.tuple;
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,20,* <p>A mutable triple consisting of three {@code Object} elements.</p>
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,22,* <p>Not #ThreadSafe#</p>
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,24,* @param <L> the left element type
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,25,* @param <M> the middle element type
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,26,* @param <R> the right element type
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,28,* @version $Id$
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,30,"public class MutableTriple<L, M, R> extends Triple<L, M, R> {"
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,32,/** Serialization version */
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,33,private static final long serialVersionUID = 1L;
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,35,/** Left object */
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,36,public L left;
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,37,/** Middle object */
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,38,public M middle;
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,39,/** Right object */
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,40,public R right;
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,43,* <p>Obtains an mutable triple of three objects inferring the generic types.</p>
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,45,* <p>This factory allows the triple to be created using inference to
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,46,* obtain the generic types.</p>
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,48,* @param <L> the left element type
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,49,* @param <M> the middle element type
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,50,* @param <R> the right element type
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,51,"* @param left  the left element, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,52,"* @param middle  the middle element, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,53,"* @param right  the right element, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,54,"* @return a triple formed from the three parameters, not null"
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,56,"public static <L, M, R> MutableTriple<L, M, R> of(L left, M middle, R right) {"
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,57,"return new MutableTriple<L, M, R>(left, middle, right);"
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,61,* Create a new triple instance of three nulls.
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,63,public MutableTriple() {
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,64,super();
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,68,* Create a new triple instance.
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,70,"* @param left  the left value, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,71,"* @param middle  the middle value, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,72,"* @param right  the right value, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,74,"public MutableTriple(L left, M middle, R right) {"
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,75,super();
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,76,this.left = left;
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,77,this.middle = middle;
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,78,this.right = right;
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,83,* {@inheritDoc}
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,85,@Override
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,86,public L getLeft() {
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,87,return left;
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,91,* Sets the left element of the triple.
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,93,"* @param left  the new value of the left element, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,95,public void setLeft(L left) {
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,96,this.left = left;
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,100,* {@inheritDoc}
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,102,@Override
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,103,public M getMiddle() {
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,104,return middle;
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,108,* Sets the middle element of the triple.
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,110,"* @param middle  the new value of the middle element, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,112,public void setMiddle(M middle) {
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,113,this.middle = middle;
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,117,* {@inheritDoc}
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,119,@Override
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,120,public R getRight() {
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,121,return right;
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,125,* Sets the right element of the triple.
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,127,"* @param right  the new value of the right element, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,129,public void setRight(R right) {
True,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java,130,this.right = right;
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,17,package org.apache.commons.lang3.tuple;
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,19,import java.io.Serializable;
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,21,import org.apache.commons.lang3.ObjectUtils;
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,22,import org.apache.commons.lang3.builder.CompareToBuilder;
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,25,* <p>A triple consisting of three elements.</p>
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,27,* <p>This class is an abstract implementation defining the basic API.
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,28,"* It refers to the elements as 'left', 'middle' and 'right'.</p>"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,30,* <p>Subclass implementations may be mutable or immutable.
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,31,"* However, there is no restriction on the type of the stored objects that may be stored."
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,32,"* If mutable objects are stored in the triple, then the triple itself effectively becomes mutable.</p>"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,34,* @param <L> the left element type
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,35,* @param <M> the middle element type
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,36,* @param <R> the right element type
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,38,* @version $Id$
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,40,"public abstract class Triple<L, M, R> implements Comparable<Triple<L, M, R>>, Serializable {"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,42,/** Serialization version */
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,43,private static final long serialVersionUID = 1L;
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,46,* <p>Obtains an immutable triple of from three objects inferring the generic types.</p>
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,48,* <p>This factory allows the triple to be created using inference to
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,49,* obtain the generic types.</p>
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,51,* @param <L> the left element type
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,52,* @param <M> the middle element type
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,53,* @param <R> the right element type
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,54,"* @param left  the left element, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,55,"* @param middle the middle element, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,56,"* @param right  the right element, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,57,"* @return a triple formed from the three parameters, not null"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,59,"public static <L, M, R> Triple<L, M, R> of(L left, M middle, R right) {"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,60,"return new ImmutableTriple<L, M, R>(left, middle, right);"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,65,* <p>Gets the left element from this triple.</p>
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,67,"* @return the left element, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,69,public abstract L getLeft();
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,72,* <p>Gets the middle element from this triple.</p>
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,74,"* @return the middle element, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,76,public abstract M getMiddle();
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,79,* <p>Gets the right element from this triple.</p>
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,81,"* @return the right element, may be null"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,83,public abstract R getRight();
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,87,"* <p>Compares the triple based on the left element, followed by the middle element,"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,88,* finally the right element.
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,89,* The types must be {@code Comparable}.</p>
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,91,"* @param other  the other triple, not null"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,92,"* @return negative if this is less, zero if equal, positive if greater"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,94,"public int compareTo(Triple<L, M, R> other) {"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,95,"return new CompareToBuilder().append(getLeft(), other.getLeft())"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,96,".append(getMiddle(), other.getMiddle())"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,97,".append(getRight(), other.getRight()).toComparison();"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,101,* <p>Compares this triple to another based on the three elements.</p>
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,103,"* @param obj  the object to compare to, null returns false"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,104,* @return true if the elements of the triple are equal
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,106,@Override
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,107,public boolean equals(Object obj) {
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,108,if (obj == this) {
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,109,return true;
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,111,"if (obj instanceof Triple<?, ?, ?>) {"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,112,"Triple<?, ?, ?> other = (Triple<?, ?, ?>) obj;"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,113,"return ObjectUtils.equals(getLeft(), other.getLeft())"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,114,"&& ObjectUtils.equals(getMiddle(), other.getMiddle())"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,115,"&& ObjectUtils.equals(getRight(), other.getRight());"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,117,return false;
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,121,* <p>Returns a suitable hash code.</p>
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,123,* @return the hash code
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,125,@Override
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,126,public int hashCode() {
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,127,return (getLeft() == null ? 0 : getLeft().hashCode()) ^
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,128,(getMiddle() == null ? 0 : getMiddle().hashCode()) ^
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,129,(getRight() == null ? 0 : getRight().hashCode());
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,133,"* <p>Returns a String representation of this triple using the format {@code ($left,$middle,$right)}.</p>"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,135,"* @return a string describing this object, not null"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,137,@Override
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,138,public String toString() {
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,139,"return new StringBuilder().append('(').append(getLeft()).append(',').append(getMiddle()).append(',')"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,140,.append(getRight()).append(')').toString();
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,144,* <p>Formats the receiver using the given format.</p>
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,146,* <p>This uses {@link java.util.Formattable} to perform the formatting. Three variables may
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,147,* be used to embed the left and right elements. Use {@code %1$s} for the left
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,148,"* element, {@code %2$s} for the middle and {@code %3$s} for the right element."
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,149,"* The default format used by {@code toString()} is {@code (%1$s,%2$s,%3$s)}.</p>"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,151,"* @param format  the format string, optionally containing {@code %1$s}, {@code %2$s} and {@code %3$s}, not null"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,152,"* @return the formatted string, not null"
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,154,public String toString(String format) {
True,src/main/java/org/apache/commons/lang3/tuple/Triple.java,src/main/java/org/apache/commons/lang3/tuple/Triple.java,155,"return String.format(format, getLeft(), getMiddle(), getRight());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,17,package org.apache.commons.lang3.tuple;
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,19,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,20,import static org.junit.Assert.assertFalse;
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,21,import static org.junit.Assert.assertNull;
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,22,import static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,24,import java.io.ByteArrayInputStream;
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,25,import java.io.ByteArrayOutputStream;
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,26,import java.io.ObjectInputStream;
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,27,import java.io.ObjectOutputStream;
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,29,import org.junit.Test;
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,32,* Test the Triple class.
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,33,* @version $Id$
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,35,public class ImmutableTripleTest {
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,37,@Test
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,38,public void testBasic() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,39,"ImmutableTriple<Integer, String, Boolean> triple = new ImmutableTriple<Integer, String, Boolean>(0, ""foo"", Boolean.TRUE);"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,40,"assertEquals(0, triple.left.intValue());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,41,"assertEquals(0, triple.getLeft().intValue());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,42,"assertEquals(""foo"", triple.middle);"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,43,"assertEquals(""foo"", triple.getMiddle());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,44,"assertEquals(Boolean.TRUE, triple.right);"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,45,"assertEquals(Boolean.TRUE, triple.getRight());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,46,"ImmutableTriple<Object, String, Integer> triple2 = new ImmutableTriple<Object, String, Integer>(null, ""bar"", 42);"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,47,assertNull(triple2.left);
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,48,assertNull(triple2.getLeft());
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,49,"assertEquals(""bar"", triple2.middle);"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,50,"assertEquals(""bar"", triple2.getMiddle());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,51,"assertEquals(new Integer(42), triple2.right);"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,52,"assertEquals(new Integer(42), triple2.getRight());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,55,@Test
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,56,public void testTripleOf() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,57,"ImmutableTriple<Integer, String, Boolean> triple = ImmutableTriple.of(0, ""foo"", Boolean.FALSE);"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,58,"assertEquals(0, triple.left.intValue());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,59,"assertEquals(0, triple.getLeft().intValue());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,60,"assertEquals(""foo"", triple.middle);"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,61,"assertEquals(""foo"", triple.getMiddle());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,62,"assertEquals(Boolean.FALSE, triple.right);"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,63,"assertEquals(Boolean.FALSE, triple.getRight());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,64,"ImmutableTriple<Object, String, Boolean> triple2 = ImmutableTriple.of(null, ""bar"", Boolean.TRUE);"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,65,assertNull(triple2.left);
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,66,assertNull(triple2.getLeft());
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,67,"assertEquals(""bar"", triple2.middle);"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,68,"assertEquals(""bar"", triple2.getMiddle());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,69,"assertEquals(Boolean.TRUE, triple2.right);"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,70,"assertEquals(Boolean.TRUE, triple2.getRight());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,73,@Test
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,74,public void testEquals() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,75,"assertEquals(ImmutableTriple.of(null, ""foo"", 42), ImmutableTriple.of(null, ""foo"", 42));"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,76,"assertFalse(ImmutableTriple.of(""foo"", 0, Boolean.TRUE).equals(ImmutableTriple.of(""foo"", null, null)));"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,77,"assertFalse(ImmutableTriple.of(""foo"", ""bar"", ""baz"").equals(ImmutableTriple.of(""xyz"", ""bar"", ""blo"")));"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,79,"ImmutableTriple<String, String, String> p = ImmutableTriple.of(""foo"", ""bar"", ""baz"");"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,80,assertTrue(p.equals(p));
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,81,assertFalse(p.equals(new Object()));
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,84,@Test
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,85,public void testHashCode() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,86,"assertEquals(ImmutableTriple.of(null, ""foo"", Boolean.TRUE).hashCode(), ImmutableTriple.of(null, ""foo"", Boolean.TRUE).hashCode());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,89,@Test
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,90,public void testToString() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,91,"assertEquals(""(null,null,null)"", ImmutableTriple.of(null, null, null).toString());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,92,"assertEquals(""(null,two,null)"", ImmutableTriple.of(null, ""two"", null).toString());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,93,"assertEquals(""(one,null,null)"", ImmutableTriple.of(""one"", null, null).toString());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,94,"assertEquals(""(one,two,null)"", ImmutableTriple.of(""one"", ""two"", null).toString());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,95,"assertEquals(""(null,two,three)"", ImmutableTriple.of(null, ""two"", ""three"").toString());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,96,"assertEquals(""(one,null,three)"", ImmutableTriple.of(""one"", null, ""three"").toString());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,97,"assertEquals(""(one,two,three)"", MutableTriple.of(""one"", ""two"", ""three"").toString());"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,100,@Test
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,101,"@SuppressWarnings(""unchecked"")"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,102,public void testSerialization() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,103,"ImmutableTriple<Integer, String, Boolean> origTriple = ImmutableTriple.of(0, ""foo"", Boolean.TRUE);"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,104,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,105,ObjectOutputStream out = new ObjectOutputStream(baos);
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,106,out.writeObject(origTriple);
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,107,"ImmutableTriple<Integer, String, Boolean> deserializedTriple = (ImmutableTriple<Integer, String, Boolean>) new ObjectInputStream("
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,108,new ByteArrayInputStream(baos.toByteArray())).readObject();
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,109,"assertEquals(origTriple, deserializedTriple);"
True,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,110,"assertEquals(origTriple.hashCode(), deserializedTriple.hashCode());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,17,package org.apache.commons.lang3.tuple;
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,19,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,20,import static org.junit.Assert.assertFalse;
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,21,import static org.junit.Assert.assertNull;
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,22,import static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,24,import java.io.ByteArrayInputStream;
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,25,import java.io.ByteArrayOutputStream;
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,26,import java.io.ObjectInputStream;
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,27,import java.io.ObjectOutputStream;
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,29,import org.junit.Test;
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,32,* Test the MutableTriple class.
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,33,* @version $Id$
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,35,public class MutableTripleTest {
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,37,@Test
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,38,public void testBasic() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,39,"MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, ""foo"", Boolean.FALSE);"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,40,"assertEquals(0, triple.getLeft().intValue());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,41,"assertEquals(""foo"", triple.getMiddle());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,42,"assertEquals(Boolean.FALSE, triple.getRight());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,43,"MutableTriple<Object, String, String> triple2 = new MutableTriple<Object, String, String>(null, ""bar"", ""hello"");"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,44,assertNull(triple2.getLeft());
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,45,"assertEquals(""bar"", triple2.getMiddle());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,46,"assertEquals(""hello"", triple2.getRight());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,49,@Test
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,50,public void testDefault() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,51,"MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>();"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,52,assertNull(triple.getLeft());
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,53,assertNull(triple.getMiddle());
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,54,assertNull(triple.getRight());
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,57,@Test
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,58,public void testMutate() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,59,"MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, ""foo"", Boolean.TRUE);"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,60,triple.setLeft(42);
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,61,"triple.setMiddle(""bar"");"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,62,triple.setRight(Boolean.FALSE);
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,63,"assertEquals(42, triple.getLeft().intValue());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,64,"assertEquals(""bar"", triple.getMiddle());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,65,assertFalse(triple.getRight());
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,68,@Test
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,69,public void testTripleOf() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,70,"MutableTriple<Integer, String, Boolean> triple = MutableTriple.of(0, ""foo"", Boolean.TRUE);"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,71,"assertEquals(0, triple.getLeft().intValue());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,72,"assertEquals(""foo"", triple.getMiddle());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,73,assertTrue(triple.getRight());
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,74,"MutableTriple<Object, String, String> triple2 = MutableTriple.of(null, ""bar"", ""hello"");"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,75,assertNull(triple2.getLeft());
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,76,"assertEquals(""bar"", triple2.getMiddle());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,77,"assertEquals(""hello"", triple2.getRight());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,80,@Test
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,81,public void testEquals() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,82,"assertEquals(MutableTriple.of(null, ""foo"", ""baz""), MutableTriple.of(null, ""foo"", ""baz""));"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,83,"assertFalse(MutableTriple.of(""foo"", 0, Boolean.TRUE).equals(MutableTriple.of(""foo"", null, Boolean.TRUE)));"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,84,"assertFalse(MutableTriple.of(""foo"", ""bar"", ""baz"").equals(MutableTriple.of(""xyz"", ""bar"", ""baz"")));"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,85,"assertFalse(MutableTriple.of(""foo"", ""bar"", ""baz"").equals(MutableTriple.of(""foo"", ""bar"", ""blo"")));"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,87,"MutableTriple<String, String, String> p = MutableTriple.of(""foo"", ""bar"", ""baz"");"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,88,assertTrue(p.equals(p));
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,89,assertFalse(p.equals(new Object()));
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,92,@Test
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,93,public void testHashCode() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,94,"assertEquals(MutableTriple.of(null, ""foo"", ""baz"").hashCode(), MutableTriple.of(null, ""foo"", ""baz"").hashCode());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,97,@Test
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,98,public void testToString() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,99,"assertEquals(""(null,null,null)"", MutableTriple.of(null, null, null).toString());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,100,"assertEquals(""(null,two,null)"", MutableTriple.of(null, ""two"", null).toString());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,101,"assertEquals(""(one,null,null)"", MutableTriple.of(""one"", null, null).toString());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,102,"assertEquals(""(one,two,null)"", MutableTriple.of(""one"", ""two"", null).toString());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,103,"assertEquals(""(null,two,three)"", MutableTriple.of(null, ""two"", ""three"").toString());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,104,"assertEquals(""(one,null,three)"", MutableTriple.of(""one"", null, ""three"").toString());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,105,"assertEquals(""(one,two,three)"", MutableTriple.of(""one"", ""two"", ""three"").toString());"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,108,@Test
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,109,"@SuppressWarnings(""unchecked"")"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,110,public void testSerialization() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,111,"MutableTriple<Integer, String, Boolean> origTriple = MutableTriple.of(0, ""foo"", Boolean.TRUE);"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,112,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,113,ObjectOutputStream out = new ObjectOutputStream(baos);
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,114,out.writeObject(origTriple);
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,115,"MutableTriple<Integer, String, Boolean> deserializedTriple = (MutableTriple<Integer, String, Boolean>) new ObjectInputStream("
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,116,new ByteArrayInputStream(baos.toByteArray())).readObject();
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,117,"assertEquals(origTriple, deserializedTriple);"
True,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,118,"assertEquals(origTriple.hashCode(), deserializedTriple.hashCode());"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,17,package org.apache.commons.lang3.tuple;
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,19,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,20,import static org.junit.Assert.assertNull;
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,21,import static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,23,import java.util.Calendar;
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,24,import java.util.HashSet;
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,26,import org.junit.Test;
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,29,* Test the Triple class.
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,31,* @version $Id$
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,33,public class TripleTest {
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,35,@Test
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,36,public void testTripleOf() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,37,"Triple<Integer, String, Boolean> triple = Triple.of(0, ""foo"", Boolean.TRUE);"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,38,"assertTrue(triple instanceof ImmutableTriple<?, ?, ?>);"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,39,"assertEquals(0, ((ImmutableTriple<Integer, String, Boolean>) triple).left.intValue());"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,40,"assertEquals(""foo"", ((ImmutableTriple<Integer, String, Boolean>) triple).middle);"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,41,"assertEquals(Boolean.TRUE, ((ImmutableTriple<Integer, String, Boolean>) triple).right);"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,42,"Triple<Object, String, Long> triple2 = Triple.of(null, ""bar"", 200L);"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,43,"assertTrue(triple2 instanceof ImmutableTriple<?, ?, ?>);"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,44,"assertNull(((ImmutableTriple<Object, String, Long>) triple2).left);"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,45,"assertEquals(""bar"", ((ImmutableTriple<Object, String, Long>) triple2).middle);"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,46,"assertEquals(new Long(200L), ((ImmutableTriple<Object, String, Long>) triple2).right);"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,49,@Test
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,50,public void testCompatibilityBetweenTriples() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,51,"Triple<Integer, String, Boolean> triple = ImmutableTriple.of(0, ""foo"", Boolean.TRUE);"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,52,"Triple<Integer, String, Boolean> triple2 = MutableTriple.of(0, ""foo"", Boolean.TRUE);"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,53,"assertEquals(triple, triple2);"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,54,"assertEquals(triple.hashCode(), triple2.hashCode());"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,55,"HashSet<Triple<Integer, String, Boolean>> set = new HashSet<Triple<Integer, String, Boolean>>();"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,56,set.add(triple);
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,57,assertTrue(set.contains(triple2));
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,60,@Test
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,61,public void testComparable1() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,62,"Triple<String, String, String> triple1 = Triple.of(""A"", ""D"", ""A"");"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,63,"Triple<String, String, String> triple2 = Triple.of(""B"", ""C"", ""A"");"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,64,assertTrue(triple1.compareTo(triple1) == 0);
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,65,assertTrue(triple1.compareTo(triple2) < 0);
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,66,assertTrue(triple2.compareTo(triple2) == 0);
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,67,assertTrue(triple2.compareTo(triple1) > 0);
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,70,@Test
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,71,public void testComparable2() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,72,"Triple<String, String, String> triple1 = Triple.of(""A"", ""C"", ""B"");"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,73,"Triple<String, String, String> triple2 = Triple.of(""A"", ""D"", ""B"");"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,74,assertTrue(triple1.compareTo(triple1) == 0);
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,75,assertTrue(triple1.compareTo(triple2) < 0);
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,76,assertTrue(triple2.compareTo(triple2) == 0);
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,77,assertTrue(triple2.compareTo(triple1) > 0);
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,80,@Test
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,81,public void testComparable3() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,82,"Triple<String, String, String> triple1 = Triple.of(""A"", ""A"", ""D"");"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,83,"Triple<String, String, String> triple2 = Triple.of(""A"", ""B"", ""C"");"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,84,assertTrue(triple1.compareTo(triple1) == 0);
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,85,assertTrue(triple1.compareTo(triple2) < 0);
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,86,assertTrue(triple2.compareTo(triple2) == 0);
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,87,assertTrue(triple2.compareTo(triple1) > 0);
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,90,@Test
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,91,public void testComparable4() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,92,"Triple<String, String, String> triple1 = Triple.of(""B"", ""A"", ""C"");"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,93,"Triple<String, String, String> triple2 = Triple.of(""B"", ""A"", ""D"");"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,94,assertTrue(triple1.compareTo(triple1) == 0);
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,95,assertTrue(triple1.compareTo(triple2) < 0);
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,96,assertTrue(triple2.compareTo(triple2) == 0);
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,97,assertTrue(triple2.compareTo(triple1) > 0);
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,100,@Test
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,101,public void testToString() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,102,"Triple<String, String, String> triple = Triple.of(""Key"", ""Something"", ""Value"");"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,103,"assertEquals(""(Key,Something,Value)"", triple.toString());"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,106,@Test
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,107,public void testToStringCustom() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,108,Calendar date = Calendar.getInstance();
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,109,"date.set(2011, Calendar.APRIL, 25);"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,110,"Triple<String, String, Calendar> triple = Triple.of(""DOB"", ""string"", date);"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,111,"assertEquals(""Test created on "" + ""04-25-2011"", triple.toString(""Test created on %3$tm-%3$td-%3$tY""));"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,114,@Test
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,115,public void testFormattable_simple() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,116,"Triple<String, String, String> triple = Triple.of(""Key"", ""Something"", ""Value"");"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,117,"assertEquals(""(Key,Something,Value)"", String.format(""%1$s"", triple));"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,120,@Test
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,121,public void testFormattable_padded() throws Exception {
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,122,"Triple<String, String, String> triple = Triple.of(""Key"", ""Something"", ""Value"");"
True,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,123,"assertEquals(""         (Key,Something,Value)"", String.format(""%1$30s"", triple));"

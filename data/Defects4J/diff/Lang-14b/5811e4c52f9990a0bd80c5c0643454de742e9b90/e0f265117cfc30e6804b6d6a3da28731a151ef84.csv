is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,48,/ TODO: Ideally the ClassCastException would be compile-time via generics
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,49,ublic Range(T element) {
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,50,"his( element, element);"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,48,public static <T extends Comparable> Range is(T element) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,49,"return new Range(element, element, ComparableComparator.INSTANCE);"
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,67,/ TODO: Ideally the ClassCastException would be compile-time via generics
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,68,"ublic Range(T element1, T element2) {"
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,69,"his( element1, element2, ComparableComparator.INSTANCE);"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,66,"public static <T extends Comparable> Range between(T element1, T element2) {"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,67,"return new Range( element1, element2, ComparableComparator.INSTANCE);"
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,82,"ublic Range(T element, Comparator c) {"
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,83,"his(element, element, c);"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,80,"public static <T> Range is(T element, Comparator c) {"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,81,"return new Range(element, element, c);"
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,100,"ublic Range(T element1, T element2, Comparator c) {"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,98,"public static <T> Range between(T element1, T element2, Comparator c) {"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,99,"return new Range(element1, element2, c);"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,102,"private Range(T element1, T element2, Comparator c) {"
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,236, <p>The exact comparison implementation varies by subclass. It is
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,237, intended that an <code>int</code> specific subclass will compare using
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,238, <code>int</code> comparison.</p>
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,242, <p>This implementation uses the {@link #contains(Object)} method.
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,243, Subclasses may be able to optimise this.</p>
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,261, <p>The exact comparison implementation varies by subclass. It is
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,262, intended that an <code>int</code> specific subclass will compare using
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,263, <code>int</code> comparison.</p>
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,267, <p>This implementation uses the {@link #contains(Object)} and
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,268, {@link #containsRange(Range)} methods.
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,269, Subclasses may be able to optimise this.</p>
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,293, <p>This implementation uses the {@link #getMinimum()} and
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,294, {@link #getMaximum()} methods.
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,295, Subclasses may be able to optimise this.</p>
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,316, <p>This implementation uses the {@link #getMinimum()} and
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,317, {@link #getMaximum()} methods.
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,318, Subclasses may be able to optimise this.</p>
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,336, <p>This implementation uses the {@link #getMinimum()} and
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,337, {@link #getMaximum()} methods.
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,338, Subclasses may be able to optimise this.</p>
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,42,"yteRange   = new Range((byte) 0, (byte) 5);"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,43,"yteRange2  = new Range((byte) 0, (byte) 5);"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,44,"yteRange3  = new Range((byte) 0, (byte) 10);"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,46,"ntRange    = new Range<Integer>((int) 10, (int) 20);"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,47,"ongRange   = new Range<Long>((long) 10, (long) 20);"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,48,"loatRange  = new Range<Float>((float) 10, (float) 20);"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,49,"oubleRange = new Range<Double>((double) 10, (double) 20);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,42,"byteRange   = Range.between((byte) 0, (byte) 5);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,43,"byteRange2  = Range.between((byte) 0, (byte) 5);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,44,"byteRange3  = Range.between((byte) 0, (byte) 10);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,46,"intRange    = Range.between((int) 10, (int) 20);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,47,"longRange   = Range.between((long) 10, (long) 20);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,48,"floatRange  = Range.between((float) 10, (float) 20);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,49,"doubleRange = Range.between((double) 10, (double) 20);"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,55,ry {
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,56,ange range = new Range(new Object());
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,57,"ail(""IllegalArgumentException expected"");"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,58, catch(ClassCastException cce) {
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,59,/ expected
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,62,ry {
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,63,"ange range = new Range(new Object(), new Object());"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,64,"ail(""ClassCastException expected"");"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,65, catch(ClassCastException cce) {
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,66,/ expected
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,55,Comparable c =
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,56,new Comparable() {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,57,public int compareTo(Object other) {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,58,return 1;
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,61,Range.is(c);
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,62,"Range.between(c, c);"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,98,"ssertEquals(""Range[-20,-10]"", new Range<Integer>(-20, -10).toString());"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,94,"assertEquals(""Range[-20,-10]"", Range.between(-20, -10).toString());"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,170,"ssertTrue(intRange.containsRange(new Range(12, 18)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,166,"assertTrue(intRange.containsRange(Range.between(12, 18)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,173,"ssertFalse(intRange.containsRange(new Range(32, 45)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,174,"ssertFalse(intRange.containsRange(new Range(2, 8)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,169,"assertFalse(intRange.containsRange(Range.between(32, 45)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,170,"assertFalse(intRange.containsRange(Range.between(2, 8)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,177,"ssertTrue(intRange.containsRange(new Range(10, 20)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,173,"assertTrue(intRange.containsRange(Range.between(10, 20)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,180,"ssertFalse(intRange.containsRange(new Range(9, 14)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,181,"ssertFalse(intRange.containsRange(new Range(16, 21)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,176,"assertFalse(intRange.containsRange(Range.between(9, 14)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,177,"assertFalse(intRange.containsRange(Range.between(16, 21)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,184,"ssertTrue(intRange.containsRange(new Range(10, 19)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,185,"ssertFalse(intRange.containsRange(new Range(10, 21)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,180,"assertTrue(intRange.containsRange(Range.between(10, 19)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,181,"assertFalse(intRange.containsRange(Range.between(10, 21)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,188,"ssertTrue(intRange.containsRange(new Range(11, 20)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,189,"ssertFalse(intRange.containsRange(new Range(9, 20)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,184,"assertTrue(intRange.containsRange(Range.between(11, 20)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,185,"assertFalse(intRange.containsRange(Range.between(9, 20)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,192,"ssertFalse(intRange.containsRange(new Range(-11, -18)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,188,"assertFalse(intRange.containsRange(Range.between(-11, -18)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,202,"ssertTrue(intRange.overlapsRange(new Range(12, 18)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,198,"assertTrue(intRange.overlapsRange(Range.between(12, 18)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,205,"ssertFalse(intRange.overlapsRange(new Range(32, 45)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,206,"ssertFalse(intRange.overlapsRange(new Range(2, 8)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,201,"assertFalse(intRange.overlapsRange(Range.between(32, 45)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,202,"assertFalse(intRange.overlapsRange(Range.between(2, 8)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,209,"ssertTrue(intRange.overlapsRange(new Range(10, 20)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,205,"assertTrue(intRange.overlapsRange(Range.between(10, 20)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,212,"ssertTrue(intRange.overlapsRange(new Range(9, 14)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,213,"ssertTrue(intRange.overlapsRange(new Range(16, 21)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,208,"assertTrue(intRange.overlapsRange(Range.between(9, 14)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,209,"assertTrue(intRange.overlapsRange(Range.between(16, 21)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,216,"ssertTrue(intRange.overlapsRange(new Range(10, 19)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,217,"ssertTrue(intRange.overlapsRange(new Range(10, 21)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,212,"assertTrue(intRange.overlapsRange(Range.between(10, 19)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,213,"assertTrue(intRange.overlapsRange(Range.between(10, 21)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,220,"ssertTrue(intRange.overlapsRange(new Range(11, 20)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,221,"ssertTrue(intRange.overlapsRange(new Range(9, 20)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,216,"assertTrue(intRange.overlapsRange(Range.between(11, 20)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,217,"assertTrue(intRange.overlapsRange(Range.between(9, 20)));"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,224,"ssertFalse(intRange.overlapsRange(new Range(-11, -18)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,220,"assertFalse(intRange.overlapsRange(Range.between(-11, -18)));"

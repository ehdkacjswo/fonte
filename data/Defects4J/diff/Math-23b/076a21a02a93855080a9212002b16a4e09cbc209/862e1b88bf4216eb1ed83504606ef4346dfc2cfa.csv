is_addition,old_file_path,new_file_path,line_num,content
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,77, Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,78, @param maxIterations maximum number of iterations allowed
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,79, @param convergence criterion threshold below which we do not need
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,80, to improve the criterion anymore
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,81," @param steadyStateThreshold steady state detection threshold, the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,82, problem has reached a steady state (read converged) if
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,83," <code>Math.abs (Jn - Jn-1) < Jn * convergence</code>, where"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,84, <code>Jn</code> and <code>Jn-1</code> are the current and
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,85, preceding criterion value (square sum of the weighted residuals
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,86, of considered measurements).
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,87, @param epsilon threshold under which the matrix of the linearized
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,88, problem is considered singular (see {@link
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,89, org.spaceroots.mantissa.linalg.SquareMatrix#solve(
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,90," org.spaceroots.mantissa.linalg.Matrix,double) SquareMatrix.solve})."
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,91, @deprecated replaced by {@link #HarmonicFitter(Estimator)}
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,92, as of version 7.0
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,94,"ublic HarmonicFitter(int maxIterations, double convergence,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,95,"ouble steadyStateThreshold, double epsilon) {"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,96,"his(new GaussNewtonEstimator(maxIterations, convergence,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,97,"teadyStateThreshold, epsilon));"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,101, Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,103, <p>This constructor can be used when a first estimate of the
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,104, coefficients is already known.</p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,106, @param coefficients first estimate of the coefficients.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,107, A reference to this array is hold by the newly created
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,108, object. Its elements will be adjusted during the fitting process
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,109, and they will be set to the adjusted coefficients at the end.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,110, @param maxIterations maximum number of iterations allowed
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,111, @param convergence criterion threshold below which we do not need
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,112, to improve the criterion anymore
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,113," @param steadyStateThreshold steady state detection threshold, the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,114, problem has reached a steady state (read converged) if
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,115," <code>Math.abs (Jn - Jn-1) < Jn * convergence</code>, where"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,116, <code>Jn</code> and <code>Jn-1</code> are the current and
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,117, preceding criterion value (square sum of the weighted residuals
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,118, of considered measurements).
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,119, @param epsilon threshold under which the matrix of the linearized
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,120, problem is considered singular (see {@link
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,121, org.spaceroots.mantissa.linalg.SquareMatrix#solve(
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,122," org.spaceroots.mantissa.linalg.Matrix,double) SquareMatrix.solve})."
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,124," @deprecated replaced by {@link #HarmonicFitter(EstimatedParameter[],"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,125, Estimator)} as of version 7.0
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,127,"ublic HarmonicFitter(EstimatedParameter[] coefficients,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,128,"nt maxIterations, double convergence,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,129,"ouble steadyStateThreshold, double epsilon) {"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,130,"his(coefficients,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,131,"ew GaussNewtonEstimator(maxIterations, convergence,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,132,"teadyStateThreshold, epsilon));"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,81,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,83," <p>The polynomial fitter built this way are complete polynoms,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,84, ie. a n-degree polynom has n+1 coefficients. In order to build
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,85, fitter for sparse polynoms (for example <code>a x^20 - b
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,86," x^30</code>, on should first build the coefficients array and"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,87, provide it to {@link
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,88," #PolynomialFitter(PolynomialCoefficient[], int, double, double,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,89, double)}.</p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,90, @param degree maximal degree of the polynom
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,91, @param maxIterations maximum number of iterations allowed
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,92, @param convergence criterion threshold below which we do not need
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,93, to improve the criterion anymore
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,94," @param steadyStateThreshold steady state detection threshold, the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,95, problem has reached a steady state (read converged) if
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,96," <code>Math.abs (Jn - Jn-1) < Jn * convergence</code>, where"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,97, <code>Jn</code> and <code>Jn-1</code> are the current and
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,98, preceding criterion value (square sum of the weighted residuals
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,99, of considered measurements).
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,100, @param epsilon threshold under which the matrix of the linearized
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,101, problem is considered singular (see {@link
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,102, org.spaceroots.mantissa.linalg.SquareMatrix#solve(
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,103," org.spaceroots.mantissa.linalg.Matrix,double) SquareMatrix.solve})."
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,105," @deprecated replaced by {@link #PolynomialFitter(int,Estimator)}"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,106, as of version 7.0
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,108,"ublic PolynomialFitter(int degree,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,109,"nt maxIterations, double convergence,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,110,"ouble steadyStateThreshold, double epsilon) {"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,111,"his(degree,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,112,"ew GaussNewtonEstimator(maxIterations, steadyStateThreshold,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,113,"onvergence, epsilon));"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,116,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,118, <p>This constructor can be used either when a first estimate of
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,119, the coefficients is already known (which is of little interest
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,120, because the fit cost is the same whether a first guess is known or
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,121, not) or when one needs to handle sparse polynoms like <code>a
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,122, x^20 - b x^30</code>.</p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,124, @param coefficients first estimate of the coefficients.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,125, A reference to this array is hold by the newly created
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,126, object. Its elements will be adjusted during the fitting process
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,127, and they will be set to the adjusted coefficients at the end.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,128, @param maxIterations maximum number of iterations allowed
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,129, @param convergence criterion threshold below which we do not need
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,130, to improve the criterion anymore
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,131," @param steadyStateThreshold steady state detection threshold, the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,132, problem has reached a steady state (read converged) if
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,133," <code>Math.abs (Jn - Jn-1) < Jn * convergence</code>, where"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,134, <code>Jn</code> and <code>Jn-1</code> are the current and
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,135, preceding criterion value (square sum of the weighted residuals
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,136, of considered measurements).
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,137, @param epsilon threshold under which the matrix of the linearized
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,138, problem is considered singular (see {@link
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,139, org.spaceroots.mantissa.linalg.SquareMatrix#solve(
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,140," org.spaceroots.mantissa.linalg.Matrix,double) SquareMatrix.solve})."
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,142," @deprecated replaced by {@link #PolynomialFitter(PolynomialCoefficient[],"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,143, Estimator)} as of version 7.0
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,145,"ublic PolynomialFitter(PolynomialCoefficient[] coefficients,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,146,"nt maxIterations, double convergence,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,147,"ouble steadyStateThreshold, double epsilon) {"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,148,"his(coefficients,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,149,"ew GaussNewtonEstimator(maxIterations, steadyStateThreshold,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,150,"onvergence, epsilon));"

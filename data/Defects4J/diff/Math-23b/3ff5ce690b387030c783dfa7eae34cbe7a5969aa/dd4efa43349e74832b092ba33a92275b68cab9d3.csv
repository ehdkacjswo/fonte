is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,35,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,376,"eturn MathUtils.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,377,"athUtils.equalsIncludingNaN(stat.getMax(),           getMax())           &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,378,"athUtils.equalsIncludingNaN(stat.getMean(),          getMean())          &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,379,"athUtils.equalsIncludingNaN(stat.getMin(),           getMin())           &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,377,"return MathArrays.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,378,"MathArrays.equalsIncludingNaN(stat.getMax(),           getMax())           &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,379,"MathArrays.equalsIncludingNaN(stat.getMean(),          getMean())          &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,380,"MathArrays.equalsIncludingNaN(stat.getMin(),           getMin())           &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,381,"athUtils.equalsIncludingNaN(stat.getSum(),           getSum())           &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,382,"athUtils.equalsIncludingNaN(stat.getSumSq(),         getSumSq())         &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,383,"athUtils.equalsIncludingNaN(stat.getSumLog(),        getSumLog())        &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,382,"MathArrays.equalsIncludingNaN(stat.getSum(),           getSum())           &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,383,"MathArrays.equalsIncludingNaN(stat.getSumSq(),         getSumSq())         &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,384,"MathArrays.equalsIncludingNaN(stat.getSumLog(),        getSumLog())        &&"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,927,* Returns true iff both arguments are null or have same dimensions and all
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,928,* their elements are equal as defined by
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,929,"* {@link Precision#equals(float,float)}."
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,931,* @param x first array
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,932,* @param y second array
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,933,* @return true if the values are both null or have same dimension
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,934,* and equal elements.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,936,"public static boolean equals(float[] x, float[] y) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,937,if ((x == null) || (y == null)) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,938,return !((x == null) ^ (y == null));
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,940,if (x.length != y.length) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,941,return false;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,943,for (int i = 0; i < x.length; ++i) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,944,"if (!Precision.equals(x[i], y[i])) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,945,return false;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,948,return true;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,952,* Returns true iff both arguments are null or have same dimensions and all
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,953,* their elements are equal as defined by
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,954,"* {@link Precision#equalsIncludingNaN(double,double) this method}."
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,956,* @param x first array
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,957,* @param y second array
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,958,* @return true if the values are both null or have same dimension and
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,959,* equal elements
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,960,* @since 2.2
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,962,"public static boolean equalsIncludingNaN(float[] x, float[] y) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,963,if ((x == null) || (y == null)) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,964,return !((x == null) ^ (y == null));
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,966,if (x.length != y.length) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,967,return false;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,969,for (int i = 0; i < x.length; ++i) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,970,"if (!Precision.equalsIncludingNaN(x[i], y[i])) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,971,return false;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,974,return true;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,978,* Returns {@code true} iff both arguments are {@code null} or have same
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,979,* dimensions and all their elements are equal as defined by
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,980,"* {@link Precision#equals(double,double)}."
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,982,* @param x First array.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,983,* @param y Second array.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,984,* @return {@code true} if the values are both {@code null} or have same
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,985,* dimension and equal elements.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,987,"public static boolean equals(double[] x, double[] y) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,988,if ((x == null) || (y == null)) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,989,return !((x == null) ^ (y == null));
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,991,if (x.length != y.length) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,992,return false;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,994,for (int i = 0; i < x.length; ++i) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,995,"if (!Precision.equals(x[i], y[i])) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,996,return false;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,999,return true;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1003,* Returns {@code true} iff both arguments are {@code null} or have same
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1004,* dimensions and all their elements are equal as defined by
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1005,"* {@link Precision#equalsIncludingNaN(double,double) this method}."
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1007,* @param x First array.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1008,* @param y Second array.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1009,* @return {@code true} if the values are both {@code null} or have same
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1010,* dimension and equal elements.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1011,* @since 2.2
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1013,"public static boolean equalsIncludingNaN(double[] x, double[] y) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1014,if ((x == null) || (y == null)) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1015,return !((x == null) ^ (y == null));
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1017,if (x.length != y.length) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1018,return false;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1020,for (int i = 0; i < x.length; ++i) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1021,"if (!Precision.equalsIncludingNaN(x[i], y[i])) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1022,return false;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1025,return true;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,387, Returns true iff both arguments are null or have same dimensions and all
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,388, their elements are equal as defined by
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,389," {@link Precision#equals(float,float)}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,391, @param x first array
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,392, @param y second array
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,393, @return true if the values are both null or have same dimension
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,394, and equal elements.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,396,"ublic static boolean equals(float[] x, float[] y) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,397,f ((x == null) || (y == null)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,398,eturn !((x == null) ^ (y == null));
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,400,f (x.length != y.length) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,401,eturn false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,403,or (int i = 0; i < x.length; ++i) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,404,"f (!Precision.equals(x[i], y[i])) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,405,eturn false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,408,eturn true;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,412, Returns true iff both arguments are null or have same dimensions and all
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,413, their elements are equal as defined by
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,414," {@link Precision#equalsIncludingNaN(double,double) this method}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,416, @param x first array
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,417, @param y second array
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,418, @return true if the values are both null or have same dimension and
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,419, equal elements
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,420, @since 2.2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,422,"ublic static boolean equalsIncludingNaN(float[] x, float[] y) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,423,f ((x == null) || (y == null)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,424,eturn !((x == null) ^ (y == null));
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,426,f (x.length != y.length) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,427,eturn false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,429,or (int i = 0; i < x.length; ++i) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,430,"f (!Precision.equalsIncludingNaN(x[i], y[i])) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,431,eturn false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,434,eturn true;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,438, Returns {@code true} iff both arguments are {@code null} or have same
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,439, dimensions and all their elements are equal as defined by
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,440," {@link Precision#equals(double,double)}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,442, @param x First array.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,443, @param y Second array.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,444, @return {@code true} if the values are both {@code null} or have same
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,445, dimension and equal elements.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,447,"ublic static boolean equals(double[] x, double[] y) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,448,f ((x == null) || (y == null)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,449,eturn !((x == null) ^ (y == null));
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,451,f (x.length != y.length) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,452,eturn false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,454,or (int i = 0; i < x.length; ++i) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,455,"f (!Precision.equals(x[i], y[i])) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,456,eturn false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,459,eturn true;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,463, Returns {@code true} iff both arguments are {@code null} or have same
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,464, dimensions and all their elements are equal as defined by
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,465," {@link Precision#equalsIncludingNaN(double,double) this method}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,467, @param x First array.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,468, @param y Second array.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,469, @return {@code true} if the values are both {@code null} or have same
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,470, dimension and equal elements.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,471, @since 2.2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,473,"ublic static boolean equalsIncludingNaN(double[] x, double[] y) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,474,f ((x == null) || (y == null)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,475,eturn !((x == null) ^ (y == null));
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,477,f (x.length != y.length) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,478,eturn false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,480,or (int i = 0; i < x.length; ++i) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,481,"f (!Precision.equalsIncludingNaN(x[i], y[i])) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,482,eturn false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,485,eturn true;
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,551,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,552,public void testArrayEquals() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,553,"Assert.assertFalse(MathArrays.equals(new double[] { 1d }, null));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,554,"Assert.assertFalse(MathArrays.equals(null, new double[] { 1d }));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,555,"Assert.assertTrue(MathArrays.equals((double[]) null, (double[]) null));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,557,"Assert.assertFalse(MathArrays.equals(new double[] { 1d }, new double[0]));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,558,"Assert.assertTrue(MathArrays.equals(new double[] { 1d }, new double[] { 1d }));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,559,"Assert.assertTrue(MathArrays.equals(new double[] { Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,560,"Double.NEGATIVE_INFINITY, 1d, 0d },"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,561,"new double[] { Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,562,"Double.NEGATIVE_INFINITY, 1d, 0d }));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,563,"Assert.assertFalse(MathArrays.equals(new double[] { Double.NaN },"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,564,new double[] { Double.NaN }));
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,565,"Assert.assertFalse(MathArrays.equals(new double[] { Double.POSITIVE_INFINITY },"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,566,new double[] { Double.NEGATIVE_INFINITY }));
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,567,"Assert.assertFalse(MathArrays.equals(new double[] { 1d },"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,568,"new double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,572,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,573,public void testArrayEqualsIncludingNaN() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,574,"Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] { 1d }, null));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,575,"Assert.assertFalse(MathArrays.equalsIncludingNaN(null, new double[] { 1d }));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,576,"Assert.assertTrue(MathArrays.equalsIncludingNaN((double[]) null, (double[]) null));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,578,"Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] { 1d }, new double[0]));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,579,"Assert.assertTrue(MathArrays.equalsIncludingNaN(new double[] { 1d }, new double[] { 1d }));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,580,"Assert.assertTrue(MathArrays.equalsIncludingNaN(new double[] { Double.NaN, Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,581,"Double.NEGATIVE_INFINITY, 1d, 0d },"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,582,"new double[] { Double.NaN, Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,583,"Double.NEGATIVE_INFINITY, 1d, 0d }));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,584,"Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] { Double.POSITIVE_INFINITY },"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,585,new double[] { Double.NEGATIVE_INFINITY }));
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,586,"Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] { 1d },"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,587,"new double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,321,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,322,ublic void testArrayEquals() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,323,"ssert.assertFalse(MathUtils.equals(new double[] { 1d }, null));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,324,"ssert.assertFalse(MathUtils.equals(null, new double[] { 1d }));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,325,"ssert.assertTrue(MathUtils.equals((double[]) null, (double[]) null));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,327,"ssert.assertFalse(MathUtils.equals(new double[] { 1d }, new double[0]));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,328,"ssert.assertTrue(MathUtils.equals(new double[] { 1d }, new double[] { 1d }));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,329,ssert.assertTrue(MathUtils.equals(new double[] {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,330,"ouble.POSITIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,331,"ouble.NEGATIVE_INFINITY, 1d, 0d"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,332,", new double[] {"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,333,"ouble.POSITIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,334,"ouble.NEGATIVE_INFINITY, 1d, 0d"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,336,"ssert.assertFalse(MathUtils.equals(new double[] { Double.NaN },"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,337,ew double[] { Double.NaN }));
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,338,"ssert.assertFalse(MathUtils.equals(new double[] { Double.POSITIVE_INFINITY },"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,339,ew double[] { Double.NEGATIVE_INFINITY }));
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,340,"ssert.assertFalse(MathUtils.equals(new double[] { 1d },"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,341,"ew double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,345,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,346,ublic void testArrayEqualsIncludingNaN() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,347,"ssert.assertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d }, null));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,348,"ssert.assertFalse(MathUtils.equalsIncludingNaN(null, new double[] { 1d }));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,349,"ssert.assertTrue(MathUtils.equalsIncludingNaN((double[]) null, (double[]) null));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,351,"ssert.assertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d }, new double[0]));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,352,"ssert.assertTrue(MathUtils.equalsIncludingNaN(new double[] { 1d }, new double[] { 1d }));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,353,ssert.assertTrue(MathUtils.equalsIncludingNaN(new double[] {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,354,"ouble.NaN, Double.POSITIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,355,"ouble.NEGATIVE_INFINITY, 1d, 0d"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,356,", new double[] {"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,357,"ouble.NaN, Double.POSITIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,358,"ouble.NEGATIVE_INFINITY, 1d, 0d"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,360,"ssert.assertFalse(MathUtils.equalsIncludingNaN(new double[] { Double.POSITIVE_INFINITY },"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,361,ew double[] { Double.NEGATIVE_INFINITY }));
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,362,"ssert.assertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d },"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,363,"ew double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,24," The sinc function, {code sin(x)/x}."
False,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,25, Returns {code 1} if {code |x| < 1e-9}.
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,24,"* <a href=""http://en.wikipedia.org/wiki/Sinc_function"">Sinc</a> function."
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,30,/** For normalized sinc function. */
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,31,private final boolean normalized;
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,34,"* The sinc function, {@code sin(x) / x}."
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,36,public Sinc() {
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,37,this(false);
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,41,* Instantiates the sinc function.
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,43,"* @param normalized If {@code true}, the function is"
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,44,"* <code> sin(&pi;x) / &pi;x</code>, otherwise {@code sin(x) / x}."
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,46,public Sinc(boolean normalized) {
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,47,this.normalized = normalized;
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,52,if (normalized) {
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,53,final double piTimesX = Math.PI * x;
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,54,return sinc(piTimesX);
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,55,} else {
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,56,return sinc(x);
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,61,* @param x Argument.
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,62,* @return {@code sin(x) / x}.
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,64,private static double sinc(double x) {
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,65,// The direct assignment to 1 for values below 1e-9 is an efficiency
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,66,// optimization on the ground that the result of the full computation
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,67,// is indistinguishable from 1 due to the limited accuracy of the
True,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,src/main/java/org/apache/commons/math/analysis/function/Sinc.java,68,// floating point representation.
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,17,package org.apache.commons.math.analysis.function;
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,19,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,20,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,21,import org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,26,public class SincTest {
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,28,@Test
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,29,public void testShortcut() {
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,30,final Sinc s = new Sinc();
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,31,final UnivariateRealFunction f = new UnivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,32,public double value(double x) {
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,33,return FastMath.sin(x) / x;
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,37,for (double x = 1e-30; x < 1e10; x *= 5) {
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,38,final double fX = f.value(x);
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,39,final double sX = s.value(x);
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,40,"Assert.assertEquals(""x="" + x, fX, sX, 0);"
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,44,@Test
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,45,public void testCrossings() {
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,46,final Sinc s = new Sinc(true);
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,47,final int numCrossings = 1000;
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,48,final double tol = 2e-16;
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,49,for (int i = 1; i <= numCrossings; i++) {
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,50,"Assert.assertEquals(""i="" + i, 0, s.value(i), tol);"
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,54,@Test
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,55,public void testZero() {
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,56,final Sinc s = new Sinc();
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,57,"Assert.assertEquals(1d, s.value(0), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,60,@Test
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,61,public void testEuler() {
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,62,final Sinc s = new Sinc();
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,63,final double x = 123456.789;
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,64,double prod = 1;
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,65,double xOverPow2 = x / 2;
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,66,while (xOverPow2 > 0) {
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,67,prod *= FastMath.cos(xOverPow2);
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,68,xOverPow2 /= 2;
True,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,src/test/java/org/apache/commons/math/analysis/function/SincTest.java,70,"Assert.assertEquals(prod, s.value(x), 1e-13);"

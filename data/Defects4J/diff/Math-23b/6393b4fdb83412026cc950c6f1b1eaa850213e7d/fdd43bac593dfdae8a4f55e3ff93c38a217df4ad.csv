is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,18,package org.apache.commons.math.linear;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,20,import org.apache.commons.math.random.CorrelatedRandomVectorGenerator;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,24,* An interface to classes that implement an algorithm to calculate a
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,25,* rectangular variation of Cholesky decomposition of a real symmetric
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,26,* positive semidefinite matrix.
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,27,* <p>The rectangular Cholesky decomposition of a real symmetric positive
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,28,* semidefinite matrix A consists of a rectangular matrix B with the same
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,29,"* number of rows such that: A is almost equal to BB<sup>T</sup>, depending"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,30,"* on a user-defined tolerance. In a sense, this is the square root of A.</p>"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,31,* <p>The difference with respect to the regular {@link CholeskyDecomposition}
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,32,* is that rows/columns may be permuted (hence the rectangular shape instead
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,33,* of the traditional triangular shape) and there is a threshold to ignore
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,34,* small diagonal elements. This is used for example to generate {@link
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,35,* CorrelatedRandomVectorGenerator correlated random n-dimensions vectors}
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,36,"* in a p-dimension subspace (p < n). In other words, it allows generating"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,37,"* random vectors from a covariance matrix that is only positive semidefinite,"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,38,* and not positive definite.</p>
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,39,* <p>Rectangular Cholesky decomposition is <em>not</em> suited for solving
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,40,"* linear systems, so it does not provide any {@link DecompositionSolver"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,41,* decomposition solver}.</p>
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,42,* @see CholeskyDecomposition
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,43,* @see CorrelatedRandomVectorGenerator
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,44,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,45,* @since 3.0
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,47,public interface RectangularCholeskyDecomposition {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,49,/** Get the root of the covariance matrix.
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,50,* The root is the rectangular matrix <code>B</code> such that
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,51,* the covariance matrix is equal to <code>B.B<sup>T</sup></code>
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,52,* @return root of the square matrix
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,53,* @see #getRank()
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,55,RealMatrix getRootMatrix();
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,57,/** Get the rank of the symmetric positive semidefinite matrix.
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,58,* The r is the number of independent rows in the symmetric positive semidefinite
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,59,"* matrix, it is also the number of columns of the rectangular"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,60,* matrix of the decomposition.
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,61,* @return r of the square matrix.
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,62,* @see #getRootMatrix()
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,64,int getRank();
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,18,package org.apache.commons.math.linear;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,20,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,23,* Calculates the rectangular Cholesky decomposition of a matrix.
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,24,* <p>The rectangular Cholesky decomposition of a real symmetric positive
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,25,* semidefinite matrix A consists of a rectangular matrix B with the same
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,26,"* number of rows such that: A is almost equal to BB<sup>T</sup>, depending"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,27,"* on a user-defined tolerance. In a sense, this is the square root of A.</p>"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,29,"* @see <a href=""http://mathworld.wolfram.com/CholeskyDecomposition.html"">MathWorld</a>"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,30,"* @see <a href=""http://en.wikipedia.org/wiki/Cholesky_decomposition"">Wikipedia</a>"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,31,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,32,* @since 2.0
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,34,public class RectangularCholeskyDecompositionImpl implements RectangularCholeskyDecomposition {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,36,/** Permutated Cholesky root of the symmetric positive semidefinite matrix. */
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,37,private final RealMatrix root;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,39,/** Rank of the symmetric positive semidefinite matrix. */
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,40,private int rank;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,43,* Decompose a symmetric positive semidefinite matrix.
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,45,* @param matrix Symmetric positive semidefinite matrix.
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,46,* @param small Diagonal elements threshold under which  column are
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,47,* considered to be dependent on previous ones and are discarded.
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,48,* @exception NonPositiveDefiniteMatrixException if the matrix is not
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,49,* positive semidefinite.
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,51,"public RectangularCholeskyDecompositionImpl(RealMatrix matrix, double small)"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,52,throws NonPositiveDefiniteMatrixException {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,54,int order = matrix.getRowDimension();
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,55,double[][] c = matrix.getData();
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,56,double[][] b = new double[order][order];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,58,int[] swap  = new int[order];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,59,int[] index = new int[order];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,60,for (int i = 0; i < order; ++i) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,61,index[i] = i;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,64,int r = 0;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,65,for (boolean loop = true; loop;) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,67,// find maximal diagonal element
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,68,swap[r] = r;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,69,for (int i = r + 1; i < order; ++i) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,70,int ii  = index[i];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,71,int isi = index[swap[i]];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,72,if (c[ii][ii] > c[isi][isi]) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,73,swap[r] = i;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,78,// swap elements
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,79,if (swap[r] != r) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,80,int tmp = index[r];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,81,index[r] = index[swap[r]];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,82,index[swap[r]] = tmp;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,85,// check diagonal element
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,86,int ir = index[r];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,87,if (c[ir][ir] < small) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,89,if (r == 0) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,90,"throw new NonPositiveDefiniteMatrixException(ir, small);"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,93,// check remaining diagonal elements
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,94,for (int i = r; i < order; ++i) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,95,if (c[index[i]][index[i]] < -small) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,96,"// there is at least one sufficiently negative diagonal element,"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,97,// the symmetric positive semidefinite matrix is wrong
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,98,"throw new NonPositiveDefiniteMatrixException(i, small);"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,102,"// all remaining diagonal elements are close to zero, we consider we have"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,103,// found the rank of the symmetric positive semidefinite matrix
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,104,++r;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,105,loop = false;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,107,} else {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,109,// transform the matrix
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,110,double sqrt = FastMath.sqrt(c[ir][ir]);
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,111,b[r][r] = sqrt;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,112,double inverse = 1 / sqrt;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,113,for (int i = r + 1; i < order; ++i) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,114,int ii = index[i];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,115,double e = inverse * c[ii][ir];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,116,b[i][r] = e;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,117,c[ii][ii] -= e * e;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,118,for (int j = r + 1; j < i; ++j) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,119,int ij = index[j];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,120,double f = c[ii][ij] - e * b[j][r];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,121,c[ii][ij] = f;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,122,c[ij][ii] = f;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,126,// prepare next iteration
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,127,loop = ++r < order;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,131,// build the root matrix
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,132,rank = r;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,133,"root = MatrixUtils.createRealMatrix(order, r);"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,134,for (int i = 0; i < order; ++i) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,135,for (int j = 0; j < r; ++j) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,136,"root.setEntry(index[i], j, b[i][j]);"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,142,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,143,public RealMatrix getRootMatrix() {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,144,return root;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,147,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,148,public int getRank() {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,149,return rank;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,21,mport org.apache.commons.math.linear.NonPositiveDefiniteMatrixException;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,22,mport org.apache.commons.math.linear.MatrixUtils;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,24,mport org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,22,import org.apache.commons.math.linear.RectangularCholeskyDecomposition;
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,23,import org.apache.commons.math.linear.RectangularCholeskyDecompositionImpl;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,71,** Permutated Cholesky root of the covariance matrix. */
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,72,rivate RealMatrix root;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,73,** Rank of the covariance matrix. */
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,74,rivate int rank;
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,70,/** Root of the covariance matrix. */
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,71,private final RealMatrix root;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,100,"ecompose(covariance, small);"
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,97,final RectangularCholeskyDecomposition decomposition =
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,98,"new RectangularCholeskyDecompositionImpl(covariance, small);"
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,99,root = decomposition.getRootMatrix();
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,103,ormalized = new double[rank];
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,102,normalized = new double[decomposition.getRank()];
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,126,"ecompose(covariance, small);"
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,126,final RectangularCholeskyDecomposition decomposition =
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,127,"new RectangularCholeskyDecompositionImpl(covariance, small);"
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,128,root = decomposition.getRootMatrix();
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,129,ormalized = new double[rank];
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,131,normalized = new double[decomposition.getRank()];
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,139,** Get the root of the covariance matrix.
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,140, The root is the rectangular matrix <code>B</code> such that
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,141, the covariance matrix is equal to <code>B.B<sup>T</sup></code>
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,142, @return root of the square matrix
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,143, @see #getRank()
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,145,ublic RealMatrix getRootMatrix() {
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,146,eturn root;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,151," matrix, it is also the number of columns of the rectangular"
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,152, matrix of the decomposition.
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,144,"* matrix, it is also the number of columns of the root matrix."
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,157,eturn rank;
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,149,return normalized.length;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,160,** Decompose the original square matrix.
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,161, <p>The decomposition is based on a Choleski decomposition
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,162, where additional transforms are performed:
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,163, <ul>
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,164,   <li>the rows of the decomposed matrix are permuted</li>
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,165,   <li>columns with the too small diagonal element are discarded</li>
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,166,   <li>the matrix is permuted</li>
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,167, </ul>
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,168, This means that rather than computing M = U<sup>T</sup>.U where U
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,169," is an upper triangular matrix, this method computed M=B.B<sup>T</sup>"
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,170, where B is a rectangular matrix.
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,171, @param covariance covariance matrix
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,172, @param small diagonal elements threshold under which  column are
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,173, considered to be dependent on previous ones and are discarded
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,174, @throws org.apache.commons.math.linear.NonPositiveDefiniteMatrixException
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,175, if the covariance matrix is not strictly positive definite.
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,152,/** Get the root of the covariance matrix.
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,153,* The root is the rectangular matrix <code>B</code> such that
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,154,* the covariance matrix is equal to <code>B.B<sup>T</sup></code>
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,155,* @return root of the square matrix
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,156,* @see #getRank()
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,177,"rivate void decompose(RealMatrix covariance, double small) {"
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,178,nt order = covariance.getRowDimension();
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,179,ouble[][] c = covariance.getData();
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,180,ouble[][] b = new double[order][order];
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,182,nt[] swap  = new int[order];
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,183,nt[] index = new int[order];
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,184,or (int i = 0; i < order; ++i) {
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,185,ndex[i] = i;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,188,ank = 0;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,189,or (boolean loop = true; loop;) {
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,191,/ find maximal diagonal element
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,192,wap[rank] = rank;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,193,or (int i = rank + 1; i < order; ++i) {
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,194,nt ii  = index[i];
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,195,nt isi = index[swap[i]];
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,196,f (c[ii][ii] > c[isi][isi]) {
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,197,wap[rank] = i;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,202,/ swap elements
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,203,f (swap[rank] != rank) {
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,204,nt tmp = index[rank];
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,205,ndex[rank] = index[swap[rank]];
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,206,ndex[swap[rank]] = tmp;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,209,/ check diagonal element
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,210,nt ir = index[rank];
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,211,f (c[ir][ir] < small) {
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,213,f (rank == 0) {
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,214,"hrow new NonPositiveDefiniteMatrixException(ir, small);"
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,217,/ check remaining diagonal elements
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,218,or (int i = rank; i < order; ++i) {
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,219,f (c[index[i]][index[i]] < -small) {
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,220,"/ there is at least one sufficiently negative diagonal element,"
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,221,/ the covariance matrix is wrong
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,222,"hrow new NonPositiveDefiniteMatrixException(i, small);"
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,226,"/ all remaining diagonal elements are close to zero,"
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,227,/ we consider we have found the rank of the covariance matrix
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,228,+rank;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,229,oop = false;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,231, else {
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,233,/ transform the matrix
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,234,ouble sqrt = FastMath.sqrt(c[ir][ir]);
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,235,[rank][rank] = sqrt;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,236,ouble inverse = 1 / sqrt;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,237,or (int i = rank + 1; i < order; ++i) {
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,238,nt ii = index[i];
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,239,ouble e = inverse * c[ii][ir];
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,240,[i][rank] = e;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,241,[ii][ii] -= e * e;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,242,or (int j = rank + 1; j < i; ++j) {
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,243,nt ij = index[j];
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,244,ouble f = c[ii][ij] - e * b[j][rank];
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,245,[ii][ij] = f;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,246,[ij][ii] = f;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,250,/ prepare next iteration
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,251,oop = ++rank < order;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,255,/ build the root matrix
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,256,"oot = MatrixUtils.createRealMatrix(order, rank);"
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,257,or (int i = 0; i < order; ++i) {
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,258,or (int j = 0; j < rank; ++j) {
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,259,"oot.setEntry(index[i], j, b[i][j]);"
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,158,public RealMatrix getRootMatrix() {
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,159,return root;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,272,or (int i = 0; i < rank; ++i) {
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,169,for (int i = 0; i < normalized.length; ++i) {
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,280,or (int j = 0; j < rank; ++j) {
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,177,for (int j = 0; j < root.getColumnDimension(); ++j) {

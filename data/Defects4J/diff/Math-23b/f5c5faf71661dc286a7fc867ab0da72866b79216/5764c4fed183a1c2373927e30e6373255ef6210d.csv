is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,20,import java.util.Random;
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,62,ealMatrix matrix = MatrixUtils.createRealMatrix(testData3x3NonSingular);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,63,RDecomposition qr = new QRDecompositionImpl(matrix);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,64,"ssertEquals(""3x3 Q size"", qr.getQ().getRowDimension(), 3);"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,65,"ssertEquals(""3x3 Q size"", qr.getQ().getColumnDimension(), 3);"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,66,"ssertEquals(""3x3 R size"", qr.getR().getRowDimension(), 3);"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,67,"ssertEquals(""3x3 R size"", qr.getR().getColumnDimension(), 3);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,64,checkDimension(MatrixUtils.createRealMatrix(testData3x3NonSingular));
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,69,atrix = MatrixUtils.createRealMatrix(testData4x3);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,70,r = new QRDecompositionImpl(matrix);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,71,"ssertEquals(""4x3 Q size"", qr.getQ().getRowDimension(), 4);"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,72,"ssertEquals(""4x3 Q size"", qr.getQ().getColumnDimension(), 4);"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,73,"ssertEquals(""4x3 R size"", qr.getR().getRowDimension(), 4);"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,74,"ssertEquals(""4x3 R size"", qr.getR().getColumnDimension(), 3);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,66,checkDimension(MatrixUtils.createRealMatrix(testData4x3));
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,76,atrix = MatrixUtils.createRealMatrix(testData3x4);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,77,r = new QRDecompositionImpl(matrix);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,78,"ssertEquals(""3x4 Q size"", qr.getQ().getRowDimension(), 3);"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,79,"ssertEquals(""3x4 Q size"", qr.getQ().getColumnDimension(), 3);"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,80,"ssertEquals(""3x4 R size"", qr.getR().getRowDimension(), 3);"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,81,"ssertEquals(""3x4 R size"", qr.getR().getColumnDimension(), 4);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,68,checkDimension(MatrixUtils.createRealMatrix(testData3x4));
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,70,Random r = new Random(643895747384642l);
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,71,int    p = (5 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,72,int    q = (7 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,73,"checkDimension(createTestMatrix(r, p, q));"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,74,"checkDimension(createTestMatrix(r, q, p));"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,78,private void checkDimension(RealMatrix m) {
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,79,int rows = m.getRowDimension();
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,80,int columns = m.getColumnDimension();
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,81,QRDecomposition qr = new QRDecompositionImpl(m);
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,82,"assertEquals(rows,    qr.getQ().getRowDimension());"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,83,"assertEquals(rows,    qr.getQ().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,84,"assertEquals(rows,    qr.getR().getRowDimension());"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,85,"assertEquals(columns, qr.getR().getColumnDimension());"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,86,ealMatrix A = MatrixUtils.createRealMatrix(testData3x3NonSingular);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,87,RDecomposition qr = new QRDecompositionImpl(A);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,88,ealMatrix Q = qr.getQ();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,89,ealMatrix R = qr.getR();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,90,ouble norm = Q.multiply(R).subtract(A).getNorm();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,91,"ssertEquals(""3x3 nonsingular A = QR"", 0, norm, normTolerance);"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,93,ealMatrix matrix = MatrixUtils.createRealMatrix(testData3x3Singular);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,94,r = new QRDecompositionImpl(matrix);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,95,orm = qr.getQ().multiply(qr.getR()).subtract(matrix).getNorm();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,96,"ssertEquals(""3x3 singular A = QR"", 0, norm, normTolerance);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,90,checkAEqualQR(MatrixUtils.createRealMatrix(testData3x3NonSingular));
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,98,atrix = MatrixUtils.createRealMatrix(testData3x4);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,99,r = new QRDecompositionImpl(matrix);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,100,orm = qr.getQ().multiply(qr.getR()).subtract(matrix).getNorm();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,101,"ssertEquals(""3x4 A = QR"", 0, norm, normTolerance);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,92,checkAEqualQR(MatrixUtils.createRealMatrix(testData3x3Singular));
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,94,checkAEqualQR(MatrixUtils.createRealMatrix(testData3x4));
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,96,checkAEqualQR(MatrixUtils.createRealMatrix(testData4x3));
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,98,Random r = new Random(643895747384642l);
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,99,int    p = (5 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,100,int    q = (7 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,101,"checkAEqualQR(createTestMatrix(r, p, q));"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,103,"checkAEqualQR(createTestMatrix(r, q, p));"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,103,atrix = MatrixUtils.createRealMatrix(testData4x3);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,104,r = new QRDecompositionImpl(matrix);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,105,orm = qr.getQ().multiply(qr.getR()).subtract(matrix).getNorm();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,106,"ssertEquals(""4x3 A = QR"", 0, norm, normTolerance);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,107,private void checkAEqualQR(RealMatrix m) {
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,108,QRDecomposition qr = new QRDecompositionImpl(m);
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,109,double norm = qr.getQ().multiply(qr.getR()).subtract(m).getNorm();
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,110,"assertEquals(0, norm, normTolerance);"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,111,ealMatrix matrix = MatrixUtils.createRealMatrix(testData3x3NonSingular);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,112,ealMatrix q  = new QRDecompositionImpl(matrix).getQ();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,113,ealMatrix qT = new QRDecompositionImpl(matrix).getQT();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,114,ealMatrix eye = MatrixUtils.createRealIdentityMatrix(3);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,115,ouble norm = qT.multiply(q).subtract(eye).getNorm();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,116,"ssertEquals(""3x3 nonsingular Q'Q = I"", 0, norm, normTolerance);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,115,checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x3NonSingular));
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,118,atrix = MatrixUtils.createRealMatrix(testData3x3Singular);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,119,  = new QRDecompositionImpl(matrix).getQ();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,120,T = new QRDecompositionImpl(matrix).getQT();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,121,ye = MatrixUtils.createRealIdentityMatrix(3);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,122,orm = qT.multiply(q).subtract(eye).getNorm();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,123,"ssertEquals(""3x3 singular Q'Q = I"", 0, norm, normTolerance);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,117,checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x3Singular));
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,125,atrix = MatrixUtils.createRealMatrix(testData3x4);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,126,  = new QRDecompositionImpl(matrix).getQ();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,127,T = new QRDecompositionImpl(matrix).getQT();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,128,ye = MatrixUtils.createRealIdentityMatrix(3);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,129,orm = qT.multiply(q).subtract(eye).getNorm();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,130,"ssertEquals(""3x4 Q'Q = I"", 0, norm, normTolerance);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,119,checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x4));
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,132,atrix = MatrixUtils.createRealMatrix(testData4x3);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,133,  = new QRDecompositionImpl(matrix).getQ();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,134,T = new QRDecompositionImpl(matrix).getQT();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,135,ye = MatrixUtils.createRealIdentityMatrix(4);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,136,orm = qT.multiply(q).subtract(eye).getNorm();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,137,"ssertEquals(""4x3 Q'Q = I"", 0, norm, normTolerance);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,121,checkQOrthogonal(MatrixUtils.createRealMatrix(testData4x3));
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,123,Random r = new Random(643895747384642l);
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,124,int    p = (5 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,125,int    q = (7 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,126,"checkQOrthogonal(createTestMatrix(r, p, q));"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,128,"checkQOrthogonal(createTestMatrix(r, q, p));"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,132,private void checkQOrthogonal(RealMatrix m) {
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,133,QRDecomposition qr = new QRDecompositionImpl(m);
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,134,RealMatrix eye = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,135,double norm = qr.getQT().multiply(qr.getQ()).subtract(eye).getNorm();
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,136,"assertEquals(0, norm, normTolerance);"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,143,ealMatrix R = new QRDecompositionImpl(matrix).getR();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,144,or (int i = 0; i < R.getRowDimension(); i++)
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,145,or (int j = 0; j < i; j++)
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,146,"ssertEquals(""R lower triangle"", R.getEntry(i, j), 0,"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,147,ntryTolerance);
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,142,checkUpperTriangular(new QRDecompositionImpl(matrix).getR());
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,150, = new QRDecompositionImpl(matrix).getR();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,151,or (int i = 0; i < R.getRowDimension(); i++)
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,152,or (int j = 0; j < i; j++)
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,153,"ssertEquals(""R lower triangle"", R.getEntry(i, j), 0,"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,154,ntryTolerance);
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,145,checkUpperTriangular(new QRDecompositionImpl(matrix).getR());
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,157, = new QRDecompositionImpl(matrix).getR();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,158,or (int i = 0; i < R.getRowDimension(); i++)
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,159,or (int j = 0; j < i; j++)
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,160,"ssertEquals(""R lower triangle"", R.getEntry(i, j), 0,"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,161,ntryTolerance);
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,148,checkUpperTriangular(new QRDecompositionImpl(matrix).getR());
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,164, = new QRDecompositionImpl(matrix).getR();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,165,or (int i = 0; i < R.getRowDimension(); i++)
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,166,or (int j = 0; j < i; j++)
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,167,"ssertEquals(""R lower triangle"", R.getEntry(i, j), 0,"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,168,ntryTolerance);
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,151,checkUpperTriangular(new QRDecompositionImpl(matrix).getR());
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,153,Random r = new Random(643895747384642l);
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,154,int    p = (5 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,155,int    q = (7 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,156,"matrix = createTestMatrix(r, p, q);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,157,checkUpperTriangular(new QRDecompositionImpl(matrix).getR());
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,159,"matrix = createTestMatrix(r, p, q);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,160,checkUpperTriangular(new QRDecompositionImpl(matrix).getR());
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,164,private void checkUpperTriangular(RealMatrix m) {
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,165,m.walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,166,private static final long serialVersionUID = -7685630069569815930L;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,167,"public void visit(int row, int column, double value) {"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,168,if (column < row) {
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,169,"assertEquals(0.0, value, entryTolerance);"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,174,ealMatrix H = new QRDecompositionImpl(matrix).getH();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,175,or (int i = 0; i < H.getRowDimension(); i++)
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,176,or (int j = i + 1; j < H.getColumnDimension(); j++)
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,177,"ssertEquals(H.getEntry(i, j), 0, entryTolerance);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,178,checkTrapezoidal(new QRDecompositionImpl(matrix).getH());
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,180, = new QRDecompositionImpl(matrix).getH();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,181,or (int i = 0; i < H.getRowDimension(); i++)
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,182,or (int j = i + 1; j < H.getColumnDimension(); j++)
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,183,"ssertEquals(H.getEntry(i, j), 0, entryTolerance);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,181,checkTrapezoidal(new QRDecompositionImpl(matrix).getH());
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,186, = new QRDecompositionImpl(matrix).getH();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,187,or (int i = 0; i < H.getRowDimension(); i++)
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,188,or (int j = i + 1; j < H.getColumnDimension(); j++)
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,189,"ssertEquals(H.getEntry(i, j), 0, entryTolerance);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,184,checkTrapezoidal(new QRDecompositionImpl(matrix).getH());
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,192, = new QRDecompositionImpl(matrix).getH();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,193,or (int i = 0; i < H.getRowDimension(); i++)
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,194,or (int j = i + 1; j < H.getColumnDimension(); j++)
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,195,"ssertEquals(H.getEntry(i, j), 0, entryTolerance);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,187,checkTrapezoidal(new QRDecompositionImpl(matrix).getH());
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,189,Random r = new Random(643895747384642l);
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,190,int    p = (5 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,191,int    q = (7 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,192,"matrix = createTestMatrix(r, p, q);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,193,checkTrapezoidal(new QRDecompositionImpl(matrix).getH());
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,195,"matrix = createTestMatrix(r, p, q);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,196,checkTrapezoidal(new QRDecompositionImpl(matrix).getH());
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,200,private void checkTrapezoidal(RealMatrix m) {
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,201,m.walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,202,private static final long serialVersionUID = -43649044361860701L;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,203,"public void visit(int row, int column, double value) {"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,204,if (column > row) {
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,205,"assertEquals(0.0, value, entryTolerance);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,247,"private RealMatrix createTestMatrix(final Random r, final int rows, final int columns) {"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,248,"RealMatrix m = MatrixUtils.createRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,249,m.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor(){
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,250,private static final long serialVersionUID = -556118291433400034L;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,251,"public double visit(int row, int column, double value)"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,252,throws MatrixVisitorException {
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,253,return 2.0 * r.nextDouble() - 1.0;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,256,return m;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,20,import java.util.Random;
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,26," 12, -51, 4 },"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,27," 6, 167, -68 },"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,28," -4, 24, -41 }, };"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,28,"{ 12, -51,   4 },"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,29,"{  6, 167, -68 },"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,30,"{ -4,  24, -41 }"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,31," 1, 4, 7, },"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,32," 2, 5, 8, },"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,33," 3, 6, 9, }, };"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,34,"{ 1, 2,  2 },"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,35,"{ 2, 4,  6 },"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,36,"{ 4, 8, 12 }"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,36," 12, -51, 4, 1 },"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,37," 6, 167, -68, 2 },"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,38," -4, 24, -41, 3 }, };"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,40,"{ 12, -51,   4, 1 },"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,41,"{  6, 167, -68, 2 },"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,42,"{ -4,  24, -41, 3 }"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,41," 12, -51, 4, },"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,42," 6, 167, -68, },"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,43," -4, 24, -41, },"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,44," -5, 34, 7, }, };"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,46,"{ 12, -51,   4 },"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,47,"{  6, 167, -68 },"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,48,"{ -4,  24, -41 },"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,49,"{ -5,  34,   7 }"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,58,RSolver solver =
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,59,ew QRSolver(new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3NonSingular)));
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,64,DecompositionSolver solver =
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,65,new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3NonSingular)).getSolver();
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,62,olver = new QRSolver(new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3Singular)));
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,68,solver = new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3Singular)).getSolver();
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,65,olver = new QRSolver(new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x4)));
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,66,ssertFalse(solver.isNonSingular());
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,71,solver = new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x4)).getSolver();
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,72,assertTrue(solver.isNonSingular());
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,68,olver = new QRSolver(new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData4x3)));
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,74,solver = new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData4x3)).getSolver();
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,75,RSolver solver =
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,76,ew QRSolver(new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3NonSingular)));
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,81,DecompositionSolver solver =
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,82,new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3NonSingular)).getSolver();
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,106,RSolver solver =
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,107,ew QRSolver(new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3Singular)));
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,112,DecompositionSolver solver =
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,113,new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3Singular)).getSolver();
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,137,RSolver solver =
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,138,ew QRSolver(new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3NonSingular)));
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,143,QRDecomposition decomposition =
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,144,new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3NonSingular));
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,145,DecompositionSolver solver = decomposition.getSolver();
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,147,"ssertEquals(0, solver.solve(b).subtract(xRef).getNorm(), 1.0e-13);"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,154,"assertEquals(0, solver.solve(b).subtract(xRef).getNorm(), 2.0e-16 * xRef.getNorm());"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,151,"ssertEquals(0,"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,152,"ew RealVectorImpl(solver.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,153,.0e-13);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,158,final double[] x = solver.solve(b.getColumn(i));
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,159,final double error = new RealVectorImpl(x).subtract(xRef.getColumnVector(i)).getNorm();
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,160,"assertEquals(0, error, 3.0e-16 * xRef.getColumnVector(i).getNorm());"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,158,"ssertEquals(0,"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,159,"olver.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,160,.0e-13);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,165,final RealVector x = solver.solve(b.getColumnVector(i));
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,166,final double error = x.subtract(xRef.getColumnVector(i)).getNorm();
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,167,"assertEquals(0, error, 3.0e-16 * xRef.getColumnVector(i).getNorm());"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,167,"ssertEquals(0,"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,168,"olver.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,169,.0e-13);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,174,final RealVector x = solver.solve(v);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,175,final double error = x.subtract(xRef.getColumnVector(i)).getNorm();
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,176,"assertEquals(0, error, 3.0e-16 * xRef.getColumnVector(i).getNorm());"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,181,public void testOverdetermined() {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,182,final Random r    = new Random(5559252868205245l);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,183,int          p    = (7 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,184,int          q    = (5 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,185,"RealMatrix   a    = createTestMatrix(r, p, q);"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,186,"RealMatrix   xRef = createTestMatrix(r, q, DenseRealMatrix.BLOCK_SIZE + 3);"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,188,// build a perturbed system: A.X + noise = B
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,189,RealMatrix b = a.multiply(xRef);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,190,final double noise = 0.001;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,191,b.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,192,private static final long serialVersionUID = 3533849820776962636L;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,193,"public double visit(int row, int column, double value) {"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,194,return value * (1.0 + noise * (2 * r.nextDouble() - 1));
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,198,"// despite perturbation, the least square solution should be pretty good"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,199,RealMatrix x = new QRDecompositionImpl(a).getSolver().solve(b);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,200,"assertEquals(0, x.subtract(xRef).getNorm(), 0.01 * noise * p * q);"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,204,public void testUnderdetermined() {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,205,final Random r    = new Random(42185006424567123l);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,206,int          p    = (5 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,207,int          q    = (7 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,208,"RealMatrix   a    = createTestMatrix(r, p, q);"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,209,"RealMatrix   xRef = createTestMatrix(r, q, DenseRealMatrix.BLOCK_SIZE + 3);"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,210,RealMatrix   b    = a.multiply(xRef);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,211,RealMatrix   x = new QRDecompositionImpl(a).getSolver().solve(b);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,213,"// too many equations, the system cannot be solved at all"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,214,assertTrue(x.subtract(xRef).getNorm() / (p * q) > 0.01);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,216,// the last unknown should have been set to 0
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,217,"assertEquals(0.0, x.getSubMatrix(p, q - 1, 0, x.getColumnDimension() - 1).getNorm());"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,221,"private RealMatrix createTestMatrix(final Random r, final int rows, final int columns) {"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,222,"RealMatrix m = MatrixUtils.createRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,223,m.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor(){
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,224,private static final long serialVersionUID = -556118291433400034L;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,225,"public double visit(int row, int column, double value)"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,226,throws MatrixVisitorException {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,227,return 2.0 * r.nextDouble() - 1.0;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,230,return m;

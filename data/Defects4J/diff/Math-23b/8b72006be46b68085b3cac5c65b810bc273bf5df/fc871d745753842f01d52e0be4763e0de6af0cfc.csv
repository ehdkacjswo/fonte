is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,17,package org.apache.commons.math.transform;
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,20,* This enumeration defines the various types of normalizations that can be
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,21,* applied to discrete Fourier transforms (DFT). The exact definition of these
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,22,* normalizations is detailed below.
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,24,* @see FastFourierTransformer
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,25,* @version $Id Revision$
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,26,* @since 3.0
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,28,public enum DftNormalization {
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,30,* <p>
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,31,* Should be passed to the constructor of e.g.
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,32,* {@link FastFourierTransformer} to use the <em>standard</em> normalization
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,33,* convention. This normalization convention is defined as follows
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,34,* <ul>
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,35,* <li>forward transform: y<sub>n</sub> = &sum;<sub>k=0</sub><sup>N-1</sup>
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,36,"* x<sub>k</sub> exp(-2&pi;i n k / N),</li>"
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,37,* <li>inverse transform: x<sub>k</sub> = N<sup>-1</sup>
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,38,"* &sum;<sub>n=0</sub><sup>N-1</sup> y<sub>n</sub> exp(2&pi;i n k / N),</li>"
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,39,* </ul>
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,40,* where N is the size of the data sample.
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,41,* </p>
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,43,"STANDARD,"
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,46,* <p>
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,47,* Should be passed to the constructor of e.g.
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,48,* {@link FastFourierTransformer} to use the <em>unitary</em> normalization
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,49,* convention. This normalization convention is defined as follows
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,50,* <ul>
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,51,* <li>forward transform: y<sub>n</sub> = (1 / &radic;N)
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,52,* &sum;<sub>k=0</sub><sup>N-1</sup> x<sub>k</sub>
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,53,"* exp(-2&pi;i n k / N),</li>"
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,54,* <li>inverse transform: x<sub>k</sub> = (1 / &radic;N)
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,55,"* &sum;<sub>n=0</sub><sup>N-1</sup> y<sub>n</sub> exp(2&pi;i n k / N),</li>"
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,56,* </ul>
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,57,* which makes the transform unitary. N is the size of the data sample.
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,58,* </p>
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,60,UNITARY;
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,28,mport org.apache.commons.math.transform.FastFourierTransformer.DftNormalization;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,41," normalization conventions, which are described below."
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,41,"* normalization conventions, which are specified by the parameter"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,42,* {@link DftNormalization}.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,52," <h3><a id=""standard"">Standard DFT</a></h3>"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,53, <p>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,54, The standard normalization convention is defined as follows
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,55, <ul>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,56, <li>forward transform: y<sub>n</sub> = &sum;<sub>k=0</sub><sup>N-1</sup>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,57," x<sub>k</sub> exp(-2&pi;i n k / N),</li>"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,58, <li>inverse transform: x<sub>k</sub> = N<sup>-1</sup>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,59," &sum;<sub>n=0</sub><sup>N-1</sup> y<sub>n</sub> exp(2&pi;i n k / N),</li>"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,60, </ul>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,61, where N is the size of the data sample.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,62, </p>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,63, <p>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,64, {@link FastFourierTransformer}s following this convention are returned by the
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,65, factory method {@link #create()}.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,66, </p>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,67," <h3><a id=""unitary"">Unitary DFT</a></h3>"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,68, <p>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,69, The unitary normalization convention is defined as follows
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,70, <ul>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,71, <li>forward transform: y<sub>n</sub> = (1 / &radic;N)
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,72," &sum;<sub>k=0</sub><sup>N-1</sup> x<sub>k</sub> exp(-2&pi;i n k / N),</li>"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,73, <li>inverse transform: x<sub>k</sub> = (1 / &radic;N)
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,74," &sum;<sub>n=0</sub><sup>N-1</sup> y<sub>n</sub> exp(2&pi;i n k / N),</li>"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,75, </ul>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,76, which makes the transform unitary. N is the size of the data sample.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,77, </p>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,78, <p>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,79, {@link FastFourierTransformer}s following this convention are returned by the
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,80, factory method {@link #createUnitary()}.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,81, </p>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,54,* @see DftNormalization
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,89, The various types of normalizations that can be applied to discrete
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,90, Fourier transforms.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,92, @see FastFourierTransformer
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,94,ublic static enum DftNormalization {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,95,** The normalization to be specified for standard DFT. */
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,96,"TANDARD,"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,98,** The normalization to be specified for unitary DFT. */
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,99,NITARY;
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,28,mport org.apache.commons.math.transform.FastFourierTransformer.DftNormalization;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,29,mport org.apache.commons.math.transform.FastFourierTransformer.DftNormalization;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,54,inal FastFourierTransformer.DftNormalization[] norm;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,55,orm = FastFourierTransformer.DftNormalization.values();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,53,final DftNormalization[] norm;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,54,norm = DftNormalization.values();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,77,inal FastFourierTransformer.DftNormalization[] norm;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,78,orm = FastFourierTransformer.DftNormalization.values();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,76,final DftNormalization[] norm;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,77,norm = DftNormalization.values();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,100,inal FastFourierTransformer.DftNormalization[] norm;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,101,orm = FastFourierTransformer.DftNormalization.values();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,99,final DftNormalization[] norm;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,100,norm = DftNormalization.values();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,123,inal FastFourierTransformer.DftNormalization[] norm;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,124,orm = FastFourierTransformer.DftNormalization.values();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,122,final DftNormalization[] norm;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,123,norm = DftNormalization.values();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,147,inal FastFourierTransformer.DftNormalization[] norm;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,148,orm = FastFourierTransformer.DftNormalization.values();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,146,final DftNormalization[] norm;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,147,norm = DftNormalization.values();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,219,"inal FastFourierTransformer.DftNormalization normalization,"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,218,"final DftNormalization normalization,"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,228,f (normalization == FastFourierTransformer.DftNormalization.STANDARD){
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,227,if (normalization == DftNormalization.STANDARD){
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,235,f (normalization == FastFourierTransformer.DftNormalization.STANDARD) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,234,if (normalization == DftNormalization.STANDARD) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,255,"inal FastFourierTransformer.DftNormalization normalization,"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,254,"final DftNormalization normalization,"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,268,f (normalization == FastFourierTransformer.DftNormalization.STANDARD) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,267,if (normalization == DftNormalization.STANDARD) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,275,f (normalization == FastFourierTransformer.DftNormalization.STANDARD) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,274,if (normalization == DftNormalization.STANDARD) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,296,"inal FastFourierTransformer.DftNormalization normalization,"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,295,"final DftNormalization normalization,"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,309,f (normalization == FastFourierTransformer.DftNormalization.STANDARD) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,308,if (normalization == DftNormalization.STANDARD) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,316,f (normalization == FastFourierTransformer.DftNormalization.STANDARD) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,315,if (normalization == DftNormalization.STANDARD) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,340,inal FastFourierTransformer.DftNormalization[] norm;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,341,orm = FastFourierTransformer.DftNormalization.values();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,339,final DftNormalization[] norm;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,340,norm = DftNormalization.values();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,359,inal FastFourierTransformer.DftNormalization[] norm;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,360,orm = FastFourierTransformer.DftNormalization.values();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,358,final DftNormalization[] norm;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,359,norm = DftNormalization.values();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,381,inal FastFourierTransformer.DftNormalization[] norm;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,382,orm = FastFourierTransformer.DftNormalization.values();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,380,final DftNormalization[] norm;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,381,norm = DftNormalization.values();

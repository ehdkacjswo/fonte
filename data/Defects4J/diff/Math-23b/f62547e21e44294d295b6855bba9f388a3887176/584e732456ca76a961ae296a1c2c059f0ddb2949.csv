is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,199,ouble arg = (double) cumulativeTestPoints[i];
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,199,double arg = cumulativeTestPoints[i];
False,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,206,ouble arg2 = (double) cumulativeTestPoints[i + 1];
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,206,double arg2 = cumulativeTestPoints[i + 1];
False,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,226,ouble oned = (double) one;
False,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,227,ouble twod = (double) two;
False,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,228,ouble tend = (double) ten;
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,226,double oned = one;
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,227,double twod = two;
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,228,double tend = ten;
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,152,ouble lowerTail = distribution.cumulativeProbability((double)-i);
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,153,ouble upperTail = distribution.cumulativeProbability((double) i);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,152,double lowerTail = distribution.cumulativeProbability(-i);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,153,double upperTail = distribution.cumulativeProbability(i);
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,240,ublic void testNonInversible() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,240,public void testNonInversible() {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,325,ublic void testMoreEstimatedParametersSimple() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,325,public void testMoreEstimatedParametersSimple() {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,357,ublic void testMoreEstimatedParametersUnsorted() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,357,public void testMoreEstimatedParametersUnsorted() {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,519,ublic void testCircleFittingBadInit() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,519,public void testCircleFittingBadInit() {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,640,eturn (WeightedMeasurement[]) points.toArray(new PointModel[points.size()]);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,640,return points.toArray(new PointModel[points.size()]);
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,460,ublic void testControlParameters() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,460,public void testControlParameters() {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,623,eturn (EstimatedParameter[]) set.toArray(new EstimatedParameter[set.size()]);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,623,return set.toArray(new EstimatedParameter[set.size()]);
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,685,eturn (WeightedMeasurement[]) points.toArray(new PointModel[points.size()]);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,685,return points.toArray(new PointModel[points.size()]);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,239,// ignored
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,261,// ignored
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,285,// ignored
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,353,// ignored
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,360,// ignored
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,366,// ignored
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,372,// ignored
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,378,// ignored
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,399,// ignored
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,412,// ignored
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,433,// ignored
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,470,// ignored
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,496,// ignored
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,508,// ignored
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,514,// ignored
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,521,"ssertClose(""LU decomposition"", lu, (BigMatrix) new BigMatrixImpl(testDataLU), normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,521,"assertClose(""LU decomposition"", lu, new BigMatrixImpl(testDataLU), normTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,525,"ssertClose(""LU decomposition"", lu, (BigMatrix) new BigMatrixImpl(luDataLUDecomposition), normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,525,"assertClose(""LU decomposition"", lu, new BigMatrixImpl(luDataLUDecomposition), normTolerance);"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,135,"ssertEquals((BigMatrixImpl) MatrixUtils.createRowBigMatrix(row),"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,135,"assertEquals(MatrixUtils.createRowBigMatrix(row),"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,137,"ssertEquals((BigMatrixImpl) MatrixUtils.createRowBigMatrix(bigRow),"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,137,"assertEquals(MatrixUtils.createRowBigMatrix(bigRow),"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,139,"ssertEquals((BigMatrixImpl) MatrixUtils.createRowBigMatrix(stringRow),"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,139,"assertEquals(MatrixUtils.createRowBigMatrix(stringRow),"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,173,"ssertEquals((BigMatrixImpl) MatrixUtils.createColumnBigMatrix(col),"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,173,"assertEquals(MatrixUtils.createColumnBigMatrix(col),"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,175,"ssertEquals((BigMatrixImpl) MatrixUtils.createColumnBigMatrix(bigCol),"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,175,"assertEquals(MatrixUtils.createColumnBigMatrix(bigCol),"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,177,"ssertEquals((BigMatrixImpl) MatrixUtils.createColumnBigMatrix(stringCol),"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,177,"assertEquals(MatrixUtils.createColumnBigMatrix(stringCol),"
False,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,66,ouble[] y = (double[]) y0.clone();
True,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,66,double[] y = y0.clone();
False,src/test/org/apache/commons/math/ode/nonstiff/TestProblem1.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem1.java,62, = (double[]) problem.y.clone();
True,src/test/org/apache/commons/math/ode/nonstiff/TestProblem1.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem1.java,62,y = problem.y.clone();
False,src/test/org/apache/commons/math/ode/nonstiff/TestProblem2.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem2.java,63, = (double[]) problem.y.clone();
True,src/test/org/apache/commons/math/ode/nonstiff/TestProblem2.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem2.java,63,y = problem.y.clone();
False,src/test/org/apache/commons/math/ode/nonstiff/TestProblem3.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem3.java,78, = (double[]) problem.y.clone();
True,src/test/org/apache/commons/math/ode/nonstiff/TestProblem3.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem3.java,78,y = problem.y.clone();
False,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,68, = (double[]) problem.y.clone();
True,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java,68,y = problem.y.clone();
False,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,74,0 = (double[]) problem.y0.clone();
True,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,74,y0 = problem.y0.clone();
False,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,79,rrorScale = (double[]) problem.errorScale.clone();
True,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,79,errorScale = problem.errorScale.clone();
False,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,100,his.y0   = (double[]) y0.clone();
True,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,100,this.y0   = y0.clone();
False,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,116,his.errorScale = (double[]) errorScale.clone();
True,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java,116,this.errorScale = errorScale.clone();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,21,mport java.security.NoSuchProviderException;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,22,mport java.security.NoSuchAlgorithmException;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,73,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,100,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,127,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,154,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,186,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,206,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,212,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,223,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,229,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,243,// ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,263,xpected[i] = (double)smallSampleSize*100/(double)16;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,261,expected[i] = (double)smallSampleSize*100/16;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,277,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,283,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,297,// ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,317,xpected[i] = (double)smallSampleSize*100/(double)16;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,315,expected[i] = (double)smallSampleSize*100/16;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,331,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,337,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,377,// ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,387,ouble n = (double) u.getN();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,385,double n = u.getN();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,398,// ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,419,"ublic void testConfig() throws NoSuchProviderException,"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,420,oSuchAlgorithmException {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,417,public void testConfig() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,521,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,530,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,577,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,585,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,593,// ignored
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,115,ouble expectedValue = (Double)certifiedValues.get(name);
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,115,Double expectedValue = certifiedValues.get(name);
False,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,186,ong index = Math.round((Math.random()) * (double) testArray.length);
True,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,186,long index = Math.round((Math.random()) * testArray.length);
False,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,190,eplica = (StorelessUnivariateStatistic) master.copy();
True,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,190,replica = master.copy();
False,src/test/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,104,eturn Math.sqrt(sum / (double) v.length);
True,src/test/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,104,return Math.sqrt(sum / v.length);
False,src/test/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,103,eturn sum / (double) v.length;
True,src/test/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,103,return sum / v.length;
False,src/test/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/org/apache/commons/math/transform/FastFourierTransformerTest.java,37,ublic void testAdHocData() throws MathException {
True,src/test/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/org/apache/commons/math/transform/FastFourierTransformerTest.java,37,public void testAdHocData() {
False,src/test/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/org/apache/commons/math/transform/FastFourierTransformerTest.java,81,ublic void test2DData() throws MathException {
True,src/test/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/org/apache/commons/math/transform/FastFourierTransformerTest.java,81,public void test2DData() {
False,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,80,X[i] = (double) x[i];
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,80,dX[i] = x[i];
False,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,109,Y[i] = (double) y[i];
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,109,dY[i] = y[i];
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,173,"ssertEquals(n + "" choose "" + k, (double)binomialCoefficient(n, k), MathUtils.binomialCoefficientDouble(n, k), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,174,"ssertEquals(n + "" choose "" + k, Math.log((double)binomialCoefficient(n, k)), MathUtils.binomialCoefficientLog(n, k), 10E-12);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,173,"assertEquals(n + "" choose "" + k, binomialCoefficient(n, k), MathUtils.binomialCoefficientDouble(n, k), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,174,"assertEquals(n + "" choose "" + k, Math.log(binomialCoefficient(n, k)), MathUtils.binomialCoefficientLog(n, k), 10E-12);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,184,"ssertEquals(n[i] + "" choose "" + k[i], (double) expected,"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,184,"assertEquals(n[i] + "" choose "" + k[i], expected,"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,256,// ignored
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,263,// ignored
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,270,// ignored
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,277,// ignored
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,283,// ignored
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,289,// ignored
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,296,// ignored
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,302,// ignored
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,381,"ssertEquals(i + ""! "", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,382,"ssertEquals(i + ""! "", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,381,"assertEquals(i + ""! "", factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,382,"assertEquals(i + ""! "", Math.log(factorial(i)), MathUtils.factorialLog(i), 10E-12);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,395,// ignored
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,401,// ignored
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,407,// ignored
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,413,// ignored
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,518,"riginal[i] = random.nextUniform((double)i + 0.5, (double)i + 0.75);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,518,"original[i] = random.nextUniform(i + 0.5, i + 0.75);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,559,"ssertEquals((int)1, MathUtils.indicator((int)(2)));"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,560,"ssertEquals((int)1, MathUtils.indicator((int)(0)));"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,561,"ssertEquals((int)(-1), MathUtils.indicator((int)(-2)));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,559,"assertEquals(1, MathUtils.indicator((2)));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,560,"assertEquals(1, MathUtils.indicator((0)));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,561,"assertEquals((-1), MathUtils.indicator((-2)));"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1002,"ssertEquals((int) 1, MathUtils.sign((int) 2));"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1003,"ssertEquals((int) 0, MathUtils.sign((int) 0));"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1004,"ssertEquals((int) (-1), MathUtils.sign((int) (-2)));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1002,"assertEquals(1, MathUtils.sign(2));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1003,"assertEquals(0, MathUtils.sign(0));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1004,"assertEquals((-1), MathUtils.sign((-2)));"

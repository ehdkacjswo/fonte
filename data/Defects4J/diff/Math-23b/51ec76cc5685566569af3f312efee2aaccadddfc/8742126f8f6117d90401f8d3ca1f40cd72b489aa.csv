is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/ArgumentOutsideDomainException.java,src/main/java/org/apache/commons/math/ArgumentOutsideDomainException.java,25,* @deprecated in 2.2 (to be removed in 3.0). Please use
True,src/main/java/org/apache/commons/math/ArgumentOutsideDomainException.java,src/main/java/org/apache/commons/math/ArgumentOutsideDomainException.java,26,* {@link org.apache.commons.math.exception.OutOfRangeException} instead.
True,src/main/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/main/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,26,* @deprecated in 2.2 (to be removed in 3.0).
True,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,31,* @deprecated in 2.2 (to be removed in 3.0). Please use
True,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,32,* {@link org.apache.commons.math.exception.FunctionEvaluationException} instead.
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,src/main/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,21,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,src/main/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,21,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/main/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/main/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/TrivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/TrivariateRealFunction.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/TrivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/TrivariateRealFunction.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,19,mport org.apache.commons.math.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,29, Compute the value for the function.
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,30, @param x the point for which the function value should be computed
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,31, @return the value
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,32, @throws FunctionEvaluationException if the function evaluation fails
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,26,* Compute the value of the function.
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,28,* @param x Point at which the function value should be computed.
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,29,* @return the value.
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,34,ouble value(double x) throws FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,31,double value(double x);
False,src/main/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,src/main/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,21,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,21,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,21,mport org.apache.commons.math.DuplicateSampleAbscissaException;
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,38,"ublic class DividedDifferenceInterpolator implements UnivariateRealInterpolator,"
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,39,erializable {
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,36,public class DividedDifferenceInterpolator
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,37,"implements UnivariateRealInterpolator, Serializable {"
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,45, Computes an interpolating function for the data set.
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,42,* Compute an interpolating function for the dataset.
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,47, @param x the interpolating points array
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,48, @param y the interpolating values array
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,49, @return a function which interpolates the data set
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,50, @throws DuplicateSampleAbscissaException if arguments are invalid
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,44,* @param x Interpolating points array.
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,45,* @param y Interpolating values array.
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,46,* @return a function which interpolates the dataset.
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,47,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,48,* if the array lengths are different.
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,49,* @throws org.apache.commons.math.exception.NumberIsTooSmallException
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,50,* if the number of points is less than 2.
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,51,* @throws org.apache.commons.math.exception.NonMonotonousSequenceException
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,52,* if {@code x} is not sorted in strictly increasing order.
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,52,"ublic PolynomialFunctionNewtonForm interpolate(double x[], double y[]) throws"
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,53,uplicateSampleAbscissaException {
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,54,"public PolynomialFunctionNewtonForm interpolate(double x[], double y[]) {"
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,60,"olynomialFunctionLagrangeForm.verifyInterpolationArray(x, y);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,60,"PolynomialFunctionLagrangeForm.verifyInterpolationArray(x, y, true);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,79, Returns a copy of the divided difference array.
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,78,* Return a copy of the divided difference array.
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,88, @param x the interpolating points array
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,89, @param y the interpolating values array
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,90, @return a fresh copy of the divided difference array
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,91, @throws DuplicateSampleAbscissaException if any abscissas coincide
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,87,* @param x Interpolating points array.
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,88,* @param y Interpolating values array.
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,89,* @return a fresh copy of the divided difference array.
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,90,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,91,* if the array lengths are different.
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,92,* @throws org.apache.commons.math.exception.NumberIsTooSmallException
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,93,* if the number of points is less than 2.
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,94,* @throws org.apache.commons.math.exception.NonMonotonousSequenceException
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,95,* if {@code x} is not sorted in strictly increasing order.
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,93,"rotected static double[] computeDividedDifference(final double x[], final double y[])"
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,94,hrows DuplicateSampleAbscissaException {
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,96,"olynomialFunctionLagrangeForm.verifyInterpolationArray(x, y);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,97,"protected static double[] computeDividedDifference(final double x[], final double y[]) {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,98,"PolynomialFunctionLagrangeForm.verifyInterpolationArray(x, y, true);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,106,f (denominator == 0.0) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,107,/ This happens only when two abscissas are identical.
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,108,"hrow new DuplicateSampleAbscissaException(x[j], j, j+i);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,19,mport org.apache.commons.math.DuplicateSampleAbscissaException;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,20,mport org.apache.commons.math.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,21,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,23,mport org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,21,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,22,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,23,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,24,import org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,72,"ublic PolynomialFunctionLagrangeForm(double x[], double y[])"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,73,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,75,"erifyInterpolationArray(x, y);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,68,"public PolynomialFunctionLagrangeForm(double x[], double y[]) {"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,75,"if (!verifyInterpolationArray(x, y, false)) {"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,76,"MathUtils.sortInPlace(this.x, this.y);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,77,// Second check in case some abscissa is duplicated.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,78,"verifyInterpolationArray(this.x, this.y, true);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,86, @param z the point at which the function value is to be computed
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,87, @return the function value
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,88, @throws FunctionEvaluationException if a runtime error occurs
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,89, @see UnivariateRealFunction#value(double)
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,85,* @param z Point at which the function value is to be computed.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,86,* @return the function value.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,87,* @throws DimensionMismatchException if {@code x} and {@code y} have
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,88,* different lengths.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,89,* @throws org.apache.commons.math.exception.NonMonotonousSequenceException
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,90,* if {@code x} is not sorted in strictly increasing order.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,91,* @throws NumberIsTooSmallException if the size of {@code x} is less
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,92,* than 2.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,91,ublic double value(double z) throws FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,92,ry {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,93,"eturn evaluate(x, y, z);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,94, catch (DuplicateSampleAbscissaException e) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,95,"hrow new FunctionEvaluationException(e, z, e.getLocalizablePattern(), e.getArguments());"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,94,public double value(double z) {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,95,"return evaluateInternal(x, y, z);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,156, Neville's Algorithm</a>. It takes O(N^2) time.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,157, <p>
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,158, This function is made public static so that users can call it directly
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,159, without instantiating PolynomialFunctionLagrangeForm object.</p>
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,155,* Neville's Algorithm</a>. It takes O(n^2) time.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,161, @param x the interpolating points array
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,162, @param y the interpolating values array
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,163, @param z the point at which the function value is to be computed
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,164, @return the function value
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,165, @throws DuplicateSampleAbscissaException if the sample has duplicate abscissas
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,166, @throws IllegalArgumentException if inputs are not valid
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,157,* @param x Interpolating points array.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,158,* @param y Interpolating values array.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,159,* @param z Point at which the function value is to be computed.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,160,* @return the function value.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,161,* @throws DimensionMismatchException if {@code x} and {@code y} have
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,162,* different lengths.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,163,* @throws org.apache.commons.math.exception.NonMonotonousSequenceException
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,164,* if {@code x} is not sorted in strictly increasing order.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,165,* @throws NumberIsTooSmallException if the size of {@code x} is less
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,166,* than 2.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,168,"ublic static double evaluate(double x[], double y[], double z) throws"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,169,"uplicateSampleAbscissaException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,168,"public static double evaluate(double x[], double y[], double z) {"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,169,"if (verifyInterpolationArray(x, y, false)) {"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,170,"return evaluateInternal(x, y, z);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,171,"erifyInterpolationArray(x, y);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,173,// Array is not sorted.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,174,final double[] xNew = new double[x.length];
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,175,final double[] yNew = new double[y.length];
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,176,"System.arraycopy(x, 0, xNew, 0, x.length);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,177,"System.arraycopy(y, 0, yNew, 0, y.length);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,179,"MathUtils.sortInPlace(xNew, yNew);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,180,// Second check in case some abscissa is duplicated.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,181,"verifyInterpolationArray(xNew, yNew, true);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,182,"return evaluateInternal(xNew, yNew, z);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,186,* Evaluate the Lagrange polynomial using
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,187,"* <a href=""http://mathworld.wolfram.com/NevillesAlgorithm.html"">"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,188,* Neville's Algorithm</a>. It takes O(n^2) time.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,190,* @param x Interpolating points array.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,191,* @param y Interpolating values array.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,192,* @param z Point at which the function value is to be computed.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,193,* @return the function value.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,194,* @throws DimensionMismatchException if {@code x} and {@code y} have
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,195,* different lengths.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,196,* @throws org.apache.commons.math.exception.NonMonotonousSequenceException
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,197,* if {@code x} is not sorted in strictly increasing order.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,198,* @throws NumberIsTooSmallException if the size of {@code x} is less
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,199,* than 2.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,201,"private static double evaluateInternal(double x[], double y[], double z) {"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,198,f (divider == 0.0) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,199,/ This happens only when two abscissas are identical.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,200,"hrow new DuplicateSampleAbscissaException(x[i], i, i+j);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,221, interpolation data. It takes O(N^2) time.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,222, <p>
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,223, Note this computation can be ill-conditioned. Use with caution
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,224, and only when it is necessary.</p>
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,226, @throws ArithmeticException if any abscissas coincide
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,246,* interpolation data. It takes O(n^2) time.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,247,* Note that this computation can be ill-conditioned: Use with caution
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,248,* and only when it is necessary.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,228,rotected void computeCoefficients() throws ArithmeticException {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,250,protected void computeCoefficients() {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,256,f (d == 0.0) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,257,/ This happens only when two abscissas are identical.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,258,or (int k = 0; k < n; ++k) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,259,f ((i != k) && (x[i] == x[k])) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,260,hrow MathRuntimeException.createArithmeticException(
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,261,"ocalizedFormats.IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO,"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,262,", k, x[i]);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,282, Verifies that the interpolation arrays are valid.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,283, <p>
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,293,* Check that the interpolation arrays are valid.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,286, </p>
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,287, <p>
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,288, The interpolating points must be distinct. However it is not
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,289," verified here, it is checked in evaluate() and computeCoefficients()."
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,290, </p>
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,292, @param x the interpolating points array
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,293, @param y the interpolating values array
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,294, @throws IllegalArgumentException if not valid
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,297,* @param x Interpolating points array.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,298,* @param y Interpolating values array.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,299,* @param abort Whether to throw an exception if {@code x} is not sorted.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,300,* @throws DimensionMismatchException if the array lengths are different.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,301,* @throws NumberIsTooSmallException if the number of points is less than 2.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,302,* @throws org.apache.commons.math.exception.NonMonotonousSequenceException
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,303,* if {@code x} is not sorted in strictly increasing order and {@code abort}
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,304,* is {@code true}.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,305,"* @return {@code false} if the {@code x} is not sorted in increasing order,"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,306,* {@code true} otherwise.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,298,"ublic static void verifyInterpolationArray(double x[], double y[])"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,299,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,310,"public static boolean verifyInterpolationArray(double x[], double y[], boolean abort) {"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,302,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,303,"ocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, x.length, y.length);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,312,"throw new DimensionMismatchException(x.length, y.length);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,307,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,308,"ocalizedFormats.WRONG_NUMBER_OF_POINTS, 2, x.length);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,315,"throw new NumberIsTooSmallException(LocalizedFormats.WRONG_NUMBER_OF_POINTS, 2, x.length, true);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,318,"return MathUtils.checkOrder(x, MathUtils.OrderDirection.INCREASING, true, abort);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,21,mport org.apache.commons.math.ArgumentOutsideDomainException;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,22,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,21,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,24,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,25,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,26,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,27,import org.apache.commons.math.exception.NullArgumentException;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,61,ublic class PolynomialSplineFunction
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,62,mplements DifferentiableUnivariateRealFunction {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,64,** Spline segment interval delimiters (knots).   Size is n+1 for n segments. */
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,64,public class PolynomialSplineFunction implements DifferentiableUnivariateRealFunction {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,66,* Spline segment interval delimiters (knots).
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,67,* Size is n + 1 for n segments.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,71, evaluating these functions at <code>(x - knot[i])</code> where i is the
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,74,* evaluating these functions at {@code (x - knot[i])} where i is the
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,77, Number of spline segments = number of polynomials
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,78,  = number of partition points - 1
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,79,* Number of spline segments. It is equal to the number of polynomials and
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,80,* to the number of partition points - 1.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,86, <p>
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,88," and polynomials properties, respectively.</p>"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,89,"* and polynomials properties, respectively."
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,90, @param knots spline segment interval delimiters
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,91, @param polynomials polynomial functions that make up the spline
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,92, @throws NullPointerException if either of the input arrays is null
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,93," @throws IllegalArgumentException if knots has length less than 2,"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,94," <code>polynomials.length != knots.length - 1 </code>, or the knots array"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,95, is not strictly increasing.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,91,* @param knots Spline segment interval delimiters.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,92,* @param polynomials Polynomial functions that make up the spline.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,93,* @throws NullArgumentException if either of the input arrays is {@code null}.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,94,* @throws NumberIsTooSmallException if knots has length less than 2.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,95,* @throws DimensionMismatchException if {@code polynomials.length != knots.length - 1}.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,96,* @throws org.apache.commons.math.exception.NonMonotonousSequenceException if
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,97,* the {@code knots} array is not strictly increasing.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,101,if (knots == null ||
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,102,polynomials == null) {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,103,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,100,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,101,"ocalizedFormats.NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION,"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,102,", knots.length);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,106,"throw new NumberIsTooSmallException(LocalizedFormats.NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION,"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,107,"2, knots.length, false);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,105,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,106,"ocalizedFormats.POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS,"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,107,"olynomials.length, knots.length);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,109,f (!isStrictlyIncreasing(knots)) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,110,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,111,ocalizedFormats.NOT_STRICTLY_INCREASING_KNOT_VALUES);
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,110,"throw new DimensionMismatchException(polynomials.length, knots.length);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,112,MathUtils.checkOrder(knots);
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,123, <p>
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,124, Throws FunctionEvaluationException if v is outside of the domain of the
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,125," function.  The domain is [smallest knot, largest knot].</p>"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,126, <p>
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,128, computing the value of the function.</p>
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,124,* computing the value of the function.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,130, @param v the point for which the function value should be computed
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,131, @return the value
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,132, @throws ArgumentOutsideDomainException if v is outside of the domain of
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,133, of the spline function (less than the smallest knot point or greater
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,134, than the largest knot point)
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,126,* @param v Point for which the function value should be computed.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,127,* @return the value.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,128,* @throws OutOfRangeException if {@code v} is outside of the domain of the
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,129,* spline function (smaller than the smallest knot point or larger than the
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,130,* largest knot point).
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,136,ublic double value(double v) throws ArgumentOutsideDomainException {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,132,public double value(double v) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,138,"hrow new ArgumentOutsideDomainException(v, knots[0], knots[n]);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,134,"throw new OutOfRangeException(v, knots[0], knots[n]);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,144,/This will handle the case where v is the last knot value
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,145,"/There are only n-1 polynomials, so if v is the last knot"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,146,/then we will use the last polynomial to calculate the value.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,140,// This will handle the case where v is the last knot value
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,141,"// There are only n-1 polynomials, so if v is the last knot"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,142,// then we will use the last polynomial to calculate the value.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,154, Returns the derivative of the polynomial spline function as a UnivariateRealFunction
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,155, @return  the derivative function
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,150,* Get the derivative of the polynomial spline function.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,152,* @return the derivative function.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,162, Returns the derivative of the polynomial spline function as a PolynomialSplineFunction
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,159,* Get the derivative of the polynomial spline function.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,164, @return  the derivative function
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,161,* @return the derivative function.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,175, Returns the number of spline segments = the number of polynomials
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,176, = the number of knot points - 1.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,172,* Get the number of spline segments.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,173,* It is also the number of polynomials and the number of knot points - 1.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,178, @return the number of spline segments
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,175,* @return the number of spline segments.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,185, Returns a copy of the interpolating polynomials array.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,186, <p>
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,187, Returns a fresh copy of the array. Changes made to the copy will
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,188, not affect the polynomials property.</p>
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,182,* Get a copy of the interpolating polynomials array.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,183,* It returns a fresh copy of the array. Changes made to the copy will
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,184,* not affect the polynomials property.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,190, @return the interpolating polynomials
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,186,* @return the interpolating polynomials.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,199, Returns an array copy of the knot points.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,200, <p>
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,201, Returns a fresh copy of the array. Changes made to the copy
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,202, will not affect the knots property.</p>
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,195,* Get an array copy of the knot points.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,196,* It returns a fresh copy of the array. Changes made to the copy
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,197,* will not affect the knots property.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,204, @return the knot points
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,199,* @return the knot points.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,213, Determines if the given array is ordered in a strictly increasing
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,214, fashion.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,216, @param x the array to examine.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,217, @return <code>true</code> if the elements in <code>x</code> are ordered
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,218," in a stricly increasing manner.  <code>false</code>, otherwise."
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,220,rivate static boolean isStrictlyIncreasing(double[] x) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,221,or (int i = 1; i < x.length; ++i) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,222,f (x[i - 1] >= x[i]) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,223,eturn false;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,226,eturn true;
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,21,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,21,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,21,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,21,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,22,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,22,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,21,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,21,import org.apache.commons.math.exception.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,17,package org.apache.commons.math.exception;
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,19,import java.util.Locale;
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,21,import org.apache.commons.math.exception.util.ArgUtils;
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,22,import org.apache.commons.math.exception.util.MessageFactory;
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,23,import org.apache.commons.math.exception.util.Localizable;
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,24,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,27,* Exception for signalling that a function object could not return
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,28,* a valid result.
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,30,* @since 3.0
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,31,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,33,public class FunctionEvaluationException extends RuntimeException {
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,34,/** Serializable version Id. */
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,35,private static final long serialVersionUID = -6024911025449780478L;
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,37,* Pattern used to build the message.
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,39,private final Localizable specific;
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,41,* Arguments used to build the message.
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,43,private final Object[] arguments;
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,46,* @param specific Message pattern providing the specific context of
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,47,* the error.
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,48,* @param args Arguments.
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,50,"public FunctionEvaluationException(Localizable specific,"
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,51,Object ... args) {
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,52,this.specific = specific;
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,53,arguments = ArgUtils.flatten(args);
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,56,* @param args Arguments.
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,58,public FunctionEvaluationException(Object ... args) {
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,59,"this(null, args);"
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,63,* Get the arguments.
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,65,* @return a (shallow) copy of the arguments.
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,67,public Object[] getArguments() {
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,68,return arguments.clone();
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,72,* Get the message in a specified locale.
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,74,* @param locale Locale in which the message should be translated.
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,76,* @return the localized message.
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,78,public String getMessage(final Locale locale) {
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,79,"return MessageFactory.buildMessage(locale,"
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,80,"specific,"
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,81,"LocalizedFormats.EVALUATION,"
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,82,arguments);
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,85,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,86,@Override
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,87,public String getMessage() {
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,88,return getMessage(Locale.US);
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,91,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,92,@Override
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,93,public String getLocalizedMessage() {
True,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/exception/FunctionEvaluationException.java,94,return getMessage(Locale.getDefault());
False,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,51,"INOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}""),"
False,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,52,"INOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n,k), got n = {0}""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,51,"BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,52,"BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,98,"EVALUATION(""evaluation""), /* keep */"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,23,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,23,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,21,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,21,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,21,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,21,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,23,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,23,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,23,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,23,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,48, @throws org.apache.commons.math.FunctionEvaluationException if the
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,48,* @throws org.apache.commons.math.exception.FunctionEvaluationException if the
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,23,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,23,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,18,ackage org.apache.commons.math.optimization.direct;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,20,mport java.util.Arrays;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,21,mport java.util.Comparator;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,23,mport org.apache.commons.math.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,24,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,25,mport org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,26,mport org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,27,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,28,mport org.apache.commons.math.optimization.GoalType;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,29,mport org.apache.commons.math.optimization.ConvergenceChecker;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,30,mport org.apache.commons.math.optimization.RealPointValuePair;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,31,mport org.apache.commons.math.optimization.SimpleScalarValueChecker;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,34, This class implements simplex-based direct search optimization
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,35, algorithms.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,37," <p>Direct search methods only use objective function values, they don't"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,38, need derivatives and don't either try to compute approximation of
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,39, the derivatives. According to a 1996 paper by Margaret H. Wright
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,40," (<a href=""http://cm.bell-labs.com/cm/cs/doc/96/4-02.ps.gz"">Direct"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,41," Search Methods: Once Scorned, Now Respectable</a>), they are used"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,42, when either the computation of the derivative is impossible (noisy
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,43," functions, unpredictable discontinuities) or difficult (complexity,"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,44," computation cost). In the first cases, rather than an optimum, a"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,45," <em>not too bad</em> point is desired. In the latter cases, an"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,46, optimum is desired but cannot be reasonably found. In all cases
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,47, direct search methods can be useful.</p>
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,49, <p>Simplex-based direct search methods are based on comparison of
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,50, the objective function values at the vertices of a simplex (which is a
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,51, set of n+1 points in dimension n) that is updated by the algorithms
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,52, steps.<p>
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,54, <p>The initial configuration of the simplex can be set using either
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,55, {@link #setStartConfiguration(double[])} or {@link
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,56, #setStartConfiguration(double[][])}. If neither method has been called
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,57," before optimization is attempted, an explicit call to the first method"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,58," with all steps set to +1 is triggered, thus building a default"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,59, configuration from a unit hypercube. Each call to {@link
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,60," #optimize(MultivariateRealFunction, GoalType, double[]) optimize} will reuse"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,61, the current start configuration and move it such that its first vertex
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,62, is at the provided start point of the optimization. If the {@code optimize}
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,63, method is called to solve a different problem and the number of parameters
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,64," change, the start configuration will be reset to a default one with the"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,65, appropriate dimensions.</p>
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,67," <p>If {@link #setConvergenceChecker(ConvergenceChecker)} is not called,"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,68, a default {@link SimpleScalarValueChecker} is used.</p>
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,70, <p>Convergence is checked by providing the <em>worst</em> points of
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,71," previous and current simplex to the convergence checker, not the best ones.</p>"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,73, <p>This class is the base class performing the boilerplate simplex
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,74, initialization and handling. The simplex update by itself is
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,75, performed by the derived classes according to the implemented
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,76, algorithms.</p>
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,78, @see MultivariateRealFunction
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,79, @see NelderMead
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,80, @see MultiDirectional
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,81, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,82, @since 1.2
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,83, @deprecated in 2.2 (to be removed in 3.0). Please use {@link SimplexOptimizer} instead.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,85,ublic abstract class DirectSearchOptimizer
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,86,xtends BaseAbstractScalarOptimizer<MultivariateRealFunction> {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,87,** Simplex. */
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,88,rotected RealPointValuePair[] simplex;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,89,** Start simplex configuration. */
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,90,rivate double[][] startConfiguration;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,93, Default constructor.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,95,rotected DirectSearchOptimizer() {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,96,etConvergenceChecker(new SimpleScalarValueChecker());
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,100, Set start configuration for simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,102, <p>The start configuration for simplex is built from a box parallel to
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,103, the canonical axes of the space. The simplex is the subset of vertices
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,104, of a box parallel to the canonical axes. It is built as the path followed
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,105, while traveling from one vertex of the box to the diagonally opposite
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,106, vertex moving only along the box edges. The first vertex of the box will
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,107, be located at the start point of the optimization.</p>
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,108," <p>As an example, in dimension 3 a simplex has 4 vertices. Setting the"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,109," steps to (1, 10, 2) and the start point to (1, 1, 1) would imply the"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,110," start simplex would be: { (1, 1, 1), (2, 1, 1), (2, 11, 1), (2, 11, 3) }."
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,111," The first vertex would be set to the start point at (1, 1, 1) and the"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,112," last vertex would be set to the diagonally opposite vertex at (2, 11, 3).</p>"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,114, @param steps Steps along the canonical axes representing box edges. They
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,115, may be negative but not zero.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,116, @throws IllegalArgumentException if one step is zero.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,118,ublic void setStartConfiguration(final double[] steps)
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,119,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,120,/ only the relative position of the n final vertices with respect
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,121,/ to the first one are stored
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,122,inal int n = steps.length;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,123,tartConfiguration = new double[n][n];
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,124,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,125,inal double[] vertexI = startConfiguration[i];
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,126,or (int j = 0; j < i + 1; ++j) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,127,f (steps[j] == 0.0) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,128,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,129,"ocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX, j, j + 1);"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,131,"ystem.arraycopy(steps, 0, vertexI, 0, j + 1);"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,137, Set start configuration for simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,138, The real initial simplex will be set up by moving the reference
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,139, simplex such that its first point is located at the start point of the
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,140, optimization.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,142, @param referenceSimplex Reference simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,143, @throws IllegalArgumentException if the reference simplex does not
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,144," contain at least one point, or if there is a dimension mismatch"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,145, in the reference simplex or if one of its vertices is duplicated.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,147,ublic void setStartConfiguration(final double[][] referenceSimplex)
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,148,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,150,/ only the relative position of the n final vertices with respect
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,151,/ to the first one are stored
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,152,inal int n = referenceSimplex.length - 1;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,153,f (n < 0) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,154,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,155,ocalizedFormats.SIMPLEX_NEED_ONE_POINT);
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,157,tartConfiguration = new double[n][n];
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,158,inal double[] ref0 = referenceSimplex[0];
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,160,/ vertices loop
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,161,or (int i = 0; i < n + 1; ++i) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,163,inal double[] refI = referenceSimplex[i];
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,165,/ safety checks
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,166,f (refI.length != n) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,167,"hrow new DimensionMismatchException(refI.length, n);"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,169,or (int j = 0; j < i; ++j) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,170,inal double[] refJ = referenceSimplex[j];
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,171,oolean allEquals = true;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,172,or (int k = 0; k < n; ++k) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,173,f (refI[k] != refJ[k]) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,174,llEquals = false;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,175,reak;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,178,f (allEquals) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,179,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,180,"ocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX, i, j);"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,184,/ store vertex i position relative to vertex 0 position
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,185,f (i > 0) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,186,inal double[] confI = startConfiguration[i - 1];
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,187,or (int k = 0; k < n; ++k) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,188,onfI[k] = refI[k] - ref0[k];
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,194,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,195,Override
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,196,rotected RealPointValuePair doOptimize()
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,197,hrows FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,199,inal double[] startPoint = getStartPoint();
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,200,f ((startConfiguration == null) ||
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,201,startConfiguration.length != startPoint.length)) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,202,/ No initial configuration has been set up for simplex
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,203,/ build a default one from a unit hypercube.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,204,inal double[] unit = new double[startPoint.length];
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,205,"rrays.fill(unit, 1.0);"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,206,etStartConfiguration(unit);
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,209,inal boolean isMinim = getGoalType() == GoalType.MINIMIZE;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,210,inal Comparator<RealPointValuePair> comparator
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,211, new Comparator<RealPointValuePair>() {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,212,"ublic int compare(final RealPointValuePair o1,"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,213,inal RealPointValuePair o2) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,214,inal double v1 = o1.getValue();
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,215,inal double v2 = o2.getValue();
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,216,"eturn isMinim ? Double.compare(v1, v2) : Double.compare(v2, v1);"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,220,/ Initialize search.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,221,uildSimplex(startPoint);
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,222,valuateSimplex(comparator);
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,224,ealPointValuePair[] previous = new RealPointValuePair[simplex.length];
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,225,nt iteration = 0;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,226,inal ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,227,hile (true) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,228,f (iteration > 0) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,229,oolean converged = true;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,230,or (int i = 0; i < simplex.length; ++i) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,231,"onverged &= checker.converged(iteration, previous[i], simplex[i]);"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,233,f (converged) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,234,/ we have found an optimum
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,235,eturn simplex[0];
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,239,/ We still need to search.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,240,"ystem.arraycopy(simplex, 0, previous, 0, simplex.length);"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,241,terateSimplex(comparator);
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,242,+iteration;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,247, Compute the next simplex of the algorithm.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,249, @param comparator Comparator to use to sort simplex vertices from best to worst.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,250, @throws FunctionEvaluationException if the function cannot be evaluated at
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,251, some point.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,252, @throws org.apache.commons.math.exception.TooManyEvaluationsException if
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,253, the algorithm fails to converge.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,254, @throws org.apache.commons.math.exception.DimensionMismatchException if
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,255, the start point dimension is wrong.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,257,rotected abstract void iterateSimplex(final Comparator<RealPointValuePair> comparator)
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,258,hrows FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,261, Build an initial simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,263, @param startPoint Start point for optimization.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,264, @throws DimensionMismatchException if the start point does not match
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,265, simplex dimension.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,267,rivate void buildSimplex(final double[] startPoint) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,269,inal int n = startPoint.length;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,270,f (n != startConfiguration.length) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,271,"hrow new DimensionMismatchException(n, startConfiguration.length);"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,274,/ set first vertex
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,275,implex = new RealPointValuePair[n + 1];
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,276,"implex[0] = new RealPointValuePair(startPoint, Double.NaN);"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,278,/ set remaining vertices
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,279,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,280,inal double[] confI = startConfiguration[i];
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,281,inal double[] vertexI = new double[n];
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,282,or (int k = 0; k < n; ++k) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,283,ertexI[k] = startPoint[k] + confI[k];
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,285,"implex[i + 1] = new RealPointValuePair(vertexI, Double.NaN);"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,290, Evaluate all the non-evaluated points of the simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,292, @param comparator Comparator to use to sort simplex vertices from best to worst.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,293, @throws FunctionEvaluationException if no value can be computed for the parameters.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,294, @throws org.apache.commons.math.exception.TooManyEvaluationsException
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,295, if the maximal number of evaluations is exceeded.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,297,rotected void evaluateSimplex(final Comparator<RealPointValuePair> comparator)
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,298,hrows FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,300,/ Evaluate the objective function at all non-evaluated simplex points.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,301,or (int i = 0; i < simplex.length; ++i) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,302,inal RealPointValuePair vertex = simplex[i];
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,303,inal double[] point = vertex.getPointRef();
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,304,f (Double.isNaN(vertex.getValue())) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,305,"implex[i] = new RealPointValuePair(point, computeObjectiveValue(point), false);"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,309,/ Sort the simplex from best to worst.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,310,"rrays.sort(simplex, comparator);"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,314, Replace the worst point of the simplex by a new point.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,316, @param pointValuePair Point to insert.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,317, @param comparator Comparator to use to sort simplex vertices from best to worst.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,319,"rotected void replaceWorstPoint(RealPointValuePair pointValuePair,"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,320,inal Comparator<RealPointValuePair> comparator) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,321,nt n = simplex.length - 1;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,322,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,323,"f (comparator.compare(simplex[i], pointValuePair) > 0) {"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,324,ealPointValuePair tmp = simplex[i];
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,325,implex[i] = pointValuePair;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,326,ointValuePair = tmp;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,329,implex[n] = pointValuePair;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,18,ackage org.apache.commons.math.optimization.direct;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,20,mport java.util.Comparator;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,22,mport org.apache.commons.math.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,23,mport org.apache.commons.math.optimization.ConvergenceChecker;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,24,mport org.apache.commons.math.optimization.RealPointValuePair;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,25,mport org.apache.commons.math.optimization.MultivariateRealOptimizer;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,28, This class implements the multi-directional direct search method.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,30, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,31, @see NelderMead
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,32, @deprecated in 2.2 (to be removed in 3.0). Please use {@link MultiDirectionalSimplex} instead.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,33, @since 1.2
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,35,ublic class MultiDirectional extends DirectSearchOptimizer
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,36,mplements MultivariateRealOptimizer {
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,37,** Expansion coefficient. */
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,38,rivate final double khi;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,39,** Contraction coefficient. */
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,40,rivate final double gamma;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,43, Build a multi-directional optimizer with default coefficients.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,44, The default values are 2.0 for khi and 0.5 for gamma.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,46,ublic MultiDirectional() {
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,47,his.khi   = 2.0;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,48,his.gamma = 0.5;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,52, Build a multi-directional optimizer with specified coefficients.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,54, @param khi Expansion coefficient.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,55, @param gamma Contraction coefficient.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,57,"ublic MultiDirectional(final double khi, final double gamma) {"
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,58,his.khi   = khi;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,59,his.gamma = gamma;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,62,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,63,Override
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,64,rotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,65,hrows FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,67,inal ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,68,nt iteration = 0;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,69,hile (true) {
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,70,+iteration;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,72,/ Save the original vertex.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,73,inal RealPointValuePair[] original = simplex;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,74,inal RealPointValuePair best = original[0];
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,76,/ Perform a reflection step.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,77,"inal RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);"
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,78,"f (comparator.compare(reflected, best) < 0) {"
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,80,/ Compute the expanded simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,81,inal RealPointValuePair[] reflectedSimplex = simplex;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,82,"inal RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);"
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,83,"f (comparator.compare(reflected, expanded) <= 0) {"
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,84,/ Accept the reflected simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,85,implex = reflectedSimplex;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,88,eturn;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,91,/ Compute the contracted simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,92,"inal RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);"
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,93,"f (comparator.compare(contracted, best) < 0) {"
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,94,/ Accept the contracted simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,95,eturn;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,98,/ Check convergence.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,99,oolean converged = true;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,100,or (int i = 0; i < simplex.length; ++i) {
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,101,"onverged &= checker.converged(iteration, original[i], simplex[i]);"
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,103,f (converged) {
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,104,eturn;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,110, Compute and evaluate a new simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,112, @param original Original simplex (to be preserved).
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,113, @param coeff Linear coefficient.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,114, @param comparator Comparator to use to sort simplex vertices from best
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,115, to poorest.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,116, @return the best point in the transformed simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,117, @throws FunctionEvaluationException if the function cannot be
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,118, evaluated at some point.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,119, @throws org.apache.commons.math.exception.TooManyEvaluationsException
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,120, if the maximal number of evaluations is exceeded.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,122,"rivate RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,"
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,123,"inal double coeff,"
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,124,inal Comparator<RealPointValuePair> comparator)
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,125,hrows FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,127,inal double[] xSmallest = original[0].getPointRef();
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,128,inal int n = xSmallest.length;
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,130,/ Create the linearly transformed simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,131,implex = new RealPointValuePair[n + 1];
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,132,implex[0] = original[0];
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,133,or (int i = 1; i <= n; ++i) {
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,134,inal double[] xOriginal    = original[i].getPointRef();
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,135,inal double[] xTransformed = new double[n];
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,136,or (int j = 0; j < n; ++j) {
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,137,Transformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,139,"implex[i] = new RealPointValuePair(xTransformed, Double.NaN, false);"
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,142,/ Evaluate the simplex.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,143,valuateSimplex(comparator);
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,144,eturn simplex[0];
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,22,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,22,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,18,ackage org.apache.commons.math.optimization.direct;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,20,mport java.util.Comparator;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,22,mport org.apache.commons.math.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,23,mport org.apache.commons.math.optimization.RealPointValuePair;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,24,mport org.apache.commons.math.optimization.MultivariateRealOptimizer;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,27, This class implements the Nelder-Mead direct search method.
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,29, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,30, @see MultiDirectional
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,31, @since 1.2
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,32, @deprecated in 2.2 (to be removed in 3.0). Please use {@link NelderMeadSimplex} instead.
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,34,ublic class NelderMead extends DirectSearchOptimizer
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,35,mplements MultivariateRealOptimizer {
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,36,** Reflection coefficient. */
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,37,rivate final double rho;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,38,** Expansion coefficient. */
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,39,rivate final double khi;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,40,** Contraction coefficient. */
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,41,rivate final double gamma;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,42,** Shrinkage coefficient. */
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,43,rivate final double sigma;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,46, Build a Nelder-Mead optimizer with default coefficients.
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,47," The default coefficients are 1.0 for rho, 2.0 for khi and 0.5"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,48, for both gamma and sigma.
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,50,ublic NelderMead() {
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,51,his.rho   = 1.0;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,52,his.khi   = 2.0;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,53,his.gamma = 0.5;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,54,his.sigma = 0.5;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,58, Build a Nelder-Mead optimizer with specified coefficients.
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,60, @param rho Reflection coefficient.
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,61, @param khi Expansion coefficient.
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,62, @param gamma Contraction coefficient.
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,63, @param sigma Shrinkage coefficient.
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,65,"ublic NelderMead(final double rho, final double khi,"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,66,"inal double gamma, final double sigma) {"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,67,his.rho   = rho;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,68,his.khi   = khi;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,69,his.gamma = gamma;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,70,his.sigma = sigma;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,73,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,74,Override
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,75,rotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,76,hrows FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,78,/ the simplex has n+1 point if dimension is n
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,79,inal int n = simplex.length - 1;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,81,/ interesting values
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,82,inal RealPointValuePair best       = simplex[0];
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,83,inal RealPointValuePair secondBest = simplex[n-1];
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,84,inal RealPointValuePair worst      = simplex[n];
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,85,inal double[] xWorst = worst.getPointRef();
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,87,/ compute the centroid of the best vertices
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,88,/ (dismissing the worst point at index n)
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,89,inal double[] centroid = new double[n];
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,90,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,91,inal double[] x = simplex[i].getPointRef();
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,92,or (int j = 0; j < n; ++j) {
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,93,entroid[j] += x[j];
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,96,inal double scaling = 1.0 / n;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,97,or (int j = 0; j < n; ++j) {
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,98,entroid[j] *= scaling;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,101,/ compute the reflection point
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,102,inal double[] xR = new double[n];
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,103,or (int j = 0; j < n; ++j) {
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,104,R[j] = centroid[j] + rho * (centroid[j] - xWorst[j]);
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,106,inal RealPointValuePair reflected
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,107," new RealPointValuePair(xR, computeObjectiveValue(xR), false);"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,109,"f ((comparator.compare(best, reflected) <= 0) &&"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,110,"comparator.compare(reflected, secondBest) < 0)) {"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,112,/ accept the reflected point
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,113,"eplaceWorstPoint(reflected, comparator);"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,115," else if (comparator.compare(reflected, best) < 0) {"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,117,/ compute the expansion point
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,118,inal double[] xE = new double[n];
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,119,or (int j = 0; j < n; ++j) {
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,120,E[j] = centroid[j] + khi * (xR[j] - centroid[j]);
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,122,inal RealPointValuePair expanded
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,123," new RealPointValuePair(xE, computeObjectiveValue(xE), false);"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,125,"f (comparator.compare(expanded, reflected) < 0) {"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,126,/ accept the expansion point
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,127,"eplaceWorstPoint(expanded, comparator);"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,128, else {
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,129,/ accept the reflected point
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,130,"eplaceWorstPoint(reflected, comparator);"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,133, else {
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,135,"f (comparator.compare(reflected, worst) < 0) {"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,137,/ perform an outside contraction
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,138,inal double[] xC = new double[n];
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,139,or (int j = 0; j < n; ++j) {
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,140,C[j] = centroid[j] + gamma * (xR[j] - centroid[j]);
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,142,inal RealPointValuePair outContracted
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,143," new RealPointValuePair(xC, computeObjectiveValue(xC), false);"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,145,"f (comparator.compare(outContracted, reflected) <= 0) {"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,146,/ accept the contraction point
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,147,"eplaceWorstPoint(outContracted, comparator);"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,148,eturn;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,151, else {
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,153,/ perform an inside contraction
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,154,inal double[] xC = new double[n];
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,155,or (int j = 0; j < n; ++j) {
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,156,C[j] = centroid[j] - gamma * (centroid[j] - xWorst[j]);
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,158,inal RealPointValuePair inContracted
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,159," new RealPointValuePair(xC, computeObjectiveValue(xC), false);"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,161,"f (comparator.compare(inContracted, worst) < 0) {"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,162,/ accept the contraction point
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,163,"eplaceWorstPoint(inContracted, comparator);"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,164,eturn;
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,169,/ perform a shrink
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,170,inal double[] xSmallest = simplex[0].getPointRef();
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,171,or (int i = 1; i < simplex.length; ++i) {
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,172,inal double[] x = simplex[i].getPoint();
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,173,or (int j = 0; j < n; ++j) {
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,174,[j] = xSmallest[j] + sigma * (x[j] - xSmallest[j]);
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,176,"implex[i] = new RealPointValuePair(x, Double.NaN, false);"
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,178,valuateSimplex(comparator);
False,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,22,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,22,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,22,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,22,import org.apache.commons.math.exception.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,29,import org.apache.commons.math.optimization.MultivariateRealOptimizer;
False,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,79,xtends BaseAbstractScalarOptimizer<MultivariateRealFunction> {
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,80,extends BaseAbstractScalarOptimizer<MultivariateRealFunction>
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,81,implements MultivariateRealOptimizer {
False,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,23,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,23,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,22,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,22,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java,22,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java,22,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,22,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,22,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,21,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,21,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/main/java/org/apache/commons/math/optimization/general/Preconditioner.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/main/java/org/apache/commons/math/optimization/general/Preconditioner.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,23,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,23,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,23,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,23,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,22,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,22,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,23,import java.util.List;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,24,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,25,import java.util.Comparator;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,26,import java.util.Map;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,27,import java.util.AbstractMap;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,28,import java.util.Collections;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,34,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,35,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,36,import org.apache.commons.math.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,37,import org.apache.commons.math.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,38,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,39,import org.apache.commons.math.exception.NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,97, @throws ArithmeticException if the result can not be represented as an
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,98,         int
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,109,* @throws MathArithmeticException if the result can not be represented
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,110,* as an {@code int}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,104,"hrow MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,116,"throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,126, @param a an addend
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,127, @param b an addend
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,128, @param pattern the pattern to use for any thrown exception.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,129, @return the sum <code>a+b</code>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,130, @throws ArithmeticException if the result can not be represented as an
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,131,         long
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,138,* @param a Addend.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,139,* @param b Addend.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,140,* @param pattern Pattern to use for any thrown exception.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,141,* @return the sum {@code a + b}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,142,* @throws MathArithmeticException if the result cannot be represented
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,143,* as a {@code long}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,148,"hrow MathRuntimeException.createArithmeticException(pattern, a, b);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,160,"throw new MathArithmeticException(pattern, a, b);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,162,"hrow MathRuntimeException.createArithmeticException(pattern, a, b);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,174,"throw new MathArithmeticException(pattern, a, b);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,360, @param n the size of the set
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,361, @param k the size of the subsets to be counted
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,362, @exception IllegalArgumentException if preconditions are not met.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,373,* @param n Size of the set.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,374,* @param k Size of the subsets to be counted.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,375,* @throws NotPositiveException if {@code n < 0}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,376,* @throws NumberIsTooLargeException if {@code k > n}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,364,"rivate static void checkBinomial(final int n, final int k)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,365,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,378,"private static void checkBinomial(final int n, final int k) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,367,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,368,"ocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,369,", k);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,380,"throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,381,"k, n, true);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,372,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,373,"ocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,374,);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,384,"throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,580, @throws ArithmeticException if the result is too large to be represented
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,581,         by a long integer.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,582, @throws IllegalArgumentException if n < 0
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,590,* @throws MathArithmeticException if the result is too large to be represented
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,591,* by a {@code long}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,592,* @throws NotPositiveException if {@code n < 0}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,593,* @throws MathArithmeticException if {@code n > 20}: The factorial value is too
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,594,* large to fit in a {@code long}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,586,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,587,"ocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,588,);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,598,"throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,599,n);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,591,hrow new ArithmeticException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,592,"factorial value is too large to fit in a long"");"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,602,throw new MathArithmeticException();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,598, Returns n!. Shorthand for <code>n</code> <a
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,599," href=""http://mathworld.wolfram.com/Factorial.html""> Factorial</a>, the"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,600," product of the numbers <code>1,...,n</code> as a <code>double</code>."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,601, <p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,602, <Strong>Preconditions</strong>:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,603, <ul>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,604, <li> <code>n >= 0</code> (otherwise
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,605, <code>IllegalArgumentException</code> is thrown)</li>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,606, <li> The result is small enough to fit into a <code>double</code>. The
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,607, largest value of <code>n</code> for which <code>n!</code> <
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,608, Double.MAX_VALUE</code> is 170. If the computed value exceeds
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,609," Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li>"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,610, </ul>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,611, </p>
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,608,"* Compute n!, the<a href=""http://mathworld.wolfram.com/Factorial.html"">"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,609,"* factorial</a> of {@code n} (the product of the numbers 1 to n), as a"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,610,* {@code double}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,611,* The result should be small enough to fit into a {@code double}: The
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,612,* largest {@code n} for which {@code n! < Double.MAX_VALUE} is 170.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,613,"* If the computed value exceeds {@code Double.MAX_VALUE},"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,614,* {@code Double.POSITIVE_INFINITY} is returned.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,613, @param n argument
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,614, @return <code>n!</code>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,615, @throws IllegalArgumentException if n < 0
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,616,* @param n Argument.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,617,* @return {@code n!}
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,618,* @throws NotPositiveException if {@code n < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,619,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,620,"ocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,621,);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,622,"throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,623,n);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,630, Returns the natural logarithm of n!.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,631, <p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,632, <Strong>Preconditions</strong>:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,633, <ul>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,634, <li> <code>n >= 0</code> (otherwise
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,635, <code>IllegalArgumentException</code> is thrown)</li>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,636, </ul></p>
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,632,* Compute the natural logarithm of the factorial of {@code n}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,638, @param n argument
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,639, @return <code>n!</code>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,640, @throws IllegalArgumentException if preconditions are not met.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,634,* @param n Argument.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,635,* @return {@code n!}
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,636,* @throws NotPositiveException if {@code n < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,644,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,645,"ocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,646,);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,640,"throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,641,n);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,680, @param p any number
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,681, @param q any number
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,682," @return the greatest common divisor, never negative"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,683, @throws ArithmeticException if the result cannot be represented as a
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,684, nonnegative int value
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,675,* @param p Number.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,676,* @param q Number.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,677,"* @return the greatest common divisor, never negative."
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,678,* @throws MathArithmeticException if the result cannot be represented as
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,679,* a non-negative {@code int} value.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,692,hrow MathRuntimeException.createArithmeticException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,693,"ocalizedFormats.GCD_OVERFLOW_32_BITS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,694,", q);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,687,"throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,688,"p, q);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,718,hrow MathRuntimeException.createArithmeticException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,719,"ocalizedFormats.GCD_OVERFLOW_32_BITS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,720,", q);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,712,"throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,713,"p, q);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,769, @param p any number
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,770, @param q any number
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,771," @return the greatest common divisor, never negative"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,772, @throws ArithmeticException if the result cannot be represented as a nonnegative long
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,773, value
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,762,* @param p Number.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,763,* @param q Number.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,764,"* @return the greatest common divisor, never negative."
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,765,* @throws MathArithmeticException if the result cannot be represented as
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,766,* a non-negative {@code long} value.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,781,hrow MathRuntimeException.createArithmeticException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,782,"ocalizedFormats.GCD_OVERFLOW_64_BITS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,783,", q);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,774,"throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,775,"p, q);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,807,hrow MathRuntimeException.createArithmeticException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,808,"ocalizedFormats.GCD_OVERFLOW_64_BITS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,809,", q);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,799,"throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,800,"p, q);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,943, @param a any number
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,944, @param b any number
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,945," @return the least common multiple, never negative"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,946, @throws ArithmeticException
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,947,             if the result cannot be represented as a nonnegative int
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,948,             value
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,934,* @param a Number.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,935,* @param b Number.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,936,"* @return the least common multiple, never negative."
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,937,* @throws MathArithmeticException if the result cannot be represented as
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,938,* a non-negative {@code int} value.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,952,f (a==0 || b==0){
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,942,if (a == 0 || b == 0){
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,957,hrow MathRuntimeException.createArithmeticException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,958,"ocalizedFormats.LCM_OVERFLOW_32_BITS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,959,", b);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,947,"throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,948,"a, b);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,979, @param a any number
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,980, @param b any number
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,981," @return the least common multiple, never negative"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,982, @throws ArithmeticException if the result cannot be represented as a nonnegative long
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,983, value
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,968,* @param a Number.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,969,* @param b Number.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,970,"* @return the least common multiple, never negative."
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,971,* @throws MathArithmeticException if the result cannot be represented
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,972,* as a non-negative {@code long} value.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,987,f (a==0 || b==0){
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,976,if (a == 0 || b == 0){
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,992,hrow MathRuntimeException.createArithmeticException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,993,"ocalizedFormats.LCM_OVERFLOW_64_BITS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,994,", b);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,981,"throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,982,"a, b);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1022, @param x a factor
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1023, @param y a factor
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1024, @return the product <code>x*y</code>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1025, @throws ArithmeticException if the result can not be represented as an
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1026,         int
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1010,* @param x Factor.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1011,* @param y Factor.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1012,* @return the product {@code x * y}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1013,* @throws MathArithmeticException if the result can not be
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1014,* represented as an {@code int}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1032,"hrow new ArithmeticException(""overflow: mul"");"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1020,throw new MathArithmeticException();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1040, @param a first value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1041, @param b second value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1042, @return the product <code>a * b</code>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1043, @throws ArithmeticException if the result can not be represented as an
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1044,         long
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1028,* @param a Factor.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1029,* @param b Factor.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1030,* @return the product {@code a * b}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1031,* @throws MathArithmeticException if the result can not be represented
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1032,* as a {@code long}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1049,"tring msg = ""overflow: multiply"";"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1060,hrow new ArithmeticException(msg);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1047,throw new MathArithmeticException();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1067,hrow new ArithmeticException(msg);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1054,throw new MathArithmeticException();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1082,hrow new ArithmeticException(msg);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1069,throw new MathArithmeticException();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1163,"ublic static double[] normalizeArray(double[] values, double normalizedSum)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1164,"hrows ArithmeticException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1150,"public static double[] normalizeArray(double[] values, double normalizedSum) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1274, @param unscaled the value to round.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1275," @param sign the sign of the original, scaled value."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1276, @param roundingMethod the rounding method as defined in
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1277,        {@link BigDecimal}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1260,* @param unscaled Value to round.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1261,"* @param sign Sign of the original, scaled value."
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1262,"* @param roundingMethod Rounding method, as defined in {@link BigDecimal}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1281,"rivate static double roundUnscaled(double unscaled, double sign,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1282,nt roundingMethod) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1266,"private static double roundUnscaled(double unscaled,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1267,"double sign,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1268,int roundingMethod) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1340,"hrow new ArithmeticException(""Inexact result from rounding"");"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1326,throw new MathArithmeticException();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1347,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1348,"ocalizedFormats.INVALID_ROUNDING_METHOD,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1349,"oundingMethod,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1350,"ROUND_CEILING"",     BigDecimal.ROUND_CEILING,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1351,"ROUND_DOWN"",        BigDecimal.ROUND_DOWN,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1352,"ROUND_FLOOR"",       BigDecimal.ROUND_FLOOR,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1353,"ROUND_HALF_DOWN"",   BigDecimal.ROUND_HALF_DOWN,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1354,"ROUND_HALF_EVEN"",   BigDecimal.ROUND_HALF_EVEN,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1355,"ROUND_HALF_UP"",     BigDecimal.ROUND_HALF_UP,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1356,"ROUND_UNNECESSARY"", BigDecimal.ROUND_UNNECESSARY,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1357,"ROUND_UP"",          BigDecimal.ROUND_UP);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1333,"throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1334,"roundingMethod,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1335,"""ROUND_CEILING"", BigDecimal.ROUND_CEILING,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1336,"""ROUND_DOWN"", BigDecimal.ROUND_DOWN,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1337,"""ROUND_FLOOR"", BigDecimal.ROUND_FLOOR,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1338,"""ROUND_HALF_DOWN"", BigDecimal.ROUND_HALF_DOWN,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1339,"""ROUND_HALF_EVEN"", BigDecimal.ROUND_HALF_EVEN,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1340,"""ROUND_HALF_UP"", BigDecimal.ROUND_HALF_UP,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1341,"""ROUND_UNNECESSARY"", BigDecimal.ROUND_UNNECESSARY,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1342,"""ROUND_UP"", BigDecimal.ROUND_UP);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1442," Returns the <a href=""http://mathworld.wolfram.com/Sign.html""> sign</a>"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1443, for short value <code>x</code>.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1444, <p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1445," For a short value x, this method returns (short)(+1) if x > 0, (short)(0)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1446," if x = 0, and (short)(-1) if x < 0.</p>"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1427,"* Compute the <a href=""http://mathworld.wolfram.com/Sign.html"">sign</a>"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1428,* of the argument.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1449," @return (short)(+1), (short)(0), or (short)(-1), depending on the sign of"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1450,         x
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1431,"* @return 1 if {@code x > 0}, 0 if {@code x == 0}, and -1 if {@code x < 0}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1457," Returns the <a href=""http://mathworld.wolfram.com/HyperbolicSine.html"">"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1458, hyperbolic sine</a> of x.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1438,"* Compute the <a href=""http://mathworld.wolfram.com/HyperbolicSine.html"">"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1439,* hyperbolic sine</a> of the argument.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1460, @param x double value for which to find the hyperbolic sine
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1461, @return hyperbolic sine of x
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1441,* @param x Value for which to find the hyperbolic sine.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1442,* @return hyperbolic sine of {@code x}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1470, @param x the minuend
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1471, @param y the subtrahend
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1472, @return the difference <code>x-y</code>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1473, @throws ArithmeticException if the result can not be represented as an
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1474,         int
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1451,* @param x Minuend.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1452,* @param y Subtrahend.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1453,* @return the difference {@code x - y}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1454,* @throws MathArithmeticException if the result can not be represented
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1455,* as an {@code int}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1480,"hrow MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1461,"throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1488, @param a first value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1489, @param b second value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1490, @return the difference <code>a-b</code>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1491, @throws ArithmeticException if the result can not be represented as an
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1492,         long
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1469,* @param a Value.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1470,* @param b Value.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1471,* @return the difference {@code a - b}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1472,* @throws MathArithmeticException if the result can not be represented as a
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1473,* {@code long}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1513, @param k number to raise
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1514, @param e exponent (must be positive or null)
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1495,* @param k Number to raise.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1496,* @param e Exponent (must be positive or zero).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1516, @exception IllegalArgumentException if e is negative
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1498,* @throws NotPositiveException if {@code e < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1518,"ublic static int pow(final int k, int e)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1519,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1500,"public static int pow(final int k, int e) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1522,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1523,"ocalizedFormats.POWER_NEGATIVE_PARAMETERS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1524,", e);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1502,"throw new NotPositiveException(LocalizedFormats.EXPONENT, e);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1543, @param k number to raise
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1544, @param e exponent (must be positive or null)
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1521,* @param k Number to raise.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1522,* @param e Exponent (must be positive or zero).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1546, @exception IllegalArgumentException if e is negative
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1524,* @throws NotPositiveException if {@code e < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1548,"ublic static int pow(final int k, long e)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1549,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1526,"public static int pow(final int k, long e) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1552,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1553,"ocalizedFormats.POWER_NEGATIVE_PARAMETERS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1554,", e);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1528,"throw new NotPositiveException(LocalizedFormats.EXPONENT, e);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1573, @param k number to raise
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1574, @param e exponent (must be positive or null)
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1547,* @param k Number to raise.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1548,* @param e Exponent (must be positive or zero).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1576, @exception IllegalArgumentException if e is negative
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1550,* @throws NotPositiveException if {@code e < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1578,"ublic static long pow(final long k, int e)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1579,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1552,"public static long pow(final long k, int e) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1582,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1583,"ocalizedFormats.POWER_NEGATIVE_PARAMETERS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1584,", e);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1554,"throw new NotPositiveException(LocalizedFormats.EXPONENT, e);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1603, @param k number to raise
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1604, @param e exponent (must be positive or null)
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1573,* @param k Number to raise.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1574,* @param e Exponent (must be positive or zero).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1606, @exception IllegalArgumentException if e is negative
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1576,* @throws NotPositiveException if {@code e < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1608,"ublic static long pow(final long k, long e)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1609,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1578,"public static long pow(final long k, long e) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1612,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1613,"ocalizedFormats.POWER_NEGATIVE_PARAMETERS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1614,", e);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1580,"throw new NotPositiveException(LocalizedFormats.EXPONENT, e);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1633, @param k number to raise
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1634, @param e exponent (must be positive or null)
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1599,* @param k Number to raise.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1600,* @param e Exponent (must be positive or zero).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1636, @exception IllegalArgumentException if e is negative
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1602,* @throws NotPositiveException if {@code e < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1638,"ublic static BigInteger pow(final BigInteger k, int e)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1639,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1604,"public static BigInteger pow(final BigInteger k, int e) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1642,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1643,"ocalizedFormats.POWER_NEGATIVE_PARAMETERS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1644,", e);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1606,"throw new NotPositiveException(LocalizedFormats.EXPONENT, e);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1653, @param k number to raise
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1654, @param e exponent (must be positive or null)
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1615,* @param k Number to raise.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1616,* @param e Exponent (must be positive or zero).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1656, @exception IllegalArgumentException if e is negative
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1618,* @throws NotPositiveException if {@code e < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1658,"ublic static BigInteger pow(final BigInteger k, long e)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1659,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1620,"public static BigInteger pow(final BigInteger k, long e) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1662,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1663,"ocalizedFormats.POWER_NEGATIVE_PARAMETERS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1664,", e);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1622,"throw new NotPositiveException(LocalizedFormats.EXPONENT, e);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1683, @param k number to raise
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1684, @param e exponent (must be positive or null)
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1642,* @param k Number to raise.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1643,* @param e Exponent (must be positive or zero).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1686, @exception IllegalArgumentException if e is negative
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1645,* @throws NotPositiveException if {@code e < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1688,"ublic static BigInteger pow(final BigInteger k, BigInteger e)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1689,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1647,"public static BigInteger pow(final BigInteger k, BigInteger e) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1692,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1693,"ocalizedFormats.POWER_NEGATIVE_PARAMETERS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1694,", e);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1649,"throw new NotPositiveException(LocalizedFormats.EXPONENT, e);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1819, @throws NonMonotonousSequenceException if the array is not sorted.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1773,* @param abort Whether to throw an exception if the check fails.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1774,* @return {@code true} if the array is sorted.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1775,* @throws NonMonotonousSequenceException if the array is not sorted
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1776,* and {@code abort} is {@code true}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1821,"ublic static void checkOrder(double[] val, OrderDirection dir, boolean strict) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1778,"public static boolean checkOrder(double[] val, OrderDirection dir,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1779,"boolean strict, boolean abort) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1855,f (!ok) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1813,if (!ok &&
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1814,abort) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1820,return ok;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1824,* Checks that the given array is sorted.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1826,* @param val Values.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1827,* @param dir Ordering direction.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1828,* @param strict Whether the order should be strict.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1829,* @return {@code true} if the array is sorted.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1830,* @throws NonMonotonousSequenceException if the array is not sorted
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1831,* and {@code abort} is {@code true}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1833,"public static boolean checkOrder(double[] val, OrderDirection dir,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1834,boolean strict) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1835,"return checkOrder(val, dir, strict, true);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1842,* @return {@code true} if the array is sorted.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1868,ublic static void checkOrder(double[] val) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1869,"heckOrder(val, OrderDirection.INCREASING, true);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1845,public static boolean checkOrder(double[] val) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1846,"return checkOrder(val, OrderDirection.INCREASING, true);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1932,ouble rdwarf = 3.834e-20;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1933,ouble rgiant = 1.304e+19;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1934,ouble s1=0.0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1935,ouble s2=0.0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1936,ouble s3=0.0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1937,ouble x1max = 0.0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1938,ouble x3max = 0.0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1939,ouble floatn = (double)v.length;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1940,ouble agiant = rgiant/floatn;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1941,or (int i=0;i<v.length;i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1942,ouble xabs = Math.abs(v[i]);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1943,f (xabs<rdwarf || xabs>agiant) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1944,f (xabs>rdwarf) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1945,f (xabs>x1max) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1946,ouble r=x1max/xabs;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1947,1=1.0+s1*r*r;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1948,1max=xabs;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1949, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1950,ouble r=xabs/x1max;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1951,1+=r*r;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1953, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1954,f (xabs>x3max) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1955,ouble r=x3max/xabs;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1956,3=1.0+s3*r*r;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1957,3max=xabs;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1909,double rdwarf = 3.834e-20;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1910,double rgiant = 1.304e+19;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1911,double s1 = 0;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1912,double s2 = 0;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1913,double s3 = 0;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1914,double x1max = 0;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1915,double x3max = 0;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1916,double floatn = (double) v.length;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1917,double agiant = rgiant / floatn;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1918,for (int i = 0; i < v.length; i++) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1919,double xabs = Math.abs(v[i]);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1920,if (xabs < rdwarf || xabs > agiant) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1921,if (xabs > rdwarf) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1922,if (xabs > x1max) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1923,double r = x1max / xabs;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1924,s1= 1 + s1 * r * r;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1925,x1max = xabs;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1926,} else {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1927,double r = xabs / x1max;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1928,s1 += r * r;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1959,f (xabs!=0.0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1960,ouble r=xabs/x3max;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1961,3+=r*r;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1931,if (xabs > x3max) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1932,double r = x3max / xabs;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1933,s3= 1 + s3 * r * r;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1934,x3max = xabs;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1935,} else {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1936,if (xabs != 0) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1937,double r = xabs / x3max;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1938,s3 += r * r;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1942,} else {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1943,s2 += xabs * xabs;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1965, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1966,2+=xabs*xabs;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1969,ouble norm;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1970,f (s1!=0.0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1971,orm = x1max*Math.sqrt(s1+(s2/x1max)/x1max);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1972, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1973,f (s2==0.0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1974,orm = x3max*Math.sqrt(s3);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1946,double norm;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1947,if (s1 != 0) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1948,norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1976,f (s2>=x3max) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1977,orm = Math.sqrt(s2*(1.0+(x3max/s2)*(x3max*s3)));
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1950,if (s2 == 0) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1951,norm = x3max * Math.sqrt(s3);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1979,orm = Math.sqrt(x3max*((s2/x3max)+(x3max*s3)));
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1953,if (s2 >= x3max) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1954,norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1955,} else {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1956,norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1960,return norm;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1983,eturn norm;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1964,"* Sort an array in increasing order, performing the same reordering of"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1965,* entries on other arrays.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1967,* @param x Array to be sorted.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1968,* @param yList Set of arrays whose permutations of entries must follow
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1969,* those performed on {@code x}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1970,* @throws DimensionMismatchException if any {@code y} has not the same
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1971,* size as {@code x}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1973,"public static void sortInPlace(double[] x,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1974,double[] ... yList) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1975,"sortInPlace(x, OrderDirection.INCREASING, yList);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1979,"* Sort an array, performing the same reordering of entries on other arrays."
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1981,* @param x Array to be sorted.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1982,* @param dir Order direction.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1983,* @param yList Set of arrays whose permutations of entries must follow
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1984,* those performed on {@code x}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1985,* @throws DimensionMismatchException if any {@code y} has not the same
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1986,* size as {@code x}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1988,"public static void sortInPlace(double[] x,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1989,"final OrderDirection dir,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1990,double[] ... yList) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1991,if (x == null ||
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1992,yList == null) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1993,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1996,final int len = x.length;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1997,"final List<Map.Entry<Double, double[]>> list"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1998,"= new ArrayList<Map.Entry<Double, double[]>>(len);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2000,final int yListLen = yList.length;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2001,for (int i = 0; i < len; i++) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2002,final double[] yValues = new double[yListLen];
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2003,for (int j = 0; j < yListLen; j++) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2004,double[] y = yList[j];
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2005,if (y.length != len) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2006,"throw new DimensionMismatchException(y.length, len);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2008,yValues[j] = y[i];
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2010,"list.add(new AbstractMap.SimpleEntry<Double, double[]>(x[i], yValues));"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2013,"final Comparator<Map.Entry<Double, double[]>> comp"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2014,"= new Comparator<Map.Entry<Double, double[]>>() {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2015,"public int compare(Map.Entry<Double, double[]> o1,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2016,"Map.Entry<Double, double[]> o2) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2017,int val;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2018,switch (dir) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2019,case INCREASING:
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2020,val = o1.getKey().compareTo(o2.getKey());
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2021,break;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2022,case DECREASING:
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2023,val = o2.getKey().compareTo(o1.getKey());
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2024,break;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2025,default:
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2026,// Should never happen.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2027,throw new IllegalArgumentException();
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2029,return val;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2033,"Collections.sort(list, comp);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2035,for (int i = 0; i < len; i++) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2036,"final Map.Entry<Double, double[]> e = list.get(i);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2037,x[i] = e.getKey();
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2038,final double[] yValues = e.getValue();
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2039,for (int j = 0; j < yListLen; j++) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2040,yList[j][i] = yValues[j];
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/analysis/Expm1Function.java,src/test/java/org/apache/commons/math/analysis/Expm1Function.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/analysis/Expm1Function.java,src/test/java/org/apache/commons/math/analysis/Expm1Function.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/java/org/apache/commons/math/analysis/MonitoredFunction.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/java/org/apache/commons/math/analysis/MonitoredFunction.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/analysis/QuinticFunction.java,src/test/java/org/apache/commons/math/analysis/QuinticFunction.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/analysis/QuinticFunction.java,src/test/java/org/apache/commons/math/analysis/QuinticFunction.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/analysis/SinFunction.java,src/test/java/org/apache/commons/math/analysis/SinFunction.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/analysis/SinFunction.java,src/test/java/org/apache/commons/math/analysis/SinFunction.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,22,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,22,import org.apache.commons.math.exception.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,20,import org.apache.commons.math.exception.NonMonotonousSequenceException;
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,121,"ail(""Expecting MathException - bad abscissas array"");"
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,122, catch (MathException ex) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,122,"fail(""Expecting NonMonotonousSequenceException - bad abscissas array"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,123,} catch (NonMonotonousSequenceException ex) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,20,import org.apache.commons.math.exception.NonMonotonousSequenceException;
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,121,"ail(""Expecting MathException - bad abscissas array"");"
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,122, catch (MathException ex) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,122,"fail(""Expecting NonMonotonousSequenceException - bad abscissas array"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,123,} catch (NonMonotonousSequenceException ex) {
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,22,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,22,import org.apache.commons.math.exception.OutOfRangeException;
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,119,"ail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,120, catch (FunctionEvaluationException ex) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,119,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,120,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,126,"ail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,127, catch (FunctionEvaluationException ex) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,126,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,127,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,24,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,24,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,24,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,24,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,26,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,26,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,26,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,26,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,23,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,23,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,25,mport org.apache.commons.math.optimization.direct.NelderMead;
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,25,import org.apache.commons.math.optimization.direct.SimplexOptimizer;
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,26,import org.apache.commons.math.optimization.direct.NelderMeadSimplex;
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,34,@Test
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,35,public void testRosenbrock() {
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,36,Rosenbrock rosenbrock = new Rosenbrock();
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,37,SimplexOptimizer underlying = new SimplexOptimizer();
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,38,NelderMeadSimplex simplex = new NelderMeadSimplex(new double[][] {
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,39,"{ -1.2,  1.0 }, { 0.9, 1.2 } , {  3.5, -2.3 }"
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,41,underlying.setSimplex(simplex);
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,42,JDKRandomGenerator g = new JDKRandomGenerator();
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,43,g.setSeed(16069223052l);
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,44,RandomVectorGenerator generator =
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,45,"new UncorrelatedRandomVectorGenerator(2, new GaussianRandomGenerator(g));"
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,46,MultiStartMultivariateRealOptimizer optimizer =
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,47,"new MultiStartMultivariateRealOptimizer(underlying, 10, generator);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,48,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1, 1.0e-3));"
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,49,optimizer.setMaxEvaluations(1100);
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,50,RealPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,51,"optimizer.optimize(rosenbrock, GoalType.MINIMIZE, new double[] { -1.2, 1.0 });"
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,34,Test
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,35,ublic void testRosenbrock()
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,36,hrows FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,53,"assertEquals(rosenbrock.getCount(), optimizer.getEvaluations());"
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,54,assertTrue(optimizer.getEvaluations() > 900);
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,55,assertTrue(optimizer.getEvaluations() < 1200);
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,56,assertTrue(optimum.getValue() < 8.0e-4);
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,38,osenbrock rosenbrock = new Rosenbrock();
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,39,elderMead underlying = new NelderMead();
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,40,nderlying.setStartConfiguration(new double[][] {
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,41," -1.2,  1.0 }, { 0.9, 1.2 } , {  3.5, -2.3 }"
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,43,DKRandomGenerator g = new JDKRandomGenerator();
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,44,.setSeed(16069223052l);
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,45,andomVectorGenerator generator =
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,46,"ew UncorrelatedRandomVectorGenerator(2, new GaussianRandomGenerator(g));"
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,47,ultiStartMultivariateRealOptimizer optimizer =
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,48,"ew MultiStartMultivariateRealOptimizer(underlying, 10, generator);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,49,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1, 1.0e-3));"
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,50,ptimizer.setMaxEvaluations(1100);
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,51,ealPointValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,52,"ptimizer.optimize(rosenbrock, GoalType.MINIMIZE, new double[] { -1.2, 1.0 });"
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,59,private static class Rosenbrock implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,60,private int count;
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,54,"ssertEquals(rosenbrock.getCount(), optimizer.getEvaluations());"
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,55,ssertTrue(optimizer.getEvaluations() > 900);
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,56,ssertTrue(optimizer.getEvaluations() < 1200);
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,57,ssertTrue(optimum.getValue() < 8.0e-4);
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,62,public Rosenbrock() {
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,63,count = 0;
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,61,rivate static class Rosenbrock implements MultivariateRealFunction {
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,63,rivate int count;
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,65,ublic Rosenbrock() {
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,66,ount = 0;
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,69,ublic double value(double[] x) throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,70,+count;
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,71,ouble a = x[1] - x[0] * x[0];
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,72,ouble b = 1.0 - x[0];
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,73,eturn 100 * a * a + b * b;
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,76,ublic int getCount() {
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,77,eturn count;
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,66,public double value(double[] x) {
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,67,++count;
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,68,double a = x[1] - x[0] * x[0];
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,69,double b = 1.0 - x[0];
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,70,return 100 * a * a + b * b;
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,73,public int getCount() {
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,74,return count;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,15, limitations under the License.
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,18,ackage org.apache.commons.math.optimization.direct;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,20,mport org.apache.commons.math.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,21,mport org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,22,mport org.apache.commons.math.optimization.GoalType;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,23,mport org.apache.commons.math.optimization.RealPointValuePair;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,24,mport org.apache.commons.math.optimization.SimpleScalarValueChecker;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,25,mport org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,26,mport org.junit.Assert;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,27,mport org.junit.Test;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,29,ublic class MultiDirectionalTest {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,31,Test
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,32,ublic void testFunctionEvaluationExceptions() {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,33,ultivariateRealFunction wrong =
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,34,ew MultivariateRealFunction() {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,35,rivate static final long serialVersionUID = 4751314470965489371L;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,36,ublic double value(double[] x) throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,37,f (x[0] < 0) {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,38,"hrow new FunctionEvaluationException(x, ""{0}"", ""oops"");"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,39, else if (x[0] > 1) {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,40,"hrow new FunctionEvaluationException(new RuntimeException(""oops""), x);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,41, else {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,42,eturn x[0] * (1 - x[0]);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,46,ry {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,47,"ultiDirectional optimizer = new MultiDirectional(0.9, 1.9);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,48,"ptimizer.optimize(wrong, GoalType.MINIMIZE, new double[] { -1.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,49,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,50, catch (FunctionEvaluationException ce) {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,51,/ expected behavior
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,52,ssert.assertNull(ce.getCause());
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,54,ry {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,55,"ultiDirectional optimizer = new MultiDirectional(0.9, 1.9);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,56,"ptimizer.optimize(wrong, GoalType.MINIMIZE, new double[] { +2.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,57,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,58, catch (FunctionEvaluationException ce) {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,59,/ expected behavior
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,60,ssert.assertNotNull(ce.getCause());
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,64,Test
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,65,ublic void testMinimizeMaximize()
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,66,hrows FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,68,/ the following function has 4 local extrema:
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,69,inal double xM        = -3.841947088256863675365;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,70,inal double yM        = -1.391745200270734924416;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,71,inal double xP        =  0.2286682237349059125691;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,72,inal double yP        = -yM;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,73,inal double valueXmYm =  0.2373295333134216789769; // local  maximum
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,74,inal double valueXmYp = -valueXmYm;                // local  minimum
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,75,inal double valueXpYm = -0.7290400707055187115322; // global minimum
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,76,inal double valueXpYp = -valueXpYm;                // global maximum
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,77,ultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,78,rivate static final long serialVersionUID = -7039124064449091152L;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,79,ublic double value(double[] variables) throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,80,inal double x = variables[0];
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,81,inal double y = variables[1];
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,82,eturn ((x == 0) || (y == 0)) ? 0 : (FastMath.atan(x) * FastMath.atan(x + 2) * FastMath.atan(y) * FastMath.atan(y) / (x * y));
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,86,ultiDirectional optimizer = new MultiDirectional();
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,87,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,88,ptimizer.setMaxEvaluations(200);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,89,"ptimizer.setStartConfiguration(new double[] { 0.2, 0.2 });"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,90,ealPointValuePair optimum;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,92,/ minimization
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,93,"ptimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { -3.0, 0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,94,"ssert.assertEquals(xM,        optimum.getPoint()[0], 4.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,95,"ssert.assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,96,"ssert.assertEquals(valueXmYp, optimum.getValue(),    8.0e-13);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,97,ssert.assertTrue(optimizer.getEvaluations() > 120);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,98,ssert.assertTrue(optimizer.getEvaluations() < 150);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,100,"ptimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { +1, 0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,101,"ssert.assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,102,"ssert.assertEquals(yM,        optimum.getPoint()[1], 3.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,103,"ssert.assertEquals(valueXpYm, optimum.getValue(),    2.0e-12);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,104,ssert.assertTrue(optimizer.getEvaluations() > 120);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,105,ssert.assertTrue(optimizer.getEvaluations() < 150);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,107,/ maximization
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,108,"ptimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { -3.0, 0.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,109,"ssert.assertEquals(xM,        optimum.getPoint()[0], 7.0e-7);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,110,"ssert.assertEquals(yM,        optimum.getPoint()[1], 3.0e-7);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,111,"ssert.assertEquals(valueXmYm, optimum.getValue(),    2.0e-14);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,112,ssert.assertTrue(optimizer.getEvaluations() > 120);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,113,ssert.assertTrue(optimizer.getEvaluations() < 150);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,115,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,116,"ptimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { +1, 0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,117,"ssert.assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,118,"ssert.assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,119,"ssert.assertEquals(valueXpYp, optimum.getValue(),    2.0e-12);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,120,ssert.assertTrue(optimizer.getEvaluations() > 180);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,121,ssert.assertTrue(optimizer.getEvaluations() < 220);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,125,Test
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,126,ublic void testRosenbrock()
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,127,hrows FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,129,ultivariateRealFunction rosenbrock =
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,130,ew MultivariateRealFunction() {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,131,rivate static final long serialVersionUID = -9044950469615237490L;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,132,ublic double value(double[] x) throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,133,+count;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,134,ouble a = x[1] - x[0] * x[0];
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,135,ouble b = 1.0 - x[0];
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,136,eturn 100 * a * a + b * b;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,140,ount = 0;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,141,ultiDirectional optimizer = new MultiDirectional();
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,142,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1, 1.0e-3));"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,143,ptimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,144,ptimizer.setStartConfiguration(new double[][] {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,145," -1.2,  1.0 }, { 0.9, 1.2 } , {  3.5, -2.3 }"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,147,ealPointValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,148,"ptimizer.optimize(rosenbrock, GoalType.MINIMIZE, new double[] { -1.2, 1.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,150,"ssert.assertEquals(count, optimizer.getEvaluations());"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,151,ssert.assertTrue(optimizer.getEvaluations() > 50);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,152,ssert.assertTrue(optimizer.getEvaluations() < 100);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,153,ssert.assertTrue(optimum.getValue() > 1.0e-2);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,157,Test
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,158,ublic void testPowell()
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,159,hrows FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,161,ultivariateRealFunction powell =
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,162,ew MultivariateRealFunction() {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,163,rivate static final long serialVersionUID = -832162886102041840L;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,164,ublic double value(double[] x) throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,165,+count;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,166,ouble a = x[0] + 10 * x[1];
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,167,ouble b = x[2] - x[3];
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,168,ouble c = x[1] - 2 * x[2];
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,169,ouble d = x[0] - x[3];
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,170,eturn a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,174,ount = 0;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,175,ultiDirectional optimizer = new MultiDirectional();
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,176,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-3));"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,177,ptimizer.setMaxEvaluations(1000);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,178,ealPointValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,179,"ptimizer.optimize(powell, GoalType.MINIMIZE, new double[] { 3.0, -1.0, 0.0, 1.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,180,"ssert.assertEquals(count, optimizer.getEvaluations());"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,181,ssert.assertTrue(optimizer.getEvaluations() > 800);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,182,ssert.assertTrue(optimizer.getEvaluations() < 900);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,183,ssert.assertTrue(optimum.getValue() > 1.0e-2);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,187,Test
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,188,ublic void testMath283()
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,189,hrows FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,190,/ fails because MultiDirectional.iterateSimplex is looping forever
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,191,/ the while(true) should be replaced with a convergence check
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,192,ultiDirectional multiDirectional = new MultiDirectional();
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,193,ultiDirectional.setMaxEvaluations(1000);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,195,"inal Gaussian2D function = new Gaussian2D(0.0, 0.0, 1.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,197,"ealPointValuePair estimate = multiDirectional.optimize(function,"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,198,"oalType.MAXIMIZE, function.getMaximumPosition());"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,200,inal double EPSILON = 1e-5;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,202,inal double expectedMaximum = function.getMaximum();
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,203,inal double actualMaximum = estimate.getValue();
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,204,"ssert.assertEquals(expectedMaximum, actualMaximum, EPSILON);"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,206,inal double[] expectedPosition = function.getMaximumPosition();
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,207,inal double[] actualPosition = estimate.getPoint();
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,208,"ssert.assertEquals(expectedPosition[0], actualPosition[0], EPSILON );"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,209,"ssert.assertEquals(expectedPosition[1], actualPosition[1], EPSILON );"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,213,rivate static class Gaussian2D implements MultivariateRealFunction {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,215,rivate final double[] maximumPosition;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,217,rivate final double std;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,219,"ublic Gaussian2D(double xOpt, double yOpt, double std) {"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,220,"aximumPosition = new double[] { xOpt, yOpt };"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,221,his.std = std;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,224,ublic double getMaximum() {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,225,eturn value(maximumPosition);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,228,ublic double[] getMaximumPosition() {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,229,eturn maximumPosition.clone();
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,232,ublic double value(double[] point) {
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,233,"inal double x = point[0], y = point[1];"
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,234,inal double twoS2 = 2.0 * std * std;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,235,eturn 1.0 / (twoS2 * FastMath.PI) * FastMath.exp(-(x * x + y * y) / twoS2);
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,239,rivate int count;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,15, limitations under the License.
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,18,ackage org.apache.commons.math.optimization.direct;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,21,mport static org.junit.Assert.assertNotNull;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,22,mport static org.junit.Assert.assertNull;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,23,mport static org.junit.Assert.assertTrue;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,24,mport static org.junit.Assert.fail;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,26,mport org.apache.commons.math.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,27,mport org.apache.commons.math.exception.TooManyEvaluationsException;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,28,mport org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,29,mport org.apache.commons.math.analysis.MultivariateVectorialFunction;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,30,mport org.apache.commons.math.linear.Array2DRowRealMatrix;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,31,mport org.apache.commons.math.linear.RealMatrix;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,32,mport org.apache.commons.math.optimization.GoalType;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,33,mport org.apache.commons.math.optimization.LeastSquaresConverter;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,34,mport org.apache.commons.math.optimization.RealPointValuePair;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,35,mport org.apache.commons.math.optimization.SimpleScalarValueChecker;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,36,mport org.junit.Test;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,38,ublic class NelderMeadTest {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,39,Test
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,40,ublic void testFunctionEvaluationExceptions() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,41,ultivariateRealFunction wrong =
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,42,ew MultivariateRealFunction() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,43,rivate static final long serialVersionUID = 4751314470965489371L;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,44,ublic double value(double[] x) throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,45,f (x[0] < 0) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,46,"hrow new FunctionEvaluationException(x, ""{0}"", ""oops"");"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,47, else if (x[0] > 1) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,48,"hrow new FunctionEvaluationException(new RuntimeException(""oops""), x);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,49, else {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,50,eturn x[0] * (1 - x[0]);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,54,ry {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,55,"elderMead optimizer = new NelderMead(0.9, 1.9, 0.4, 0.6);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,56,"ptimizer.optimize(wrong, GoalType.MINIMIZE, new double[] { -1.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,57,"ail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,58, catch (FunctionEvaluationException ce) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,59,/ expected behavior
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,60,ssertNull(ce.getCause());
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,62,ry {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,63,"elderMead optimizer = new NelderMead(0.9, 1.9, 0.4, 0.6);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,64,"ptimizer.optimize(wrong, GoalType.MINIMIZE, new double[] { +2.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,65,"ail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,66, catch (FunctionEvaluationException ce) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,67,/ expected behavior
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,68,ssertNotNull(ce.getCause());
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,72,Test
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,73,ublic void testMinimizeMaximize()
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,74,hrows FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,76,/ the following function has 4 local extrema:
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,77,inal double xM        = -3.841947088256863675365;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,78,inal double yM        = -1.391745200270734924416;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,79,inal double xP        =  0.2286682237349059125691;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,80,inal double yP        = -yM;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,81,inal double valueXmYm =  0.2373295333134216789769; // local  maximum
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,82,inal double valueXmYp = -valueXmYm;                // local  minimum
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,83,inal double valueXpYm = -0.7290400707055187115322; // global minimum
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,84,inal double valueXpYp = -valueXpYm;                // global maximum
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,85,ultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,86,rivate static final long serialVersionUID = -7039124064449091152L;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,87,ublic double value(double[] variables) throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,88,inal double x = variables[0];
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,89,inal double y = variables[1];
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,90,eturn ((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,94,elderMead optimizer = new NelderMead();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,95,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-10, 1.0e-30));"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,96,ptimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,97,"ptimizer.setStartConfiguration(new double[] { 0.2, 0.2 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,98,ealPointValuePair optimum;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,100,/ minimization
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,101,"ptimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { -3.0, 0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,102,"ssertEquals(xM,        optimum.getPoint()[0], 2.0e-7);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,103,"ssertEquals(yP,        optimum.getPoint()[1], 2.0e-5);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,104,"ssertEquals(valueXmYp, optimum.getValue(),    6.0e-12);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,105,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,106,ssertTrue(optimizer.getEvaluations() < 90);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,108,"ptimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { +1, 0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,109,"ssertEquals(xP,        optimum.getPoint()[0], 5.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,110,"ssertEquals(yM,        optimum.getPoint()[1], 6.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,111,"ssertEquals(valueXpYm, optimum.getValue(),    1.0e-11);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,112,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,113,ssertTrue(optimizer.getEvaluations() < 90);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,115,/ maximization
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,116,"ptimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { -3.0, 0.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,117,"ssertEquals(xM,        optimum.getPoint()[0], 1.0e-5);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,118,"ssertEquals(yM,        optimum.getPoint()[1], 3.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,119,"ssertEquals(valueXmYm, optimum.getValue(),    3.0e-12);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,120,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,121,ssertTrue(optimizer.getEvaluations() < 90);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,123,"ptimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { +1, 0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,124,"ssertEquals(xP,        optimum.getPoint()[0], 4.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,125,"ssertEquals(yP,        optimum.getPoint()[1], 5.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,126,"ssertEquals(valueXpYp, optimum.getValue(),    7.0e-12);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,127,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,128,ssertTrue(optimizer.getEvaluations() < 90);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,131,Test
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,132,ublic void testRosenbrock()
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,133,hrows FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,135,osenbrock rosenbrock = new Rosenbrock();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,136,elderMead optimizer = new NelderMead();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,137,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1, 1.0e-3));"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,138,ptimizer.setMaxEvaluations(100);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,139,ptimizer.setStartConfiguration(new double[][] {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,140," -1.2,  1.0 }, { 0.9, 1.2 } , {  3.5, -2.3 }"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,142,ealPointValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,143,"ptimizer.optimize(rosenbrock, GoalType.MINIMIZE, new double[] { -1.2, 1.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,145,"ssertEquals(rosenbrock.getCount(), optimizer.getEvaluations());"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,146,ssertTrue(optimizer.getEvaluations() > 40);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,147,ssertTrue(optimizer.getEvaluations() < 50);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,148,ssertTrue(optimum.getValue() < 8.0e-4);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,151,Test
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,152,ublic void testPowell()
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,153,hrows FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,155,owell powell = new Powell();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,156,elderMead optimizer = new NelderMead();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,157,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-3));"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,158,ptimizer.setMaxEvaluations(200);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,159,ealPointValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,160,"ptimizer.optimize(powell, GoalType.MINIMIZE, new double[] { 3.0, -1.0, 0.0, 1.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,161,"ssertEquals(powell.getCount(), optimizer.getEvaluations());"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,162,ssertTrue(optimizer.getEvaluations() > 110);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,163,ssertTrue(optimizer.getEvaluations() < 130);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,164,ssertTrue(optimum.getValue() < 2.0e-3);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,167,Test
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,168,ublic void testLeastSquares1()
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,169,hrows FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,171,inal RealMatrix factors =
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,172,ew Array2DRowRealMatrix(new double[][] {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,173," 1.0, 0.0 },"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,174," 0.0, 1.0 }"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,175,", false);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,176,eastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorialFunction() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,177,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,178,eturn factors.operate(variables);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,180,", new double[] { 2.0, -3.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,181,elderMead optimizer = new NelderMead();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,182,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-6));"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,183,ptimizer.setMaxEvaluations(200);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,184,ealPointValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,185,"ptimizer.optimize(ls, GoalType.MINIMIZE, new double[] { 10.0, 10.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,186,"ssertEquals( 2.0, optimum.getPointRef()[0], 3.0e-5);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,187,"ssertEquals(-3.0, optimum.getPointRef()[1], 4.0e-4);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,188,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,189,ssertTrue(optimizer.getEvaluations() < 80);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,190,ssertTrue(optimum.getValue() < 1.0e-6);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,193,Test
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,194,ublic void testLeastSquares2()
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,195,hrows FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,197,inal RealMatrix factors =
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,198,ew Array2DRowRealMatrix(new double[][] {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,199," 1.0, 0.0 },"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,200," 0.0, 1.0 }"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,201,", false);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,202,eastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorialFunction() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,203,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,204,eturn factors.operate(variables);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,206,", new double[] { 2.0, -3.0 }, new double[] { 10.0, 0.1 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,207,elderMead optimizer = new NelderMead();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,208,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-6));"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,209,ptimizer.setMaxEvaluations(200);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,210,ealPointValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,211,"ptimizer.optimize(ls, GoalType.MINIMIZE, new double[] { 10.0, 10.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,212,"ssertEquals( 2.0, optimum.getPointRef()[0], 5.0e-5);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,213,"ssertEquals(-3.0, optimum.getPointRef()[1], 8.0e-4);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,214,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,215,ssertTrue(optimizer.getEvaluations() < 80);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,216,ssertTrue(optimum.getValue() < 1.0e-6);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,219,Test
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,220,ublic void testLeastSquares3()
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,221,hrows FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,223,inal RealMatrix factors =
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,224,ew Array2DRowRealMatrix(new double[][] {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,225," 1.0, 0.0 },"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,226," 0.0, 1.0 }"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,227,", false);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,228,eastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorialFunction() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,229,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,230,eturn factors.operate(variables);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,232,", new double[] { 2.0, -3.0 }, new Array2DRowRealMatrix(new double [][] {"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,233," 1.0, 1.2 }, { 1.2, 2.0 }"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,235,elderMead optimizer = new NelderMead();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,236,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-6));"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,237,ptimizer.setMaxEvaluations(200);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,238,ealPointValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,239,"ptimizer.optimize(ls, GoalType.MINIMIZE, new double[] { 10.0, 10.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,240,"ssertEquals( 2.0, optimum.getPointRef()[0], 2.0e-3);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,241,"ssertEquals(-3.0, optimum.getPointRef()[1], 8.0e-4);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,242,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,243,ssertTrue(optimizer.getEvaluations() < 80);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,244,ssertTrue(optimum.getValue() < 1.0e-6);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,247,Test(expected = TooManyEvaluationsException.class)
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,248,ublic void testMaxIterations() throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,249,owell powell = new Powell();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,250,elderMead optimizer = new NelderMead();
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,251,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-3));"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,252,ptimizer.setMaxEvaluations(20);
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,253,"ptimizer.optimize(powell, GoalType.MINIMIZE, new double[] { 3.0, -1.0, 0.0, 1.0 });"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,256,rivate static class Rosenbrock implements MultivariateRealFunction {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,257,rivate int count;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,259,ublic Rosenbrock() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,260,ount = 0;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,263,ublic double value(double[] x) throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,264,+count;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,265,ouble a = x[1] - x[0] * x[0];
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,266,ouble b = 1.0 - x[0];
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,267,eturn 100 * a * a + b * b;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,270,ublic int getCount() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,271,eturn count;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,275,rivate static class Powell implements MultivariateRealFunction {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,276,rivate int count;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,278,ublic Powell() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,279,ount = 0;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,282,ublic double value(double[] x) throws FunctionEvaluationException {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,283,+count;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,284,ouble a = x[0] + 10 * x[1];
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,285,ouble b = x[2] - x[3];
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,286,ouble c = x[1] - 2 * x[2];
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,287,ouble d = x[0] - x[3];
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,288,eturn a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,291,ublic int getCount() {
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,292,eturn count;
False,src/test/java/org/apache/commons/math/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/PowellOptimizerTest.java,19,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/PowellOptimizerTest.java,19,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,26,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,26,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/optimization/fitting/GaussianFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/GaussianFitterTest.java,22,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/optimization/fitting/GaussianFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/GaussianFitterTest.java,22,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunctionTest.java,src/test/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunctionTest.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunctionTest.java,src/test/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunctionTest.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,27,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,27,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,28,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,28,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,25,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,25,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,26,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,26,import org.apache.commons.math.exception.FunctionEvaluationException;
False,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,20,mport org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,20,import org.apache.commons.math.exception.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,22,import java.util.Arrays;
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1515,public void testSortInPlace() {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1516,"final double[] x1 = {2,   5,  -3, 1,  4};"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1517,"final double[] x2 = {4,  25,   9, 1, 16};"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1518,"final double[] x3 = {8, 125, -27, 1, 64};"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1520,"MathUtils.sortInPlace(x1, x2, x3);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1522,"assertEquals(-3,  x1[0], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1523,"assertEquals(9,   x2[0], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1524,"assertEquals(-27, x3[0], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1526,"assertEquals(1, x1[1], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1527,"assertEquals(1, x2[1], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1528,"assertEquals(1, x3[1], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1530,"assertEquals(2, x1[2], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1531,"assertEquals(4, x2[2], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1532,"assertEquals(8, x3[2], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1534,"assertEquals(4,  x1[3], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1535,"assertEquals(16, x2[3], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1536,"assertEquals(64, x3[3], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1538,"assertEquals(5,   x1[4], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1539,"assertEquals(25,  x2[4], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1540,"assertEquals(125, x3[4], Math.ulp(1d));"

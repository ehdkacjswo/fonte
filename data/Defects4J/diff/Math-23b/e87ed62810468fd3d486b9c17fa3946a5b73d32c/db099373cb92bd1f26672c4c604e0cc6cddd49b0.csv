is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,318,"UNKNOWN_ADDITIONAL_EQUATION(""unknown additional equation""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,319,"UNKNOWN_PARAMETER(""unknown parameter {0}""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,320,"UNMATCHED_ODE_IN_EXTENDED_SET(""ode does not match the main ode set in the extended set""),"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,32,import org.apache.commons.math.exception.MathIllegalArgumentException;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,49,ublic abstract class AbstractIntegrator implements FirstOrderIntegrator {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,50,public abstract class AbstractIntegrator implements ExpandableFirstOrderIntegrator {
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,79,rivate transient FirstOrderDifferentialEquations equations;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,80,private transient ExpandableFirstOrderDifferentialEquations equations;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,191,rotected void setEquations(final FirstOrderDifferentialEquations equations) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,192,protected void setEquations(final ExpandableFirstOrderDifferentialEquations equations) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,196,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,197,"public double integrate(FirstOrderDifferentialEquations equations,"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,198,"double t0, double[] y0, double t, double[] y)"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,199,"throws MathIllegalStateException, MathIllegalArgumentException {"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,200,"return integrate(new ExpandableFirstOrderDifferentialEquations(equations), t0, y0, t, y);"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,339,"rotected void sanityChecks(final FirstOrderDifferentialEquations ode,"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,347,"protected void sanityChecks(final ExpandableFirstOrderDifferentialEquations ode,"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,344,f (ode.getDimension() != y0.length) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,352,if (ode.getMainSetDimension() != y0.length) {
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,348,f (ode.getDimension() != y.length) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,356,if (ode.getMainSetDimension() != y.length) {
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,17,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,20,import java.util.Collection;
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,22,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,23,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,25,/** This abstract class provides boilerplate parameters list.
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,27,* @version $Id$
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,28,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,31,public abstract class AbstractParameterizable implements Parameterizable {
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,33,/** List of the parameters names. */
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,34,private final Collection<String> parametersNames;
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,36,/** Simple constructor.
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,37,* @param names names of the supported parameters
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,39,protected AbstractParameterizable(final String ... names) {
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,40,parametersNames = new ArrayList<String>();
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,41,for (final String name : names) {
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,42,parametersNames.add(name);
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,46,/** Simple constructor.
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,47,* @param names names of the supported parameters
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,49,protected AbstractParameterizable(final Collection<String> names) {
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,50,parametersNames = new ArrayList<String>();
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,51,parametersNames.addAll(names);
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,54,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,55,public Collection<String> getParametersNames() {
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,56,return parametersNames;
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,59,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,60,public boolean isSupported(final String name) {
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,61,for (final String supportedName : parametersNames) {
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,62,if (supportedName.equals(name)) {
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,63,return true;
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,66,return false;
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,69,/** Check if a parameter is supported and throw an IllegalArgumentException if not.
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,70,* @param name name of the parameter to check
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,71,* @exception MathIllegalArgumentException if the parameter is not supported
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,72,* @see #isSupported(String)
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,74,public void complainIfNotSupported(final String name)
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,75,throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,76,if (!isSupported(name)) {
True,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,src/main/java/org/apache/commons/math/ode/AbstractParameterizable.java,77,"throw new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_PARAMETER, name);"
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,18,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,21,* This interface allows users to add their own differential equations to a main
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,22,* set of differential equations.
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,23,* <p>
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,24,* In some cases users may need to integrate some problem-specific equations along
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,25,* with a main set of differential equations. One example is optimal control where
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,26,* adjoined parameters linked to the minimized hamiltonian must be integrated.
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,27,* </p>
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,28,* <p>
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,29,* This interface allows users to add such equations to a main set of {@link
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,30,* FirstOrderDifferentialEquations first order differential equations}
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,31,* thanks to the {@link
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,32,* ExpandableFirstOrderDifferentialEquations#addAdditionalEquations(AdditionalEquations)}
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,33,* method.
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,34,* </p>
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,35,* @see ExpandableFirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,36,* @version $Id$
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,37,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,39,public interface AdditionalEquations {
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,41,/** Get the dimension of the additional state parameters.
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,42,* @return dimension of the additional state parameters
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,44,int getDimension();
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,46,/** Compute the derivatives related to the additional state parameters.
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,47,* @param t current value of the independent <I>time</I> variable
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,48,* @param y array containing the current value of the main state vector
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,49,* @param yDot array containing the derivative of the main state vector
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,50,* @param z array containing the current value of the additional state vector
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,51,* @param zDot placeholder array where to put the derivative of the additional state vector
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,53,"void computeDerivatives(double t, double[] y, double[] yDot, double[] z, double[] zDot);"
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,18,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,22,* This class is a container for additional state parameters and their associated
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,23,* evolution equation.
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,24,* <p>
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,25,* It is a container allowing the integrator to keep constant consistency between
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,26,* additional states and the corresponding equations. It allows to set additional
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,27,"* state values, get current additional state value and derivatives by reference"
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,28,* on the associated additional equations.
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,29,* </p>
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,31,* @see ExpandableFirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,32,* @see AdditionalEquations
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,34,* @version $Id$
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,35,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,37,class AdditionalStateAndEquations {
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,39,/** Additional equations set. */
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,40,private final AdditionalEquations addEquations;
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,42,/** Current additional state. */
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,43,private double[] addState;
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,45,/** Current additional state derivatives. */
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,46,private double[] addStateDot;
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,48,/** Create a new instance based on one set of additional equations.
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,49,* @param addEqu additional equations.
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,51,public AdditionalStateAndEquations(final AdditionalEquations addEqu) {
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,52,this.addEquations = addEqu;
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,55,/** Get a reference to the current value of the additional state.
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,56,"* <p>The array returned is a true reference to the state array, so it may be"
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,57,* used to store data into it.</>
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,58,* @return a reference current value of the additional state.
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,60,public double[] getAdditionalState() {
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,61,return addState;
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,64,/** Get a reference to the current value of the additional state derivatives.
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,65,"* <p>The array returned is a true reference to the state array, so it may be"
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,66,* used to store data into it.</>
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,67,* @return a reference current value of the additional state derivatives.
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,69,public double[] getAdditionalStateDot() {
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,70,return addStateDot;
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,73,/** Get the instance of the current additional equations.
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,74,* @return current value of the additional equations.
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,76,public AdditionalEquations getAdditionalEquations() {
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,77,return addEquations;
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,80,/** Set a value to additional state.
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,81,* @param state additional state value.
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,83,public void setAdditionalState(final double[] state) {
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,84,this.addState    = state.clone();
True,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,85,this.addStateDot = new double[state.length];
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,17,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,20,import java.util.List;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,22,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,23,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,27,"* This class represents a combined set of first order differential equations,"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,28,* with at least a main set of equations expandable by some sets of additional
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,29,* equations.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,30,* <p>
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,31,* This class extends the {@link FirstOrderDifferentialEquations}. It allows to
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,32,* identify which part of a complete set of differential equations correspond to
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,33,* the main set and which part correspond to the expansion sets.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,34,* </p>
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,35,* <p>
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,36,* One typical use case is the computation of the jacobian matrix for some ODE.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,37,"* The main set of equations corresponds to the raw ODE, and we add to this set"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,38,* another bunch of equations which represent the jacobian matrix of the main
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,39,"* set. In that case, we want the integrator to use <em>only</em> the main set"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,40,* to estimate the errors and hence the step sizes. It should <em>not</em> use
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,41,* the additional equations in this computation.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,42,* The {@link ExpandableFirstOrderIntegrator integrator} will be able to know
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,43,* where the main set ends and so where the expansion sets begin.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,44,* </p>
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,45,* <p>
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,46,* We consider that the main set always corresponds to the first equations and
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,47,* the expansion sets to the last equations.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,48,* </p>
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,50,* @see FirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,51,* @see JacobianMatrices
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,53,* @version $Id$
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,54,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,57,public class ExpandableFirstOrderDifferentialEquations implements FirstOrderDifferentialEquations {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,59,/** Main set of differential equations. */
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,60,private final FirstOrderDifferentialEquations mainSet;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,62,/** Additional sets of equations and associated states. */
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,63,private final List<AdditionalStateAndEquations> addedSets;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,65,/** Create a new instance of ExpandableFirstOrderDifferentialEquations.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,66,* @param fode the main set of differential equations to be integrated.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,68,public ExpandableFirstOrderDifferentialEquations(final FirstOrderDifferentialEquations fode) {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,69,this.mainSet   = fode;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,70,this.addedSets = new ArrayList<AdditionalStateAndEquations>();
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,73,/** Return the dimension of the whole state vector.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,74,* <p>
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,75,* The whole state vector results in the assembly of the main set of
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,76,"* equations and, if there are some, the added sets of equations."
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,77,* </p>
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,78,* @return dimension of the whole state vector
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,80,public int getDimension()
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,81,throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,82,int dimension = this.getMainSetDimension();
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,83,try {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,84,for (AdditionalStateAndEquations stateAndEqu : addedSets) {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,85,dimension += stateAndEqu.getAdditionalEquations().getDimension();
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,87,return dimension;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,88,} catch (Exception e) {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,89,"// TODO we should not catch Exception, and we should identify the offending additional equation"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,90,throw new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_ADDITIONAL_EQUATION);
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,94,/** Return the dimension of the main set of equations.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,95,* <p>
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,96,* The main set of equations represents the first part of an ODE state.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,97,* The error estimations and adaptive step size computation should be
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,98,"* done on this first part only, not on the final part of the state"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,99,* which represents expansion sets of equations considered as secondary.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,100,* </p>
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,101,"* @return dimension of the main set of equations, must be lesser than or"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,102,* equal to the {@link #getDimension() total dimension}
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,104,public int getMainSetDimension() {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,105,return mainSet.getDimension();
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,108,/** Return the cumulated dimension of all added sets of equations.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,109,* @return dimension of all added sets of equations
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,110,* @throws IllegalArgumentException if some additional equation is unknown
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,112,public int getAddedSetsDimension()
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,113,throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,114,int addDim = 0;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,115,try {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,116,for (AdditionalStateAndEquations stateAndEqu : addedSets) {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,117,addDim += stateAndEqu.getAdditionalEquations().getDimension();
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,119,return addDim;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,120,} catch (Exception e) {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,121,"// TODO we should not catch Exception, and we should identify the offending additional equation"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,122,throw new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_ADDITIONAL_EQUATION);
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,126,/** Return the dimension of one added set of equations.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,127,* @param  addEqu Additional equations used as a reference for selection
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,128,* @return dimension of the added set of equations
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,129,* @throws IllegalArgumentException if additional equation is unknown
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,131,public int getAddedSetDimension(final AdditionalEquations addEqu) {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,132,return selectStateAndEquations(addEqu).getAdditionalEquations().getDimension();
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,135,/** Get the current time derivative of the total state vector.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,136,* @param t current value of the independent <I>time</I> variable
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,137,* @param y array containing the current value of the state vector
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,138,* @param yDot placeholder array where to put the time derivative of the state vector
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,140,"public void computeDerivatives(final double t, final double[] y, final double[] yDot) {"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,142,// Add contribution for the main set of equations
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,143,int index = getMainSetDimension();
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,144,double[] m = new double[index];
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,145,double[] mDot = new double[index];
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,146,// update current main state
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,147,"System.arraycopy(y, 0, m, 0, index);"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,148,// compute derivatives
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,149,"mainSet.computeDerivatives(t, m, mDot);"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,150,// update main state contribution in global array
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,151,"System.arraycopy(mDot, 0, yDot, 0, index);"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,153,// Add contribution for additional equations
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,154,for (final AdditionalStateAndEquations stateAndEqu : addedSets) {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,155,final double[] p    = stateAndEqu.getAdditionalState();
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,156,final double[] pDot = stateAndEqu.getAdditionalStateDot();
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,158,// update current additional state
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,159,"System.arraycopy(y, index, p, 0, p.length);"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,161,// compute additional derivatives
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,162,"stateAndEqu.getAdditionalEquations().computeDerivatives(t, m, mDot, p, pDot);"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,164,// update each additional state contribution in global array
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,165,"System.arraycopy(pDot, 0, yDot, index, p.length);"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,167,// incrementing index
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,168,index += p.length;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,173,/** Add a set of user-specified equations to be integrated along with
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,174,*  the main set of equations.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,176,* @param addEqu additional equations
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,177,"* @see #setInitialAdditionalState(double[], AdditionalEquations)"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,178,* @see #getCurrentAdditionalState(AdditionalEquations)
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,180,public void addAdditionalEquations(final AdditionalEquations addEqu) {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,181,addedSets.add(new AdditionalStateAndEquations(addEqu));
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,184,/** Get the instance of the main set of equations.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,185,* @return current value of the main set of equations.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,187,public FirstOrderDifferentialEquations getMainSet() {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,188,return mainSet;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,191,/** Set initial additional state.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,192,* @param addState additional state
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,193,* @param addEqu additional equations used as a reference for selection
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,194,* @throws IllegalArgumentException if additional equation is unknown
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,196,"public void setInitialAdditionalState(final double[] addState, final AdditionalEquations addEqu) {"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,197,selectStateAndEquations(addEqu).setAdditionalState(addState);
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,200,/** Set current additional state.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,201,* <p>
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,202,* The total current state computed by the integrator
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,203,* is dispatched here to the various additional states.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,204,* </p>
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,205,* @param currentState total current state
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,206,* @throws IllegalArgumentException if additional equation is unknown
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,208,public void setCurrentAdditionalState(final double[] currentState)
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,209,throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,210,int index = getMainSetDimension();
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,211,try {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,212,for (AdditionalStateAndEquations stateAndEqu : addedSets) {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,213,final int addDim = stateAndEqu.getAdditionalEquations().getDimension();
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,214,final double[] addState = new double[addDim];
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,215,"System.arraycopy(currentState, index, addState, 0, addDim);"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,216,stateAndEqu.setAdditionalState(addState);
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,217,index += addDim;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,219,} catch (Exception e) {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,220,"// TODO we should not catch Exception, and we should identify the offending additional equation"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,221,throw new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_ADDITIONAL_EQUATION);
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,225,/** Get current additional state.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,226,* @param addEqu additional equations used as a reference for selection
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,227,* @return current additional state
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,228,* @throws IllegalArgumentException if additional equation is unknown
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,230,public double[] getCurrentAdditionalState(final AdditionalEquations addEqu) {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,231,return selectStateAndEquations(addEqu).getAdditionalState();
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,234,/** Get all current additional states accumulated.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,235,* @return current additional states
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,236,* @throws IllegalArgumentException if additional equation is unknown
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,238,public double[] getCurrentAdditionalStates()
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,239,throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,240,int index = 0;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,241,final double[] cumulState = new double[getAddedSetsDimension()];
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,242,try {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,243,for (AdditionalStateAndEquations stateAndEqu : addedSets) {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,244,final int addDim = stateAndEqu.getAdditionalEquations().getDimension();
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,245,final double[] addState = stateAndEqu.getAdditionalState();
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,246,"System.arraycopy(addState, 0, cumulState, index, addDim);"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,247,index += addDim;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,249,return cumulState;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,250,} catch (Exception e) {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,251,"// TODO we should not catch Exception, and we should identify the offending additional equation"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,252,throw new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_ADDITIONAL_EQUATION);
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,256,/** Select additional state and equations pair in the list.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,257,* @param  addEqu Additional equations used as a reference for selection
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,258,* @return additional state and equations pair
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,259,* @throws IllegalArgumentException if additional equation is unknown
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,261,private AdditionalStateAndEquations selectStateAndEquations(final AdditionalEquations addEqu)
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,262,throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,263,for (AdditionalStateAndEquations stateAndEqu : addedSets) {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,264,if (stateAndEqu.getAdditionalEquations() == addEqu) {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,265,return stateAndEqu;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,268,"// TODO we should not catch Exception, and we should identify the offending additional equation"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,269,throw new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_ADDITIONAL_EQUATION);
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,18,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,20,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,21,import org.apache.commons.math.exception.MathIllegalStateException;
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,24,* This interface represents a first order integrator for expandable
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,25,* differential equations.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,26,* <p>
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,27,* The classes devoted to solve expandable first order differential equations
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,28,* should implement this interface. The problems which can be handled should
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,29,* implement the {@link ExpandableFirstOrderDifferentialEquations} interface.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,30,* </p>
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,32,* @see ExpandableFirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,34,* @version $Id$
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,35,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,38,public interface ExpandableFirstOrderIntegrator extends FirstOrderIntegrator {
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,40,/** Integrate a set of differential equations up to the given time.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,41,* <p>This method solves an Initial Value Problem (IVP).</p>
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,42,"* <p>The set of differential equations is composed of a main set, which"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,43,* can be extended by some sets of additional equations.</p>
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,44,* <p>Since this method stores some internal state variables made
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,45,* available in its public interface during integration ({@link
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,46,"* #getCurrentSignedStepsize()}), it is <em>not</em> thread-safe.</p>"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,47,* @param equations complete set of differential equations to integrate
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,48,* @param t0 initial time
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,49,* @param y0 initial value of the main state vector at t0
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,50,* @param t target time for the integration
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,51,* (can be set to a value smaller than <code>t0</code> for backward integration)
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,52,* @param y placeholder where to put the main state vector at each successful
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,53,"*  step (and hence at the end of integration), can be the same object as y0"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,54,"* @return stop time, will be the same as target time if integration reached its"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,55,"* target, but may be different if some {@link"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,56,* org.apache.commons.math.ode.events.EventHandler} stops it at some point.
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,57,* @throws MathIllegalStateException if the integrator cannot perform integration
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,58,* @throws MathIllegalArgumentException if integration parameters are wrong (typically
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,59,* too small integration span)
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,61,"double integrate(ExpandableFirstOrderDifferentialEquations equations,"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,62,"double t0, double[] y0, double t, double[] y)"
True,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,63,"throws MathIllegalStateException, MathIllegalArgumentException;"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,17,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,19,import java.lang.reflect.Array;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,20,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,21,import java.util.List;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,23,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,24,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,25,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,28,* This class defines a set of {@link AdditionalEquations additional equations} to
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,29,"* compute the jacobian matrices with respect to the initial state vector and, if"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,30,"* any, to some parameters of the main ODE set."
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,31,* <p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,32,* It is intended to be packed into an {@link ExpandableFirstOrderDifferentialEquations}
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,33,"* in conjunction with a main set of ODE, which may be:"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,34,* <ul>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,35,* <li>a {@link FirstOrderDifferentialEquations}</li>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,36,* <li>a {@link MainStateJacobianProvider}</li>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,37,* </ul>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,38,* In order to compute jacobian matrices with respect to some parameters of the
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,39,"* main ODE set, the following parameter jacobian providers may be set:"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,40,* <ul>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,41,* <li>a {@link ParameterJacobianProvider}</li>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,42,* <li>a {@link ParameterizedODE}</li>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,43,* </ul>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,44,* </p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,46,* @see ExpandableFirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,47,* @see FirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,48,* @see MainStateJacobianProvider
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,49,* @see ParameterJacobianProvider
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,50,* @see ParameterizedODE
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,52,* @version $Id$
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,53,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,55,public class JacobianMatrices implements AdditionalEquations {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,57,/** Expandable first order differential equation. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,58,private ExpandableFirstOrderDifferentialEquations efode;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,60,/** FODE without exact main jacobian computation skill. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,61,private FirstOrderDifferentialEquations fode = null;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,63,/** FODE with exact main jacobian computation skill. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,64,private MainStateJacobianProvider jode = null;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,66,/** FODE without exact parameter jacobian computation skill. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,67,private ParameterizedODE pode = null;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,69,/** FODE with exact parameter jacobian computation skill. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,70,private List<ParameterJacobianProvider> pjp = new ArrayList<ParameterJacobianProvider>();;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,72,/** List of parameters selected for parameter jacobian computation. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,73,private List<ParameterConfiguration> selectedParameters = null;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,75,/** Main state vector dimension. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,76,private int stateDim;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,78,/** Parameters dimension. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,79,private int paramDim = 0;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,81,/** Current main state jacobian matrix in a row. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,82,private double[] mainJacobianInARow;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,84,/** Current parameters jacobian matrices in a row. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,85,private double[] parameterJacobiansInARow = null;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,87,/** Step used for finite difference computation of jacobian matrix
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,88,*  w.r.t. main state vector. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,89,private double[] hY = null;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,91,/** Boolean for fode consistency. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,92,private boolean dirtyMainState = false;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,94,/** Boolean for selected parameters consistency. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,95,private boolean dirtyParameter = false;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,97,/** Simple constructor for an additional equations set computing jacobian matrices.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,98,* <p>This additional equations set is added internally to the expandable
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,99,* first order differential equations set thanks to the
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,100,* {@link ExpandableFirstOrderDifferentialEquations#addAdditionalEquations(AdditionalEquations)}
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,101,* method.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,102,* @param extended the expandable first order differential equations set
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,103,* @param jode the main first order differential equations set to extend
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,104,* @exception IllegalArgumentException if jode does not match the main set to be extended given by
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,105,*            {@link ExpandableFirstOrderDifferentialEquations#getMainSet() extended.getMainSet()}
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,107,"public JacobianMatrices(final ExpandableFirstOrderDifferentialEquations extended,"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,108,final MainStateJacobianProvider jode)
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,109,throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,111,"checkCompatibility(extended, jode);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,113,efode = extended;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,114,stateDim = efode.getMainSetDimension();
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,115,mainJacobianInARow = new double[stateDim * stateDim];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,116,this.jode = jode;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,117,efode.addAdditionalEquations(this);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,118,setInitialMainStateJacobian();
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,121,/** Simple constructor for an additional equations set computing jacobian matrices.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,122,* <p>This additional equations set is added internally to the expandable
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,123,* first order differential equations set thanks to the
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,124,* {@link ExpandableFirstOrderDifferentialEquations#addAdditionalEquations(AdditionalEquations)}
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,125,* method.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,126,* @param extended the expandable first order differential equations set
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,127,* @param fode the main first order differential equations set to extend
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,128,* @exception IllegalArgumentException if fode does not match the main set to be extended given by
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,129,*            {@link ExpandableFirstOrderDifferentialEquations#getMainSet() extended.getMainSet()}
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,131,"public JacobianMatrices(final ExpandableFirstOrderDifferentialEquations extended,"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,132,final FirstOrderDifferentialEquations fode)
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,133,throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,135,"checkCompatibility(extended, fode);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,137,efode = extended;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,138,stateDim = efode.getMainSetDimension();
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,139,mainJacobianInARow = new double[stateDim * stateDim];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,140,this.fode = fode;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,141,dirtyMainState = true;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,142,efode.addAdditionalEquations(this);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,143,setInitialMainStateJacobian();
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,146,/** Add a parameter jacobian provider.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,147,* @param pjp the parameter jacobian provider to compute exactly the parameter jacobian matrix
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,149,public void setParameterJacobianProvider(final ParameterJacobianProvider pjp) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,150,this.pjp.add(pjp);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,153,/** Add a parameter jacobian provider.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,154,* @param pjp the parameterized ODE to compute by finite difference the parameter jacobian matrix
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,156,public void setParameterizedODE(final ParameterizedODE pode) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,157,this.pode = pode;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,158,dirtyParameter = true;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,161,/** Select the parameters to consider for jacobian matrices processing.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,162,* <p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,163,* Parameters must belong to the supported ones given by {@link
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,164,"* Parameterizable#getParametersNames()}, so the main set of differential"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,165,* equations must be {@link Parameterizable}.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,166,* </p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,167,* <p>Note that each selection clears the previous selected parameters.</p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,169,* @param parameters parameters to consider for jacobian matrices processing
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,170,* @exception IllegalArgumentException if one parameter is not supported
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,172,public void selectParameters(final String... parameters) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,174,selectedParameters = new ArrayList<ParameterConfiguration>();
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,175,for (String param : parameters) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,176,"selectedParameters.add(new ParameterConfiguration(param, Double.NaN));"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,178,paramDim = parameters.length;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,179,parameterJacobiansInARow = new double[paramDim * stateDim];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,180,setInitialParameterJacobians();
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,183,/** Set the step associated to a parameter in order to compute by finite
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,184,*  difference the jacobian matrix.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,185,* <p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,186,* Needed if and only if the main ODE set is a {@link ParameterizedODE}
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,187,* and the parameter has been {@link #selectParameters(String ...) selected}
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,188,* </p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,189,* <p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,190,"* For pval, a non zero value of the parameter, pval * Math.sqrt(MathUtils.EPSILON)"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,191,* is a reasonable value for such a step.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,192,* </p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,193,* <p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,194,* A zero value for such a step doesn't enable to compute the parameter jacobian matrix.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,195,* </p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,196,* @param parameter parameter to consider for jacobian processing
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,197,* @param hP step for jacobian finite difference computation w.r.t. the specified parameter
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,198,* @see ParameterizedODE
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,199,* @exception IllegalArgumentException if the parameter is not supported
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,201,"public void setParameterStep(final String parameter, final double hP) {"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,203,boolean found = false;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,204,for (ParameterConfiguration param: selectedParameters) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,205,if (parameter.equals(param.getParameterName())) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,206,param.setHP(hP);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,207,found = true;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,208,dirtyParameter = true;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,209,break;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,212,if (!found) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,213,"throw new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_PARAMETER,"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,214,parameter);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,218,/** Set the steps in order to compute by finite difference the jacobian
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,219,*  matrix with respect to main state.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,220,* <p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,221,* Needed if and only if the main set is a {@link FirstOrderDifferentialEquations}.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,222,* </p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,223,* <p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,224,* Zero values for those steps don't enable to compute the main state jacobian matrix.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,225,* </p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,226,* @param hY step used for finite difference computation with respect to state vector
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,227,* @exception IllegalArgumentException if the hY has not the dimension of the main state
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,228,* given by {@link ExpandableFirstOrderDifferentialEquations#getMainSetDimension()}
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,230,public void setMainStateSteps(final double[] hY) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,232,if (fode != null) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,233,// Check dimension
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,234,"checkDimension(stateDim, hY);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,235,this.hY = hY.clone();
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,236,dirtyMainState = true;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,240,/** Set the initial value of the jacobian matrix with respect to state.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,241,* @param dYdY0 initial jacobian matrix w.r.t. state
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,242,* @exception IllegalArgumentException if matrix dimensions are incorrect
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,244,public void setInitialMainStateJacobian(final double[][] dYdY0) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,246,// Check dimensions
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,247,"checkDimension(stateDim, dYdY0);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,248,"checkDimension(stateDim, dYdY0[0]);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,250,// store the matrix in row major order as a single dimension array
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,251,int index = 0;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,252,for (final double[] row : dYdY0) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,253,"System.arraycopy(row, 0, mainJacobianInARow, index, stateDim);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,254,index += stateDim;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,256,// set initial additional state value in expandable fode
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,257,"efode.setInitialAdditionalState(mainJacobianInARow, this);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,260,/** Set the initial value of the jacobian matrix with respect to one parameter.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,261,* <p>The parameter must be {@link #selectParameters(String...) selected}.</p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,262,* @param pName parameter name
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,263,* @param dYdP initial jacobian matrix w.r.t. the parameter
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,264,* @exception IllegalArgumentException if matrix dimensions are incorrect
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,266,"public void setInitialParameterJacobian(final String pName, final double[] dYdP) {"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,268,// Check dimensions
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,269,"checkDimension(stateDim, dYdP);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,271,// store the matrix in a global single dimension array
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,272,boolean found = false;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,273,int index = 0;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,274,for (ParameterConfiguration param: selectedParameters) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,275,if (pName.equals(param.getParameterName())) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,276,"System.arraycopy(dYdP, 0, parameterJacobiansInARow, index, stateDim);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,277,double[] p = new double[this.getDimension()];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,278,index = stateDim * stateDim;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,279,"System.arraycopy(mainJacobianInARow, 0, p, 0, index);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,280,"System.arraycopy(parameterJacobiansInARow, 0, p, index, stateDim * paramDim);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,281,// set initial additional state value in expandable fode
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,282,"efode.setInitialAdditionalState(p, this);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,283,found = true;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,284,break;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,286,index += stateDim;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,288,if (! found) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,289,"throw new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_PARAMETER,"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,290,pName);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,294,/** Set the default initial value of the jacobian matrix with respect to state.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,295,* <p>dYdY0 is set to the identity matrix.</p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,297,public void setInitialMainStateJacobian() {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,298,final double[][] dYdY0 = new double[stateDim][stateDim];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,299,for (int i = 0; i < stateDim; ++i) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,300,dYdY0[i][i] = 1.0;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,302,setInitialMainStateJacobian(dYdY0);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,305,/** Set the default initial value of the jacobian matrix with respect to one parameter.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,306,* <p>The parameter must be {@link #selectParameters(String...) selected}.</p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,307,* <p>dYdP is set to the null matrix.</p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,308,* @param pName parameter name
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,310,public void setInitialParameterJacobian(final String pName) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,311,"setInitialParameterJacobian(pName, new double[stateDim]);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,314,/** Set the default initial values of jacobian matrices with respect to all parameters.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,316,public void setInitialParameterJacobians() {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,317,for (ParameterConfiguration param: selectedParameters) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,318,setInitialParameterJacobian(param.getParameterName());
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,322,/** Set default initial values for jacobian matrices.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,323,* <p>dYdY0 is set to the identity matrix and all dYdP are set to zero.</p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,325,public void setInitialJacobians() {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,326,setInitialMainStateJacobian();
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,327,setInitialParameterJacobians();
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,330,/** Get the current value of the jacobian matrix with respect to state.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,331,* @param dYdY0 current jacobian matrix with respect to state.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,333,public void getCurrentMainSetJacobian(final double[][] dYdY0) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,335,// get current state for this set of equations from the expandable fode
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,336,double[] p = efode.getCurrentAdditionalState(this);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,338,int index = 0;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,339,for (int i = 0; i < stateDim; i++) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,340,"System.arraycopy(p, index, dYdY0[i], 0, stateDim);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,341,index += stateDim;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,346,/** Get the current value of the jacobian matrix with respect to one parameter.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,347,* @param pName name of the parameter for the computed jacobian matrix
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,348,* @param dYdP current jacobian matrix with respect to the named parameter
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,350,"public void getCurrentParameterJacobian(String pName, final double[] dYdP) {"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,352,// get current state for this set of equations from the expandable fode
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,353,double[] p = efode.getCurrentAdditionalState(this);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,355,int index = stateDim * stateDim;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,356,for (ParameterConfiguration param: selectedParameters) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,357,if (param.getParameterName().equals(pName)) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,358,"System.arraycopy(p, index, dYdP, 0, stateDim);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,359,break;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,361,index += stateDim;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,366,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,367,public int getDimension() {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,368,return stateDim * (stateDim + paramDim);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,371,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,372,"public void computeDerivatives(final double t, final double[] y, final double[] yDot,"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,373,"final double[] z, final double[] zDot) {"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,375,// Lazy initialization
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,376,if (dirtyMainState) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,377,"jode = new MainStateJacobianWrapper(fode, hY);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,378,dirtyMainState = false;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,380,if (dirtyParameter && (paramDim != 0)) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,381,"pjp.add(new ParameterJacobianWrapper(jode, pode, selectedParameters));"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,382,dirtyParameter = false;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,385,// variational equations:
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,386,// from d[dy/dt]/dy0 and d[dy/dt]/dp to d[dy/dy0]/dt and d[dy/dp]/dt
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,388,// compute jacobian matrix with respect to main state
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,389,double[][] dFdY = new double[stateDim][stateDim];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,390,"jode.computeMainStateJacobian(t, y, yDot, dFdY);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,392,// Dispatch jacobian matrix in the compound additional state vector
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,393,for (int i = 0; i < stateDim; ++i) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,394,final double[] dFdYi = dFdY[i];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,395,for (int j = 0; j < stateDim; ++j) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,396,double s = 0;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,397,final int startIndex = j;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,398,int zIndex = startIndex;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,399,for (int l = 0; l < stateDim; ++l) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,400,s += dFdYi[l] * z[zIndex];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,401,zIndex += stateDim;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,403,zDot[startIndex + i * stateDim] = s;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,407,if (paramDim != 0) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,408,// compute jacobian matrices with respect to parameters
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,409,double[] dFdP = new double[stateDim];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,410,int startIndex = stateDim * stateDim;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,411,for (ParameterConfiguration param: selectedParameters) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,412,boolean found = false;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,413,for (ParameterJacobianProvider provider: pjp) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,414,if (provider.isSupported(param.getParameterName())) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,415,try {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,416,"provider.computeParameterJacobian(t, y, yDot, param.getParameterName(), dFdP);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,417,for (int i = 0; i < stateDim; ++i) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,418,final double[] dFdYi = dFdY[i];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,419,int zIndex = startIndex;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,420,double s = dFdP[i];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,421,for (int l = 0; l < stateDim; ++l) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,422,s += dFdYi[l] * z[zIndex];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,423,zIndex++;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,425,zDot[startIndex + i] = s;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,427,startIndex += stateDim;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,428,found = true;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,429,break;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,430,} catch (IllegalArgumentException iae) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,434,if (! found) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,435,"throw new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_PARAMETER,"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,436,param);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,443,/** Check compatibility between the main set in the expandable ode and an ordinary ode.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,444,* @param expended expandable ode containing a main set
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,445,* @param ode single ode to check
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,446,* @throws MathIllegalArgumentException if single ode doesn't match the main ode set in the extended ode
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,448,"private void checkCompatibility(final ExpandableFirstOrderDifferentialEquations extended,"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,449,final FirstOrderDifferentialEquations ode)
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,450,throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,452,if (!(ode == extended.getMainSet())) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,453,throw new MathIllegalArgumentException(LocalizedFormats.UNMATCHED_ODE_IN_EXTENDED_SET);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,457,/** Check array dimensions.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,458,* @param expected expected dimension
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,459,* @param array (may be null if expected is 0)
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,460,* @throws DimensionMismatchException if the array dimension does not match the expected one
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,462,"private void checkDimension(final int expected, final Object array)"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,463,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,464,int arrayDimension = (array == null) ? 0 : Array.getLength(array);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,465,if (arrayDimension != expected) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,466,"throw new DimensionMismatchException(arrayDimension, expected);"
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,17,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,19,/** Interface expanding {@link FirstOrderDifferentialEquations first order
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,20,*  differential equations} in order to compute exactly the main state jacobian
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,21,*  matrix for {@link JacobianMatrices partial derivatives equations}.
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,23,* @version $Id$
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,24,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,26,public interface MainStateJacobianProvider extends FirstOrderDifferentialEquations {
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,28,/** Compute the jacobian matrix of ODE with respect to main state.
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,29,* @param t current value of the independent <I>time</I> variable
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,30,* @param y array containing the current value of the main state vector
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,31,* @param yDot array containing the current value of the time derivative of the main state vector
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,32,* @param dFdY placeholder array where to put the jacobian matrix of the ODE w.r.t. the main state vector
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianProvider.java,34,"void computeMainStateJacobian(double t, double[] y, double[] yDot, double[][] dFdY);"
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,17,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,19,/** Wrapper class to compute jacobian matrices by finite differences for ODE
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,20,*  which do not compute them by themselves.
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,22,* @version $Id$
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,23,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,25,class MainStateJacobianWrapper implements MainStateJacobianProvider {
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,27,/** Raw ODE without jacobians computation skill to be wrapped into a MainStateJacobianProvider. */
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,28,private final FirstOrderDifferentialEquations ode;
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,30,/** Steps for finite difference computation of the jacobian df/dy w.r.t. state. */
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,31,private final double[] hY;
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,33,/** Wrap a {@link FirstOrderDifferentialEquations} into a {@link MainStateJacobianProvider}.
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,34,"* @param ode original ODE problem, without jacobians computation skill"
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,35,* @param hY step sizes to compute the jacobian df/dy
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,36,* @see JacobianMatrices#setMainStateSteps(double[])
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,38,"public MainStateJacobianWrapper(final FirstOrderDifferentialEquations ode,"
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,39,final double[] hY) {
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,40,this.ode = ode;
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,41,this.hY = hY.clone();
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,44,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,45,public int getDimension() {
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,46,return ode.getDimension();
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,49,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,50,"public void computeDerivatives(double t, double[] y, double[] yDot) {"
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,51,"ode.computeDerivatives(t, y, yDot);"
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,54,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,55,"public void computeMainStateJacobian(double t, double[] y, double[] yDot,"
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,56,double[][] dFdY) {
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,58,final int n = ode.getDimension();
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,59,final double[] tmpDot = new double[n];
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,61,for (int j = 0; j < n; ++j) {
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,62,final double savedYj = y[j];
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,63,y[j] += hY[j];
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,64,"ode.computeDerivatives(t, y, tmpDot);"
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,65,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,66,dFdY[i][j] = (tmpDot[i] - yDot[i]) / hY[j];
True,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,68,y[j] = savedYj;
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,406,rivate class CountingDifferentialEquations implements ExtendedFirstOrderDifferentialEquations {
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,406,private class CountingDifferentialEquations implements FirstOrderDifferentialEquations {
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,428,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,429,ublic int getMainSetDimension() {
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,430,eturn mainSetDimension;
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,17,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,19,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,21,/** Simple container pairing a parameter name with a step in order to compute
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,22,*  the associated jacobian matrix by finite difference.
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,24,* @version $Id$
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,25,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,27,class ParameterConfiguration implements Serializable {
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,29,/** Serializable UID. */
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,30,private static final long serialVersionUID = 2247518849090889379L;
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,32,/** Parameter name. */
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,33,private String parameterName;
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,35,/** Parameter step for finite difference computation. */
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,36,private double hP;
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,38,/** Parameter name and step pair constructor.
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,39,* @param parameterName parameter name
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,40,* @param hP parameter step */
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,41,"public ParameterConfiguration(final String parameterName, final double hP) {"
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,42,this.parameterName = parameterName;
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,43,this.hP = hP;
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,46,/** Get parameter name.
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,47,* @return parameterName parameter name
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,49,public String getParameterName() {
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,50,return parameterName;
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,53,/** Get parameter step.
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,54,* @return hP parameter step
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,56,public double getHP() {
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,57,return hP;
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,60,/** Set parameter step.
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,61,* @param hP parameter step
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,63,public void setHP(final double hP) {
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,64,this.hP = hP;
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,17,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,19,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,21,/** Interface to compute exactly jacobian matrix for some parameter
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,22,*  when computing {@link JacobianMatrices partial derivatives equations}.
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,24,* @version $Id$
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,25,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,27,public interface ParameterJacobianProvider extends Parameterizable {
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,29,/** Compute the jacobian matrix of ODE with respect to one parameter.
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,30,* <p>The parameter must be one given by {@link #getParametersNames()}.</p>
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,31,* @param t current value of the independent <I>time</I> variable
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,32,* @param y array containing the current value of the main state vector
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,33,* @param yDot array containing the current value of the time derivative
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,34,* of the main state vector
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,35,* @param paramName name of the parameter to consider
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,36,* @param dFdP placeholder array where to put the jacobian matrix of the
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,37,* ODE with respect to the parameter
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,38,* @throws MathIllegalArgumentException if the parameter is not supported
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,40,"void computeParameterJacobian(double t, double[] y, double[] yDot,"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,41,"String paramName, double[] dFdP)"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,42,throws MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,17,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,19,import java.util.Collection;
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,20,import java.util.HashMap;
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,21,import java.util.Map;
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,23,/** Wrapper class to compute jacobian matrices by finite differences for ODE
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,24,*  which do not compute them by themselves.
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,26,* @version $Id$
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,27,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,29,class ParameterJacobianWrapper implements ParameterJacobianProvider {
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,31,/** Main ODE set. */
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,32,private final FirstOrderDifferentialEquations fode;
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,34,/** Raw ODE without jacobian computation skill to be wrapped into a ParameterJacobianProvider. */
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,35,private final ParameterizedODE pode;
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,37,/** Steps for finite difference computation of the jacobian df/dp w.r.t. parameters. */
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,38,"private final Map<String, Double> hParam;"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,40,/** Wrap a {@link ParameterizedODE} into a {@link ParameterJacobianProvider}.
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,41,* @param fode main first order differential equations set
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,42,"* @param pode additional problem, without parametre jacobian computation skill"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,43,* @param paramsAndSteps parameters and steps to compute the jacobians df/dp
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,44,"* @see JacobianMatrices#setParameterStep(String, double)"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,46,"public ParameterJacobianWrapper(final FirstOrderDifferentialEquations fode,"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,47,"final ParameterizedODE pode,"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,48,final Collection<ParameterConfiguration> paramsAndSteps) {
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,49,this.fode = fode;
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,50,this.pode = pode;
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,51,"this.hParam = new HashMap<String, Double>();"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,53,// set up parameters for jacobian computation
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,54,for (final ParameterConfiguration param : paramsAndSteps) {
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,55,final String name = param.getParameterName();
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,56,if (pode.isSupported(name)) {
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,57,"hParam.put(name, param.getHP());"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,62,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,63,public Collection<String> getParametersNames() {
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,64,return pode.getParametersNames();
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,67,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,68,public boolean isSupported(String name) {
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,69,return pode.isSupported(name);
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,72,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,73,"public void computeParameterJacobian(double t, double[] y, double[] yDot,"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,74,"String paramName, double[] dFdP) {"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,76,final int n = fode.getDimension();
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,77,final double[] tmpDot = new double[n];
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,79,// compute the jacobian df/dp w.r.t. parameter
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,80,final double p  = pode.getParameter(paramName);
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,81,final double hP = hParam.get(paramName);
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,82,"pode.setParameter(paramName, p + hP);"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,83,"fode.computeDerivatives(t, y, tmpDot);"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,84,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,85,dFdP[i] = (tmpDot[i] - yDot[i]) / hP;
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,87,"pode.setParameter(paramName, p);"
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,17,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,19,import java.util.Collection;
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,21,/** This interface enables to process any parameterizable object.
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,23,* @version $Id$
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,24,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,27,public interface Parameterizable {
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,29,/** Get the names of the supported parameters.
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,30,* @return parameters names
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,31,* @see #isSupported(String)
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,33,Collection<String> getParametersNames();
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,35,/** Check if a parameter is supported.
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,36,* <p>Supported parameters are those listed by {@link #getParametersNames()}.</p>
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,37,* @param name parameter name to check
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,38,* @return true if the parameter is supported
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,39,* @see #getParametersNames()
True,src/main/java/org/apache/commons/math/ode/Parameterizable.java,src/main/java/org/apache/commons/math/ode/Parameterizable.java,41,boolean isSupported(String name);
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,17,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,19,/** Interface to compute by finite difference jacobian matrix for some parameter
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,20,*  when computing {@link JacobianMatrices partial derivatives equations}.
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,22,* @version $Id$
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,23,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,26,public interface ParameterizedODE extends Parameterizable {
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,28,/** Get parameter value from its name.
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,29,* @param name parameter name
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,30,* @return parameter value
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,31,* @exception IllegalArgumentException if parameter is not supported
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,33,double getParameter(String name) throws IllegalArgumentException;
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,35,/** Set the value for a given parameter.
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,36,* @param name parameter name
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,37,* @param value parameter value
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,38,* @exception IllegalArgumentException if parameter is not supported
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,40,"void setParameter(String name, double value) throws IllegalArgumentException;"
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,17,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,20,import java.util.Collection;
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,22,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,23,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,26,/** Wrapper class enabling {@link FirstOrderDifferentialEquations basic simple}
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,27,*  ODE instances to be used when processing {@link JacobianMatrices}.
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,29,* @version $Id$
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,30,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,32,class ParameterizedWrapper implements ParameterizedODE {
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,34,/** Basic FODE without parameter. */
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,35,private final FirstOrderDifferentialEquations fode;
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,37,/** Simple constructor.
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,38,* @param ode original first order differential equations
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,40,public ParameterizedWrapper(final FirstOrderDifferentialEquations ode) {
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,41,this.fode = ode;
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,44,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,45,public int getDimension() {
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,46,return fode.getDimension();
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,49,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,50,"public void computeDerivatives(double t, double[] y, double[] yDot) {"
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,51,"fode.computeDerivatives(t, y, yDot);"
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,54,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,55,public Collection<String> getParametersNames() {
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,56,return new ArrayList<String>();
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,59,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,60,public boolean isSupported(String name) {
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,61,return false;
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,64,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,65,public double getParameter(String name)
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,66,throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,67,if (!isSupported(name)) {
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,68,"throw new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_PARAMETER, name);"
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,70,return Double.NaN;
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,73,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterizedWrapper.java,74,"public void setParameter(String name, double value) {"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,23,mport org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,23,import org.apache.commons.math.ode.ExpandableFirstOrderDifferentialEquations;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,192,"ublic double integrate(final FirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,193,"inal double t0, final double[] y0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,194,"inal double t, final double[] y)"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,192,"public double integrate(final ExpandableFirstOrderDifferentialEquations equations,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,193,"final double t0, final double[] z0,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,194,"final double t, final double[] z)"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,197,inal int n = y0.length;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,198,"anityChecks(equations, t0, y0, t, y);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,197,"sanityChecks(equations, t0, z0, t, z);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,203,final int totalDim = equations.getDimension();
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,204,final int mainDim  = equations.getMainSetDimension();
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,205,final double[] y0  = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,206,final double[] y   = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,207,"System.arraycopy(z0, 0, y0, 0, mainDim);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,208,"System.arraycopy(equations.getCurrentAdditionalStates(), 0, y0, mainDim, totalDim - mainDim);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,205,"ystem.arraycopy(y0, 0, y, 0, n);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,210,"System.arraycopy(y0, 0, y, 0, totalDim);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,207,inal double[] yDot = new double[n];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,212,final double[] yDot = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,320,// dispatch result between main and additional states
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,321,"System.arraycopy(y, 0, z, 0, z.length);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,322,equations.setCurrentAdditionalState(y);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,23,mport org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,23,import org.apache.commons.math.ode.ExpandableFirstOrderDifferentialEquations;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,89,"ublic abstract double integrate(final FirstOrderDifferentialEquations equations,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,89,"public abstract double integrate(final ExpandableFirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,26,mport org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,26,import org.apache.commons.math.ode.ExpandableFirstOrderDifferentialEquations;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,209,"ublic double integrate(final FirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,210,"inal double t0, final double[] y0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,211,"inal double t, final double[] y)"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,209,"public double integrate(final ExpandableFirstOrderDifferentialEquations equations,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,210,"final double t0, final double[] z0,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,211,"final double t, final double[] z)"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,214,inal int n = y0.length;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,215,"anityChecks(equations, t0, y0, t, y);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,214,"sanityChecks(equations, t0, z0, t, z);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,220,final int totalDim = equations.getDimension();
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,221,final int mainDim  = equations.getMainSetDimension();
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,222,final double[] y0  = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,223,final double[] y   = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,224,"System.arraycopy(z0, 0, y0, 0, mainDim);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,225,"System.arraycopy(equations.getCurrentAdditionalStates(), 0, y0, mainDim, totalDim - mainDim);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,222,"ystem.arraycopy(y0, 0, y, 0, n);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,227,"System.arraycopy(y0, 0, y, 0, totalDim);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,224,inal double[] yDot = new double[y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,225,inal double[] yTmp = new double[y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,226,inal double[] predictedScaled = new double[y0.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,229,final double[] yDot = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,230,final double[] yTmp = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,231,final double[] predictedScaled = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,293,"ystem.arraycopy(yTmp, 0, y, 0, n);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,298,"System.arraycopy(yTmp, 0, y, 0, totalDim);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,338,// dispatch result between main and additional states
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,339,"System.arraycopy(y, 0, z, 0, z.length);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,340,equations.setCurrentAdditionalState(y);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,26,mport org.apache.commons.math.ode.ExtendedFirstOrderDifferentialEquations;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,26,import org.apache.commons.math.ode.ExpandableFirstOrderDifferentialEquations;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,46, <p>If the Ordinary Differential Equations is an {@link ExtendedFirstOrderDifferentialEquations
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,47," extended ODE} rather than a {@link FirstOrderDifferentialEquations basic ODE},"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,48, then <em>only</em> the {@link ExtendedFirstOrderDifferentialEquations#getMainSetDimension()
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,49," main set} part of the state vector is used for stepsize control, not the complete"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,50, state vector.
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,45,* <p>
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,46,* If the Ordinary Differential Equations is an {@link ExpandableFirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,47,"* extended ODE} rather than a {@link FirstOrderDifferentialEquations basic ODE}, then"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,48,* <em>only</em> the {@link ExpandableFirstOrderDifferentialEquations#getMainSet() main part}
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,49,"* of the state vector is used for stepsize control, not the complete state vector."
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,227,"rotected void sanityChecks(final FirstOrderDifferentialEquations equations,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,226,"protected void sanityChecks(final ExpandableFirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,234,f (equations instanceof ExtendedFirstOrderDifferentialEquations) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,235,ainSetDimension = ((ExtendedFirstOrderDifferentialEquations) equations).getMainSetDimension();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,236, else {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,237,ainSetDimension = equations.getDimension();
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,233,mainSetDimension = equations.getMainSetDimension();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,251, @param equations differential equations set
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,262,"ublic double initializeStep(final FirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,263,"inal boolean forward, final int order, final double[] scale,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,256,"public double initializeStep(final boolean forward, final int order, final double[] scale,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,359,"ublic abstract double integrate (FirstOrderDifferentialEquations equations,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,352,"public abstract double integrate (ExpandableFirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,22,mport org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,22,import org.apache.commons.math.ode.ExpandableFirstOrderDifferentialEquations;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,192,"ublic double integrate(final FirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,193,"inal double t0, final double[] y0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,194,"inal double t, final double[] y)"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,192,"public double integrate(final ExpandableFirstOrderDifferentialEquations equations,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,193,"final double t0, final double[] z0,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,194,"final double t, final double[] z)"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,197,"anityChecks(equations, t0, y0, t, y);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,197,"sanityChecks(equations, t0, z0, t, z);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,203,final int totalDim = equations.getDimension();
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,204,final int mainDim  = equations.getMainSetDimension();
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,205,final double[] y0  = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,206,final double[] y   = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,207,"System.arraycopy(z0, 0, y0, 0, mainDim);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,208,"System.arraycopy(equations.getCurrentAdditionalStates(), 0, y0, mainDim, totalDim - mainDim);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,205,"ystem.arraycopy(y0, 0, y, 0, y0.length);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,211,"System.arraycopy(y0, 0, y, 0, totalDim);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,207,inal double[][] yDotK = new double[stages][y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,208,inal double[] yTmp    = new double[y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,209,inal double[] yDotTmp = new double[y0.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,213,final double[][] yDotK = new double[stages][totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,214,final double[] yTmp    = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,215,final double[] yDotTmp = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,251,"New = initializeStep(equations, forward, getOrder(), scale,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,257,"hNew = initializeStep(forward, getOrder(), scale,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,334,// dispatch result between main and additional states
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,335,"System.arraycopy(y, 0, z, 0, z.length);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,336,equations.setCurrentAdditionalState(y);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,23,mport org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,23,import org.apache.commons.math.ode.ExpandableFirstOrderDifferentialEquations;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,544,"ublic double integrate(final FirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,545,"inal double t0, final double[] y0, final double t, final double[] y)"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,544,"public double integrate(final ExpandableFirstOrderDifferentialEquations equations,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,545,"final double t0, final double[] z0, final double t, final double[] z)"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,548,"anityChecks(equations, t0, y0, t, y);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,548,"sanityChecks(equations, t0, z0, t, z);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,554,inal double[] yDot0   = new double[y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,555,inal double[] y1      = new double[y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,556,inal double[] yTmp    = new double[y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,557,inal double[] yTmpDot = new double[y0.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,554,final int totalDim = equations.getDimension();
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,555,final int mainDim  = equations.getMainSetDimension();
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,556,final double[] y0 = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,557,final double[] y  = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,558,"System.arraycopy(z0, 0, y0, 0, mainDim);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,559,"System.arraycopy(equations.getCurrentAdditionalStates(), 0, y0, mainDim, totalDim - mainDim);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,560,final double[] yDot0   = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,561,final double[] y1      = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,562,final double[] yTmp    = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,563,final double[] yTmpDot = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,562,iagonal[k] = new double[y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,563,1Diag[k] = new double[y0.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,568,diagonal[k] = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,569,y1Diag[k] = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,634,"New = initializeStep(equations, forward,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,635," * targetIter + 1, scale,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,640,"hNew = initializeStep(forward, 2 * targetIter + 1, scale,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,24,mport org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,24,import org.apache.commons.math.ode.ExpandableFirstOrderDifferentialEquations;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,93,"ublic double integrate(final FirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,94,"inal double t0, final double[] y0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,95,"inal double t, final double[] y)"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,93,"public double integrate(final ExpandableFirstOrderDifferentialEquations equations,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,94,"final double t0, final double[] z0,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,95,"final double t, final double[] z)"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,98,"anityChecks(equations, t0, y0, t, y);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,98,"sanityChecks(equations, t0, z0, t, z);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,104,final int totalDim = equations.getDimension();
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,105,final int mainDim  = equations.getMainSetDimension();
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,106,final double[] y0  = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,107,final double[] y   = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,108,"System.arraycopy(z0, 0, y0, 0, mainDim);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,109,"System.arraycopy(equations.getCurrentAdditionalStates(), 0, y0, mainDim, totalDim - mainDim);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,188,// dispatch result between main and additional states
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,189,"System.arraycopy(y, 0, z, 0, z.length);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,190,equations.setCurrentAdditionalState(y);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,18,package org.apache.commons.math.ode;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,20,import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,21,import org.apache.commons.math.stat.descriptive.SummaryStatistics;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,22,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,24,import org.junit.Test;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,26,public class JacobianMatricesTest {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,28,@Test
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,29,public void testLowAccuracyExternalDifferentiation() {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,30,"// this test does not really test FirstOrderIntegratorWithJacobians,"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,31,"// it only shows that WITHOUT this class, attempting to recover"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,32,// the jacobians from external differentiation on simple integration
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,33,"// results with low accuracy gives very poor results. In fact,"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,34,// the curves dy/dp = g(b) when b varies from 2.88 to 3.08 are
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,35,// essentially noise.
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,36,"// This test is taken from Hairer, Norsett and Wanner book"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,37,"// Solving Ordinary Differential Equations I (Nonstiff problems),"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,38,// the curves dy/dp = g(b) are in figure 6.5
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,39,FirstOrderIntegrator integ =
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,40,"new DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-4, 1.0e-4 }, new double[] { 1.0e-4, 1.0e-4 });"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,41,double hP = 1.0e-12;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,42,SummaryStatistics residualsP0 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,43,SummaryStatistics residualsP1 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,44,for (double b = 2.88; b < 3.08; b += 0.001) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,45,Brusselator brusselator = new Brusselator(b);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,46,"double[] y = { 1.3, b };"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,47,"integ.integrate(brusselator, 0, y, 20.0, y);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,48,"double[] yP = { 1.3, b + hP };"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,49,"integ.integrate(brusselator, 0, yP, 20.0, yP);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,50,residualsP0.addValue((yP[0] - y[0]) / hP - brusselator.dYdP0());
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,51,residualsP1.addValue((yP[1] - y[1]) / hP - brusselator.dYdP1());
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,53,Assert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) > 500);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,54,Assert.assertTrue(residualsP0.getStandardDeviation() > 30);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,55,Assert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) > 700);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,56,Assert.assertTrue(residualsP1.getStandardDeviation() > 40);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,59,@Test
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,60,public void testHighAccuracyExternalDifferentiation() {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,61,FirstOrderIntegrator integ =
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,62,"new DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-10, 1.0e-10 }, new double[] { 1.0e-10, 1.0e-10 });"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,63,double hP = 1.0e-12;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,64,SummaryStatistics residualsP0 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,65,SummaryStatistics residualsP1 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,66,for (double b = 2.88; b < 3.08; b += 0.001) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,67,ParamBrusselator brusselator = new ParamBrusselator(b);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,68,"double[] y = { 1.3, b };"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,69,"integ.integrate(brusselator, 0, y, 20.0, y);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,70,"double[] yP = { 1.3, b + hP };"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,71,"brusselator.setParameter(""b"", b + hP);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,72,"integ.integrate(brusselator, 0, yP, 20.0, yP);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,73,residualsP0.addValue((yP[0] - y[0]) / hP - brusselator.dYdP0());
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,74,residualsP1.addValue((yP[1] - y[1]) / hP - brusselator.dYdP1());
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,76,Assert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) > 0.02);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,77,Assert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) < 0.03);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,78,Assert.assertTrue(residualsP0.getStandardDeviation() > 0.003);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,79,Assert.assertTrue(residualsP0.getStandardDeviation() < 0.004);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,80,Assert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) > 0.04);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,81,Assert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) < 0.05);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,82,Assert.assertTrue(residualsP1.getStandardDeviation() > 0.007);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,83,Assert.assertTrue(residualsP1.getStandardDeviation() < 0.008);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,86,@Test
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,87,public void testInternalDifferentiation() {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,88,ExpandableFirstOrderIntegrator integ =
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,89,"new DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-4, 1.0e-4 }, new double[] { 1.0e-4, 1.0e-4 });"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,90,double hP = 1.0e-12;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,91,double hY = 1.0e-12;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,92,SummaryStatistics residualsP0 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,93,SummaryStatistics residualsP1 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,94,for (double b = 2.88; b < 3.08; b += 0.001) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,95,ParamBrusselator brusselator = new ParamBrusselator(b);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,96,"brusselator.setParameter(ParamBrusselator.B, b);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,97,"double[] z = { 1.3, b };"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,98,double[][] dZdZ0 = new double[2][2];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,99,double[]   dZdP  = new double[2];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,100,ExpandableFirstOrderDifferentialEquations efode = new ExpandableFirstOrderDifferentialEquations(brusselator);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,101,"JacobianMatrices jacob = new JacobianMatrices(efode, brusselator);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,102,jacob.setParameterizedODE(brusselator);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,103,jacob.selectParameters(ParamBrusselator.B);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,104,"jacob.setMainStateSteps(new double[] { hY, hY });"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,105,"jacob.setParameterStep(ParamBrusselator.B, hP);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,106,"jacob.setInitialParameterJacobian(ParamBrusselator.B, new double[] { 0.0, 1.0 });"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,107,integ.setMaxEvaluations(5000);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,108,"integ.integrate(efode, 0, z, 20.0, z);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,109,jacob.getCurrentMainSetJacobian(dZdZ0);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,110,"jacob.getCurrentParameterJacobian(ParamBrusselator.B, dZdP);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,111,"//            Assert.assertEquals(5000, integ.getMaxEvaluations());"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,112,//            Assert.assertTrue(integ.getEvaluations() > 1500);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,113,//            Assert.assertTrue(integ.getEvaluations() < 2100);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,114,"//            Assert.assertEquals(4 * integ.getEvaluations(), integ.getEvaluations());"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,115,residualsP0.addValue(dZdP[0] - brusselator.dYdP0());
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,116,residualsP1.addValue(dZdP[1] - brusselator.dYdP1());
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,118,Assert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) < 0.02);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,119,Assert.assertTrue(residualsP0.getStandardDeviation() < 0.003);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,120,Assert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) < 0.05);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,121,Assert.assertTrue(residualsP1.getStandardDeviation() < 0.01);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,124,@Test
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,125,public void testAnalyticalDifferentiation() {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,126,ExpandableFirstOrderIntegrator integ =
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,127,"new DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-4, 1.0e-4 }, new double[] { 1.0e-4, 1.0e-4 });"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,128,SummaryStatistics residualsP0 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,129,SummaryStatistics residualsP1 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,130,for (double b = 2.88; b < 3.08; b += 0.001) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,131,Brusselator brusselator = new Brusselator(b);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,132,"double[] z = { 1.3, b };"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,133,double[][] dZdZ0 = new double[2][2];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,134,double[]   dZdP  = new double[2];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,135,ExpandableFirstOrderDifferentialEquations efode = new ExpandableFirstOrderDifferentialEquations(brusselator);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,136,"JacobianMatrices jacob = new JacobianMatrices(efode, brusselator);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,137,jacob.setParameterJacobianProvider(brusselator);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,138,jacob.selectParameters(Brusselator.B);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,139,"jacob.setInitialParameterJacobian(Brusselator.B, new double[] { 0.0, 1.0 });"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,140,integ.setMaxEvaluations(5000);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,141,"integ.integrate(efode, 0, z, 20.0, z);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,142,jacob.getCurrentMainSetJacobian(dZdZ0);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,143,"jacob.getCurrentParameterJacobian(Brusselator.B, dZdP);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,144,"//            Assert.assertEquals(5000, integ.getMaxEvaluations());"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,145,//            Assert.assertTrue(integ.getEvaluations() > 350);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,146,//            Assert.assertTrue(integ.getEvaluations() < 510);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,147,residualsP0.addValue(dZdP[0] - brusselator.dYdP0());
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,148,residualsP1.addValue(dZdP[1] - brusselator.dYdP1());
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,150,Assert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) < 0.014);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,151,Assert.assertTrue(residualsP0.getStandardDeviation() < 0.003);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,152,Assert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) < 0.05);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,153,Assert.assertTrue(residualsP1.getStandardDeviation() < 0.01);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,156,@Test
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,157,public void testFinalResult() {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,159,ExpandableFirstOrderIntegrator integ =
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,160,"new DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-10, 1.0e-10 }, new double[] { 1.0e-10, 1.0e-10 });"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,161,"double[] y = new double[] { 0.0, 1.0 };"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,162,"Circle circle = new Circle(y, 1.0, 1.0, 0.1);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,164,ExpandableFirstOrderDifferentialEquations efode = new ExpandableFirstOrderDifferentialEquations(circle);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,165,"JacobianMatrices jacob = new JacobianMatrices(efode, circle);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,166,jacob.setParameterJacobianProvider(circle);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,167,"jacob.selectParameters(Circle.CX, Circle.CY, Circle.OMEGA);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,168,jacob.setInitialMainStateJacobian(circle.exactDyDy0(0));
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,169,"jacob.setInitialParameterJacobian(Circle.CX, circle.exactDyDcx(0));"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,170,"jacob.setInitialParameterJacobian(Circle.CY, circle.exactDyDcy(0));"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,171,"jacob.setInitialParameterJacobian(Circle.OMEGA, circle.exactDyDom(0));"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,172,integ.setMaxEvaluations(5000);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,174,double t = 18 * FastMath.PI;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,175,"integ.integrate(efode, 0, y, t, y);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,176,for (int i = 0; i < y.length; ++i) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,177,"Assert.assertEquals(circle.exactY(t)[i], y[i], 1.0e-9);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,180,double[][] dydy0 = new double[2][2];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,181,jacob.getCurrentMainSetJacobian(dydy0);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,182,for (int i = 0; i < dydy0.length; ++i) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,183,for (int j = 0; j < dydy0[i].length; ++j) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,184,"Assert.assertEquals(circle.exactDyDy0(t)[i][j], dydy0[i][j], 1.0e-9);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,187,double[] dydcx = new double[2];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,188,"jacob.getCurrentParameterJacobian(Circle.CX, dydcx);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,189,for (int i = 0; i < dydcx.length; ++i) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,190,"Assert.assertEquals(circle.exactDyDcx(t)[i], dydcx[i], 1.0e-7);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,192,double[] dydcy = new double[2];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,193,"jacob.getCurrentParameterJacobian(Circle.CY, dydcy);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,194,for (int i = 0; i < dydcy.length; ++i) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,195,"Assert.assertEquals(circle.exactDyDcy(t)[i], dydcy[i], 1.0e-7);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,197,double[] dydom = new double[2];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,198,"jacob.getCurrentParameterJacobian(Circle.OMEGA, dydom);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,199,for (int i = 0; i < dydom.length; ++i) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,200,"Assert.assertEquals(circle.exactDyDom(t)[i], dydom[i], 1.0e-7);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,204,@Test
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,205,public void testParameterizable() {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,207,ExpandableFirstOrderIntegrator integ =
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,208,"new DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-10, 1.0e-10 }, new double[] { 1.0e-10, 1.0e-10 });"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,209,"double[] y = new double[] { 0.0, 1.0 };"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,210,"ParameterizedCircle pcircle = new ParameterizedCircle(y, 1.0, 1.0, 0.1);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,211,"//        pcircle.setParameter(ParameterizedCircle.CX, 1.0);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,212,"//        pcircle.setParameter(ParameterizedCircle.CY, 1.0);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,213,"//        pcircle.setParameter(ParameterizedCircle.OMEGA, 0.1);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,215,ExpandableFirstOrderDifferentialEquations efode = new ExpandableFirstOrderDifferentialEquations(pcircle);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,217,double hP = 1.0e-12;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,218,double hY = 1.0e-12;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,220,"JacobianMatrices jacob = new JacobianMatrices(efode, pcircle);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,221,jacob.setParameterJacobianProvider(pcircle);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,222,jacob.setParameterizedODE(pcircle);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,223,"jacob.selectParameters(Circle.CX, Circle.OMEGA);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,224,"jacob.setMainStateSteps(new double[] { hY, hY });"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,225,"jacob.setParameterStep(Circle.OMEGA, hP);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,226,jacob.setInitialMainStateJacobian(pcircle.exactDyDy0(0));
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,227,"jacob.setInitialParameterJacobian(Circle.CX, pcircle.exactDyDcx(0));"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,228,"//        jacob.setInitialParameterJacobian(Circle.CY, circle.exactDyDcy(0));"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,229,"jacob.setInitialParameterJacobian(Circle.OMEGA, pcircle.exactDyDom(0));"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,230,integ.setMaxEvaluations(50000);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,232,double t = 18 * FastMath.PI;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,233,"integ.integrate(efode, 0, y, t, y);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,234,for (int i = 0; i < y.length; ++i) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,235,"Assert.assertEquals(pcircle.exactY(t)[i], y[i], 1.0e-9);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,238,double[][] dydy0 = new double[2][2];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,239,jacob.getCurrentMainSetJacobian(dydy0);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,240,for (int i = 0; i < dydy0.length; ++i) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,241,for (int j = 0; j < dydy0[i].length; ++j) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,242,"Assert.assertEquals(pcircle.exactDyDy0(t)[i][j], dydy0[i][j], 5.0e-4);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,246,double[] dydp0 = new double[2];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,247,"jacob.getCurrentParameterJacobian(Circle.CX, dydp0);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,248,for (int i = 0; i < dydp0.length; ++i) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,249,"Assert.assertEquals(pcircle.exactDyDcx(t)[i], dydp0[i], 5.0e-4);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,252,double[] dydp1 = new double[2];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,253,"jacob.getCurrentParameterJacobian(Circle.OMEGA, dydp1);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,254,for (int i = 0; i < dydp1.length; ++i) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,255,"Assert.assertEquals(pcircle.exactDyDom(t)[i], dydp1[i], 1.0e-2);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,259,private static class Brusselator extends AbstractParameterizable
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,260,"implements MainStateJacobianProvider, ParameterJacobianProvider {"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,262,"public static final String B = ""b"";"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,264,private double b;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,266,public Brusselator(double b) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,267,super(B);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,268,this.b = b;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,271,public int getDimension() {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,272,return 2;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,275,"public void computeDerivatives(double t, double[] y, double[] yDot) {"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,276,double prod = y[0] * y[0] * y[1];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,277,yDot[0] = 1 + prod - (b + 1) * y[0];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,278,yDot[1] = b * y[0] - prod;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,281,"public void computeMainStateJacobian(double t, double[] y, double[] yDot,"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,282,double[][] dFdY) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,283,double p = 2 * y[0] * y[1];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,284,double y02 = y[0] * y[0];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,285,dFdY[0][0] = p - (1 + b);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,286,dFdY[0][1] = y02;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,287,dFdY[1][0] = b - p;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,288,dFdY[1][1] = -y02;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,291,"public void computeParameterJacobian(double t, double[] y, double[] yDot,"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,292,"String paramName, double[] dFdP) {"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,293,complainIfNotSupported(paramName);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,294,dFdP[0] = -y[0];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,295,dFdP[1] = y[0];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,298,public double dYdP0() {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,299,return -1088.232716447743 + (1050.775747149553 + (-339.012934631828 + 36.52917025056327 * b) * b) * b;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,302,public double dYdP1() {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,303,return 1502.824469929139 + (-1438.6974831849952 + (460.959476642384 - 49.43847385647082 * b) * b) * b;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,308,private static class ParamBrusselator extends AbstractParameterizable
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,309,"implements FirstOrderDifferentialEquations, ParameterizedODE {"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,311,"public static final String B = ""b"";"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,313,private double b;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,315,public ParamBrusselator(double b) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,316,super(B);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,317,this.b = b;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,320,public int getDimension() {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,321,return 2;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,324,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,325,public double getParameter(final String name)
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,326,throws IllegalArgumentException {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,327,complainIfNotSupported(name);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,328,return b;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,331,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,332,"public void setParameter(final String name, final double value)"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,333,throws IllegalArgumentException {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,334,complainIfNotSupported(name);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,335,b = value;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,338,"public void computeDerivatives(double t, double[] y, double[] yDot) {"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,339,double prod = y[0] * y[0] * y[1];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,340,yDot[0] = 1 + prod - (b + 1) * y[0];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,341,yDot[1] = b * y[0] - prod;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,344,public double dYdP0() {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,345,return -1088.232716447743 + (1050.775747149553 + (-339.012934631828 + 36.52917025056327 * b) * b) * b;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,348,public double dYdP1() {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,349,return 1502.824469929139 + (-1438.6974831849952 + (460.959476642384 - 49.43847385647082 * b) * b) * b;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,354,/** ODE representing a point moving on a circle with provided center and angular rate. */
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,355,private static class Circle extends AbstractParameterizable
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,356,"implements MainStateJacobianProvider, ParameterJacobianProvider {"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,358,"public static final String CX = ""cx"";"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,359,"public static final String CY = ""cy"";"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,360,"public static final String OMEGA = ""omega"";"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,362,private final double[] y0;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,363,private double cx;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,364,private double cy;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,365,private double omega;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,367,"public Circle(double[] y0, double cx, double cy, double omega) {"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,368,"super(CX,CY,OMEGA);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,369,this.y0    = y0.clone();
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,370,this.cx    = cx;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,371,this.cy    = cy;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,372,this.omega = omega;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,375,public int getDimension() {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,376,return 2;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,379,"public void computeDerivatives(double t, double[] y, double[] yDot) {"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,380,yDot[0] = omega * (cy - y[1]);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,381,yDot[1] = omega * (y[0] - cx);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,384,"public void computeMainStateJacobian(double t, double[] y,"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,385,"double[] yDot, double[][] dFdY) {"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,386,dFdY[0][0] = 0;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,387,dFdY[0][1] = -omega;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,388,dFdY[1][0] = omega;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,389,dFdY[1][1] = 0;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,392,"public void computeParameterJacobian(double t, double[] y, double[] yDot,"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,393,"String paramName, double[] dFdP) {"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,394,complainIfNotSupported(paramName);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,395,if (paramName.equals(CX)) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,396,dFdP[0] = 0;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,397,dFdP[1] = -omega;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,398,} else if (paramName.equals(CY)) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,399,dFdP[0] = omega;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,400,dFdP[1] = 0;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,401,}  else {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,402,dFdP[0] = cy - y[1];
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,403,dFdP[1] = y[0] - cx;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,407,public double[] exactY(double t) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,408,double cos = FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,409,double sin = FastMath.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,410,double dx0 = y0[0] - cx;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,411,double dy0 = y0[1] - cy;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,412,return new double[] {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,413,"cx + cos * dx0 - sin * dy0,"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,414,cy + sin * dx0 + cos * dy0
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,418,public double[][] exactDyDy0(double t) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,419,double cos = FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,420,double sin = FastMath.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,421,return new double[][] {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,422,"{ cos, -sin },"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,423,"{ sin,  cos }"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,427,public double[] exactDyDcx(double t) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,428,double cos = FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,429,double sin = FastMath.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,430,"return new double[] {1 - cos, -sin};"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,433,public double[] exactDyDcy(double t) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,434,double cos = FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,435,double sin = FastMath.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,436,"return new double[] {sin, 1 - cos};"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,439,public double[] exactDyDom(double t) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,440,double cos = FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,441,double sin = FastMath.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,442,double dx0 = y0[0] - cx;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,443,double dy0 = y0[1] - cy;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,444,"return new double[] { -t * (sin * dx0 + cos * dy0) , t * (cos * dx0 - sin * dy0) };"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,447,public double[][] exactDyDp(double t) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,448,double cos = FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,449,double sin = FastMath.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,450,double dx0 = y0[0] - cx;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,451,double dy0 = y0[1] - cy;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,452,return new double[][] {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,453,"{ 1 - cos, sin,    -t * (sin * dx0 + cos * dy0) },"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,454,"{ -sin,    1 - cos, t * (cos * dx0 - sin * dy0) }"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,458,public double[] exactYDot(double t) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,459,double oCos = omega * FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,460,double oSin = omega * FastMath.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,461,double dx0 = y0[0] - cx;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,462,double dy0 = y0[1] - cy;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,463,return new double[] {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,464,"-oSin * dx0 - oCos * dy0,"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,465,oCos * dx0 - oSin * dy0
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,469,public double[][] exactDyDy0Dot(double t) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,470,double oCos = omega * FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,471,double oSin = omega * FastMath.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,472,return new double[][] {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,473,"{ -oSin, -oCos },"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,474,"{  oCos, -oSin }"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,478,public double[][] exactDyDpDot(double t) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,479,double cos  = FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,480,double sin  = FastMath.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,481,double oCos = omega * cos;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,482,double oSin = omega * sin;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,483,double dx0  = y0[0] - cx;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,484,double dy0  = y0[1] - cy;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,485,return new double[][] {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,486,"{  oSin, oCos, -sin * dx0 - cos * dy0 - t * ( oCos * dx0 - oSin * dy0) },"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,487,"{ -oCos, oSin,  cos * dx0 - sin * dy0 + t * (-oSin * dx0 - oCos * dy0) }"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,493,/** ODE representing a point moving on a circle with provided center and angular rate. */
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,494,private static class ParameterizedCircle extends AbstractParameterizable
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,495,"implements FirstOrderDifferentialEquations, ParameterJacobianProvider, ParameterizedODE {"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,497,"public static final String CX = ""cx"";"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,498,"public static final String CY = ""cy"";"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,499,"public static final String OMEGA = ""omega"";"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,501,private final double[] y0;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,502,private double cx;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,503,private double cy;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,504,private double omega;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,506,"public ParameterizedCircle(double[] y0, double cx, double cy, double omega) {"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,507,"super(CX,CY,OMEGA);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,508,this.y0    = y0.clone();
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,509,this.cx    = cx;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,510,this.cy    = cy;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,511,this.omega = omega;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,514,public int getDimension() {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,515,return 2;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,518,"public void computeDerivatives(double t, double[] y, double[] yDot) {"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,519,yDot[0] = omega * (cy - y[1]);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,520,yDot[1] = omega * (y[0] - cx);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,523,"public void computeParameterJacobian(double t, double[] y, double[] yDot,"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,524,"String paramName, double[] dFdP)"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,525,throws IllegalArgumentException {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,526,if (paramName.equals(CX)) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,527,dFdP[0] = 0;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,528,dFdP[1] = -omega;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,529,} else {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,530,throw new IllegalArgumentException();
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,534,public double getParameter(final String name)
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,535,throws IllegalArgumentException {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,536,if (name.equals(CY)) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,537,return cy;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,538,} else if (name.equals(OMEGA)) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,539,return omega;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,540,} else {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,541,throw new IllegalArgumentException();
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,545,"public void setParameter(final String name, final double value)"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,546,throws IllegalArgumentException {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,547,if (name.equals(CY)) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,548,cy = value;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,549,} else if (name.equals(OMEGA)) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,550,omega = value;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,551,} else {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,552,throw new IllegalArgumentException();
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,556,public double[] exactY(double t) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,557,double cos = FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,558,double sin = FastMath.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,559,double dx0 = y0[0] - cx;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,560,double dy0 = y0[1] - cy;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,561,return new double[] {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,562,"cx + cos * dx0 - sin * dy0,"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,563,cy + sin * dx0 + cos * dy0
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,567,public double[][] exactDyDy0(double t) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,568,double cos = FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,569,double sin = FastMath.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,570,return new double[][] {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,571,"{ cos, -sin },"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,572,"{ sin,  cos }"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,576,public double[] exactDyDcx(double t) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,577,double cos = FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,578,double sin = FastMath.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,579,"return new double[] {1 - cos, -sin};"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,582,public double[] exactDyDcy(double t) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,583,double cos = FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,584,double sin = FastMath.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,585,"return new double[] {sin, 1 - cos};"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,588,public double[] exactDyDom(double t) {
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,589,double cos = FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,590,double sin = FastMath.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,591,double dx0 = y0[0] - cx;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,592,double dy0 = y0[1] - cy;
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,593,"return new double[] { -t * (sin * dx0 + cos * dy0) , t * (cos * dx0 - sin * dy0) };"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,259,ublic void testUnstableDerivative()
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,259,public void testUnstableDerivative() {

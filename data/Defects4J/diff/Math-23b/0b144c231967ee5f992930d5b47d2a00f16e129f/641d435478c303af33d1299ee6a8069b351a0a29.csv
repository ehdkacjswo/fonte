is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,28,mport org.apache.commons.math.exception.NonMonotonicSequenceException;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,29,mport org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,152,ublic Complex[] transform(double[] f)
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,153,hrows MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,150,public Complex[] transform(double[] f) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,171, @throws NonMonotonicSequenceException if the lower bound is greater
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,172," than, or equal to the upper bound"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,173, @throws NotStrictlyPositiveException if the number of sample points
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,174, {@code n} is negative
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,167,* @throws org.apache.commons.math.exception.NumberIsTooLargeException
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,168,"* if the lower bound is greater than, or equal to the upper bound"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,169,* @throws org.apache.commons.math.exception.NotStrictlyPositiveException
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,170,* if the number of sample points {@code n} is negative
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,179,"ouble min, double max, int n) throws"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,180,"onMonotonicSequenceException,"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,181,"otStrictlyPositiveException,"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,182,athIllegalArgumentException {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,175,"double min, double max, int n) {"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,200,ublic Complex[] transform(Complex[] f)
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,201,hrows MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,193,public Complex[] transform(Complex[] f) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,220,ublic Complex[] inverseTransform(double[] f)
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,221,hrows MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,211,public Complex[] inverseTransform(double[] f) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,236, @throws NonMonotonicSequenceException if the lower bound is greater
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,237," than, or equal to the upper bound"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,238, @throws NotStrictlyPositiveException if the number of sample points
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,239, {@code n} is negative
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,225,* @throws org.apache.commons.math.exception.NumberIsTooLargeException
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,226,"* if the lower bound is greater than, or equal to the upper bound"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,227,* @throws org.apache.commons.math.exception.NotStrictlyPositiveException
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,228,* if the number of sample points {@code n} is negative
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,244,"ouble min, double max, int n) throws"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,245,"onMonotonicSequenceException,"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,246,"otStrictlyPositiveException,"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,247,athIllegalArgumentException {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,233,"double min, double max, int n) {"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,262,ublic Complex[] inverseTransform(Complex[] f)
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,263,hrows MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,247,public Complex[] inverseTransform(Complex[] f) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,280,"rotected Complex[] fft(double[] f, boolean isInverse)"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,281,hrows MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,263,"protected Complex[] fft(double[] f, boolean isInverse) {"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,331,rotected Complex[] fft(Complex[] data)
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,332,hrows MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,313,protected Complex[] fft(Complex[] data) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,421,"ublic Object mdfft(Object mdca, boolean forward)"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,422,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,402,"public Object mdfft(Object mdca, boolean forward) {"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,445,"oolean forward, int d, int[] subVector) throws"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,446,llegalArgumentException {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,424,"boolean forward, int d, int[] subVector) {"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,23,import org.apache.commons.math.analysis.function.Sin;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,26,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,27,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,28,import org.apache.commons.math.exception.NumberIsTooLargeException;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,39, The common (for repeatability) seed of all random number generators used
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,40, in this test.
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,42,/** The common seed of all random number generators used in this test. */
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,45, Test of transformer for the ad hoc data taken from Mathematica.
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,46,* Precondition checks for standard transform.
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,47,Test
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,48,ublic void testAdHocData() {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,49,astFourierTransformer transformer = FastFourierTransformer.create();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,50,omplex result[]; double tolerance = 1E-12;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,52,"ouble x[] = {1.3, 2.4, 1.7, 4.1, 2.9, 1.7, 5.1, 2.7};"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,53,omplex y[] = {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,54,"ew Complex(21.9, 0.0),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,55,"ew Complex(-2.09497474683058, 1.91507575950825),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,56,"ew Complex(-2.6, 2.7),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,57,"ew Complex(-1.10502525316942, -4.88492424049175),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,58,"ew Complex(0.1, 0.0),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,59,"ew Complex(-1.10502525316942, 4.88492424049175),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,60,"ew Complex(-2.6, -2.7),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,61,"ew Complex(-2.09497474683058, -1.91507575950825)};"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,49,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,50,public void testStandardTransformComplexSizeNotAPowerOfTwo() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,51,final int n = 127;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,52,final Complex[] x = createComplexData(n);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,53,final FastFourierTransformer fft = FastFourierTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,54,fft.transform(x);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,63,esult = transformer.transform(x);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,64,or (int i = 0; i < result.length; i++) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,65,"ssert.assertEquals(y[i].getReal(), result[i].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,66,"ssert.assertEquals(y[i].getImaginary(), result[i].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,57,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,58,public void testStandardTransformRealSizeNotAPowerOfTwo() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,59,final int n = 127;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,60,final double[] x = createRealData(n);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,61,final FastFourierTransformer fft = FastFourierTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,62,fft.transform(x);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,69,esult = transformer.inverseTransform(y);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,70,or (int i = 0; i < result.length; i++) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,71,"ssert.assertEquals(x[i], result[i].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,72,"ssert.assertEquals(0.0, result[i].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,65,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,66,public void testStandardTransformFunctionSizeNotAPowerOfTwo() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,67,final int n = 127;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,68,final UnivariateFunction f = new Sin();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,69,final FastFourierTransformer fft = FastFourierTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,70,"fft.transform(f, 0.0, Math.PI, n);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,75,"ouble x2[] = {10.4, 21.6, 40.8, 13.6, 23.2, 32.8, 13.6, 19.2};"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,76,"ransformUtils.scaleArray(x2, 1.0 / FastMath.sqrt(x2.length));"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,77,omplex y2[] = y;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,73,@Test(expected = NotStrictlyPositiveException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,74,public void testStandardTransformFunctionNotStrictlyPositiveNumberOfSamples() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,75,final int n = -128;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,76,final UnivariateFunction f = new Sin();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,77,final FastFourierTransformer fft = FastFourierTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,78,"fft.transform(f, 0.0, Math.PI, n);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,79,ransformer = FastFourierTransformer.createUnitary();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,80,esult = transformer.transform(y2);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,81,or (int i = 0; i < result.length; i++) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,82,"ssert.assertEquals(x2[i], result[i].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,83,"ssert.assertEquals(0.0, result[i].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,81,@Test(expected = NumberIsTooLargeException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,82,public void testStandardTransformFunctionInvalidBounds() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,83,final int n = 128;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,84,final UnivariateFunction f = new Sin();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,85,final FastFourierTransformer fft = FastFourierTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,86,"fft.transform(f, Math.PI, 0.0, n);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,86,esult = transformer.inverseTransform(x2);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,87,or (int i = 0; i < result.length; i++) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,88,"ssert.assertEquals(y2[i].getReal(), result[i].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,89,"ssert.assertEquals(y2[i].getImaginary(), result[i].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,89,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,90,public void testStandardInverseTransformComplexSizeNotAPowerOfTwo() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,91,final int n = 127;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,92,final Complex[] x = createComplexData(n);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,93,final FastFourierTransformer fft = FastFourierTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,94,fft.inverseTransform(x);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,93,Test
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,94,ublic void test2DData() {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,95,astFourierTransformer transformer = FastFourierTransformer.create();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,96,ouble tolerance = 1E-12;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,97,"omplex[][] input = new Complex[][] {new Complex[] {new Complex(1, 0),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,98,"ew Complex(2, 0)},"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,99,"ew Complex[] {new Complex(3, 1),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,100,"ew Complex(4, 2)}};"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,101,"omplex[][] goodOutput = new Complex[][] {new Complex[] {new Complex(5,"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,102,".5), new Complex(-1, -.5)}, new Complex[] {new Complex(-2,"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,103,"1.5), new Complex(0, .5)}};"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,104,or (int i = 0; i < goodOutput.length; i++) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,105,ransformUtils.scaleArray(
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,106,"oodOutput[i],"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,107,astMath.sqrt(goodOutput[i].length) *
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,108,astMath.sqrt(goodOutput.length));
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,110,"omplex[][] output = (Complex[][])transformer.mdfft(input, true);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,111,"omplex[][] output2 = (Complex[][])transformer.mdfft(output, false);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,97,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,98,public void testStandardInverseTransformRealSizeNotAPowerOfTwo() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,99,final int n = 127;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,100,final double[] x = createRealData(n);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,101,final FastFourierTransformer fft = FastFourierTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,102,fft.inverseTransform(x);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,113,"ssert.assertEquals(input.length, output.length);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,114,"ssert.assertEquals(input.length, output2.length);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,115,"ssert.assertEquals(input[0].length, output[0].length);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,116,"ssert.assertEquals(input[0].length, output2[0].length);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,117,"ssert.assertEquals(input[1].length, output[1].length);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,118,"ssert.assertEquals(input[1].length, output2[1].length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,105,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,106,public void testStandardInverseTransformFunctionSizeNotAPowerOfTwo() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,107,final int n = 127;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,108,final UnivariateFunction f = new Sin();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,109,final FastFourierTransformer fft = FastFourierTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,110,"fft.inverseTransform(f, 0.0, Math.PI, n);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,120,or (int i = 0; i < input.length; i++) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,121,or (int j = 0; j < input[0].length; j++) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,122,"ssert.assertEquals(input[i][j].getImaginary(), output2[i][j].getImaginary(),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,123,olerance);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,124,"ssert.assertEquals(input[i][j].getReal(), output2[i][j].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,125,"ssert.assertEquals(goodOutput[i][j].getImaginary(), output[i][j].getImaginary(),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,126,olerance);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,127,"ssert.assertEquals(goodOutput[i][j].getReal(), output[i][j].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,113,@Test(expected = NotStrictlyPositiveException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,114,public void testStandardInverseTransformFunctionNotStrictlyPositiveNumberOfSamples() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,115,final int n = -128;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,116,final UnivariateFunction f = new Sin();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,117,final FastFourierTransformer fft = FastFourierTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,118,"fft.inverseTransform(f, 0.0, Math.PI, n);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,132,Test
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,133,ublic void test2DDataUnitary() {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,134,astFourierTransformer transformer = FastFourierTransformer.createUnitary();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,135,ouble tolerance = 1E-12;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,136,"omplex[][] input = new Complex[][] {new Complex[] {new Complex(1, 0),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,137,"ew Complex(2, 0)},"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,138,"ew Complex[] {new Complex(3, 1),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,139,"ew Complex(4, 2)}};"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,140,"omplex[][] goodOutput = new Complex[][] {new Complex[] {new Complex(5,"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,141,".5), new Complex(-1, -.5)}, new Complex[] {new Complex(-2,"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,142,"1.5), new Complex(0, .5)}};"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,143,"omplex[][] output = (Complex[][])transformer.mdfft(input, true);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,144,"omplex[][] output2 = (Complex[][])transformer.mdfft(output, false);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,121,@Test(expected = NumberIsTooLargeException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,122,public void testStandardInverseTransformFunctionInvalidBounds() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,123,final int n = 128;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,124,final UnivariateFunction f = new Sin();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,125,final FastFourierTransformer fft = FastFourierTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,126,"fft.transform(f, Math.PI, 0.0, n);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,146,"ssert.assertEquals(input.length, output.length);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,147,"ssert.assertEquals(input.length, output2.length);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,148,"ssert.assertEquals(input[0].length, output[0].length);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,149,"ssert.assertEquals(input[0].length, output2[0].length);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,150,"ssert.assertEquals(input[1].length, output[1].length);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,151,"ssert.assertEquals(input[1].length, output2[1].length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,130,* Precondition checks for unitary transform.
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,153,or (int i = 0; i < input.length; i++) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,154,or (int j = 0; j < input[0].length; j++) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,155,"ssert.assertEquals(input[i][j].getImaginary(), output2[i][j].getImaginary(),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,156,olerance);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,157,"ssert.assertEquals(input[i][j].getReal(), output2[i][j].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,158,"ssert.assertEquals(goodOutput[i][j].getImaginary(), output[i][j].getImaginary(),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,159,olerance);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,160,"ssert.assertEquals(goodOutput[i][j].getReal(), output[i][j].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,133,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,134,public void testUnitaryTransformComplexSizeNotAPowerOfTwo() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,135,final int n = 127;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,136,final Complex[] x = createComplexData(n);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,137,final FastFourierTransformer fft = FastFourierTransformer.createUnitary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,138,fft.transform(x);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,166, Test of transformer for the sine function.
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,168,Test
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,169,ublic void testSinFunction() {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,170,nivariateFunction f = new SinFunction();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,171,astFourierTransformer transformer = FastFourierTransformer.create();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,172,omplex result[]; int N = 1 << 8;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,173,"ouble min, max, tolerance = 1E-12;"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,141,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,142,public void testUnitaryTransformRealSizeNotAPowerOfTwo() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,143,final int n = 127;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,144,final double[] x = createRealData(n);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,145,final FastFourierTransformer fft = FastFourierTransformer.createUnitary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,146,fft.transform(x);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,175,in = 0.0; max = 2.0 * FastMath.PI;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,176,"esult = transformer.transform(f, min, max, N);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,177,"ssert.assertEquals(0.0, result[1].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,178,"ssert.assertEquals(-(N >> 1), result[1].getImaginary(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,179,"ssert.assertEquals(0.0, result[N-1].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,180,"ssert.assertEquals(N >> 1, result[N-1].getImaginary(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,181,or (int i = 0; i < N-1; i += (i == 0 ? 2 : 1)) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,182,"ssert.assertEquals(0.0, result[i].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,183,"ssert.assertEquals(0.0, result[i].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,149,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,150,public void testUnitaryTransformFunctionSizeNotAPowerOfTwo() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,151,final int n = 127;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,152,final UnivariateFunction f = new Sin();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,153,final FastFourierTransformer fft = FastFourierTransformer.createUnitary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,154,"fft.transform(f, 0.0, Math.PI, n);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,186,in = -FastMath.PI; max = FastMath.PI;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,187,"esult = transformer.inverseTransform(f, min, max, N);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,188,"ssert.assertEquals(0.0, result[1].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,189,"ssert.assertEquals(-0.5, result[1].getImaginary(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,190,"ssert.assertEquals(0.0, result[N-1].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,191,"ssert.assertEquals(0.5, result[N-1].getImaginary(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,192,or (int i = 0; i < N-1; i += (i == 0 ? 2 : 1)) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,193,"ssert.assertEquals(0.0, result[i].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,194,"ssert.assertEquals(0.0, result[i].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,157,@Test(expected = NotStrictlyPositiveException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,158,public void testUnitaryTransformFunctionNotStrictlyPositiveNumberOfSamples() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,159,final int n = -128;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,160,final UnivariateFunction f = new Sin();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,161,final FastFourierTransformer fft = FastFourierTransformer.createUnitary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,162,"fft.transform(f, 0.0, Math.PI, n);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,199, Test of parameters for the transformer.
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,165,@Test(expected = NumberIsTooLargeException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,166,public void testUnitaryTransformFunctionInvalidBounds() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,167,final int n = 128;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,168,final UnivariateFunction f = new Sin();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,169,final FastFourierTransformer fft = FastFourierTransformer.createUnitary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,170,"fft.transform(f, Math.PI, 0.0, n);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,173,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,174,public void testUnitaryInverseTransformComplexSizeNotAPowerOfTwo() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,175,final int n = 127;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,176,final Complex[] x = createComplexData(n);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,177,final FastFourierTransformer fft = FastFourierTransformer.createUnitary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,178,fft.inverseTransform(x);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,181,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,182,public void testUnitaryInverseTransformRealSizeNotAPowerOfTwo() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,183,final int n = 127;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,184,final double[] x = createRealData(n);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,185,final FastFourierTransformer fft = FastFourierTransformer.createUnitary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,186,fft.inverseTransform(x);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,189,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,190,public void testUnitaryInverseTransformFunctionSizeNotAPowerOfTwo() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,191,final int n = 127;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,192,final UnivariateFunction f = new Sin();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,193,final FastFourierTransformer fft = FastFourierTransformer.createUnitary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,194,"fft.inverseTransform(f, 0.0, Math.PI, n);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,197,@Test(expected = NotStrictlyPositiveException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,198,public void testUnitaryInverseTransformFunctionNotStrictlyPositiveNumberOfSamples() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,199,final int n = -128;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,200,final UnivariateFunction f = new Sin();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,201,final FastFourierTransformer fft = FastFourierTransformer.createUnitary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,202,"fft.inverseTransform(f, 0.0, Math.PI, n);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,205,@Test(expected = NumberIsTooLargeException.class)
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,206,public void testUnitaryInverseTransformFunctionInvalidBounds() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,207,final int n = 128;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,208,final UnivariateFunction f = new Sin();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,209,final FastFourierTransformer fft = FastFourierTransformer.createUnitary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,210,"fft.transform(f, Math.PI, 0.0, n);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,214,* Utility methods for checking (successful) transforms.
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,201,Test
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,202,ublic void testParameters() throws Exception {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,203,nivariateFunction f = new SinFunction();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,204,astFourierTransformer transformer = FastFourierTransformer.create();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,206,ry {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,207,/ bad interval
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,208,"ransformer.transform(f, 1, -1, 64);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,209,"ssert.fail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,210, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,211,/ expected
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,213,ry {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,214,/ bad samples number
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,215,"ransformer.transform(f, -1, 1, 0);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,216,"ssert.fail(""Expecting IllegalArgumentException - bad samples number"");"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,217, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,218,/ expected
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,217,private static Complex[] createComplexData(final int n) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,218,final Random random = new Random(SEED);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,219,final Complex[] data = new Complex[n];
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,220,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,221,final double re = 2.0 * random.nextDouble() - 1.0;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,222,final double im = 2.0 * random.nextDouble() - 1.0;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,223,"data[i] = new Complex(re, im);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,220,ry {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,221,/ bad samples number
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,222,"ransformer.transform(f, -1, 1, 100);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,223,"ssert.fail(""Expecting IllegalArgumentException - bad samples number"");"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,224, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,225,/ expected
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,225,return data;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,228,private static double[] createRealData(final int n) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,229,final Random random = new Random(SEED);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,230,final double[] data = new double[n];
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,231,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,232,data[i] = 2.0 * random.nextDouble() - 1.0;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,234,return data;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,257,Test
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,258,ublic void testStandardTransformComplex() {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,259,inal boolean forward = true;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,260,inal boolean standard = true;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,261,"oTestTransformComplex(2, 1.0E-15, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,262,"oTestTransformComplex(4, 1.0E-14, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,263,"oTestTransformComplex(8, 1.0E-14, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,264,"oTestTransformComplex(16, 1.0E-13, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,265,"oTestTransformComplex(32, 1.0E-13, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,266,"oTestTransformComplex(64, 1.0E-13, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,267,"oTestTransformComplex(128, 1.0E-12, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,270,Test
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,271,ublic void testUnitaryTransformComplex() {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,272,inal boolean forward = true;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,273,inal boolean standard = false;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,274,"oTestTransformComplex(2, 1.0E-15, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,275,"oTestTransformComplex(4, 1.0E-14, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,276,"oTestTransformComplex(8, 1.0E-14, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,277,"oTestTransformComplex(16, 1.0E-13, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,278,"oTestTransformComplex(32, 1.0E-13, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,279,"oTestTransformComplex(64, 1.0E-13, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,280,"oTestTransformComplex(128, 1.0E-12, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,283,Test
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,284,ublic void testStandardInverseTransformComplex() {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,285,inal boolean forward = false;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,286,inal boolean standard = true;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,287,"oTestTransformComplex(2, 1.0E-15, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,288,"oTestTransformComplex(4, 1.0E-14, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,289,"oTestTransformComplex(8, 1.0E-14, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,290,"oTestTransformComplex(16, 1.0E-13, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,291,"oTestTransformComplex(32, 1.0E-13, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,292,"oTestTransformComplex(64, 1.0E-12, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,293,"oTestTransformComplex(128, 1.0E-12, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,265,"private static void doTestTransformComplex(final int n, final double tol,"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,266,"final boolean forward, final boolean standard) {"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,267,final FastFourierTransformer fft;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,268,if (standard) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,269,fft = FastFourierTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,270,} else {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,271,fft = FastFourierTransformer.createUnitary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,273,final Complex[] x = createComplexData(n);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,274,final Complex[] expected;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,275,final Complex[] actual;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,276,final double s;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,277,if (forward) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,278,"expected = dft(x, -1);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,279,s = standard ? 1.0 : 1.0 / FastMath.sqrt(n);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,280,actual = fft.transform(x);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,281,} else {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,282,"expected = dft(x, 1);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,283,s = standard ? 1.0 / n : 1.0 / FastMath.sqrt(n);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,284,actual = fft.inverseTransform(x);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,286,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,287,"final String msg = String.format(""%d, %d"", n, i);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,288,final double re = s * expected[i].getReal();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,289,"Assert.assertEquals(msg, re, actual[i].getReal(),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,290,tol * FastMath.abs(re));
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,291,final double im = s * expected[i].getImaginary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,292,"Assert.assertEquals(msg, im, actual[i].getImaginary(), tol *"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,293,FastMath.abs(re));
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,296,Test
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,297,ublic void testUnitaryInverseTransformComplex() {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,298,inal boolean forward = false;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,299,inal boolean standard = false;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,297,"private static void doTestTransformReal(final int n, final double tol,"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,298,"final boolean forward, final boolean standard) {"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,299,final FastFourierTransformer fft;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,300,if (standard) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,301,fft = FastFourierTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,302,} else {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,303,fft = FastFourierTransformer.createUnitary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,305,final double[] x = createRealData(n);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,306,final Complex[] xc = new Complex[n];
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,307,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,308,"xc[i] = new Complex(x[i], 0.0);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,310,final Complex[] expected;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,311,final Complex[] actual;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,312,final double s;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,313,if (forward) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,314,"expected = dft(xc, -1);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,315,s = standard ? 1.0 : 1.0 / FastMath.sqrt(n);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,316,actual = fft.transform(x);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,317,} else {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,318,"expected = dft(xc, 1);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,319,s = standard ? 1.0 / n : 1.0 / FastMath.sqrt(n);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,320,actual = fft.inverseTransform(x);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,322,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,323,"final String msg = String.format(""%d, %d"", n, i);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,324,final double re = s * expected[i].getReal();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,325,"Assert.assertEquals(msg, re, actual[i].getReal(),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,326,tol * FastMath.abs(re));
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,327,final double im = s * expected[i].getImaginary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,328,"Assert.assertEquals(msg, im, actual[i].getImaginary(), tol *"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,329,FastMath.abs(re));
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,333,"private static void doTestTransformFunction(final UnivariateFunction f,"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,334,"final double min, final double max, int n, final double tol,"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,335,"final boolean forward, final boolean standard) {"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,336,final FastFourierTransformer fft;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,337,if (standard) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,338,fft = FastFourierTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,339,} else {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,340,fft = FastFourierTransformer.createUnitary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,342,final Complex[] x = new Complex[n];
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,343,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,344,final double t = min + i * (max - min) / n;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,345,x[i] = new Complex(f.value(t));
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,347,final Complex[] expected;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,348,final Complex[] actual;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,349,final double s;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,350,if (forward) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,351,"expected = dft(x, -1);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,352,s = standard ? 1.0 : 1.0 / FastMath.sqrt(n);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,353,"actual = fft.transform(f, min, max, n);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,354,} else {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,355,"expected = dft(x, 1);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,356,s = standard ? 1.0 / n : 1.0 / FastMath.sqrt(n);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,357,"actual = fft.inverseTransform(f, min, max, n);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,359,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,360,"final String msg = String.format(""%d, %d"", n, i);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,361,final double re = s * expected[i].getReal();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,362,"Assert.assertEquals(msg, re, actual[i].getReal(),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,363,tol * FastMath.abs(re));
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,364,final double im = s * expected[i].getImaginary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,365,"Assert.assertEquals(msg, im, actual[i].getImaginary(), tol *"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,366,FastMath.abs(re));
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,371,* Tests of standard transform (when data is valid).
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,374,@Test
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,375,public void testStandardTransformComplex() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,376,final boolean forward = true;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,377,final boolean standard = true;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,305,"oTestTransformComplex(64, 1.0E-12, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,383,"doTestTransformComplex(64, 1.0E-13, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,323,ublic void testUnitaryTransformReal() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,401,public void testStandardTransformFunction() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,402,final UnivariateFunction f = new Sinc();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,403,final double min = -FastMath.PI;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,404,final double max = FastMath.PI;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,325,inal boolean standard = false;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,326,"oTestTransformReal(2, 1.0E-15, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,327,"oTestTransformReal(4, 1.0E-14, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,328,"oTestTransformReal(8, 1.0E-14, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,329,"oTestTransformReal(16, 1.0E-13, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,330,"oTestTransformReal(32, 1.0E-13, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,331,"oTestTransformReal(64, 1.0E-13, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,332,"oTestTransformReal(128, 1.0E-11, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,406,final boolean standard = true;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,407,"doTestTransformFunction(f, min, max, 2, 1.0E-15, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,408,"doTestTransformFunction(f, min, max, 4, 1.0E-14, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,409,"doTestTransformFunction(f, min, max, 8, 1.0E-14, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,410,"doTestTransformFunction(f, min, max, 16, 1.0E-13, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,411,"doTestTransformFunction(f, min, max, 32, 1.0E-13, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,412,"doTestTransformFunction(f, min, max, 64, 1.0E-12, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,413,"doTestTransformFunction(f, min, max, 128, 1.0E-11, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,336,ublic void testStandardInverseTransformReal() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,417,public void testStandardInverseTransformComplex() {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,339,"oTestTransformReal(2, 1.0E-15, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,340,"oTestTransformReal(4, 1.0E-14, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,341,"oTestTransformReal(8, 1.0E-14, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,342,"oTestTransformReal(16, 1.0E-13, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,343,"oTestTransformReal(32, 1.0E-13, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,344,"oTestTransformReal(64, 1.0E-12, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,345,"oTestTransformReal(128, 1.0E-11, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,420,"doTestTransformComplex(2, 1.0E-15, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,421,"doTestTransformComplex(4, 1.0E-14, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,422,"doTestTransformComplex(8, 1.0E-14, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,423,"doTestTransformComplex(16, 1.0E-13, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,424,"doTestTransformComplex(32, 1.0E-13, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,425,"doTestTransformComplex(64, 1.0E-12, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,426,"doTestTransformComplex(128, 1.0E-12, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,349,ublic void testUnitaryInverseTransformReal() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,430,public void testStandardInverseTransformReal() {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,351,inal boolean standard = false;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,432,final boolean standard = true;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,362,ublic void testStandardTransformFunction() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,443,public void testStandardInverseTransformFunction() {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,366,inal boolean forward = true;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,447,final boolean forward = false;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,459,* Tests of unitary transform (when data is valid).
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,462,@Test
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,463,public void testUnitaryTransformComplex() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,464,final boolean forward = true;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,465,final boolean standard = false;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,466,"doTestTransformComplex(2, 1.0E-15, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,467,"doTestTransformComplex(4, 1.0E-14, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,468,"doTestTransformComplex(8, 1.0E-14, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,469,"doTestTransformComplex(16, 1.0E-13, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,470,"doTestTransformComplex(32, 1.0E-13, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,471,"doTestTransformComplex(64, 1.0E-13, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,472,"doTestTransformComplex(128, 1.0E-12, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,475,@Test
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,476,public void testUnitaryTransformReal() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,477,final boolean forward = true;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,478,final boolean standard = false;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,479,"doTestTransformReal(2, 1.0E-15, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,480,"doTestTransformReal(4, 1.0E-14, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,481,"doTestTransformReal(8, 1.0E-14, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,482,"doTestTransformReal(16, 1.0E-13, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,483,"doTestTransformReal(32, 1.0E-13, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,484,"doTestTransformReal(64, 1.0E-13, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,485,"doTestTransformReal(128, 1.0E-11, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,394,ublic void testStandardInverseTransformFunction() {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,395,inal UnivariateFunction f = new Sinc();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,396,inal double min = -FastMath.PI;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,397,inal double max = FastMath.PI;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,505,public void testUnitaryInverseTransformComplex() {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,399,inal boolean standard = true;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,400,"oTestTransformFunction(f, min, max, 2, 1.0E-15, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,401,"oTestTransformFunction(f, min, max, 4, 1.0E-14, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,402,"oTestTransformFunction(f, min, max, 8, 1.0E-14, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,403,"oTestTransformFunction(f, min, max, 16, 1.0E-13, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,404,"oTestTransformFunction(f, min, max, 32, 1.0E-13, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,405,"oTestTransformFunction(f, min, max, 64, 1.0E-12, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,406,"oTestTransformFunction(f, min, max, 128, 1.0E-11, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,507,final boolean standard = false;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,508,"doTestTransformComplex(2, 1.0E-15, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,509,"doTestTransformComplex(4, 1.0E-14, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,510,"doTestTransformComplex(8, 1.0E-14, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,511,"doTestTransformComplex(16, 1.0E-13, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,512,"doTestTransformComplex(32, 1.0E-13, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,513,"doTestTransformComplex(64, 1.0E-12, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,514,"doTestTransformComplex(128, 1.0E-12, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,517,@Test
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,518,public void testUnitaryInverseTransformReal() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,519,final boolean forward = false;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,520,final boolean standard = false;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,521,"doTestTransformReal(2, 1.0E-15, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,522,"doTestTransformReal(4, 1.0E-14, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,523,"doTestTransformReal(8, 1.0E-14, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,524,"doTestTransformReal(16, 1.0E-13, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,525,"doTestTransformReal(32, 1.0E-13, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,526,"doTestTransformReal(64, 1.0E-12, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,527,"doTestTransformReal(128, 1.0E-11, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,425,rivate static Complex[] createComplexData(final int n) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,426,inal Random random = new Random(SEED);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,427,inal Complex[] data = new Complex[n];
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,428,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,429,inal double re = 2.0 * random.nextDouble() - 1.0;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,430,inal double im = 2.0 * random.nextDouble() - 1.0;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,431,"ata[i] = new Complex(re, im);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,433,eturn data;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,547,* Additional tests for 1D data.
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,436,rivate static double[] createRealData(final int n) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,437,inal Random random = new Random(SEED);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,438,inal double[] data = new double[n];
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,439,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,440,ata[i] = 2.0 * random.nextDouble() - 1.0;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,551,* Test of transformer for the ad hoc data taken from Mathematica.
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,553,@Test
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,554,public void testAdHocData() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,555,FastFourierTransformer transformer = FastFourierTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,556,Complex result[]; double tolerance = 1E-12;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,558,"double x[] = {1.3, 2.4, 1.7, 4.1, 2.9, 1.7, 5.1, 2.7};"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,559,Complex y[] = {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,560,"new Complex(21.9, 0.0),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,561,"new Complex(-2.09497474683058, 1.91507575950825),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,562,"new Complex(-2.6, 2.7),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,563,"new Complex(-1.10502525316942, -4.88492424049175),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,564,"new Complex(0.1, 0.0),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,565,"new Complex(-1.10502525316942, 4.88492424049175),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,566,"new Complex(-2.6, -2.7),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,567,"new Complex(-2.09497474683058, -1.91507575950825)};"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,569,result = transformer.transform(x);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,570,for (int i = 0; i < result.length; i++) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,571,"Assert.assertEquals(y[i].getReal(), result[i].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,572,"Assert.assertEquals(y[i].getImaginary(), result[i].getImaginary(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,442,eturn data;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,445,"rivate static void doTestTransformComplex(final int n, final double tol,"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,446,"inal boolean forward, final boolean standard) {"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,447,inal FastFourierTransformer fft;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,448,f (standard) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,449,ft = FastFourierTransformer.create();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,450, else {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,451,ft = FastFourierTransformer.createUnitary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,575,result = transformer.inverseTransform(y);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,576,for (int i = 0; i < result.length; i++) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,577,"Assert.assertEquals(x[i], result[i].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,578,"Assert.assertEquals(0.0, result[i].getImaginary(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,453,inal Complex[] x = createComplexData(n);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,454,inal Complex[] expected;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,455,inal Complex[] actual;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,456,inal double s;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,457,f (forward) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,458,"xpected = dft(x, -1);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,459, = standard ? 1.0 : 1.0 / FastMath.sqrt(n);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,460,ctual = fft.transform(x);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,461, else {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,462,"xpected = dft(x, 1);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,463, = standard ? 1.0 / n : 1.0 / FastMath.sqrt(n);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,464,ctual = fft.inverseTransform(x);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,581,"double x2[] = {10.4, 21.6, 40.8, 13.6, 23.2, 32.8, 13.6, 19.2};"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,582,"TransformUtils.scaleArray(x2, 1.0 / FastMath.sqrt(x2.length));"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,583,Complex y2[] = y;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,585,transformer = FastFourierTransformer.createUnitary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,586,result = transformer.transform(y2);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,587,for (int i = 0; i < result.length; i++) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,588,"Assert.assertEquals(x2[i], result[i].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,589,"Assert.assertEquals(0.0, result[i].getImaginary(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,466,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,467,"inal String msg = String.format(""%d, %d"", n, i);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,468,inal double re = s * expected[i].getReal();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,469,"ssert.assertEquals(msg, re, actual[i].getReal(),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,470,ol * FastMath.abs(re));
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,471,inal double im = s * expected[i].getImaginary();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,472,"ssert.assertEquals(msg, im, actual[i].getImaginary(), tol *"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,473,astMath.abs(re));
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,592,result = transformer.inverseTransform(x2);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,593,for (int i = 0; i < result.length; i++) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,594,"Assert.assertEquals(y2[i].getReal(), result[i].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,595,"Assert.assertEquals(y2[i].getImaginary(), result[i].getImaginary(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,477,"rivate static void doTestTransformReal(final int n, final double tol,"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,478,"inal boolean forward, final boolean standard) {"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,479,inal FastFourierTransformer fft;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,480,f (standard) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,481,ft = FastFourierTransformer.create();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,482, else {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,483,ft = FastFourierTransformer.createUnitary();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,485,inal double[] x = createRealData(n);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,486,inal Complex[] xc = new Complex[n];
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,487,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,488,"c[i] = new Complex(x[i], 0.0);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,490,inal Complex[] expected;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,491,inal Complex[] actual;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,492,inal double s;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,493,f (forward) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,494,"xpected = dft(xc, -1);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,495, = standard ? 1.0 : 1.0 / FastMath.sqrt(n);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,496,ctual = fft.transform(x);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,497, else {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,498,"xpected = dft(xc, 1);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,499, = standard ? 1.0 / n : 1.0 / FastMath.sqrt(n);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,500,ctual = fft.inverseTransform(x);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,600,* Test of transformer for the sine function.
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,602,@Test
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,603,public void testSinFunction() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,604,UnivariateFunction f = new SinFunction();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,605,FastFourierTransformer transformer = FastFourierTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,606,Complex result[]; int N = 1 << 8;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,607,"double min, max, tolerance = 1E-12;"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,609,min = 0.0; max = 2.0 * FastMath.PI;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,610,"result = transformer.transform(f, min, max, N);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,611,"Assert.assertEquals(0.0, result[1].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,612,"Assert.assertEquals(-(N >> 1), result[1].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,613,"Assert.assertEquals(0.0, result[N-1].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,614,"Assert.assertEquals(N >> 1, result[N-1].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,615,for (int i = 0; i < N-1; i += (i == 0 ? 2 : 1)) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,616,"Assert.assertEquals(0.0, result[i].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,617,"Assert.assertEquals(0.0, result[i].getImaginary(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,502,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,503,"inal String msg = String.format(""%d, %d"", n, i);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,504,inal double re = s * expected[i].getReal();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,505,"ssert.assertEquals(msg, re, actual[i].getReal(),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,506,ol * FastMath.abs(re));
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,507,inal double im = s * expected[i].getImaginary();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,508,"ssert.assertEquals(msg, im, actual[i].getImaginary(), tol *"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,509,astMath.abs(re));
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,620,min = -FastMath.PI; max = FastMath.PI;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,621,"result = transformer.inverseTransform(f, min, max, N);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,622,"Assert.assertEquals(0.0, result[1].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,623,"Assert.assertEquals(-0.5, result[1].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,624,"Assert.assertEquals(0.0, result[N-1].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,625,"Assert.assertEquals(0.5, result[N-1].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,626,for (int i = 0; i < N-1; i += (i == 0 ? 2 : 1)) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,627,"Assert.assertEquals(0.0, result[i].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,628,"Assert.assertEquals(0.0, result[i].getImaginary(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,513,"rivate static void doTestTransformFunction(final UnivariateFunction f,"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,514,"inal double min, final double max, int n, final double tol,"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,515,"inal boolean forward, final boolean standard) {"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,516,inal FastFourierTransformer fft;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,517,f (standard) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,518,ft = FastFourierTransformer.create();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,519, else {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,520,ft = FastFourierTransformer.createUnitary();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,522,inal Complex[] x = new Complex[n];
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,523,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,524,inal double t = min + i * (max - min) / n;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,525,[i] = new Complex(f.value(t));
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,633,* Additional tests for 2D data.
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,636,@Test
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,637,public void test2DData() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,638,FastFourierTransformer transformer = FastFourierTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,639,double tolerance = 1E-12;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,640,"Complex[][] input = new Complex[][] {new Complex[] {new Complex(1, 0),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,641,"new Complex(2, 0)},"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,642,"new Complex[] {new Complex(3, 1),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,643,"new Complex(4, 2)}};"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,644,"Complex[][] goodOutput = new Complex[][] {new Complex[] {new Complex(5,"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,645,"1.5), new Complex(-1, -.5)}, new Complex[] {new Complex(-2,"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,646,"-1.5), new Complex(0, .5)}};"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,647,for (int i = 0; i < goodOutput.length; i++) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,648,TransformUtils.scaleArray(
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,649,"goodOutput[i],"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,650,FastMath.sqrt(goodOutput[i].length) *
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,651,FastMath.sqrt(goodOutput.length));
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,527,inal Complex[] expected;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,528,inal Complex[] actual;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,529,inal double s;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,530,f (forward) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,531,"xpected = dft(x, -1);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,532, = standard ? 1.0 : 1.0 / FastMath.sqrt(n);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,533,"ctual = fft.transform(f, min, max, n);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,534, else {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,535,"xpected = dft(x, 1);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,536, = standard ? 1.0 / n : 1.0 / FastMath.sqrt(n);
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,537,"ctual = fft.inverseTransform(f, min, max, n);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,653,"Complex[][] output = (Complex[][])transformer.mdfft(input, true);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,654,"Complex[][] output2 = (Complex[][])transformer.mdfft(output, false);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,656,"Assert.assertEquals(input.length, output.length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,657,"Assert.assertEquals(input.length, output2.length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,658,"Assert.assertEquals(input[0].length, output[0].length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,659,"Assert.assertEquals(input[0].length, output2[0].length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,660,"Assert.assertEquals(input[1].length, output[1].length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,661,"Assert.assertEquals(input[1].length, output2[1].length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,663,for (int i = 0; i < input.length; i++) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,664,for (int j = 0; j < input[0].length; j++) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,665,"Assert.assertEquals(input[i][j].getImaginary(), output2[i][j].getImaginary(),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,666,tolerance);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,667,"Assert.assertEquals(input[i][j].getReal(), output2[i][j].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,668,"Assert.assertEquals(goodOutput[i][j].getImaginary(), output[i][j].getImaginary(),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,669,tolerance);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,670,"Assert.assertEquals(goodOutput[i][j].getReal(), output[i][j].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,539,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,540,"inal String msg = String.format(""%d, %d"", n, i);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,541,inal double re = s * expected[i].getReal();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,542,"ssert.assertEquals(msg, re, actual[i].getReal(),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,543,ol * FastMath.abs(re));
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,544,inal double im = s * expected[i].getImaginary();
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,545,"ssert.assertEquals(msg, im, actual[i].getImaginary(), tol *"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,546,astMath.abs(re));
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,675,@Test
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,676,public void test2DDataUnitary() {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,677,FastFourierTransformer transformer = FastFourierTransformer.createUnitary();
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,678,double tolerance = 1E-12;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,679,"Complex[][] input = new Complex[][] {new Complex[] {new Complex(1, 0),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,680,"new Complex(2, 0)},"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,681,"new Complex[] {new Complex(3, 1),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,682,"new Complex(4, 2)}};"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,683,"Complex[][] goodOutput = new Complex[][] {new Complex[] {new Complex(5,"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,684,"1.5), new Complex(-1, -.5)}, new Complex[] {new Complex(-2,"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,685,"-1.5), new Complex(0, .5)}};"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,686,"Complex[][] output = (Complex[][])transformer.mdfft(input, true);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,687,"Complex[][] output2 = (Complex[][])transformer.mdfft(output, false);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,689,"Assert.assertEquals(input.length, output.length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,690,"Assert.assertEquals(input.length, output2.length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,691,"Assert.assertEquals(input[0].length, output[0].length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,692,"Assert.assertEquals(input[0].length, output2[0].length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,693,"Assert.assertEquals(input[1].length, output[1].length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,694,"Assert.assertEquals(input[1].length, output2[1].length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,696,for (int i = 0; i < input.length; i++) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,697,for (int j = 0; j < input[0].length; j++) {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,698,"Assert.assertEquals(input[i][j].getImaginary(), output2[i][j].getImaginary(),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,699,tolerance);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,700,"Assert.assertEquals(input[i][j].getReal(), output2[i][j].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,701,"Assert.assertEquals(goodOutput[i][j].getImaginary(), output[i][j].getImaginary(),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,702,tolerance);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,703,"Assert.assertEquals(goodOutput[i][j].getReal(), output[i][j].getReal(), tolerance);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,17,package org.apache.commons.math3.analysis.differentiation;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,20,import java.util.Arrays;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,21,import java.util.List;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,22,import java.util.concurrent.atomic.AtomicReference;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,24,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,25,import org.apache.commons.math3.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,26,import org.apache.commons.math3.util.ArithmeticUtils;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,27,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,28,import org.apache.commons.math3.util.MathArrays;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,30,"/** Class holding ""compiled"" computation rules for derivative structures."
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,31,* <p>This class implements the computation rules described in Dan Kalman's paper <a
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,32,"* href=""http://www.math.american.edu/People/kalman/pdffiles/mmgautodiff.pdf"">Doubly"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,33,"* Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,34,"* no. 3, June 2002. However, in order to avoid performances bottlenecks, the recursive"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,35,"* rules are ""compiled"" once in an unfold form. This class does this recursion unrolling"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,36,* and stores the computation rules as simple loops with pre-computed indirection arrays.</p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,37,* <p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,38,* This class maps all derivative computation into single dimension arrays that hold the
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,39,"* value and partial derivatives. The class does not hold these arrays, which remains under"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,40,* the responsibility of the caller. For each combination of number of free parameters and
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,41,"* derivation order, only one compiler is necessary, and this compiler will be used to"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,42,"* perform computations on all arrays provided to it, which can represent hundreds or"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,43,* thousands of different parameters kept together with all theur partial derivatives.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,44,* </p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,45,* <p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,46,* The arrays on which compilers operate contain only the partial derivatives together
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,47,"* with the 0<sup>th</sup> derivative, i.e. the value. The partial derivatives are stored in"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,48,"* a compiler-specific order, which can be retrieved using methods {@link"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,49,* #getPartialDerivativeIndex(int...) getPartialDerivativeIndex} and {@link
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,50,* #getPartialDerivativeOrders(int)}. The value is guaranteed to be stored as the first element
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,51,* (i.e. the {@link #getPartialDerivativeIndex(int...) getPartialDerivativeIndex} method returns
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,52,* 0 when called with 0 for all derivation orders and {@link #getPartialDerivativeOrders(int)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,53,* getPartialDerivativeOrders} returns an array filled with 0 when called with 0 as the index).
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,54,* </p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,55,* <p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,56,* Note that the ordering changes with number of parameters and derivation order. For example
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,57,"* given 2 parameters x and y, df/dy is stored at index 2 when derivation order is set to 1 (in"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,58,"* this case the array has three elements: f, df/dx and df/dy). If derivation order is set to"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,59,"* 2, then df/dy will be stored at index 3 (in this case the array has six elements: f, df/dx,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,60,"* df/dxdx, df/dy, df/dxdy and df/dydy)."
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,61,* </p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,62,* <p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,63,"* Given this structure, users can perform some simple operations like adding, subtracting"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,64,"* or multiplying constants and negating the elements by themselves, knowing if they want to"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,65,* mutate their array or create a new array. These simple operations are not provided by
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,66,* the compiler. The compiler provides only the more complex operations between several arrays.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,67,* </p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,68,* <p>This class is mainly used as the engine for scalar variable {@link DerivativeStructure}.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,69,* It can also be used directly to hold several variables in arrays for more complex data
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,70,"* structures. User can for example store a vector of n variables depending on three x, y"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,71,* and z free parameters in one array as follows:
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,72,* <pre>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,73,"*   // parameter 0 is x, parameter 1 is y, parameter 3 is z"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,74,*   int parameters = 3;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,75,"*   DSCompiler compiler = DSCompiler.getCompiler(parameters, order);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,76,*   int size = compiler.getSize();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,78,*   // pack all elements in a single array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,79,*   double[] array = new double[n * size];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,80,*   for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,82,*     // we know value is guaranteed to be the first element
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,83,*     array[i * size] = v[i];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,85,"*     // we don't know where first derivatives are stored, so we ask the compiler"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,86,"*     array[i * size + compiler.getPartialDerivativeIndex(1, 0, 0) = dvOnDx[i][0];"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,87,"*     array[i * size + compiler.getPartialDerivativeIndex(0, 1, 0) = dvOnDy[i][0];"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,88,"*     array[i * size + compiler.getPartialDerivativeIndex(0, 0, 1) = dvOnDz[i][0];"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,90,*     // we let all higher order derivatives set to 0
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,93,* </pre>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,94,"* Then in another function, user can perform some operations on all elements stored"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,95,"* in the single array, such as a simple product of all variables:"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,96,* <pre>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,97,*   // compute the product of all elements
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,98,*   double[] product = new double[size];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,99,*   prod[0] = 1.0;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,100,*   for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,101,*     double[] tmp = product.clone();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,102,"*     compiler.multiply(tmp, 0, array, i * size, product, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,105,*   // value
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,106,*   double p = product[0];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,108,*   // first derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,109,"*   double dPdX = product[compiler.getPartialDerivativeIndex(1, 0, 0)];"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,110,"*   double dPdY = product[compiler.getPartialDerivativeIndex(0, 1, 0)];"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,111,"*   double dPdZ = product[compiler.getPartialDerivativeIndex(0, 0, 1)];"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,113,*   // cross derivatives (assuming order was at least 2)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,114,"*   double dPdXdX = product[compiler.getPartialDerivativeIndex(2, 0, 0)];"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,115,"*   double dPdXdY = product[compiler.getPartialDerivativeIndex(1, 1, 0)];"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,116,"*   double dPdXdZ = product[compiler.getPartialDerivativeIndex(1, 0, 1)];"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,117,"*   double dPdYdY = product[compiler.getPartialDerivativeIndex(0, 2, 0)];"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,118,"*   double dPdYdZ = product[compiler.getPartialDerivativeIndex(0, 1, 1)];"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,119,"*   double dPdZdZ = product[compiler.getPartialDerivativeIndex(0, 0, 2)];"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,120,* </p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,121,* @see DerivativeStructure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,122,* @version $Id$
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,123,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,125,public class DSCompiler {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,127,/** Array of all compilers created so far. */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,128,private static AtomicReference<DSCompiler[][]> compilers =
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,129,new AtomicReference<DSCompiler[][]>(null);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,131,/** Number of free parameters. */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,132,private final int parameters;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,134,/** Derivation order. */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,135,private final int order;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,137,/** Number of partial derivatives (including the single 0 order derivative element). */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,138,private final int[][] sizes;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,140,/** Indirection array for partial derivatives. */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,141,private final int[][] derivativesIndirection;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,143,/** Indirection array of the lower derivative elements. */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,144,private final int[] lowerIndirection;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,146,/** Indirection arrays for multiplication. */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,147,private final int[][][] multIndirection;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,149,/** Indirection arrays for function composition. */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,150,private final int[][][] compIndirection;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,152,/** Get the compiler for number of free parameters and order.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,153,* @param parameters number of free parameters
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,154,* @param order derivation order
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,155,* @return cached rules set
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,157,"public static DSCompiler getCompiler(int parameters, int order) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,159,// get the cached compilers
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,160,final DSCompiler[][] cache = compilers.get();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,161,if (cache != null && cache.length > parameters && cache[parameters].length > order) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,162,// the compiler has already been created
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,163,return cache[parameters][order];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,166,// we need to create more compilers
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,167,"final int maxParameters = FastMath.max(parameters, cache == null ? 0 : cache.length);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,168,"final int maxOrder      = FastMath.max(order,     cache == null ? 0 : cache[0].length);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,169,final DSCompiler[][] newCache = new DSCompiler[maxParameters + 1][maxOrder + 1];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,171,if (cache != null) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,172,// preserve the already created compilers
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,173,for (int i = 0; i < cache.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,174,"System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,178,// create the array in increasing diagonal order
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,179,for (int diag = 0; diag <= maxParameters + maxOrder; ++diag) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,180,"for (int o = FastMath.max(0, diag - maxParameters); o <= FastMath.min(maxOrder, diag); ++o) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,181,final int p = diag - o;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,182,if (newCache[p][o] == null) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,183,final DSCompiler valueCompiler      = (p == 0) ? null : newCache[p - 1][o];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,184,final DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,185,"newCache[p][o] = new DSCompiler(p, o, valueCompiler, derivativeCompiler);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,190,// atomically reset the cached compilers array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,191,"compilers.compareAndSet(cache, newCache);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,193,return newCache[parameters][order];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,197,"/** Private constructor, reserved for the factory method {@link #getCompiler(int, int)}."
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,198,* @param parameters number of free parameters
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,199,* @param order derivation order
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,200,* @param valueCompiler compiler for the value part
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,201,* @param derivativeCompiler compiler for the derivative part
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,203,"private DSCompiler(final int parameters, final int order,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,204,"final DSCompiler valueCompiler, final DSCompiler derivativeCompiler) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,206,this.parameters = parameters;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,207,this.order      = order;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,208,"this.sizes      = compileSizes(parameters, order, valueCompiler, derivativeCompiler);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,209,this.derivativesIndirection =
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,210,"compileDerivativesIndirection(parameters, order,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,211,"valueCompiler, derivativeCompiler);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,212,this.lowerIndirection =
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,213,"compileLowerIndirection(parameters, order,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,214,"valueCompiler, derivativeCompiler);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,215,this.multIndirection =
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,216,"compileMultiplicationIndirection(parameters, order,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,217,"valueCompiler, derivativeCompiler, lowerIndirection);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,218,this.compIndirection =
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,219,"compileCompositionIndirection(parameters, order,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,220,"valueCompiler, derivativeCompiler,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,221,"sizes, derivativesIndirection, lowerIndirection);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,226,/** Compile the sizes array.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,227,* @param parameters number of free parameters
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,228,* @param order derivation order
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,229,* @param valueCompiler compiler for the value part
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,230,* @param derivativeCompiler compiler for the derivative part
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,231,* @return sizes array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,233,"private static int[][] compileSizes(final int parameters, final int order,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,234,"final DSCompiler valueCompiler,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,235,final DSCompiler derivativeCompiler) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,237,final int[][] sizes = new int[parameters + 1][order + 1];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,238,if (parameters == 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,239,"Arrays.fill(sizes[0], 1);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,240,} else {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,241,"System.arraycopy(valueCompiler.sizes, 0, sizes, 0, parameters);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,242,sizes[parameters][0] = 1;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,243,for (int i = 0; i < order; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,244,sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,248,return sizes;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,252,/** Compile the derivatives indirection array.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,253,* @param parameters number of free parameters
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,254,* @param order derivation order
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,255,* @param valueCompiler compiler for the value part
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,256,* @param derivativeCompiler compiler for the derivative part
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,257,* @return derivatives indirection array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,259,"private static int[][] compileDerivativesIndirection(final int parameters, final int order,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,260,"final DSCompiler valueCompiler,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,261,final DSCompiler derivativeCompiler) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,263,if (parameters == 0 || order == 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,264,return new int[1][parameters];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,267,final int vSize = valueCompiler.derivativesIndirection.length;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,268,final int dSize = derivativeCompiler.derivativesIndirection.length;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,269,final int[][] derivativesIndirection = new int[vSize + dSize][parameters];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,271,// set up the indices for the value part
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,272,for (int i = 0; i < vSize; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,273,"// copy the first indices, the last one remaining set to 0"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,274,"System.arraycopy(valueCompiler.derivativesIndirection[i], 0,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,275,"derivativesIndirection[i], 0,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,276,parameters - 1);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,279,// set up the indices for the derivative part
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,280,for (int i = 0; i < dSize; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,282,// copy the indices
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,283,"System.arraycopy(derivativeCompiler.derivativesIndirection[i], 0,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,284,"derivativesIndirection[vSize + i], 0,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,285,parameters);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,287,// increment the derivation order for the last parameter
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,288,derivativesIndirection[vSize + i][parameters - 1]++;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,292,return derivativesIndirection;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,296,/** Compile the lower derivatives indirection array.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,297,* <p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,298,* This indirection array contains the indices of all elements
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,299,* except derivatives for last derivation order.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,300,* </p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,301,* @param parameters number of free parameters
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,302,* @param order derivation order
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,303,* @param valueCompiler compiler for the value part
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,304,* @param derivativeCompiler compiler for the derivative part
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,305,* @return lower derivatives indirection array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,307,"private static int[] compileLowerIndirection(final int parameters, final int order,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,308,"final DSCompiler valueCompiler,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,309,final DSCompiler derivativeCompiler) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,311,if (parameters == 0 || order <= 1) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,312,return new int[] { 0 };
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,315,// this is an implementation of definition 6 in Dan Kalman's paper.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,316,final int vSize = valueCompiler.lowerIndirection.length;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,317,final int dSize = derivativeCompiler.lowerIndirection.length;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,318,final int[] lowerIndirection = new int[vSize + dSize];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,319,"System.arraycopy(valueCompiler.lowerIndirection, 0, lowerIndirection, 0, vSize);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,320,for (int i = 0; i < dSize; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,321,lowerIndirection[vSize + i] = valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,324,return lowerIndirection;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,328,/** Compile the multiplication indirection array.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,329,* <p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,330,* This indirection array contains the indices of all pairs of elements
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,331,* involved when computing a multiplication. This allows a straightforward
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,332,"* loop-based multiplication (see {@link #multiply(double[], int, double[], int, double[], int)})."
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,333,* </p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,334,* @param parameters number of free parameters
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,335,* @param order derivation order
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,336,* @param valueCompiler compiler for the value part
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,337,* @param derivativeCompiler compiler for the derivative part
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,338,* @param lowerIndirection lower derivatives indirection array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,339,* @return multiplication indirection array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,341,"private static int[][][] compileMultiplicationIndirection(final int parameters, final int order,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,342,"final DSCompiler valueCompiler,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,343,"final DSCompiler derivativeCompiler,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,344,final int[] lowerIndirection) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,346,if ((parameters == 0) || (order == 0)) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,347,"return new int[][][] { { { 1, 0, 0 } } };"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,350,// this is an implementation of definition 3 in Dan Kalman's paper.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,351,final int vSize = valueCompiler.multIndirection.length;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,352,final int dSize = derivativeCompiler.multIndirection.length;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,353,final int[][][] multIndirection = new int[vSize + dSize][][];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,355,"System.arraycopy(valueCompiler.multIndirection, 0, multIndirection, 0, vSize);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,357,for (int i = 0; i < dSize; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,358,final int[][] dRow = derivativeCompiler.multIndirection[i];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,359,List<int[]> row = new ArrayList<int[]>();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,360,for (int j = 0; j < dRow.length; ++j) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,361,"row.add(new int[] { dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] });"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,362,"row.add(new int[] { dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] });"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,365,// combine terms with similar derivation orders
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,366,final List<int[]> combined = new ArrayList<int[]>(row.size());
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,367,for (int j = 0; j < row.size(); ++j) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,368,final int[] termJ = row.get(j);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,369,if (termJ[0] > 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,370,for (int k = j + 1; k < row.size(); ++k) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,371,final int[] termK = row.get(k);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,372,if (termJ[1] == termK[1] && termJ[2] == termK[2]) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,373,// combine termJ and termK
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,374,termJ[0] += termK[0];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,375,// make sure we will skip termK later on in the outer loop
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,376,termK[0] = 0;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,379,combined.add(termJ);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,383,multIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,387,return multIndirection;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,391,/** Compile the function composition indirection array.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,392,* <p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,393,* This indirection array contains the indices of all sets of elements
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,394,* involved when computing a composition. This allows a straightforward
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,395,"* loop-based composition (see {@link #compose(double[], int, double[], double[], int)})."
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,396,* </p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,397,* @param parameters number of free parameters
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,398,* @param order derivation order
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,399,* @param valueCompiler compiler for the value part
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,400,* @param derivativeCompiler compiler for the derivative part
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,401,* @param sizes sizes array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,402,* @param derivativesIndirection derivatives indirection array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,403,* @param lowerIndirection lower derivatives indirection array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,404,* @return multiplication indirection array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,406,"private static int[][][] compileCompositionIndirection(final int parameters, final int order,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,407,"final DSCompiler valueCompiler,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,408,"final DSCompiler derivativeCompiler,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,409,"final int[][] sizes,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,410,"final int[][] derivativesIndirection,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,411,final int[] lowerIndirection) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,413,if ((parameters == 0) || (order == 0)) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,414,"return new int[][][] { { { 1, 0 } } };"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,417,final int vSize = valueCompiler.compIndirection.length;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,418,final int dSize = derivativeCompiler.compIndirection.length;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,419,final int[][][] compIndirection = new int[vSize + dSize][][];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,421,// the composition rules from the value part can be reused as is
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,422,"System.arraycopy(valueCompiler.compIndirection, 0, compIndirection, 0, vSize);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,424,// the composition rules for the derivative part are deduced by
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,425,// differentiation the rules from the underlying compiler once
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,426,// with respect to the parameter this compiler handles and the
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,427,// underlying one did not handle
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,428,for (int i = 0; i < dSize; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,429,List<int[]> row = new ArrayList<int[]>();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,430,for (int[] term : derivativeCompiler.compIndirection[i]) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,432,// handle term p * f_k(g(x)) * g_l1(x) * g_l2(x) * ... * g_lp(x)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,434,// derive the first factor in the term: f_k with respect to new parameter
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,435,int[] derivedTermF = new int[term.length + 1];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,436,derivedTermF[0] = term[0];     // p
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,437,derivedTermF[1] = term[1] + 1; // f_(k+1)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,438,int[] orders = new int[parameters];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,439,orders[parameters - 1] = 1;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,440,"derivedTermF[term.length] = getPartialDerivativeIndex(parameters, order, sizes, orders);  // g_1"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,441,for (int j = 2; j < term.length; ++j) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,442,// convert the indices as the mapping for the current order
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,443,// is different from the mapping with one less order
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,444,"derivedTermF[j] = convertIndex(term[j], parameters,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,445,"derivativeCompiler.derivativesIndirection,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,446,"parameters, order, sizes);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,448,"Arrays.sort(derivedTermF, 2, derivedTermF.length);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,449,row.add(derivedTermF);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,451,// derive the various g_l
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,452,for (int l = 2; l < term.length; ++l) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,453,int[] derivedTermG = new int[term.length];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,454,derivedTermG[0] = term[0];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,455,derivedTermG[1] = term[1];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,456,for (int j = 2; j < term.length; ++j) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,457,// convert the indices as the mapping for the current order
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,458,// is different from the mapping with one less order
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,459,"derivedTermG[j] = convertIndex(term[j], parameters,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,460,"derivativeCompiler.derivativesIndirection,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,461,"parameters, order, sizes);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,462,if (j == l) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,463,// derive this term
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,464,"System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,465,orders[parameters - 1]++;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,466,"derivedTermG[j] = getPartialDerivativeIndex(parameters, order, sizes, orders);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,469,"Arrays.sort(derivedTermG, 2, derivedTermG.length);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,470,row.add(derivedTermG);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,475,// combine terms with similar derivation orders
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,476,final List<int[]> combined = new ArrayList<int[]>(row.size());
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,477,for (int j = 0; j < row.size(); ++j) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,478,final int[] termJ = row.get(j);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,479,if (termJ[0] > 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,480,for (int k = j + 1; k < row.size(); ++k) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,481,final int[] termK = row.get(k);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,482,boolean equals = termJ.length == termK.length;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,483,for (int l = 1; equals && l < termJ.length; ++l) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,484,equals &= termJ[l] == termK[l];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,486,if (equals) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,487,// combine termJ and termK
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,488,termJ[0] += termK[0];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,489,// make sure we will skip termK later on in the outer loop
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,490,termK[0] = 0;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,493,combined.add(termJ);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,497,compIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,501,return compIndirection;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,505,/** Get the index of a partial derivative in the array.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,506,* <p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,507,"* If all orders are set to 0, then the 0<sup>th</sup> order derivative"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,508,"* is returned, which is the value of the function. The index for this"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,509,* 0<sup>th</sup> order derivative is always 0. the indices of higher
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,510,* order derivatives is between 1 and {@link #getSize() - 1)}.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,511,* </p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,512,* <p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,513,* This method is the inverse of method {@link #getPartialDerivativeOrders(int)}
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,514,* </p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,515,* @param orders derivation orders with respect to each parameter
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,516,* @return index of the partial derivative
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,517,* @exception DimensionMismatchException if the numbers of parameters does not
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,518,* match the instance
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,519,* @exception NumberIsTooLargeException if sum of derivation orders is larger
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,520,* than the instance limits
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,521,* @see #getPartialDerivativeOrders(int)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,523,public int getPartialDerivativeIndex(final int ... orders)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,524,"throws DimensionMismatchException, NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,526,// safety check
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,527,if (orders.length != getFreeParameters()) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,528,"throw new DimensionMismatchException(orders.length, getFreeParameters());"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,531,"return getPartialDerivativeIndex(parameters, order, sizes, orders);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,535,/** Get the index of a partial derivative in an array.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,536,* @param parameters number of free parameters
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,537,* @param order derivation order
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,538,* @param sizes sizes array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,539,* @param orders derivation orders with respect to each parameter
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,540,* (the lenght of this array must match the number of parameters)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,541,* @return index of the partial derivative
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,542,* @exception NumberIsTooLargeException if sum of derivation orders is larger
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,543,* than the instance limits
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,545,"private static int getPartialDerivativeIndex(final int parameters, final int order,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,546,"final int[][] sizes, final int ... orders)"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,547,throws NumberIsTooLargeException {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,549,// the value is obtained by diving into the recursive Dan Kalman's structure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,550,"// this is theorem 2 of his paper, with recursion replaced by iteration"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,551,int index     = 0;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,552,int m         = order;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,553,int ordersSum = 0;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,554,for (int i = parameters - 1; i >= 0; --i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,556,// derivative order for current free parameter
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,557,int derivativeOrder = orders[i];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,559,// safety check
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,560,ordersSum += derivativeOrder;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,561,if (ordersSum > order) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,562,"throw new NumberIsTooLargeException(ordersSum, order, true);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,565,while (derivativeOrder-- > 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,566,"// as long as we differentiate according to current free parameter,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,567,// we have to skip the value part and dive into the derivative part
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,568,// so we add the size of the value part to the base index
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,569,index += sizes[i][m--];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,574,return index;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,578,"/** Convert an index from one (parameters, order) structure to another."
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,579,* @param index index of a partial derivative in source derivative structure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,580,* @param srcP number of free parameters in source derivative structure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,581,* @param srcDerivativesIndirection derivatives indirection array for the source
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,582,* derivative structure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,583,* @param destP number of free parameters in destination derivative structure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,584,* @param destO derivation order in destination derivative structure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,585,* @param destSizes sizes array for the destination derivative structure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,586,* @return index of the partial derivative with the <em>same</em> characteristics
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,587,* in destination derivative structure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,589,"private static int convertIndex(final int index,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,590,"final int srcP, final int[][] srcDerivativesIndirection,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,591,"final int destP, final int destO, final int[][] destSizes) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,592,int[] orders = new int[destP];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,593,"System.arraycopy(srcDerivativesIndirection[index], 0, orders, 0, FastMath.min(srcP, destP));"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,594,"return getPartialDerivativeIndex(destP, destO, destSizes, orders);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,597,/** Get the derivation orders for a specific index in the array.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,598,* <p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,599,* This method is the inverse of {@link #getPartialDerivativeIndex(int...)}.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,600,* </p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,601,* @param index of the partial derivative
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,602,* @return orders derivation orders with respect to each parameter
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,603,* @see #getPartialDerivativeIndex(int...)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,605,public int[] getPartialDerivativeOrders(final int index) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,606,return derivativesIndirection[index];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,609,/** Get the number of free parameters.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,610,* @return number of free parameters
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,612,public int getFreeParameters() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,613,return parameters;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,616,/** Get the derivation order.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,617,* @return derivation order
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,619,public int getOrder() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,620,return order;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,623,/** Get the array size required for holding partial derivatives data.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,624,* <p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,625,"* This number includes the single 0 order derivative element, which is"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,626,* guaranteed to be stored in the first element of the array.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,627,* </p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,628,* @return array size required for holding partial derivatives data
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,630,public int getSize() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,631,return sizes[parameters][order];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,634,/** Compute linear combination.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,635,* The derivative structure built will be a1 * ds1 + a2 * ds2
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,636,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,637,* @param c1 first base (unscaled) component
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,638,* @param offset1 offset of first operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,639,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,640,* @param c2 second base (unscaled) component
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,641,* @param offset2 offset of second operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,642,* @param result array where result must be stored (it may be
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,643,* one of the input arrays)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,644,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,646,"public void linearCombination(final double a1, final double[] c1, final int offset1,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,647,"final double a2, final double[] c2, final int offset2,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,648,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,649,for (int i = 0; i < getSize(); ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,650,result[resultOffset + i] =
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,651,"MathArrays.linearCombination(a1, c1[offset1 + i], a2, c2[offset2 + i]);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,655,/** Compute linear combination.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,656,* The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3 + a4 * ds4
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,657,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,658,* @param c1 first base (unscaled) component
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,659,* @param offset1 offset of first operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,660,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,661,* @param c2 second base (unscaled) component
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,662,* @param offset2 offset of second operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,663,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,664,* @param c3 third base (unscaled) component
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,665,* @param offset3 offset of third operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,666,* @param result array where result must be stored (it may be
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,667,* one of the input arrays)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,668,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,670,"public void linearCombination(final double a1, final double[] c1, final int offset1,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,671,"final double a2, final double[] c2, final int offset2,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,672,"final double a3, final double[] c3, final int offset3,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,673,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,674,for (int i = 0; i < getSize(); ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,675,result[resultOffset + i] =
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,676,"MathArrays.linearCombination(a1, c1[offset1 + i],"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,677,"a2, c2[offset2 + i],"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,678,"a3, c3[offset3 + i]);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,682,/** Compute linear combination.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,683,* The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3 + a4 * ds4
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,684,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,685,* @param c1 first base (unscaled) component
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,686,* @param offset1 offset of first operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,687,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,688,* @param c2 second base (unscaled) component
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,689,* @param offset2 offset of second operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,690,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,691,* @param c3 third base (unscaled) component
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,692,* @param offset3 offset of third operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,693,* @param a4 fourth scale factor
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,694,* @param c4 fourth base (unscaled) component
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,695,* @param offset4 offset of fourth operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,696,* @param result array where result must be stored (it may be
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,697,* one of the input arrays)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,698,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,700,"public void linearCombination(final double a1, final double[] c1, final int offset1,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,701,"final double a2, final double[] c2, final int offset2,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,702,"final double a3, final double[] c3, final int offset3,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,703,"final double a4, final double[] c4, final int offset4,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,704,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,705,for (int i = 0; i < getSize(); ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,706,result[resultOffset + i] =
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,707,"MathArrays.linearCombination(a1, c1[offset1 + i],"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,708,"a2, c2[offset2 + i],"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,709,"a3, c3[offset3 + i],"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,710,"a4, c4[offset4 + i]);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,714,/** Perform addition of two derivative structures.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,715,* @param lhs array holding left hand side of addition
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,716,* @param lhsOffset offset of the left hand side in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,717,* @param rhs array right hand side of addition
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,718,* @param rhsOffset offset of the right hand side in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,719,* @param result array where result must be stored (it may be
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,720,* one of the input arrays)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,721,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,723,"public void add(final double[] lhs, final int lhsOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,724,"final double[] rhs, final int rhsOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,725,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,726,for (int i = 0; i < getSize(); ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,727,result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,730,/** Perform subtraction of two derivative structures.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,731,* @param lhs array holding left hand side of subtraction
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,732,* @param lhsOffset offset of the left hand side in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,733,* @param rhs array right hand side of subtraction
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,734,* @param rhsOffset offset of the right hand side in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,735,* @param result array where result must be stored (it may be
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,736,* one of the input arrays)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,737,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,739,"public void subtract(final double[] lhs, final int lhsOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,740,"final double[] rhs, final int rhsOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,741,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,742,for (int i = 0; i < getSize(); ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,743,result[resultOffset + i] = lhs[lhsOffset + i] - rhs[rhsOffset + i];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,747,/** Perform multiplication of two derivative structures.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,748,* @param lhs array holding left hand side of multiplication
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,749,* @param lhsOffset offset of the left hand side in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,750,* @param rhs array right hand side of multiplication
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,751,* @param rhsOffset offset of the right hand side in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,752,* @param result array where result must be stored (for
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,753,* multiplication the result array <em>cannot</em> be one of
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,754,* the input arrays)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,755,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,757,"public void multiply(final double[] lhs, final int lhsOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,758,"final double[] rhs, final int rhsOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,759,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,760,for (int i = 0; i < multIndirection.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,761,final int[][] mappingI = multIndirection[i];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,762,double r = 0;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,763,for (int j = 0; j < mappingI.length; ++j) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,764,r += mappingI[j][0] *
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,765,lhs[lhsOffset + mappingI[j][1]] *
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,766,rhs[rhsOffset + mappingI[j][2]];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,768,result[resultOffset + i] = r;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,772,/** Perform division of two derivative structures.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,773,* @param lhs array holding left hand side of division
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,774,* @param lhsOffset offset of the left hand side in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,775,* @param rhs array right hand side of division
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,776,* @param rhsOffset offset of the right hand side in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,777,* @param result array where result must be stored (for
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,778,* division the result array <em>cannot</em> be one of
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,779,* the input arrays)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,780,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,782,"public void divide(final double[] lhs, final int lhsOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,783,"final double[] rhs, final int rhsOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,784,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,785,final double[] reciprocal = new double[getSize()];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,786,"pow(rhs, lhsOffset, -1, reciprocal, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,787,"multiply(lhs, lhsOffset, reciprocal, 0, result, resultOffset);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,790,/** Perform remainder of two derivative structures.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,791,* @param lhs array holding left hand side of remainder
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,792,* @param lhsOffset offset of the left hand side in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,793,* @param rhs array right hand side of remainder
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,794,* @param rhsOffset offset of the right hand side in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,795,* @param result array where result must be stored (it may be
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,796,* one of the input arrays)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,797,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,799,"public void remainder(final double[] lhs, final int lhsOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,800,"final double[] rhs, final int rhsOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,801,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,803,// compute k such that lhs % rhs = lhs - k rhs
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,804,final double rem = lhs[lhsOffset] % rhs[rhsOffset];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,805,final double k   = FastMath.rint((lhs[lhsOffset] - rem) / rhs[rhsOffset]);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,807,// set up value
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,808,result[resultOffset] = rem;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,810,// set up partial derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,811,for (int i = 1; i < getSize(); ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,812,result[resultOffset + i] = lhs[lhsOffset + i] - k * rhs[rhsOffset + i];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,817,/** Compute power of a derivative structure.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,818,* @param operand array holding the operand
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,819,* @param operandOffset offset of the operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,820,* @param p power to apply
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,821,* @param result array where result must be stored (for
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,822,* power the result array <em>cannot</em> be the input
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,823,* array)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,824,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,826,"public void pow(final double[] operand, final int operandOffset, final double p,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,827,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,829,// create the function value and derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,830,"// [x^p, px^(p-1), p(p-1)x^(p-2), ... ]"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,831,double[] function = new double[1 + order];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,832,"double xk = FastMath.pow(operand[operandOffset], p - order);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,833,for (int i = order; i > 0; --i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,834,function[i] = xk;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,835,xk *= operand[operandOffset];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,837,function[0] = xk;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,838,double coefficient = p;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,839,for (int i = 1; i <= order; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,840,function[i] *= coefficient;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,841,coefficient *= p - i;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,844,// apply function composition
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,845,"compose(operand, operandOffset, function, result, resultOffset);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,849,/** Compute integer power of a derivative structure.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,850,* @param operand array holding the operand
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,851,* @param operandOffset offset of the operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,852,* @param n power to apply
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,853,* @param result array where result must be stored (for
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,854,* power the result array <em>cannot</em> be the input
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,855,* array)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,856,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,858,"public void pow(final double[] operand, final int operandOffset, final int n,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,859,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,861,if (n == 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,862,"// special case, x^0 = 1 for all x"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,863,result[resultOffset] = 1.0;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,864,"Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,865,return;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,868,// create the power function value and derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,869,"// [x^n, nx^(n-1), n(n-1)x^(n-2), ... ]"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,870,double[] function = new double[1 + order];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,872,if (n > 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,873,// strictly positive power
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,874,"final int maxOrder = FastMath.min(order, n);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,875,"double xk = FastMath.pow(operand[operandOffset], n - maxOrder);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,876,for (int i = maxOrder; i > 0; --i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,877,function[i] = xk;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,878,xk *= operand[operandOffset];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,880,function[0] = xk;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,881,} else {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,882,// strictly negative power
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,883,final double inv = 1.0 / operand[operandOffset];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,884,"double xk = FastMath.pow(inv, -n);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,885,for (int i = 0; i <= order; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,886,function[i] = xk;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,887,xk *= inv;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,891,double coefficient = n;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,892,for (int i = 1; i <= order; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,893,function[i] *= coefficient;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,894,coefficient *= n - i;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,897,// apply function composition
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,898,"compose(operand, operandOffset, function, result, resultOffset);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,902,/** Compute n<sup>th</sup> root of a derivative structure.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,903,* @param operand array holding the operand
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,904,* @param operandOffset offset of the operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,905,* @param n order of the root
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,906,* @param result array where result must be stored (for
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,907,* n<sup>th</sup> root the result array <em>cannot</em> be the input
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,908,* array)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,909,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,911,"public void rootN(final double[] operand, final int operandOffset, final int n,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,912,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,914,// create the function value and derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,915,"// [x^(1/n), (1/n)x^((1/n)-1), (1-n)/n^2x^((1/n)-2), ... ]"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,916,double[] function = new double[1 + order];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,917,double xk;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,918,if (n == 2) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,919,xk = FastMath.sqrt(operand[operandOffset]);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,920,} else if (n == 3) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,921,xk = FastMath.cbrt(operand[operandOffset]);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,922,} else {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,923,"xk = FastMath.pow(operand[operandOffset], 1.0 / n);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,925,final double nReciprocal = 1.0 / n;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,926,final double xReciprocal = 1.0 / operand[operandOffset];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,927,for (int i = 0; i <= order; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,928,function[i] = xk;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,929,xk *= xReciprocal * (nReciprocal - i);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,932,// apply function composition
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,933,"compose(operand, operandOffset, function, result, resultOffset);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,937,/** Compute exponential of a derivative structure.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,938,* @param operand array holding the operand
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,939,* @param operandOffset offset of the operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,940,* @param result array where result must be stored (for
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,941,* exponential the result array <em>cannot</em> be the input
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,942,* array)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,943,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,945,"public void exp(final double[] operand, final int operandOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,946,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,948,// create the function value and derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,949,double[] function = new double[1 + order];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,950,"Arrays.fill(function, FastMath.exp(operand[operandOffset]));"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,952,// apply function composition
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,953,"compose(operand, operandOffset, function, result, resultOffset);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,957,/** Compute natural logarithm of a derivative structure.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,958,* @param operand array holding the operand
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,959,* @param operandOffset offset of the operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,960,* @param result array where result must be stored (for
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,961,* logarithm the result array <em>cannot</em> be the input
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,962,* array)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,963,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,965,"public void log(final double[] operand, final int operandOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,966,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,968,// create the function value and derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,969,double[] function = new double[1 + order];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,970,function[0] = FastMath.log(operand[operandOffset]);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,971,if (order > 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,972,double inv = 1.0 / operand[operandOffset];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,973,double xk  = inv;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,974,for (int i = 1; i <= order; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,975,function[i] = xk;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,976,xk *= -i * inv;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,980,// apply function composition
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,981,"compose(operand, operandOffset, function, result, resultOffset);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,985,/** Compute cosine of a derivative structure.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,986,* @param operand array holding the operand
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,987,* @param operandOffset offset of the operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,988,* @param result array where result must be stored (for
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,989,* cosine the result array <em>cannot</em> be the input
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,990,* array)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,991,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,993,"public void cos(final double[] operand, final int operandOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,994,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,996,// create the function value and derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,997,double[] function = new double[1 + order];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,998,function[0] = FastMath.cos(operand[operandOffset]);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,999,if (order > 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1000,function[1] = -FastMath.sin(operand[operandOffset]);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1001,for (int i = 2; i <= order; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1002,function[i] = -function[i - 2];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1006,// apply function composition
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1007,"compose(operand, operandOffset, function, result, resultOffset);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1011,/** Compute sine of a derivative structure.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1012,* @param operand array holding the operand
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1013,* @param operandOffset offset of the operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1014,* @param result array where result must be stored (for
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1015,* sine the result array <em>cannot</em> be the input
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1016,* array)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1017,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1019,"public void sin(final double[] operand, final int operandOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1020,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1022,// create the function value and derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1023,double[] function = new double[1 + order];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1024,function[0] = FastMath.sin(operand[operandOffset]);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1025,if (order > 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1026,function[1] = FastMath.cos(operand[operandOffset]);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1027,for (int i = 2; i <= order; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1028,function[i] = -function[i - 2];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1032,// apply function composition
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1033,"compose(operand, operandOffset, function, result, resultOffset);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1037,/** Compute tangent of a derivative structure.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1038,* @param operand array holding the operand
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1039,* @param operandOffset offset of the operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1040,* @param result array where result must be stored (for
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1041,* tangent the result array <em>cannot</em> be the input
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1042,* array)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1043,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1045,"public void tan(final double[] operand, final int operandOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1046,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1048,// create the function value and derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1049,double[] function = new double[1 + order];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1050,final double z = operand[operandOffset];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1051,final double t = FastMath.tan(z);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1052,function[0] = t;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1053,if (order > 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1054,final double secant2 = 1 + t * t;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1055,function[1] = secant2;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1056,for (int n = 2; n <= order; ++n) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1057,final int signN4 = ((n & 0x02) == 0) ? 1 : -1;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1058,double outerSum = 0;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1059,int sign = 1;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1060,double secant2Kp2 = secant2;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1061,for (int k = 0; k < n; ++k) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1062,double innerSum = 0;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1063,for (int j = 0; j < k; ++j) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1064,final double alpha = 2 * (k - j) * z;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1065,final double sc  = ((n & 0x01) == 0) ? FastMath.sin(alpha) : FastMath.cos(alpha);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1066,"innerSum += sc * signN4 * ArithmeticUtils.pow(k - j, n - 1) *"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1067,"ArithmeticUtils.binomialCoefficient(2 * k, j);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1069,double twoNm2K = (n >= 2 * k) ? (1 << (n - 2 * k)) : (1.0 / (1 << (2 * k - n)));
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1070,"outerSum  += sign * innerSum * ArithmeticUtils.binomialCoefficient(n - 1, k) *"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1071,twoNm2K * secant2Kp2 / (k + 1);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1072,sign       = -sign;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1073,secant2Kp2 *= secant2;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1075,function[n] = n * outerSum;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1079,// apply function composition
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1080,"compose(operand, operandOffset, function, result, resultOffset);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1084,/** Compute arc cosine of a derivative structure.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1085,* @param operand array holding the operand
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1086,* @param operandOffset offset of the operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1087,* @param result array where result must be stored (for
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1088,* arc cosine the result array <em>cannot</em> be the input
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1089,* array)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1090,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1092,"public void acos(final double[] operand, final int operandOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1093,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1095,// create the function value and derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1096,double[] function = new double[1 + order];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1097,final double x = operand[operandOffset];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1098,function[0] = FastMath.acos(x);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1099,if (order > 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1100,function[1] = -1.0 / FastMath.sqrt(1 - x * x);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1101,for (int i = 2; i <= order; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1102,// TODO compute higher order derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1103,function[i] = Double.NaN;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1107,// apply function composition
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1108,"compose(operand, operandOffset, function, result, resultOffset);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1112,/** Compute arc sine of a derivative structure.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1113,* @param operand array holding the operand
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1114,* @param operandOffset offset of the operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1115,* @param result array where result must be stored (for
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1116,* arc sine the result array <em>cannot</em> be the input
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1117,* array)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1118,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1120,"public void asin(final double[] operand, final int operandOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1121,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1123,// create the function value and derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1124,double[] function = new double[1 + order];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1125,final double x = operand[operandOffset];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1126,function[0] = FastMath.asin(x);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1127,if (order > 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1128,function[1] = 1.0 / FastMath.sqrt(1 - x * x);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1129,for (int i = 2; i <= order; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1130,// TODO compute higher order derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1131,function[i] = Double.NaN;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1135,// apply function composition
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1136,"compose(operand, operandOffset, function, result, resultOffset);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1140,/** Compute arc tangent of a derivative structure.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1141,* @param operand array holding the operand
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1142,* @param operandOffset offset of the operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1143,* @param result array where result must be stored (for
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1144,* arc tangent the result array <em>cannot</em> be the input
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1145,* array)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1146,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1148,"public void atan(final double[] operand, final int operandOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1149,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1151,// create the function value and derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1152,double[] function = new double[1 + order];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1153,final double x = operand[operandOffset];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1154,function[0] = FastMath.atan(x);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1155,if (order > 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1156,function[1] = 1.0 / (1 + x * x);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1157,for (int i = 2; i <= order; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1158,// TODO compute higher order derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1159,function[i] = Double.NaN;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1163,// apply function composition
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1164,"compose(operand, operandOffset, function, result, resultOffset);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1168,/** Compute two arguments arc tangent of a derivative structure.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1169,* @param y array holding the first operand
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1170,* @param yOffset offset of the first operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1171,* @param x array holding the second operand
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1172,* @param xOffset offset of the second operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1173,* @param result array where result must be stored (for
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1174,* two arguments arc tangent the result array <em>cannot</em>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1175,* be the input array)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1176,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1178,"public void atan2(final double[] y, final int yOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1179,"final double[] x, final int xOffset,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1180,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1182,final double y0 = y[yOffset];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1183,final double x0 = x[xOffset];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1184,"result[resultOffset] = FastMath.atan2(y0, x0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1185,if (order > 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1186,for (int i = 1; i <= order; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1187,// TODO compute higher order derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1188,result[resultOffset + i] = Double.NaN;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1194,/** Compute composition of a derivative structure by a function.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1195,* @param operand array holding the operand
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1196,* @param operandOffset offset of the operand in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1197,* @param f array of value and derivatives of the function at
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1198,* the current point (i.e. at {@code operand[operandOffset]}).
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1199,* @param result array where result must be stored (for
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1200,* composition the result array <em>cannot</em> be the input
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1201,* array)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1202,* @param resultOffset offset of the result in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1204,"public void compose(final double[] operand, final int operandOffset, final double[] f,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1205,"final double[] result, final int resultOffset) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1206,for (int i = 0; i < compIndirection.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1207,final int[][] mappingI = compIndirection[i];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1208,double r = 0;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1209,for (int j = 0; j < mappingI.length; ++j) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1210,final int[] mappingIJ = mappingI[j];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1211,double product = mappingIJ[0] * f[mappingIJ[1]];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1212,for (int k = 2; k < mappingIJ.length; ++k) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1213,product *= operand[operandOffset + mappingIJ[k]];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1215,r += product;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1217,result[resultOffset + i] = r;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1221,/** Evaluate Taylor expansion a derivative structure.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1222,* @param ds array holding the derivative structure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1223,* @param dsOffset offset of the derivative structure in its array
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1224,"* @param offsets parameters offsets (dx, dy, ...)"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1225,"* @return value of the Taylor expansion at x+dx, y.dy, ..."
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1227,"public double taylor(final double[] ds, final int dsOffset, final double ... offsets) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1228,// TODO
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1229,return Double.NaN;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1232,/** Check rules set compatibility.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1233,* @param compiler other compiler to check against instance
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1234,* @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1236,public void checkCompatibility(final DSCompiler compiler)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1237,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1238,if (parameters != compiler.parameters) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1239,"throw new DimensionMismatchException(parameters, compiler.parameters);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1241,if (order != compiler.order) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1242,"throw new DimensionMismatchException(order, compiler.order);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,17,package org.apache.commons.math3.analysis.differentiation;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,19,import java.io.Serializable;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,21,import org.apache.commons.math3.Field;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,22,import org.apache.commons.math3.FieldElement;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,23,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,24,import org.apache.commons.math3.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,26,/** Class representing both the value and the differentials of a function.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,27,* <p>This class is the workhorse of the differentiation package.</p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,28,* <p>This class is an implementation of the extension to Rall's
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,29,* numbers described in Dan Kalman's paper <a
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,30,"* href=""http://www.math.american.edu/People/kalman/pdffiles/mmgautodiff.pdf"">Doubly"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,31,"* Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,32,"* no. 3, June 2002.</p>. Rall's numbers are an extension to the real numbers used"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,33,* throughout mathematical expressions; they hold the derivative together with the
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,34,* value of a function. Dan Kalman's derivative structures holds all partial derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,35,"* up to any specified order, with respect to any number of free variables. Rall's"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,36,* number therefore can be seen as derivative structures for order one derivative and
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,37,"* one free variable, and real numbers can be seen as derivative structures with zero"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,38,* order derivative and no free variables.</p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,39,* <p>{@link DerivativeStructure} instances can be used directly thanks to
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,40,* the arithmetic operators to the mathematical functions provided as static
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,41,"* methods by this class (+, -, *, /, %, sin, cos ...).</p>"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,42,* <p>Implementing complex expressions by hand using these classes is
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,43,"* however a complex and error-prone task, so the classical use is"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,44,* simply to develop computation code using standard primitive double
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,45,* values and to use {@link UnivariateDifferentiator differentiators} to create
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,46,* the {@link DerivativeStructure}-based instances.</p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,47,* <p>Instances of this class are guaranteed to be immutable.</p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,48,* @see DSCompiler
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,49,* @version $Id$
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,50,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,52,"public class DerivativeStructure implements FieldElement<DerivativeStructure>, Serializable {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,54,/** Serializable UID. */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,55,private static final long serialVersionUID = 20120730L;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,57,/** Compiler for the current dimensions. */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,58,private transient DSCompiler compiler;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,60,/** Combined array holding all values. */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,61,private final double[] data;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,63,/** Build an instance with all values and derivatives set to 0.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,64,* @param compiler compiler to use for computation
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,66,private DerivativeStructure(final DSCompiler compiler) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,67,this.compiler = compiler;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,68,this.data     = new double[compiler.getSize()];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,71,/** Build an instance with all values and derivatives set to 0.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,72,* @param variables number of variables
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,73,* @param order derivation order
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,75,"public DerivativeStructure(final int variables, final int order) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,76,"this(DSCompiler.getCompiler(variables, order));"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,79,/** Build an instance representing a constant value.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,80,* @param variables number of variables
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,81,* @param order derivation order
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,82,* @param value value of the constant
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,83,"* @see #DerivativeStructure(int, int, int, double)"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,85,"public DerivativeStructure(final int variables, final int order, final double value) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,86,"this(variables, order);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,87,this.data[0] = value;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,90,/** Build an instance representing a variable.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,91,* <p>Instances built using this constructor are considered
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,92,* to be the free variables with respect to which differentials
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,93,"* are computed. As such, their differential with respect to"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,94,* themselves is +1.</p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,95,* @param variables number of variables
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,96,* @param order derivation order
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,97,* @param index index of the variable (from 0 to {@code variables - 1})
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,98,* @param value value of the variable
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,99,* @exception NumberIsTooLargeException if index is equal to variables or larger
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,100,"* @see #DerivativeStructure(int, int, double)"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,102,"public DerivativeStructure(final int variables, final int order,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,103,"final int index, final double value)"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,104,throws NumberIsTooLargeException {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,105,"this(variables, order, value);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,107,if (index >= variables) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,108,"throw new NumberIsTooLargeException(index, variables, false);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,111,if (order > 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,112,// the derivative of the variable with respect to itself is 1.0
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,113,"data[DSCompiler.getCompiler(index, order).getSize()] = 1.0;"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,118,/** Linear combination constructor.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,119,* The derivative structure built will be a1 * ds1 + a2 * ds2
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,120,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,121,* @param ds1 first base (unscaled) derivative structure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,122,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,123,* @param ds2 second base (unscaled) derivative structure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,124,* @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,126,"public DerivativeStructure(final double a1, final DerivativeStructure ds1,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,127,"final double a2, final DerivativeStructure ds2)"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,128,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,129,this(ds1.compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,130,compiler.checkCompatibility(ds2.compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,131,"compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,134,/** Linear combination constructor.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,135,* The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,136,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,137,* @param ds1 first base (unscaled) derivative structure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,138,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,139,* @param ds2 second base (unscaled) derivative structure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,140,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,141,* @param ds3 third base (unscaled) derivative structure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,142,* @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,144,"public DerivativeStructure(final double a1, final DerivativeStructure ds1,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,145,"final double a2, final DerivativeStructure ds2,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,146,"final double a3, final DerivativeStructure ds3)"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,147,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,148,this(ds1.compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,149,compiler.checkCompatibility(ds2.compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,150,compiler.checkCompatibility(ds3.compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,151,"compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,154,/** Linear combination constructor.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,155,* The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3 + a4 * ds4
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,156,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,157,* @param ds1 first base (unscaled) derivative structure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,158,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,159,* @param ds2 second base (unscaled) derivative structure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,160,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,161,* @param ds3 third base (unscaled) derivative structure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,162,* @param a4 fourth scale factor
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,163,* @param ds4 fourth base (unscaled) derivative structure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,164,* @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,166,"public DerivativeStructure(final double a1, final DerivativeStructure ds1,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,167,"final double a2, final DerivativeStructure ds2,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,168,"final double a3, final DerivativeStructure ds3,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,169,"final double a4, final DerivativeStructure ds4)"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,170,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,171,this(ds1.compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,172,compiler.checkCompatibility(ds2.compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,173,compiler.checkCompatibility(ds3.compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,174,compiler.checkCompatibility(ds4.compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,175,"compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,176,"a3, ds3.data, 0, a4, ds4.data, 0,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,177,"data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,180,/** Copy constructor.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,181,* @param instance to copy
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,183,private DerivativeStructure(final DerivativeStructure ds) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,184,this.compiler = ds.compiler;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,185,this.data     = ds.data.clone();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,188,/** Get the number of free parameters.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,189,* @return number of free parameters
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,191,public int getFreeParameters() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,192,return compiler.getFreeParameters();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,195,/** Get the derivation order.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,196,* @return derivation order
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,198,public int getOrder() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,199,return compiler.getOrder();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,202,/** Get the value part of the derivative structure.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,203,* @return value part of the derivative structure
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,204,* @see #getPartialDerivative(int...)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,206,public double getValue() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,207,return data[0];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,210,/** Get a partial derivative.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,211,"* @param orders derivation orders with respect to each variable (if all orders are 0,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,212,* the value is returned)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,213,* @return partial derivative
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,214,* @see #getValue()
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,215,* @exception DimensionMismatchException if the numbers of variables does not
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,216,* match the instance
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,217,* @exception NumberIsTooLargeException if sum of derivation orders is larger
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,218,* than the instance limits
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,220,public double getPartialDerivative(final int ... orders)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,221,"throws DimensionMismatchException, NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,222,return data[compiler.getPartialDerivativeIndex(orders)];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,225,/** '+' operator.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,226,* @param a right hand side parameter of the operator
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,227,* @return this+a
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,229,public DerivativeStructure add(final double a) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,230,final DerivativeStructure ds = new DerivativeStructure(this);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,231,ds.data[0] += a;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,232,return ds;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,235,/** '+' operator.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,236,* @param a right hand side parameter of the operator
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,237,* @return this+a
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,238,* @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,240,public DerivativeStructure add(final DerivativeStructure a)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,241,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,242,compiler.checkCompatibility(a.compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,243,final DerivativeStructure ds = new DerivativeStructure(this);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,244,"compiler.add(data, 0, a.data, 0, ds.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,245,return ds;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,248,/** '-' operator.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,249,* @param a right hand side parameter of the operator
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,250,* @return this-a
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,252,public DerivativeStructure subtract(final double a) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,253,return add(-a);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,256,/** '-' operator.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,257,* @param a right hand side parameter of the operator
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,258,* @return this-a
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,259,* @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,261,public DerivativeStructure subtract(final DerivativeStructure a)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,262,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,263,compiler.checkCompatibility(a.compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,264,final DerivativeStructure ds = new DerivativeStructure(this);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,265,"compiler.subtract(data, 0, a.data, 0, ds.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,266,return ds;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,269,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,270,public DerivativeStructure multiply(final int n) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,271,return multiply((double) n);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,274,/** '&times;' operator.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,275,* @param a right hand side parameter of the operator
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,276,* @return this&times;a
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,278,public DerivativeStructure multiply(final double a) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,279,final DerivativeStructure ds = new DerivativeStructure(this);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,280,for (int i = 0; i < ds.data.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,281,ds.data[i] *= a;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,283,return ds;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,286,/** '&times;' operator.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,287,* @param a right hand side parameter of the operator
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,288,* @return this&times;a
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,289,* @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,291,public DerivativeStructure multiply(final DerivativeStructure a)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,292,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,293,compiler.checkCompatibility(a.compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,294,final DerivativeStructure result = new DerivativeStructure(compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,295,"compiler.multiply(data, 0, a.data, 0, result.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,296,return result;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,299,/** '&divides;' operator.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,300,* @param a right hand side parameter of the operator
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,301,* @return this&divides;a
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,303,public DerivativeStructure divide(final double a) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,304,final DerivativeStructure ds = new DerivativeStructure(this);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,305,for (int i = 0; i < ds.data.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,306,ds.data[i] /= a;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,308,return ds;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,311,/** '&divides;' operator.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,312,* @param a right hand side parameter of the operator
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,313,* @return this&divides;a
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,314,* @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,316,public DerivativeStructure divide(final DerivativeStructure a)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,317,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,318,compiler.checkCompatibility(a.compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,319,final DerivativeStructure result = new DerivativeStructure(compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,320,"compiler.divide(data, 0, a.data, 0, result.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,321,return result;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,324,/** '%' operator.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,325,* @param a right hand side parameter of the operator
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,326,* @return this%a
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,328,public DerivativeStructure remainder(final double a) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,329,final DerivativeStructure ds = new DerivativeStructure(this);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,330,ds.data[0] = ds.data[0] % a;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,331,return ds;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,334,/** '%' operator.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,335,* @param a right hand side parameter of the operator
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,336,* @return this%a
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,337,* @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,339,public DerivativeStructure remainder(final DerivativeStructure a)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,340,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,341,compiler.checkCompatibility(a.compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,342,final DerivativeStructure result = new DerivativeStructure(compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,343,"compiler.remainder(data, 0, a.data, 0, result.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,344,return result;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,347,/** unary '-' operator.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,348,* @return -this
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,350,public DerivativeStructure negate() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,351,final DerivativeStructure ds = new DerivativeStructure(compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,352,for (int i = 0; i < ds.data.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,353,ds.data[i] = -data[i];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,355,return ds;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,358,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,359,public DerivativeStructure reciprocal() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,360,final DerivativeStructure result = new DerivativeStructure(compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,361,"compiler.pow(data, 0, -1, result.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,362,return result;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,365,/** Square root.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,366,* @return square root of the instance
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,368,public DerivativeStructure sqrt() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,369,return rootN(2);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,372,/** Cubic root.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,373,* @return cubic root of the instance
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,375,public DerivativeStructure cbrt() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,376,return rootN(3);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,379,/** N<sup>th</sup> root.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,380,* @param n order of the root
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,381,* @return n<sup>th</sup> root of the instance
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,383,public DerivativeStructure rootN(final int n) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,384,final DerivativeStructure result = new DerivativeStructure(compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,385,"compiler.rootN(data, 0, n, result.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,386,return result;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,389,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,390,public Field<DerivativeStructure> getField() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,391,return new Field<DerivativeStructure>() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,393,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,394,public DerivativeStructure getZero() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,395,"return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,398,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,399,public DerivativeStructure getOne() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,400,"return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,403,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,404,public Class<? extends FieldElement<DerivativeStructure>> getRuntimeClass() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,405,return DerivativeStructure.class;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,411,/** Power operation.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,412,* @param p power to apply
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,413,* @return this<sup>p</sup>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,415,public DerivativeStructure pow(final double p) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,416,final DerivativeStructure result = new DerivativeStructure(compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,417,"compiler.pow(data, 0, p, result.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,418,return result;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,421,/** Integer power operation.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,422,* @param n power to apply
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,423,* @return this<sup>n</sup>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,425,public DerivativeStructure pow(final int n) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,426,final DerivativeStructure result = new DerivativeStructure(compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,427,"compiler.pow(data, 0, n, result.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,428,return result;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,431,/** Exponential.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,432,* @return exponential of the instance
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,434,public DerivativeStructure exp() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,435,final DerivativeStructure result = new DerivativeStructure(compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,436,"compiler.exp(data, 0, result.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,437,return result;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,440,/** Natural logarithm.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,441,* @return logarithm of the instance
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,443,public DerivativeStructure log() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,444,final DerivativeStructure result = new DerivativeStructure(compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,445,"compiler.log(data, 0, result.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,446,return result;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,449,/** Cosine operation.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,450,* @return cos(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,452,public DerivativeStructure cos() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,453,final DerivativeStructure result = new DerivativeStructure(compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,454,"compiler.cos(data, 0, result.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,455,return result;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,458,/** Sine operation.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,459,* @return sin(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,461,public DerivativeStructure sin() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,462,final DerivativeStructure result = new DerivativeStructure(compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,463,"compiler.sin(data, 0, result.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,464,return result;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,467,/** Tangent operation.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,468,* @return tan(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,470,public DerivativeStructure tan() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,471,final DerivativeStructure result = new DerivativeStructure(compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,472,"compiler.tan(data, 0, result.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,473,return result;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,476,/** Arc cosine operation.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,477,* @return acos(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,479,public DerivativeStructure acos() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,480,final DerivativeStructure result = new DerivativeStructure(compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,481,"compiler.acos(data, 0, result.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,482,return result;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,485,/** Arc sine operation.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,486,* @return asin(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,488,public DerivativeStructure asin() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,489,final DerivativeStructure result = new DerivativeStructure(compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,490,"compiler.asin(data, 0, result.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,491,return result;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,494,/** Arc tangent operation.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,495,* @return tan(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,497,public DerivativeStructure atan() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,498,final DerivativeStructure result = new DerivativeStructure(compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,499,"compiler.atan(data, 0, result.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,500,return result;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,503,/** Two arguments arc tangent operation.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,504,* @param y first argument of the arc tangent
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,505,* @param x second argument of the arc tangent
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,506,"* @return atan2(y, x)"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,507,* @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,509,"public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x)"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,510,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,511,y.compiler.checkCompatibility(x.compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,512,final DerivativeStructure result = new DerivativeStructure(y.compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,513,"y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,514,return result;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,517,/** Evaluate Taylor expansion a derivative structure.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,518,"* @param offsets parameters offsets (dx, dy, ...)"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,519,"* @return value of the Taylor expansion at x+dx, y.dy, ..."
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,521,public double taylor(final double ... offsets) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,522,"return compiler.taylor(data, 0, offsets);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,526,* Replace the instance with a data transfer object for serialization.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,527,* @return data transfer object that will be serialized
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,529,private Object writeReplace() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,530,"return new DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,533,/** Internal class used only for serialization. */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,534,private static class DataTransferObject implements Serializable {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,536,/** Serializable UID. */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,537,private static final long serialVersionUID = 20120730L;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,539,/** Number of variables.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,540,* @Serial
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,542,private final int variables;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,544,/** Derivation order.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,545,* @Serial
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,547,private final int order;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,549,/** Partial derivatives.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,550,* @Serial
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,552,private final double[] data;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,554,/** Simple constructor.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,555,* @param variables number of variables
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,556,* @param order derivation order
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,557,* @param data partial derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,559,"public DataTransferObject(final int variables, final int order, final double[] data) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,560,this.variables = variables;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,561,this.order     = order;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,562,this.data      = data;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,565,/** Replace the deserialized data transfer object with a {@link DerivativeStructure}.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,566,* @return replacement {@link DerivativeStructure}
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,568,private Object readResolve() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,569,"final DerivativeStructure ds = new DerivativeStructure(variables, order);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,570,"System.arraycopy(data, 0, ds.data, 0, ds.data.length);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,571,return ds;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,17,package org.apache.commons.math3.analysis.differentiation;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,19,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,21,/** Interface for univariate functions derivatives.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,22,* <p>This interface represents a simple function which computes
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,23,* both the value and the first derivative of a mathematical function.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,24,* The derivative is computed with respect to the input variable.</p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,25,* @see UnivariateDifferentiable
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,26,* @see UnivariateDifferentiator
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,27,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,28,* @version $Id$
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,30,public interface UnivariateDifferential {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,32,/** Get the primitive function associated with this differential.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,33,* <p>Each {@link UnivariateDifferential} instance is tightly bound
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,34,* to an {@link UnivariateDifferentiable} instance. If the state of
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,35,* the primitive instance changes in any way that affects the
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,36,"* differential computation, this binding allows this change to"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,37,"* be immediately seen by the derivative instance, there is no need"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,38,* to differentiate the primitive again. The existing instance is aware
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,39,* of the primitive changes.</p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,40,"* <p>In other words in the following code snippet, the three values"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,41,"* f1, f2 and f3 should be equal (at least at machine tolerance level)</p>"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,42,* <pre>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,43,*    UnivariateDifferential derivative = differentiator.differentiate(derivable);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,44,*    derivable.someFunctionThatMutatesHeavilyTheInstance();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,45,*    double f1 = derivable.f(t);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,46,*    double f2 = derivative.getPrimitive().f(t);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,47,"*    double f3 = derivative.f(new DerivativeStructure(variables, order, index, t)).getValue();"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,48,* </pre>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,49,* @return primitive function bound to this derivative
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,51,UnivariateFunction getPrimitive();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,53,/** Simple mathematical function.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,54,* <p>{@link UnivariateDifferential} classes compute both the
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,55,* value and the first derivative of the function.</p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,56,* @param t function input value
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,57,* @return function result
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferential.java,59,DerivativeStructure f(DerivativeStructure t);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,17,package org.apache.commons.math3.analysis.differentiation;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,19,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,21,/** Interface defining the function differentiation operation.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,22,* @version $Id$
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,23,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,25,public interface UnivariateDifferentiator {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,27,/** Create an implementation of a differential for a
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,28,* {@link UnivariateDifferentiable differentiable function}.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,29,* @param function function to differentiate
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,30,* @return differential function
True,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java,32,UnivariateDifferential differentiate(UnivariateFunction function);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,19,* <p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,20,*   This package holds the main interfaces and basic building block classes
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,21,*   dealing with differentiation.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,22,*   The core class is {@link DerivativeStructure} which holds the value and
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,23,*   the differentials of a function. This class handles some arbitrary number
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,24,*   of free parameters and arbitrary derivation order. It is used both as
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,25,*   the input and the output type for the {@link UnivariateDifferential}
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,26,*   interface. Any differentiable function should implement this interface.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,27,* </p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,28,* <p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,29,*   The {@link UnivariateDifferentiator} interface defines a way to differentation
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,30,*   a simple {@link org.apache.commons.math3.analysis.UnivariateFunction
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,31,*   univariate function} and get a {@link differential function}.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,32,* </p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java,35,package org.apache.commons.math3.analysis.differentiation;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,21,import org.apache.commons.math3.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,22,import org.apache.commons.math3.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1148,-exp;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1151,exp--;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1168,inal double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1169,ouble ya = lnCoef_last[0];
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1170,ouble yb = lnCoef_last[1];
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1171,double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1172,double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1182,inal double[] lnCoef_i = LN_QUICK_COEF[i];
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1183,a = ya + lnCoef_i[0];
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1184,b = yb + lnCoef_i[1];
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1184,aa = ya + LN_QUICK_COEF[i][0];
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1185,ab = yb + LN_QUICK_COEF[i][1];
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1204,inal double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1205,double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1215,inal double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1216,double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1229,inal double numer = bits & 0x3ffffffffffL;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1230,inal double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1230,double numer = bits & 0x3ffffffffffL;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1231,double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1235,inal double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1236,ouble ya = lnCoef_last[0];
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1237,ouble yb = lnCoef_last[1];
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1236,double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1237,double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1249,inal double[] lnCoef_i = LN_HI_PREC_COEF[i];
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1250,a = ya + lnCoef_i[0];
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1251,b = yb + lnCoef_i[1];
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1249,aa = ya + LN_HI_PREC_COEF[i][0];
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1250,ab = yb + LN_HI_PREC_COEF[i][1];
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1584,* Raise a double to an int power.
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1586,* @param d Number to raise.
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1587,* @param e Exponent.
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1588,* @return d<sup>e</sup>
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1590,"public static double pow(double d, int e) {"
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1591,if (e == 0) {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1592,return 1.0;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1593,} else if (e < 0) {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1594,e = -e;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1595,d = 1.0 / d;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1598,double result = 1;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1599,double d2p    = d;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1600,while (e != 0) {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1601,if ((e & 0x1) != 0) {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1602,result *= d2p;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1604,d2p *= d2p;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1605,e = e >> 1;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,1608,return result;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,18,package org.apache.commons.math3.analysis.differentiation;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,20,import java.lang.reflect.Field;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,21,import java.util.HashMap;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,22,import java.util.Map;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,24,import org.apache.commons.math3.util.ArithmeticUtils;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,26,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,30,* Test for class {@link DSCompiler}.
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,32,public class DSCompilerTest {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,34,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,35,public void testSize() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,36,for (int i = 0; i < 6; ++i) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,37,for (int j = 0; j < 6; ++j) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,38,"long expected = ArithmeticUtils.binomialCoefficient(i + j, i);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,39,"Assert.assertEquals(expected, DSCompiler.getCompiler(i, j).getSize());"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,40,"Assert.assertEquals(expected, DSCompiler.getCompiler(j, i).getSize());"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,45,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,46,public void testIndices() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,48,"DSCompiler c = DSCompiler.getCompiler(0, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,49,"checkIndices(c.getPartialDerivativeOrders(0), new int[0]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,51,"c = DSCompiler.getCompiler(0, 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,52,"checkIndices(c.getPartialDerivativeOrders(0), new int[0]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,54,"c = DSCompiler.getCompiler(1, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,55,"checkIndices(c.getPartialDerivativeOrders(0), 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,57,"c = DSCompiler.getCompiler(1, 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,58,"checkIndices(c.getPartialDerivativeOrders(0), 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,59,"checkIndices(c.getPartialDerivativeOrders(1), 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,61,"c = DSCompiler.getCompiler(1, 2);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,62,"checkIndices(c.getPartialDerivativeOrders(0), 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,63,"checkIndices(c.getPartialDerivativeOrders(1), 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,64,"checkIndices(c.getPartialDerivativeOrders(2), 2);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,66,"c = DSCompiler.getCompiler(2, 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,67,"checkIndices(c.getPartialDerivativeOrders(0), 0, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,68,"checkIndices(c.getPartialDerivativeOrders(1), 1, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,69,"checkIndices(c.getPartialDerivativeOrders(2), 0, 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,71,"c = DSCompiler.getCompiler(1, 3);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,72,"checkIndices(c.getPartialDerivativeOrders(0), 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,73,"checkIndices(c.getPartialDerivativeOrders(1), 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,74,"checkIndices(c.getPartialDerivativeOrders(2), 2);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,75,"checkIndices(c.getPartialDerivativeOrders(3), 3);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,77,"c = DSCompiler.getCompiler(2, 2);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,78,"checkIndices(c.getPartialDerivativeOrders(0), 0, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,79,"checkIndices(c.getPartialDerivativeOrders(1), 1, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,80,"checkIndices(c.getPartialDerivativeOrders(2), 2, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,81,"checkIndices(c.getPartialDerivativeOrders(3), 0, 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,82,"checkIndices(c.getPartialDerivativeOrders(4), 1, 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,83,"checkIndices(c.getPartialDerivativeOrders(5), 0, 2);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,85,"c = DSCompiler.getCompiler(3, 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,86,"checkIndices(c.getPartialDerivativeOrders(0), 0, 0, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,87,"checkIndices(c.getPartialDerivativeOrders(1), 1, 0, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,88,"checkIndices(c.getPartialDerivativeOrders(2), 0, 1, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,89,"checkIndices(c.getPartialDerivativeOrders(3), 0, 0, 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,91,"c = DSCompiler.getCompiler(1, 4);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,92,"checkIndices(c.getPartialDerivativeOrders(0), 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,93,"checkIndices(c.getPartialDerivativeOrders(1), 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,94,"checkIndices(c.getPartialDerivativeOrders(2), 2);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,95,"checkIndices(c.getPartialDerivativeOrders(3), 3);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,96,"checkIndices(c.getPartialDerivativeOrders(4), 4);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,98,"c = DSCompiler.getCompiler(2, 3);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,99,"checkIndices(c.getPartialDerivativeOrders(0), 0, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,100,"checkIndices(c.getPartialDerivativeOrders(1), 1, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,101,"checkIndices(c.getPartialDerivativeOrders(2), 2, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,102,"checkIndices(c.getPartialDerivativeOrders(3), 3, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,103,"checkIndices(c.getPartialDerivativeOrders(4), 0, 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,104,"checkIndices(c.getPartialDerivativeOrders(5), 1, 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,105,"checkIndices(c.getPartialDerivativeOrders(6), 2, 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,106,"checkIndices(c.getPartialDerivativeOrders(7), 0, 2);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,107,"checkIndices(c.getPartialDerivativeOrders(8), 1, 2);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,108,"checkIndices(c.getPartialDerivativeOrders(9), 0, 3);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,110,"c = DSCompiler.getCompiler(3, 2);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,111,"checkIndices(c.getPartialDerivativeOrders(0), 0, 0, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,112,"checkIndices(c.getPartialDerivativeOrders(1), 1, 0, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,113,"checkIndices(c.getPartialDerivativeOrders(2), 2, 0, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,114,"checkIndices(c.getPartialDerivativeOrders(3), 0, 1, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,115,"checkIndices(c.getPartialDerivativeOrders(4), 1, 1, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,116,"checkIndices(c.getPartialDerivativeOrders(5), 0, 2, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,117,"checkIndices(c.getPartialDerivativeOrders(6), 0, 0, 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,118,"checkIndices(c.getPartialDerivativeOrders(7), 1, 0, 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,119,"checkIndices(c.getPartialDerivativeOrders(8), 0, 1, 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,120,"checkIndices(c.getPartialDerivativeOrders(9), 0, 0, 2);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,122,"c = DSCompiler.getCompiler(4, 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,123,"checkIndices(c.getPartialDerivativeOrders(0), 0, 0, 0, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,124,"checkIndices(c.getPartialDerivativeOrders(1), 1, 0, 0, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,125,"checkIndices(c.getPartialDerivativeOrders(2), 0, 1, 0, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,126,"checkIndices(c.getPartialDerivativeOrders(3), 0, 0, 1, 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,127,"checkIndices(c.getPartialDerivativeOrders(4), 0, 0, 0, 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,131,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,132,public void testSymmetry() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,133,for (int i = 0; i < 6; ++i) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,134,for (int j = 0; j < 6; ++j) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,135,"DSCompiler c = DSCompiler.getCompiler(i, j);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,136,for (int k = 0; k < c.getSize(); ++k) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,137,"Assert.assertEquals(k, c.getPartialDerivativeIndex(c.getPartialDerivativeOrders(k)));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,143,@Test public void testMultiplicationRules()
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,144,"throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,146,"Map<String,String> referenceRules = new HashMap<String, String>();"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,147,"referenceRules.put(""(f*g)"",          ""f * g"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,148,"referenceRules.put(""d(f*g)/dx"",      ""f * dg/dx + df/dx * g"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,149,"referenceRules.put(""d(f*g)/dy"",      referenceRules.get(""d(f*g)/dx"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,150,"referenceRules.put(""d(f*g)/dz"",      referenceRules.get(""d(f*g)/dx"").replaceAll(""x"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,151,"referenceRules.put(""d(f*g)/dt"",      referenceRules.get(""d(f*g)/dx"").replaceAll(""x"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,152,"referenceRules.put(""d2(f*g)/dx2"",    ""f * d2g/dx2 + 2 * df/dx * dg/dx + d2f/dx2 * g"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,153,"referenceRules.put(""d2(f*g)/dy2"",    referenceRules.get(""d2(f*g)/dx2"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,154,"referenceRules.put(""d2(f*g)/dz2"",    referenceRules.get(""d2(f*g)/dx2"").replaceAll(""x"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,155,"referenceRules.put(""d2(f*g)/dt2"",    referenceRules.get(""d2(f*g)/dx2"").replaceAll(""x"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,156,"referenceRules.put(""d2(f*g)/dxdy"",   ""f * d2g/dxdy + df/dy * dg/dx + df/dx * dg/dy + d2f/dxdy * g"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,157,"referenceRules.put(""d2(f*g)/dxdz"",   referenceRules.get(""d2(f*g)/dxdy"").replaceAll(""y"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,158,"referenceRules.put(""d2(f*g)/dxdt"",   referenceRules.get(""d2(f*g)/dxdy"").replaceAll(""y"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,159,"referenceRules.put(""d2(f*g)/dydz"",   referenceRules.get(""d2(f*g)/dxdz"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,160,"referenceRules.put(""d2(f*g)/dydt"",   referenceRules.get(""d2(f*g)/dxdt"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,161,"referenceRules.put(""d2(f*g)/dzdt"",   referenceRules.get(""d2(f*g)/dxdt"").replaceAll(""x"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,162,"referenceRules.put(""d3(f*g)/dx3"",    ""f * d3g/dx3 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,163,""" 3 * df/dx * d2g/dx2 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,164,""" 3 * d2f/dx2 * dg/dx +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,165,""" d3f/dx3 * g"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,166,"referenceRules.put(""d3(f*g)/dy3"",   referenceRules.get(""d3(f*g)/dx3"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,167,"referenceRules.put(""d3(f*g)/dz3"",   referenceRules.get(""d3(f*g)/dx3"").replaceAll(""x"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,168,"referenceRules.put(""d3(f*g)/dt3"",   referenceRules.get(""d3(f*g)/dx3"").replaceAll(""x"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,169,"referenceRules.put(""d3(f*g)/dx2dy"",  ""f * d3g/dx2dy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,170,""" df/dy * d2g/dx2 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,171,""" 2 * df/dx * d2g/dxdy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,172,""" 2 * d2f/dxdy * dg/dx +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,173,""" d2f/dx2 * dg/dy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,174,""" d3f/dx2dy * g"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,175,"referenceRules.put(""d3(f*g)/dxdy2"",  ""f * d3g/dxdy2 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,176,""" 2 * df/dy * d2g/dxdy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,177,""" d2f/dy2 * dg/dx +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,178,""" df/dx * d2g/dy2 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,179,""" 2 * d2f/dxdy * dg/dy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,180,""" d3f/dxdy2 * g"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,181,"referenceRules.put(""d3(f*g)/dx2dz"",   referenceRules.get(""d3(f*g)/dx2dy"").replaceAll(""y"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,182,"referenceRules.put(""d3(f*g)/dy2dz"",   referenceRules.get(""d3(f*g)/dx2dz"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,183,"referenceRules.put(""d3(f*g)/dxdz2"",   referenceRules.get(""d3(f*g)/dxdy2"").replaceAll(""y"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,184,"referenceRules.put(""d3(f*g)/dydz2"",   referenceRules.get(""d3(f*g)/dxdz2"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,185,"referenceRules.put(""d3(f*g)/dx2dt"",   referenceRules.get(""d3(f*g)/dx2dz"").replaceAll(""z"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,186,"referenceRules.put(""d3(f*g)/dy2dt"",   referenceRules.get(""d3(f*g)/dx2dt"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,187,"referenceRules.put(""d3(f*g)/dz2dt"",   referenceRules.get(""d3(f*g)/dx2dt"").replaceAll(""x"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,188,"referenceRules.put(""d3(f*g)/dxdt2"",   referenceRules.get(""d3(f*g)/dxdy2"").replaceAll(""y"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,189,"referenceRules.put(""d3(f*g)/dydt2"",   referenceRules.get(""d3(f*g)/dxdt2"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,190,"referenceRules.put(""d3(f*g)/dzdt2"",   referenceRules.get(""d3(f*g)/dxdt2"").replaceAll(""x"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,191,"referenceRules.put(""d3(f*g)/dxdydz"", ""f * d3g/dxdydz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,192,""" df/dz * d2g/dxdy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,193,""" df/dy * d2g/dxdz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,194,""" d2f/dydz * dg/dx +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,195,""" df/dx * d2g/dydz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,196,""" d2f/dxdz * dg/dy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,197,""" d2f/dxdy * dg/dz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,198,""" d3f/dxdydz * g"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,199,"referenceRules.put(""d3(f*g)/dxdydt"", referenceRules.get(""d3(f*g)/dxdydz"").replaceAll(""z"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,200,"referenceRules.put(""d3(f*g)/dxdzdt"", referenceRules.get(""d3(f*g)/dxdydt"").replaceAll(""y"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,201,"referenceRules.put(""d3(f*g)/dydzdt"", referenceRules.get(""d3(f*g)/dxdzdt"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,203,"Field multFieldArrayField = DSCompiler.class.getDeclaredField(""multIndirection"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,204,multFieldArrayField.setAccessible(true);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,205,for (int i = 0; i < 5; ++i) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,206,for (int j = 0; j < 4; ++j) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,207,"DSCompiler compiler = DSCompiler.getCompiler(i, j);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,208,int[][][] multIndirection = (int[][][]) multFieldArrayField.get(compiler);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,209,for (int k = 0; k < multIndirection.length; ++k) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,210,"String product = ordersToString(compiler.getPartialDerivativeOrders(k),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,211,"""(f*g)"", ""x"", ""y"", ""z"", ""t"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,212,StringBuilder rule = new StringBuilder();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,213,for (int[] term : multIndirection[k]) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,214,if (rule.length() > 0) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,215,"rule.append("" + "");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,217,if (term[0] > 1) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,218,"rule.append(term[0]).append("" * "");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,220,"rule.append(ordersToString(compiler.getPartialDerivativeOrders(term[1]),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,221,"""f"", ""x"", ""y"", ""z"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,222,"rule.append("" * "");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,223,"rule.append(ordersToString(compiler.getPartialDerivativeOrders(term[2]),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,224,"""g"", ""x"", ""y"", ""z"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,226,"Assert.assertEquals(product, referenceRules.get(product), rule.toString());"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,232,@Test public void testCompositionRules()
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,233,"throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,235,"// the following reference rules have all been computed independently from the library,"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,236,// using only pencil and paper and some search and replace to handle symmetries
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,237,"Map<String,String> referenceRules = new HashMap<String, String>();"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,238,"referenceRules.put(""(f(g))"",              ""(f(g))"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,239,"referenceRules.put(""d(f(g))/dx"",          ""d(f(g))/dg * dg/dx"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,240,"referenceRules.put(""d(f(g))/dy"",          referenceRules.get(""d(f(g))/dx"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,241,"referenceRules.put(""d(f(g))/dz"",          referenceRules.get(""d(f(g))/dx"").replaceAll(""x"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,242,"referenceRules.put(""d(f(g))/dt"",          referenceRules.get(""d(f(g))/dx"").replaceAll(""x"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,243,"referenceRules.put(""d2(f(g))/dx2"",        ""d2(f(g))/dg2 * dg/dx * dg/dx + d(f(g))/dg * d2g/dx2"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,244,"referenceRules.put(""d2(f(g))/dy2"",        referenceRules.get(""d2(f(g))/dx2"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,245,"referenceRules.put(""d2(f(g))/dz2"",        referenceRules.get(""d2(f(g))/dx2"").replaceAll(""x"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,246,"referenceRules.put(""d2(f(g))/dt2"",        referenceRules.get(""d2(f(g))/dx2"").replaceAll(""x"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,247,"referenceRules.put(""d2(f(g))/dxdy"",       ""d2(f(g))/dg2 * dg/dx * dg/dy + d(f(g))/dg * d2g/dxdy"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,248,"referenceRules.put(""d2(f(g))/dxdz"",       referenceRules.get(""d2(f(g))/dxdy"").replaceAll(""y"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,249,"referenceRules.put(""d2(f(g))/dxdt"",       referenceRules.get(""d2(f(g))/dxdy"").replaceAll(""y"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,250,"referenceRules.put(""d2(f(g))/dydz"",       referenceRules.get(""d2(f(g))/dxdz"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,251,"referenceRules.put(""d2(f(g))/dydt"",       referenceRules.get(""d2(f(g))/dxdt"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,252,"referenceRules.put(""d2(f(g))/dzdt"",       referenceRules.get(""d2(f(g))/dxdt"").replaceAll(""x"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,253,"referenceRules.put(""d3(f(g))/dx3"",        ""d3(f(g))/dg3 * dg/dx * dg/dx * dg/dx +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,254,""" 3 * d2(f(g))/dg2 * dg/dx * d2g/dx2 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,255,""" d(f(g))/dg * d3g/dx3"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,256,"referenceRules.put(""d3(f(g))/dy3"",        referenceRules.get(""d3(f(g))/dx3"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,257,"referenceRules.put(""d3(f(g))/dz3"",        referenceRules.get(""d3(f(g))/dx3"").replaceAll(""x"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,258,"referenceRules.put(""d3(f(g))/dt3"",        referenceRules.get(""d3(f(g))/dx3"").replaceAll(""x"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,259,"referenceRules.put(""d3(f(g))/dxdy2"",      ""d3(f(g))/dg3 * dg/dx * dg/dy * dg/dy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,260,""" 2 * d2(f(g))/dg2 * dg/dy * d2g/dxdy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,261,""" d2(f(g))/dg2 * dg/dx * d2g/dy2 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,262,""" d(f(g))/dg * d3g/dxdy2"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,263,"referenceRules.put(""d3(f(g))/dxdz2"",      referenceRules.get(""d3(f(g))/dxdy2"").replaceAll(""y"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,264,"referenceRules.put(""d3(f(g))/dxdt2"",      referenceRules.get(""d3(f(g))/dxdy2"").replaceAll(""y"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,265,"referenceRules.put(""d3(f(g))/dydz2"",      referenceRules.get(""d3(f(g))/dxdz2"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,266,"referenceRules.put(""d3(f(g))/dydt2"",      referenceRules.get(""d3(f(g))/dxdt2"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,267,"referenceRules.put(""d3(f(g))/dzdt2"",      referenceRules.get(""d3(f(g))/dxdt2"").replaceAll(""x"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,268,"referenceRules.put(""d3(f(g))/dx2dy"",      ""d3(f(g))/dg3 * dg/dx * dg/dx * dg/dy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,269,""" 2 * d2(f(g))/dg2 * dg/dx * d2g/dxdy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,270,""" d2(f(g))/dg2 * d2g/dx2 * dg/dy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,271,""" d(f(g))/dg * d3g/dx2dy"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,272,"referenceRules.put(""d3(f(g))/dx2dz"",      referenceRules.get(""d3(f(g))/dx2dy"").replaceAll(""y"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,273,"referenceRules.put(""d3(f(g))/dx2dt"",      referenceRules.get(""d3(f(g))/dx2dy"").replaceAll(""y"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,274,"referenceRules.put(""d3(f(g))/dy2dz"",      referenceRules.get(""d3(f(g))/dx2dz"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,275,"referenceRules.put(""d3(f(g))/dy2dt"",      referenceRules.get(""d3(f(g))/dx2dt"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,276,"referenceRules.put(""d3(f(g))/dz2dt"",      referenceRules.get(""d3(f(g))/dx2dt"").replaceAll(""x"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,277,"referenceRules.put(""d3(f(g))/dxdydz"",     ""d3(f(g))/dg3 * dg/dx * dg/dy * dg/dz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,278,""" d2(f(g))/dg2 * dg/dy * d2g/dxdz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,279,""" d2(f(g))/dg2 * dg/dx * d2g/dydz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,280,""" d2(f(g))/dg2 * d2g/dxdy * dg/dz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,281,""" d(f(g))/dg * d3g/dxdydz"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,282,"referenceRules.put(""d3(f(g))/dxdydt"",     referenceRules.get(""d3(f(g))/dxdydz"").replaceAll(""z"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,283,"referenceRules.put(""d3(f(g))/dxdzdt"",     referenceRules.get(""d3(f(g))/dxdydt"").replaceAll(""y"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,284,"referenceRules.put(""d3(f(g))/dydzdt"",     referenceRules.get(""d3(f(g))/dxdzdt"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,285,"referenceRules.put(""d4(f(g))/dx4"",        ""d4(f(g))/dg4 * dg/dx * dg/dx * dg/dx * dg/dx +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,286,""" 6 * d3(f(g))/dg3 * dg/dx * dg/dx * d2g/dx2 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,287,""" 3 * d2(f(g))/dg2 * d2g/dx2 * d2g/dx2 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,288,""" 4 * d2(f(g))/dg2 * dg/dx * d3g/dx3 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,289,""" d(f(g))/dg * d4g/dx4"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,290,"referenceRules.put(""d4(f(g))/dy4"",        referenceRules.get(""d4(f(g))/dx4"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,291,"referenceRules.put(""d4(f(g))/dz4"",        referenceRules.get(""d4(f(g))/dx4"").replaceAll(""x"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,292,"referenceRules.put(""d4(f(g))/dt4"",        referenceRules.get(""d4(f(g))/dx4"").replaceAll(""x"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,293,"referenceRules.put(""d4(f(g))/dx3dy"",      ""d4(f(g))/dg4 * dg/dx * dg/dx * dg/dx * dg/dy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,294,""" 3 * d3(f(g))/dg3 * dg/dx * dg/dx * d2g/dxdy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,295,""" 3 * d3(f(g))/dg3 * dg/dx * d2g/dx2 * dg/dy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,296,""" 3 * d2(f(g))/dg2 * d2g/dx2 * d2g/dxdy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,297,""" 3 * d2(f(g))/dg2 * dg/dx * d3g/dx2dy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,298,""" d2(f(g))/dg2 * d3g/dx3 * dg/dy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,299,""" d(f(g))/dg * d4g/dx3dy"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,300,"referenceRules.put(""d4(f(g))/dx3dz"",      referenceRules.get(""d4(f(g))/dx3dy"").replaceAll(""y"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,301,"referenceRules.put(""d4(f(g))/dx3dt"",      referenceRules.get(""d4(f(g))/dx3dy"").replaceAll(""y"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,302,"referenceRules.put(""d4(f(g))/dxdy3"",      ""d4(f(g))/dg4 * dg/dx * dg/dy * dg/dy * dg/dy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,303,""" 3 * d3(f(g))/dg3 * dg/dy * dg/dy * d2g/dxdy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,304,""" 3 * d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dy2 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,305,""" 3 * d2(f(g))/dg2 * d2g/dxdy * d2g/dy2 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,306,""" 3 * d2(f(g))/dg2 * dg/dy * d3g/dxdy2 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,307,""" d2(f(g))/dg2 * dg/dx * d3g/dy3 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,308,""" d(f(g))/dg * d4g/dxdy3"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,309,"referenceRules.put(""d4(f(g))/dxdz3"",      referenceRules.get(""d4(f(g))/dxdy3"").replaceAll(""y"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,310,"referenceRules.put(""d4(f(g))/dxdt3"",      referenceRules.get(""d4(f(g))/dxdy3"").replaceAll(""y"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,311,"referenceRules.put(""d4(f(g))/dy3dz"",      referenceRules.get(""d4(f(g))/dx3dz"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,312,"referenceRules.put(""d4(f(g))/dy3dt"",      referenceRules.get(""d4(f(g))/dx3dt"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,313,"referenceRules.put(""d4(f(g))/dydz3"",      referenceRules.get(""d4(f(g))/dxdz3"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,314,"referenceRules.put(""d4(f(g))/dydt3"",      referenceRules.get(""d4(f(g))/dxdt3"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,315,"referenceRules.put(""d4(f(g))/dz3dt"",      referenceRules.get(""d4(f(g))/dx3dt"").replaceAll(""x"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,316,"referenceRules.put(""d4(f(g))/dzdt3"",      referenceRules.get(""d4(f(g))/dxdt3"").replaceAll(""x"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,317,"referenceRules.put(""d4(f(g))/dx2dy2"",     ""d4(f(g))/dg4 * dg/dx * dg/dx * dg/dy * dg/dy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,318,""" 4 * d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dxdy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,319,""" d3(f(g))/dg3 * dg/dx * dg/dx * d2g/dy2 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,320,""" 2 * d2(f(g))/dg2 * d2g/dxdy * d2g/dxdy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,321,""" 2 * d2(f(g))/dg2 * dg/dx * d3g/dxdy2 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,322,""" d3(f(g))/dg3 * d2g/dx2 * dg/dy * dg/dy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,323,""" 2 * d2(f(g))/dg2 * dg/dy * d3g/dx2dy +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,324,""" d2(f(g))/dg2 * d2g/dx2 * d2g/dy2 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,325,""" d(f(g))/dg * d4g/dx2dy2"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,326,"referenceRules.put(""d4(f(g))/dx2dz2"",     referenceRules.get(""d4(f(g))/dx2dy2"").replaceAll(""y"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,327,"referenceRules.put(""d4(f(g))/dx2dt2"",     referenceRules.get(""d4(f(g))/dx2dy2"").replaceAll(""y"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,328,"referenceRules.put(""d4(f(g))/dy2dz2"",     referenceRules.get(""d4(f(g))/dx2dz2"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,329,"referenceRules.put(""d4(f(g))/dy2dt2"",     referenceRules.get(""d4(f(g))/dx2dt2"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,330,"referenceRules.put(""d4(f(g))/dz2dt2"",     referenceRules.get(""d4(f(g))/dx2dt2"").replaceAll(""x"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,332,"referenceRules.put(""d4(f(g))/dx2dydz"",    ""d4(f(g))/dg4 * dg/dx * dg/dx * dg/dy * dg/dz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,333,""" 2 * d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dxdz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,334,""" d3(f(g))/dg3 * dg/dx * dg/dx * d2g/dydz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,335,""" 2 * d3(f(g))/dg3 * dg/dx * d2g/dxdy * dg/dz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,336,""" 2 * d2(f(g))/dg2 * d2g/dxdy * d2g/dxdz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,337,""" 2 * d2(f(g))/dg2 * dg/dx * d3g/dxdydz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,338,""" d3(f(g))/dg3 * d2g/dx2 * dg/dy * dg/dz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,339,""" d2(f(g))/dg2 * dg/dy * d3g/dx2dz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,340,""" d2(f(g))/dg2 * d2g/dx2 * d2g/dydz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,341,""" d2(f(g))/dg2 * d3g/dx2dy * dg/dz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,342,""" d(f(g))/dg * d4g/dx2dydz"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,343,"referenceRules.put(""d4(f(g))/dx2dydt"",    referenceRules.get(""d4(f(g))/dx2dydz"").replaceAll(""z"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,344,"referenceRules.put(""d4(f(g))/dx2dzdt"",    referenceRules.get(""d4(f(g))/dx2dydt"").replaceAll(""y"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,345,"referenceRules.put(""d4(f(g))/dxdy2dz"",    ""d4(f(g))/dg4 * dg/dx * dg/dy * dg/dy * dg/dz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,346,""" d3(f(g))/dg3 * dg/dy * dg/dy * d2g/dxdz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,347,""" 2 * d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dydz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,348,""" 2 * d3(f(g))/dg3 * dg/dy * d2g/dxdy * dg/dz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,349,""" 2 * d2(f(g))/dg2 * d2g/dxdy * d2g/dydz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,350,""" 2 * d2(f(g))/dg2 * dg/dy * d3g/dxdydz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,351,""" d3(f(g))/dg3 * dg/dx * d2g/dy2 * dg/dz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,352,""" d2(f(g))/dg2 * d2g/dy2 * d2g/dxdz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,353,""" d2(f(g))/dg2 * dg/dx * d3g/dy2dz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,354,""" d2(f(g))/dg2 * d3g/dxdy2 * dg/dz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,355,""" d(f(g))/dg * d4g/dxdy2dz"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,356,"referenceRules.put(""d4(f(g))/dxdy2dt"",    referenceRules.get(""d4(f(g))/dxdy2dz"").replaceAll(""z"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,357,"referenceRules.put(""d4(f(g))/dy2dzdt"",    referenceRules.get(""d4(f(g))/dx2dzdt"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,358,"referenceRules.put(""d4(f(g))/dxdydz2"",    ""d4(f(g))/dg4 * dg/dx * dg/dy * dg/dz * dg/dz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,359,""" 2 * d3(f(g))/dg3 * dg/dy * dg/dz * d2g/dxdz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,360,""" 2 * d3(f(g))/dg3 * dg/dx * dg/dz * d2g/dydz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,361,""" d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dz2 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,362,""" 2 * d2(f(g))/dg2 * d2g/dxdz * d2g/dydz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,363,""" d2(f(g))/dg2 * dg/dy * d3g/dxdz2 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,364,""" d2(f(g))/dg2 * dg/dx * d3g/dydz2 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,365,""" d3(f(g))/dg3 * d2g/dxdy * dg/dz * dg/dz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,366,""" 2 * d2(f(g))/dg2 * dg/dz * d3g/dxdydz +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,367,""" d2(f(g))/dg2 * d2g/dxdy * d2g/dz2 +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,368,""" d(f(g))/dg * d4g/dxdydz2"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,369,"referenceRules.put(""d4(f(g))/dxdz2dt"",    referenceRules.get(""d4(f(g))/dxdy2dt"").replaceAll(""y"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,370,"referenceRules.put(""d4(f(g))/dydz2dt"",    referenceRules.get(""d4(f(g))/dxdz2dt"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,371,"referenceRules.put(""d4(f(g))/dxdydt2"",    referenceRules.get(""d4(f(g))/dxdydz2"").replaceAll(""z"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,372,"referenceRules.put(""d4(f(g))/dxdzdt2"",    referenceRules.get(""d4(f(g))/dxdydt2"").replaceAll(""y"", ""z""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,373,"referenceRules.put(""d4(f(g))/dydzdt2"",    referenceRules.get(""d4(f(g))/dxdzdt2"").replaceAll(""x"", ""y""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,374,"referenceRules.put(""d4(f(g))/dxdydzdt"",   ""d4(f(g))/dg4 * dg/dx * dg/dy * dg/dz * dg/dt +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,375,""" d3(f(g))/dg3 * dg/dy * dg/dz * d2g/dxdt +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,376,""" d3(f(g))/dg3 * dg/dx * dg/dz * d2g/dydt +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,377,""" d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dzdt +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,378,""" d3(f(g))/dg3 * dg/dy * d2g/dxdz * dg/dt +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,379,""" d2(f(g))/dg2 * d2g/dxdz * d2g/dydt +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,380,""" d2(f(g))/dg2 * dg/dy * d3g/dxdzdt +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,381,""" d3(f(g))/dg3 * dg/dx * d2g/dydz * dg/dt +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,382,""" d2(f(g))/dg2 * d2g/dydz * d2g/dxdt +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,383,""" d2(f(g))/dg2 * dg/dx * d3g/dydzdt +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,384,""" d3(f(g))/dg3 * d2g/dxdy * dg/dz * dg/dt +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,385,""" d2(f(g))/dg2 * dg/dz * d3g/dxdydt +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,386,""" d2(f(g))/dg2 * d2g/dxdy * d2g/dzdt +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,387,""" d2(f(g))/dg2 * d3g/dxdydz * dg/dt +"" +"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,388,""" d(f(g))/dg * d4g/dxdydzdt"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,390,"Field compFieldArrayField = DSCompiler.class.getDeclaredField(""compIndirection"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,391,compFieldArrayField.setAccessible(true);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,392,for (int i = 0; i < 5; ++i) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,393,for (int j = 0; j < 5; ++j) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,394,"DSCompiler compiler = DSCompiler.getCompiler(i, j);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,395,int[][][] compIndirection = (int[][][]) compFieldArrayField.get(compiler);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,396,for (int k = 0; k < compIndirection.length; ++k) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,397,"String product = ordersToString(compiler.getPartialDerivativeOrders(k),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,398,"""(f(g))"", ""x"", ""y"", ""z"", ""t"");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,399,StringBuilder rule = new StringBuilder();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,400,for (int[] term : compIndirection[k]) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,401,if (rule.length() > 0) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,402,"rule.append("" + "");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,404,if (term[0] > 1) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,405,"rule.append(term[0]).append("" * "");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,407,"rule.append(orderToString(term[1], ""(f(g))"", ""g""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,408,for (int l = 2; l < term.length; ++l) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,409,"rule.append("" * "");"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,410,"rule.append(ordersToString(compiler.getPartialDerivativeOrders(term[l]),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,411,"""g"", ""x"", ""y"", ""z"", ""t""));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,414,"Assert.assertEquals(product, referenceRules.get(product), rule.toString());"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,420,"private void checkIndices(int[] indices, int ... expected) {"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,421,"Assert.assertEquals(expected.length, indices.length);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,422,for (int i = 0; i < expected.length; ++i) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,423,"Assert.assertEquals(expected[i], indices[i]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,427,"private String orderToString(int order, String functionName, String parameterName) {"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,428,if (order == 0) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,429,return functionName;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,430,} else if (order == 1) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,431,"return ""d"" + functionName + ""/d"" + parameterName;"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,432,} else {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,433,"return ""d"" + order + functionName + ""/d"" + parameterName + order;"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,437,"private String ordersToString(int[] orders, String functionName, String ... parametersNames) {"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,439,int sumOrders = 0;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,440,for (int order : orders) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,441,sumOrders += order;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,444,if (sumOrders == 0) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,445,return functionName;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,448,StringBuilder builder = new StringBuilder();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,449,builder.append('d');
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,450,if (sumOrders > 1) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,451,builder.append(sumOrders);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,453,builder.append(functionName).append('/');
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,454,for (int i = 0; i < orders.length; ++i) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,455,if (orders[i] > 0) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,456,builder.append('d').append(parametersNames[i]);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,457,if (orders[i] > 1) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,458,builder.append(orders[i]);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java,462,return builder.toString();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,18,package org.apache.commons.math3.analysis.differentiation;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,20,import java.util.Arrays;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,21,import java.util.List;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,23,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,24,import org.apache.commons.math3.exception.NumberIsTooLargeException;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,25,import org.apache.commons.math3.util.ArithmeticUtils;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,26,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,27,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,28,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,31,* Test for class {@link DerivativeStructure}.
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,33,public class DerivativeStructureTest {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,35,@Test(expected=NumberIsTooLargeException.class)
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,36,public void testWrongVariableIndex() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,37,"new DerivativeStructure(3, 1, 3, 1.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,40,@Test(expected=DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,41,public void testMissingOrders() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,42,"new DerivativeStructure(3, 1, 0, 1.0).getPartialDerivative(0, 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,45,@Test(expected=NumberIsTooLargeException.class)
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,46,public void testTooLargeOrder() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,47,"new DerivativeStructure(3, 1, 0, 1.0).getPartialDerivative(1, 1, 2);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,50,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,51,public void testVariableWithoutDerivative0() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,52,"DerivativeStructure v = new DerivativeStructure(1, 0, 0, 1.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,53,"Assert.assertEquals(1.0, v.getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,56,@Test(expected=NumberIsTooLargeException.class)
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,57,public void testVariableWithoutDerivative1() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,58,"DerivativeStructure v = new DerivativeStructure(1, 0, 0, 1.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,59,"Assert.assertEquals(1.0, v.getPartialDerivative(1), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,62,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,63,public void testVariable() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,64,for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,65,"checkF0F1(new DerivativeStructure(3, maxOrder, 0, 1.0),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,66,"1.0, 1.0, 0.0, 0.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,67,"checkF0F1(new DerivativeStructure(3, maxOrder, 1, 2.0),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,68,"2.0, 0.0, 1.0, 0.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,69,"checkF0F1(new DerivativeStructure(3, maxOrder, 2, 3.0),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,70,"3.0, 0.0, 0.0, 1.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,74,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,75,public void testConstant() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,76,for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,77,"checkF0F1(new DerivativeStructure(3, maxOrder, FastMath.PI),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,78,"FastMath.PI, 0.0, 0.0, 0.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,82,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,83,public void testPrimitiveAdd() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,84,for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,85,"checkF0F1(new DerivativeStructure(3, maxOrder, 0, 1.0).add(5), 6.0, 1.0, 0.0, 0.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,86,"checkF0F1(new DerivativeStructure(3, maxOrder, 1, 2.0).add(5), 7.0, 0.0, 1.0, 0.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,87,"checkF0F1(new DerivativeStructure(3, maxOrder, 2, 3.0).add(5), 8.0, 0.0, 0.0, 1.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,91,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,92,public void testAdd() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,93,for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,94,"DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,95,"DerivativeStructure y = new DerivativeStructure(3, maxOrder, 1, 2.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,96,"DerivativeStructure z = new DerivativeStructure(3, maxOrder, 2, 3.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,97,DerivativeStructure xyz = x.add(y.add(z));
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,98,"checkF0F1(xyz, x.getValue() + y.getValue() + z.getValue(), 1.0, 1.0, 1.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,102,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,103,public void testPrimitiveSubtract() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,104,for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,105,"checkF0F1(new DerivativeStructure(3, maxOrder, 0, 1.0).subtract(5), -4.0, 1.0, 0.0, 0.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,106,"checkF0F1(new DerivativeStructure(3, maxOrder, 1, 2.0).subtract(5), -3.0, 0.0, 1.0, 0.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,107,"checkF0F1(new DerivativeStructure(3, maxOrder, 2, 3.0).subtract(5), -2.0, 0.0, 0.0, 1.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,111,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,112,public void testSubtract() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,113,for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,114,"DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,115,"DerivativeStructure y = new DerivativeStructure(3, maxOrder, 1, 2.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,116,"DerivativeStructure z = new DerivativeStructure(3, maxOrder, 2, 3.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,117,DerivativeStructure xyz = x.subtract(y.subtract(z));
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,118,"checkF0F1(xyz, x.getValue() - (y.getValue() - z.getValue()), 1.0, -1.0, 1.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,122,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,123,public void testPrimitiveMultiply() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,124,for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,125,"checkF0F1(new DerivativeStructure(3, maxOrder, 0, 1.0).multiply(5),  5.0, 5.0, 0.0, 0.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,126,"checkF0F1(new DerivativeStructure(3, maxOrder, 1, 2.0).multiply(5), 10.0, 0.0, 5.0, 0.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,127,"checkF0F1(new DerivativeStructure(3, maxOrder, 2, 3.0).multiply(5), 15.0, 0.0, 0.0, 5.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,131,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,132,public void testMultiply() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,133,for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,134,"DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,135,"DerivativeStructure y = new DerivativeStructure(3, maxOrder, 1, 2.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,136,"DerivativeStructure z = new DerivativeStructure(3, maxOrder, 2, 3.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,137,DerivativeStructure xyz = x.multiply(y.multiply(z));
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,138,for (int i = 0; i <= maxOrder; ++i) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,139,for (int j = 0; j <= maxOrder; ++j) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,140,for (int k = 0; k <= maxOrder; ++k) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,141,if (i + j + k <= maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,142,Assert.assertEquals((i == 0 ? x.getValue() : (i == 1 ? 1.0 : 0.0)) *
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,143,(j == 0 ? y.getValue() : (j == 1 ? 1.0 : 0.0)) *
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,144,"(k == 0 ? z.getValue() : (k == 1 ? 1.0 : 0.0)),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,145,"xyz.getPartialDerivative(i, j, k),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,146,1.0e-15);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,154,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,155,public void testNegate() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,156,for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,157,"checkF0F1(new DerivativeStructure(3, maxOrder, 0, 1.0).negate(), -1.0, -1.0, 0.0, 0.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,158,"checkF0F1(new DerivativeStructure(3, maxOrder, 1, 2.0).negate(), -2.0, 0.0, -1.0, 0.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,159,"checkF0F1(new DerivativeStructure(3, maxOrder, 2, 3.0).negate(), -3.0, 0.0, 0.0, -1.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,163,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,164,public void testReciprocal() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,165,for (double x = 0.1; x < 1.2; x += 0.1) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,166,"DerivativeStructure r = new DerivativeStructure(1, 6, 0, x).reciprocal();"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,167,"Assert.assertEquals(1 / x, r.getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,168,for (int i = 1; i < r.getOrder(); ++i) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,169,"double expected = ArithmeticUtils.pow(-1, i) * ArithmeticUtils.factorial(i) /"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,170,"FastMath.pow(x, i + 1);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,171,"Assert.assertEquals(expected, r.getPartialDerivative(i), 1.0e-15 * FastMath.abs(expected));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,176,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,177,public void testPower() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,178,for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,179,for (int n = 0; n < 10; ++n) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,181,"DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,182,"DerivativeStructure y = new DerivativeStructure(3, maxOrder, 1, 2.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,183,"DerivativeStructure z = new DerivativeStructure(3, maxOrder, 2, 3.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,184,"List<DerivativeStructure> list = Arrays.asList(x, y, z,"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,185,"x.add(y).add(z),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,186,x.multiply(y).multiply(z));
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,188,if (n == 0) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,189,for (DerivativeStructure ds : list) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,190,"checkEquals(ds.getField().getOne(), ds.pow(n), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,192,} else if (n == 1) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,193,for (DerivativeStructure ds : list) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,194,"checkEquals(ds, ds.pow(n), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,196,} else {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,197,for (DerivativeStructure ds : list) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,198,DerivativeStructure p = ds.getField().getOne();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,199,for (int i = 0; i < n; ++i) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,200,p = p.multiply(ds);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,202,"checkEquals(p, ds.pow(n), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,209,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,210,public void testExpression() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,211,double epsilon = 2.5e-13;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,212,for (double x = 0; x < 2; x += 0.2) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,213,"DerivativeStructure dsX = new DerivativeStructure(3, 5, 0, x);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,214,for (double y = 0; y < 2; y += 0.2) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,215,"DerivativeStructure dsY = new DerivativeStructure(3, 5, 1, y);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,216,for (double z = 0; z >- 2; z -= 0.2) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,217,"DerivativeStructure dsZ = new DerivativeStructure(3, 5, 2, z);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,219,"// f(x, y, z) = x + 5 x y - 2 z + (8 z x - y)^3"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,220,DerivativeStructure ds =
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,221,"new DerivativeStructure(1, dsX,"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,222,"5, dsX.multiply(dsY),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,223,"-2, dsZ,"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,224,"1, new DerivativeStructure(8, dsZ.multiply(dsX),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,225,"-1, dsY).pow(3));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,226,"double f = x + 5 * x * y - 2 * z + FastMath.pow(8 * z * x - y, 3);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,227,"Assert.assertEquals(f, ds.getValue(),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,228,FastMath.abs(epsilon * f));
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,230,// df/dx = 1 + 5 y + 24 (8 z x - y)^2 z
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,231,"double dfdx = 1 + 5 * y + 24 * z * FastMath.pow(8 * z * x - y, 2);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,232,"Assert.assertEquals(dfdx, ds.getPartialDerivative(1, 0, 0),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,233,FastMath.abs(epsilon * dfdx));
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,235,// df/dxdy = 5 + 48 z*(y - 8 z x)
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,236,double dfdxdy = 5 + 48 * z * (y - 8 * z * x);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,237,"Assert.assertEquals(dfdxdy, ds.getPartialDerivative(1, 1, 0),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,238,FastMath.abs(epsilon * dfdxdy));
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,240,// df/dxdydz = 48 (y - 16 z x)
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,241,double dfdxdydz = 48 * (y - 16 * z * x);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,242,"Assert.assertEquals(dfdxdydz, ds.getPartialDerivative(1, 1, 1),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,243,FastMath.abs(epsilon * dfdxdydz));
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,251,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,252,public void testCompositionOneVariableX() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,253,double epsilon = 1.0e-13;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,254,for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,255,for (double x = 0.1; x < 1.2; x += 0.1) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,256,"DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,257,for (double y = 0.1; y < 1.2; y += 0.1) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,258,"DerivativeStructure dsY = new DerivativeStructure(1, maxOrder, y);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,259,DerivativeStructure f = dsX.divide(dsY).sqrt();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,260,double f0 = FastMath.sqrt(x / y);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,261,"Assert.assertEquals(f0, f.getValue(), FastMath.abs(epsilon * f0));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,262,if (f.getOrder() > 0) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,263,double f1 = 1 / (2 * FastMath.sqrt(x * y));
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,264,"Assert.assertEquals(f1, f.getPartialDerivative(1), FastMath.abs(epsilon * f1));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,265,if (f.getOrder() > 1) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,266,double f2 = -f1 / (2 * x);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,267,"Assert.assertEquals(f2, f.getPartialDerivative(2), FastMath.abs(epsilon * f2));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,268,if (f.getOrder() > 2) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,269,double f3 = (f0 + x / (2 * y * f0)) / (4 * x * x * x);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,270,"Assert.assertEquals(f3, f.getPartialDerivative(3), FastMath.abs(epsilon * f3));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,279,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,280,public void testTrigo() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,281,double epsilon = 2.0e-12;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,282,for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,283,for (double x = 0.1; x < 1.2; x += 0.1) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,284,"DerivativeStructure dsX = new DerivativeStructure(3, maxOrder, 0, x);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,285,for (double y = 0.1; y < 1.2; y += 0.1) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,286,"DerivativeStructure dsY = new DerivativeStructure(3, maxOrder, 1, y);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,287,for (double z = 0.1; z < 1.2; z += 0.1) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,288,"DerivativeStructure dsZ = new DerivativeStructure(3, maxOrder, 2, z);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,289,DerivativeStructure f = dsX.divide(dsY.cos().add(dsZ.tan())).sin();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,290,double a = FastMath.cos(y) + FastMath.tan(z);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,291,double f0 = FastMath.sin(x / a);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,292,"Assert.assertEquals(f0, f.getValue(), FastMath.abs(epsilon * f0));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,293,if (f.getOrder() > 0) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,294,double dfdx = FastMath.cos(x / a) / a;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,295,"Assert.assertEquals(dfdx, f.getPartialDerivative(1, 0, 0), FastMath.abs(epsilon * dfdx));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,296,double dfdy =  x * FastMath.sin(y) * dfdx / a;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,297,"Assert.assertEquals(dfdy, f.getPartialDerivative(0, 1, 0), FastMath.abs(epsilon * dfdy));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,298,double cz = FastMath.cos(z);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,299,double cz2 = cz * cz;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,300,double dfdz = -x * dfdx / (a * cz2);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,301,"Assert.assertEquals(dfdz, f.getPartialDerivative(0, 0, 1), FastMath.abs(epsilon * dfdz));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,302,if (f.getOrder() > 1) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,303,double df2dx2 = -(f0 / (a * a));
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,304,"Assert.assertEquals(df2dx2, f.getPartialDerivative(2, 0, 0), FastMath.abs(epsilon * df2dx2));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,305,double df2dy2 = x * FastMath.cos(y) * dfdx / a -
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,306,x * x * FastMath.sin(y) * FastMath.sin(y) * f0 / (a * a * a * a) +
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,307,2 * FastMath.sin(y) * dfdy / a;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,308,"Assert.assertEquals(df2dy2, f.getPartialDerivative(0, 2, 0), FastMath.abs(epsilon * df2dy2));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,309,double c4 = cz2 * cz2;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,310,double df2dz2 = x * (2 * a * (1 - a * cz * FastMath.sin(z)) * dfdx - x * f0 / a ) / (a * a * a * c4);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,311,"Assert.assertEquals(df2dz2, f.getPartialDerivative(0, 0, 2), FastMath.abs(epsilon * df2dz2));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,312,double df2dxdy = dfdy / x  - x * FastMath.sin(y) * f0 / (a * a * a);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,313,"Assert.assertEquals(df2dxdy, f.getPartialDerivative(1, 1, 0), FastMath.abs(epsilon * df2dxdy));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,322,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,323,public void testSqrtDefinition() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,324,"double[] epsilon = new double[] { 5.0e-16, 5.0e-16, 2.0e-15, 5.0e-14, 2.0e-12 };"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,325,for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,326,for (double x = 0.1; x < 1.2; x += 0.001) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,327,"DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,328,DerivativeStructure sqrt1 = dsX.pow(0.5);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,329,DerivativeStructure sqrt2 = dsX.sqrt();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,330,DerivativeStructure zero = sqrt1.subtract(sqrt2);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,331,for (int n = 0; n <= maxOrder; ++n) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,332,"Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,338,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,339,public void testSqrtPow2() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,340,"double[] epsilon = new double[] { 1.0e-16, 3.0e-16, 2.0e-15, 6.0e-14, 6.0e-12 };"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,341,for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,342,for (double x = 0.1; x < 1.2; x += 0.001) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,343,"DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,344,DerivativeStructure rebuiltX = dsX.multiply(dsX).sqrt();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,345,DerivativeStructure zero = rebuiltX.subtract(dsX);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,346,for (int n = 0; n <= maxOrder; ++n) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,347,"Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,353,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,354,public void testCbrtDefinition() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,355,"double[] epsilon = new double[] { 4.0e-16, 9.0e-16, 6.0e-15, 2.0e-13, 4.0e-12 };"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,356,for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,357,for (double x = 0.1; x < 1.2; x += 0.001) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,358,"DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,359,DerivativeStructure cbrt1 = dsX.pow(1.0 / 3.0);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,360,DerivativeStructure cbrt2 = dsX.cbrt();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,361,DerivativeStructure zero = cbrt1.subtract(cbrt2);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,362,for (int n = 0; n <= maxOrder; ++n) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,363,"Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,369,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,370,public void testCbrtPow3() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,371,"double[] epsilon = new double[] { 1.0e-16, 5.0e-16, 8.0e-15, 3.0e-13, 4.0e-11 };"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,372,for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,373,for (double x = 0.1; x < 1.2; x += 0.001) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,374,"DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,375,DerivativeStructure rebuiltX = dsX.multiply(dsX.multiply(dsX)).cbrt();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,376,DerivativeStructure zero = rebuiltX.subtract(dsX);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,377,for (int n = 0; n <= maxOrder; ++n) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,378,"Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,384,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,385,public void testExp() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,386,"double[] epsilon = new double[] { 1.0e-16, 1.0e-16, 1.0e-16, 1.0e-16, 1.0e-16 };"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,387,for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,388,for (double x = 0.1; x < 1.2; x += 0.001) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,389,double refExp = FastMath.exp(x);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,390,"DerivativeStructure exp = new DerivativeStructure(1, maxOrder, 0, x).exp();"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,391,for (int n = 0; n <= maxOrder; ++n) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,392,"Assert.assertEquals(refExp, exp.getPartialDerivative(n), epsilon[n]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,398,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,399,public void testLog() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,400,"double[] epsilon = new double[] { 1.0e-16, 1.0e-16, 3.0e-14, 7.0e-13, 3.0e-11 };"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,401,for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,402,for (double x = 0.1; x < 1.2; x += 0.001) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,403,"DerivativeStructure log = new DerivativeStructure(1, maxOrder, 0, x).log();"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,404,"Assert.assertEquals(FastMath.log(x), log.getValue(), epsilon[0]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,405,for (int n = 1; n <= maxOrder; ++n) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,406,"double refDer = -ArithmeticUtils.factorial(n - 1) / FastMath.pow(-x, n);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,407,"Assert.assertEquals(refDer, log.getPartialDerivative(n), epsilon[n]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,413,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,414,public void testLogExp() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,415,"double[] epsilon = new double[] { 2.0e-16, 2.0e-16, 3.0e-16, 2.0e-15, 6.0e-15 };"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,416,for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,417,for (double x = 0.1; x < 1.2; x += 0.001) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,418,"DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,419,DerivativeStructure rebuiltX = dsX.exp().log();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,420,DerivativeStructure zero = rebuiltX.subtract(dsX);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,421,for (int n = 0; n <= maxOrder; ++n) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,422,"Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,428,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,429,public void testTangentDefinition() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,430,"double[] epsilon = new double[] { 5.0e-16, 2.0e-15, 3.0e-14, 5.0e-13, 2.0e-11 };"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,431,for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,432,for (double x = 0.1; x < 1.2; x += 0.001) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,433,"DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,434,DerivativeStructure tan1 = dsX.sin().divide(dsX.cos());
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,435,DerivativeStructure tan2 = dsX.tan();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,436,DerivativeStructure zero = tan1.subtract(tan2);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,437,for (int n = 0; n <= maxOrder; ++n) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,438,"Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,444,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,445,public void testCompositionOneVariableY() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,446,double epsilon = 1.0e-13;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,447,for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,448,for (double x = 0.1; x < 1.2; x += 0.1) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,449,"DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, x);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,450,for (double y = 0.1; y < 1.2; y += 0.1) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,451,"DerivativeStructure dsY = new DerivativeStructure(1, maxOrder, 0, y);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,452,DerivativeStructure f = dsX.divide(dsY).sqrt();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,453,double f0 = FastMath.sqrt(x / y);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,454,"Assert.assertEquals(f0, f.getValue(), FastMath.abs(epsilon * f0));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,455,if (f.getOrder() > 0) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,456,double f1 = -x / (2 * y * y * f0);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,457,"Assert.assertEquals(f1, f.getPartialDerivative(1), FastMath.abs(epsilon * f1));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,458,if (f.getOrder() > 1) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,459,double f2 = (f0 - x / (4 * y * f0)) / (y * y);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,460,"Assert.assertEquals(f2, f.getPartialDerivative(2), FastMath.abs(epsilon * f2));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,461,if (f.getOrder() > 2) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,462,double f3 = (x / (8 * y * f0) - 2 * f0) / (y * y * y);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,463,"Assert.assertEquals(f3, f.getPartialDerivative(3), FastMath.abs(epsilon * f3));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,472,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,473,public void testField() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,474,for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,475,"DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,476,"checkF0F1(x.getField().getZero(), 0.0, 0.0, 0.0, 0.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,477,"checkF0F1(x.getField().getOne(), 1.0, 0.0, 0.0, 0.0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,478,"Assert.assertEquals(maxOrder, x.getField().getZero().getOrder());"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,479,"Assert.assertEquals(3, x.getField().getZero().getFreeParameters());"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,480,"Assert.assertEquals(DerivativeStructure.class, x.getField().getRuntimeClass());"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,484,"private void checkF0F1(DerivativeStructure ds, double value, double...derivatives) {"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,486,// check dimension
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,487,"Assert.assertEquals(derivatives.length, ds.getFreeParameters());"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,489,"// check value, directly and also as 0th order derivative"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,490,"Assert.assertEquals(value, ds.getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,491,"Assert.assertEquals(value, ds.getPartialDerivative(new int[ds.getFreeParameters()]), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,493,// check first order derivatives
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,494,for (int i = 0; i < derivatives.length; ++i) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,495,int[] orders = new int[derivatives.length];
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,496,orders[i] = 1;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,497,"Assert.assertEquals(derivatives[i], ds.getPartialDerivative(orders), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,502,"private void checkEquals(DerivativeStructure ds1, DerivativeStructure ds2, double epsilon) {"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,504,// check dimension
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,505,"Assert.assertEquals(ds1.getFreeParameters(), ds2.getFreeParameters());"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,506,"Assert.assertEquals(ds1.getOrder(), ds2.getOrder());"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,508,int[] derivatives = new int[ds1.getFreeParameters()];
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,509,int sum = 0;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,510,while (true) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,512,if (sum <= ds1.getOrder()) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,513,"Assert.assertEquals(ds1.getPartialDerivative(derivatives),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,514,"ds2.getPartialDerivative(derivatives),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,515,epsilon);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,518,boolean increment = true;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,519,sum = 0;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,520,for (int i = derivatives.length - 1; i >= 0; --i) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,521,if (increment) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,522,if (derivatives[i] == ds1.getOrder()) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,523,derivatives[i] = 0;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,524,} else {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,525,derivatives[i]++;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,526,increment = false;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,529,sum += derivatives[i];
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,531,if (increment) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,532,return;

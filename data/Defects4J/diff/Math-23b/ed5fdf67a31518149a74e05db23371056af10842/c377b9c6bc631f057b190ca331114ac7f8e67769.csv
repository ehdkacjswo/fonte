is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,18,package org.apache.commons.math.analysis.solvers;
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,21,/** The kinds of solutions that a {@link UnivariateRealSolver (univariate real)
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,22,* root-finding algorithm} may accept as solutions. This basically controls
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,23,* whether or not under-approximations and over-approximations are allowed.
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,25,"* <p>If all solutions are accepted ({@link #EITHER_SIDE}), then the solution"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,26,* that the root-finding algorithm returns for a given root may be equal to the
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,27,"* actual root, but it may also be an approximation that is slightly smaller"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,28,* or slightly larger than the actual root. Root-finding algorithms generally
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,29,* only guarantee that the returned solution is within the requested
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,30,"* tolerances. In certain cases however, in particular for"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,31,"* {@link EventHandler state events} of {@link ODEIntegrator ODE solvers}, it"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,32,* may be necessary to guarantee that a solution is returned that does not
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,33,* under-approximate the solution.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,35,* @see BracketedSolution
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,36,* @since 3.0
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,37,* @version $Id$
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,39,public enum AllowedSolutions {
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,40,/** There are no additional side restriction on the solutions for
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,41,"* root-finding. That is, both under-approximations and over-approximations"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,42,"* are allowed. So, if a function f(x) has a root at x = y, then the"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,43,"* root-finding result s may be smaller than y, equal to y, or greater"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,44,* than y.
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,46,"EITHER_SIDE,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,48,/** Only solutions that are less than or equal to the actual root are
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,49,"* acceptable as solutions for root-finding. In other words,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,50,"* over-approximations are not allowed. So, if a function f(x) has a root"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,51,"* at x = y, then the root-finding result s must satisfy s &lt;= y."
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,53,"LEFT_SIDE,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,55,/** Only solutions that are greater than or equal to the actual root are
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,56,"* acceptable as solutions for root-finding. In other words,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,57,"* under-approximations are not allowed. So, if a function f(x) has a root"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,58,"* at x = y, then the root-finding result s must satisfy s &gt;= y."
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,60,RIGHT_SIDE;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,68,* @param maxEval Maximum number of evaluations.
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,71, @param maxEval Maximum number of evaluations.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,86,* @param maxEval Maximum number of evaluations.
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,90, @param maxEval Maximum number of evaluations.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,18,package org.apache.commons.math.analysis.solvers;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,20,/** Interface for {@link UnivariateRealSolver (univariate real) root-finding
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,21,* algorithms} that maintain a bracketed solution. There are several advantages
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,22,* to having such root-finding algorithms:
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,23,* <ul>
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,24,*  <li>The bracketed solution guarantees that the root is kept within the
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,25,"*      interval. As such, these algorithms generally also guarantee"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,26,*      convergence.</li>
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,27,*  <li>The bracketed solution means that we have the opportunity to only
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,28,"*      return roots that are greater than or equal to the actual root, or"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,29,"*      are less than or equal to the actual root. That is, we can control"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,30,*      whether under-approximations and over-approximations are
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,31,*      {@link AllowedSolutions allowed solutions}. Other root-finding
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,32,*      algorithms can usually only guarantee that the solution (the root that
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,33,*      was found) is around the actual root.</li>
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,34,* </ul>
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,36,"* <p>For backwards compatibility, all root-finding algorithms must have"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,37,* {@link AllowedSolutions#EITHER_SIDE EITHER_SIDE} as default for the allowed
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,38,* solutions.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,40,* @see AllowedSolutions
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,41,* @since 3.0
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,42,* @version $Id$
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,44,public interface BracketedSolution {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,45,/** Returns the kind of solutions that the root-finding algorithm may
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,46,* accept as solutions.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,48,* @return the kind of solutions that the root-finding algorithm may
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,49,* accept as solutions
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,51,AllowedSolutions getAllowedSolutions();
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,53,/** Sets the kind of solutions that the root-finding algorithm may accept
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,54,* as solutions.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,56,* @param allowedSolutions the kind of solutions that the root-finding
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,57,* algorithm may accept as solutions
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedSolution.java,59,void setAllowedSolutions(AllowedSolutions allowedSolutions);
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,18,package org.apache.commons.math.analysis.solvers;
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,21,* Implements the <em>Illinois</em> method for root-finding (approximating
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,22,* a zero of a univariate real function). It is a modified
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,23,* {@link RegulaFalsiSolver <em>Regula Falsi</em>} method.
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,25,"* <p>Like the <em>Regula Falsi</em> method, convergence is guaranteed by"
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,26,"* maintaining a bracketed solution. The <em>Illinois</em> method however,"
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,27,* should converge much faster than the original <em>Regula Falsi</em>
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,28,* method.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,30,"* <p>The <em>Illinois</em> method assumes that the function is continuous,"
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,31,* but not necessarily smooth.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,33,"* <p>Implementation based on the following article: M. Dowell and P. Jarratt,"
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,34,* <em>A modified regula falsi method for computing the root of an
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,35,"* equation</em>, BIT Numerical Mathematics, volume 11, number 2,"
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,36,"* pages 168-174, Springer, 1971.</p>"
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,38,* @since 3.0
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,39,* @version $Id$
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,41,public class IllinoisSolver extends SecantBase implements BracketedSolution {
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,42,/** Construct a solver with default accuracy (1e-6). */
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,43,public IllinoisSolver() {
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,44,"super(DEFAULT_ABSOLUTE_ACCURACY, Method.ILLINOIS);"
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,48,* Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,50,* @param absoluteAccuracy absolute accuracy
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,52,public IllinoisSolver(final double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,53,"super(absoluteAccuracy, Method.ILLINOIS);"
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,57,* Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,59,* @param relativeAccuracy relative accuracy
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,60,* @param absoluteAccuracy absolute accuracy
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,62,"public IllinoisSolver(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,63,final double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,64,"super(relativeAccuracy, absoluteAccuracy, Method.ILLINOIS);"
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,67,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,68,@Override
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,69,public AllowedSolutions getAllowedSolutions() {
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,70,return allowedSolutions;
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,73,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,74,@Override
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,75,public void setAllowedSolutions(final AllowedSolutions allowedSolutions) {
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,76,this.allowedSolutions = allowedSolutions;
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,18,package org.apache.commons.math.analysis.solvers;
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,21,* Implements the <em>Pegasus</em> method for root-finding (approximating
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,22,* a zero of a univariate real function). It is a modified
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,23,* {@link RegulaFalsiSolver <em>Regula Falsi</em>} method.
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,25,"* <p>Like the <em>Regula Falsi</em> method, convergence is guaranteed by"
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,26,"* maintaining a bracketed solution. The <em>Pegasus</em> method however,"
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,27,* should converge much faster than the original <em>Regula Falsi</em> method.
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,28,"* Furthermore, it should converge faster than the"
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,29,"* {@link IllinoisSolver <em>Illinois</em>} method, another"
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,30,* <em>Regula Falsi</em>-based method.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,32,"* <p>The <em>Pegasus</em> method assumes that the function is continuous,"
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,33,* but not necessarily smooth.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,35,"* <p>Implementation based on the following article: M. Dowell and P. Jarratt,"
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,36,"* <em>The ""Pegasus"" method for computing the root of an equation</em>,"
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,37,"* BIT Numerical Mathematics, volume 12, number 4, pages 503-508, Springer,"
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,38,* 1972.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,40,* @since 3.0
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,41,* @version $Id$
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,43,public class PegasusSolver extends SecantBase implements BracketedSolution {
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,44,/** Construct a solver with default accuracy (1e-6). */
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,45,public PegasusSolver() {
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,46,"super(DEFAULT_ABSOLUTE_ACCURACY, Method.PEGASUS);"
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,50,* Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,52,* @param absoluteAccuracy absolute accuracy
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,54,public PegasusSolver(final double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,55,"super(absoluteAccuracy, Method.PEGASUS);"
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,59,* Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,61,* @param relativeAccuracy relative accuracy
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,62,* @param absoluteAccuracy absolute accuracy
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,64,"public PegasusSolver(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,65,final double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,66,"super(relativeAccuracy, absoluteAccuracy, Method.PEGASUS);"
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,69,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,70,@Override
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,71,public AllowedSolutions getAllowedSolutions() {
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,72,return allowedSolutions;
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,75,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,76,@Override
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,77,public void setAllowedSolutions(final AllowedSolutions allowedSolutions) {
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,78,this.allowedSolutions = allowedSolutions;
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,18,package org.apache.commons.math.analysis.solvers;
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,21,* Implements the <em>Regula Falsi</em> or <em>False position</em> method for
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,22,* root-finding (approximating a zero of a univariate real function). It is a
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,23,* modified {@link SecantSolver <em>Secant</em>} method. Unlike the
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,24,"* <em>Secant</em> method, convergence is guaranteed by maintaining a"
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,25,* {@link BracketedSolution bracketed solution}.
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,27,"* <p>The <em>Regula Falsi</em> method assumes that the function is continuous,"
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,28,* but not necessarily smooth.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,30,"* <p>Implementation based on the following article: M. Dowell and P. Jarratt,"
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,31,* <em>A modified regula falsi method for computing the root of an
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,32,"* equation</em>, BIT Numerical Mathematics, volume 11, number 2,"
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,33,"* pages 168-174, Springer, 1971.</p>"
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,35,* @since 3.0
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,36,* @version $Id$
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,38,public class RegulaFalsiSolver extends SecantBase implements BracketedSolution {
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,39,/** Construct a solver with default accuracy (1e-6). */
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,40,public RegulaFalsiSolver() {
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,41,"super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);"
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,45,* Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,47,* @param absoluteAccuracy absolute accuracy
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,49,public RegulaFalsiSolver(final double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,50,"super(absoluteAccuracy, Method.REGULA_FALSI);"
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,54,* Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,56,* @param relativeAccuracy relative accuracy
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,57,* @param absoluteAccuracy absolute accuracy
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,59,"public RegulaFalsiSolver(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,60,final double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,61,"super(relativeAccuracy, absoluteAccuracy, Method.REGULA_FALSI);"
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,64,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,65,@Override
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,66,public AllowedSolutions getAllowedSolutions() {
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,67,return allowedSolutions;
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,70,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,71,@Override
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,72,public void setAllowedSolutions(final AllowedSolutions allowedSolutions) {
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,73,this.allowedSolutions = allowedSolutions;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,18,package org.apache.commons.math.analysis.solvers;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,20,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,21,import org.apache.commons.math.exception.MathInternalError;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,24,* Base class for all <em>Secant</em>-based methods for root-finding
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,25,* (approximating a zero of a univariate real function).
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,27,"* <p>Implementation of the {@link SecantSolver <em>Secant</em>},"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,28,"* {@link RegulaFalsiSolver <em>Regula Falsi</em>}, and"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,29,* {@link IllinoisSolver <em>Illinois</em>} methods is based on the
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,30,"* following article: M. Dowell and P. Jarratt,"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,31,* <em>A modified regula falsi method for computing the root of an
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,32,"* equation</em>, BIT Numerical Mathematics, volume 11, number 2,"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,33,"* pages 168-174, Springer, 1971.</p>"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,35,* <p>Implementation of the {@link PegasusSolver <em>Pegasus</em>} method is
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,36,"* based on the following article: M. Dowell and P. Jarratt,"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,37,"* <em>The ""Pegasus"" method for computing the root of an equation</em>,"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,38,"* BIT Numerical Mathematics, volume 12, number 4, pages 503-508, Springer,"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,39,* 1972.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,41,* @since 3.0
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,42,* @version $Id$
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,44,public abstract class SecantBase extends AbstractUnivariateRealSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,45,/** Default absolute accuracy. */
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,46,protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,47,/** The kinds of solutions that the algorithm may accept. */
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,48,protected AllowedSolutions allowedSolutions = AllowedSolutions.EITHER_SIDE;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,49,/** The <em>Secant</em>-based root-finding method to use. */
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,50,private final Method method;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,53,* Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,55,* @param absoluteAccuracy absolute accuracy
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,56,* @param method <em>Secant</em>-based root-finding method to use
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,58,"protected SecantBase(final double absoluteAccuracy, final Method method) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,59,super(absoluteAccuracy);
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,60,this.method = method;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,64,* Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,66,* @param relativeAccuracy relative accuracy
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,67,* @param absoluteAccuracy absolute accuracy
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,68,* @param method <em>Secant</em>-based root-finding method to use
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,70,"protected SecantBase(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,71,"final double absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,72,final Method method) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,73,"super(relativeAccuracy, absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,74,this.method = method;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,77,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,78,@Override
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,79,protected final double doSolve() {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,80,// Get initial solution
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,81,double x0 = getMin();
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,82,double x1 = getMax();
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,83,double f0 = computeObjectiveValue(x0);
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,84,double f1 = computeObjectiveValue(x1);
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,86,"// If one of the bounds is the exact root, return it. Since these are"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,87,"// not under-approximations or over-approximations, we can return them"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,88,// regardless of the allowed solutions.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,89,if (f0 == 0.0) return x0;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,90,if (f1 == 0.0) return x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,92,// Verify bracketing of initial solution.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,93,"verifyBracketing(x0, x1);"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,95,// Get accuracies.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,96,final double ftol = getFunctionValueAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,97,final double atol = getAbsoluteAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,98,final double rtol = getRelativeAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,100,// Variables to hold new bounds.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,101,double x;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,102,double fx;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,104,"// Keep track of inverted intervals, meaning that the left bound is"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,105,// larger than the right bound. Not used for the original Secant
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,106,// method.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,107,boolean inverted = false;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,109,// Keep finding better approximations.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,110,while (true) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,111,// Calculate the next approximation.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,112,x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,113,fx = computeObjectiveValue(x);
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,115,"// If the new approximation is the exact root, return it. Since"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,116,"// this is not an under-approximation or an over-approximation,"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,117,// we can return it regardless of the allowed solutions.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,118,if (fx == 0.0) return x;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,120,// Update the bounds with the new approximation.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,121,if (method == Method.SECANT) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,122,x0 = x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,123,f0 = f1;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,124,x1 = x;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,125,f1 = fx;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,126,} else if (f1 * fx < 0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,127,"// We had [x0..x1]. We update it to [x1, x]. Note that the"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,128,"// value of x1 has switched to the other bound, thus inverting"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,129,// the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,130,x0 = x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,131,f0 = f1;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,132,x1 = x;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,133,f1 = fx;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,134,inverted = !inverted;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,135,} else {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,136,"// We had [x0..x1]. We update it to [x0, x]."
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,137,if (method == Method.ILLINOIS) f0 *= 0.5;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,138,if (method == Method.PEGASUS) f0 *= f1 / (f1 + fx);
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,139,x1 = x;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,140,f1 = fx;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,143,"// If the function value of the last approximation is too small,"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,144,"// given the function value accuracy, then we can't get close to"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,145,// the root than we already are.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,146,if (FastMath.abs(f1) <= ftol) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,147,switch (allowedSolutions) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,148,case EITHER_SIDE:
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,149,return x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,150,case LEFT_SIDE:
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,151,if (inverted) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,152,return x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,154,break;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,155,case RIGHT_SIDE:
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,156,if (!inverted) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,157,return x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,159,break;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,160,default:
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,161,throw new MathInternalError();
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,165,"// If the current interval is within the given accuracies, we"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,166,// are satisfied with the current approximation.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,167,"if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,168,atol)) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,169,switch (allowedSolutions) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,170,case EITHER_SIDE:
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,171,return x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,172,case LEFT_SIDE:
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,173,return inverted ? x1 : x0;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,174,case RIGHT_SIDE:
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,175,return inverted ? x0 : x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,176,default:
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,177,throw new MathInternalError();
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,183,/** <em>Secant</em>-based root-finding methods. */
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,184,protected enum Method {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,185,/** The original {@link SecantSolver <em>Secant</em>} method. */
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,186,"SECANT,"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,189,* The {@link RegulaFalsiSolver <em>Regula Falsi</em>} or
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,190,* <em>False Position</em> method.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,192,"REGULA_FALSI,"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,194,/** The {@link IllinoisSolver <em>Illinois</em>} method. */
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,195,"ILLINOIS,"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,197,/** The {@link PegasusSolver <em>Pegasus</em>} method. */
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java,198,"PEGASUS,"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,17,ackage org.apache.commons.math.analysis.solvers;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,19,mport org.apache.commons.math.exception.NoBracketingException;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,20,mport org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,18,package org.apache.commons.math.analysis.solvers;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,24, Implements a modified version of the
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,25," <a href=""http://mathworld.wolfram.com/SecantMethod.html"">secant method</a>"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,26, for approximating a zero of a real univariate function.
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,27, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,28, The algorithm is modified to maintain bracketing of a root by successive
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,29," approximations. Because of forced bracketing, convergence may be slower than"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,30," the unrestricted secant algorithm. However, this implementation should in"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,31, general outperform the
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,32," <a href=""http://mathworld.wolfram.com/MethodofFalsePosition.html"">"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,33, regula falsi method.</a></p>
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,34, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,35, The function is assumed to be continuous but not necessarily smooth.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,21,* Implements the <em>Secant</em> method for root-finding (approximating a
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,22,* zero of a univariate real function). The solution that is maintained is
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,23,"* not bracketed, and as such convergence is not guaranteed."
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,25,"* <p>Implementation based on the following article: M. Dowell and P. Jarratt,"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,26,* <em>A modified regula falsi method for computing the root of an
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,27,"* equation</em>, BIT Numerical Mathematics, volume 11, number 2,"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,28,"* pages 168-174, Springer, 1971.</p>"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,30,* <p>Note that since release 3.0 this class implements the actual
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,31,"* <em>Secant</em> algorithm, and not a modified one. As such, the 3.0 version"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,32,* is not backwards compatible with previous versions. To use an algorithm
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,33,"* similar to the pre-3.0 releases, use the"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,34,* {@link IllinoisSolver <em>Illinois</em>} algorithm or the
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,35,* {@link PegasusSolver <em>Pegasus</em>} algorithm.</p>
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,39,ublic class SecantSolver extends AbstractUnivariateRealSolver {
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,40,** Default absolute accuracy. */
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,41,rivate static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,44, Construct a solver with default accuracy (1e-6).
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,39,public class SecantSolver extends SecantBase {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,40,/** Construct a solver with default accuracy (1e-6). */
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,47,his(DEFAULT_ABSOLUTE_ACCURACY);
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,42,"super(DEFAULT_ABSOLUTE_ACCURACY, Method.SECANT);"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,52, @param absoluteAccuracy Absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,48,* @param absoluteAccuracy absolute accuracy
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,54,ublic SecantSolver(double absoluteAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,55,uper(absoluteAccuracy);
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,50,public SecantSolver(final double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,51,"super(absoluteAccuracy, Method.SECANT);"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,60, @param relativeAccuracy Relative accuracy.
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,61, @param absoluteAccuracy Absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,57,* @param relativeAccuracy relative accuracy
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,58,* @param absoluteAccuracy absolute accuracy
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,63,"ublic SecantSolver(double relativeAccuracy,"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,64,ouble absoluteAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,65,"uper(relativeAccuracy, absoluteAccuracy);"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,69, {@inheritDoc}
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,71,Override
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,72,rotected double doSolve() {
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,73,ouble min = getMin();
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,74,ouble max = getMax();
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,75,"erifyInterval(min, max);"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,77,inal double functionValueAccuracy = getFunctionValueAccuracy();
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,79,/ Index 0 is the old approximation for the root.
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,80,/ Index 1 is the last calculated approximation  for the root.
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,81,/ Index 2 is a bracket for the root with respect to x0.
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,82,/ OldDelta is the length of the bracketing interval of the last
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,83,/ iteration.
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,84,ouble x0 = min;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,85,ouble x1 = max;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,87,ouble y0 = computeObjectiveValue(x0);
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,88,/ return the first endpoint if it is good enough
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,89,f (FastMath.abs(y0) <= functionValueAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,90,eturn x0;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,93,/ return the second endpoint if it is good enough
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,94,ouble y1 = computeObjectiveValue(x1);
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,95,f (FastMath.abs(y1) <= functionValueAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,96,eturn x1;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,99,/ Verify bracketing
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,100,f (y0 * y1 >= 0) {
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,101,"hrow new NoBracketingException(min, max, y0, y1);"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,104,inal double absoluteAccuracy = getAbsoluteAccuracy();
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,105,inal double relativeAccuracy = getRelativeAccuracy();
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,107,ouble x2 = x0;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,108,ouble y2 = y0;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,109,ouble oldDelta = x2 - x1;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,110,hile (true) {
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,111,f (FastMath.abs(y2) < FastMath.abs(y1)) {
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,112,0 = x1;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,113,1 = x2;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,114,2 = x0;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,115,0 = y1;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,116,1 = y2;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,117,2 = y0;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,119,f (FastMath.abs(y1) <= functionValueAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,120,eturn x1;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,122,"f (FastMath.abs(oldDelta) < FastMath.max(relativeAccuracy * FastMath.abs(x1),"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,123,bsoluteAccuracy)) {
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,124,eturn x1;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,126,ouble delta;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,127,f (FastMath.abs(y1) > FastMath.abs(y0)) {
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,128,/ Function value increased in last iteration. Force bisection.
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,129,elta = 0.5 * oldDelta;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,130, else {
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,131,elta = (x0 - x1) / (1 - y0 / y1);
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,132,f (delta / oldDelta > 1) {
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,133,/ New approximation falls outside bracket.
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,134,/ Fall back to bisection.
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,135,elta = 0.5 * oldDelta;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,138,0 = x1;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,139,0 = y1;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,140,1 = x1 + delta;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,141,1 = computeObjectiveValue(x1);
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,142,f ((y1 > 0) == (y2 > 0)) {
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,143,"/ New bracket is (x0,x1)."
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,144,2 = x0;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,145,2 = y0;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,147,ldDelta = x2 - x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,60,"public SecantSolver(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,61,final double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,62,"super(relativeAccuracy, absoluteAccuracy, Method.SECANT);"
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,17,package org.apache.commons.math.analysis;
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,20,* Auxiliary class for testing solvers.
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,22,* @version $Id$
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,24,public class XMinus5Function implements DifferentiableUnivariateRealFunction {
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,26,/* Evaluate x - 5 fuction.
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,27,* @see org.apache.commons.math.UnivariateRealFunction#value(double)
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,29,public double value(double x) {
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,30,return x - 5;
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,33,/* First derivative of x - 5 function
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,35,public UnivariateRealFunction derivative() {
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,36,return new UnivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,37,public double value(double x) {
True,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,src/test/java/org/apache/commons/math/analysis/XMinus5Function.java,38,return 1.0;
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,18,package org.apache.commons.math.analysis.solvers;
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,21,* Test case for {@link IllinoisSolver Illinois} solver.
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,23,* @version $Id$
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,25,public final class IllinoisSolverTest extends SecantBaseTest {
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,26,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,27,protected UnivariateRealSolver getSolver() {
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,28,return new IllinoisSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,31,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,32,protected int[] getQuinticEvalCounts() {
True,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java,33,"return new int[] {3, 7, 9, 10, 10, 10, 12, 12, 14, 15, 20};"
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,18,package org.apache.commons.math.analysis.solvers;
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,21,* Test case for {@link PegasusSolver Pegasus} solver.
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,23,* @version $Id$
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,25,public final class PegasusSolverTest extends SecantBaseTest {
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,26,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,27,protected UnivariateRealSolver getSolver() {
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,28,return new PegasusSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,31,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,32,protected int[] getQuinticEvalCounts() {
True,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java,33,"return new int[] {3, 7, 9, 8, 9, 8, 10, 10, 12, 16, 18};"
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,18,package org.apache.commons.math.analysis.solvers;
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,21,* Test case for {@link RegulaFalsiSolver Regula Falsi} solver.
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,23,* @version $Id$
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,25,public final class RegulaFalsiSolverTest extends SecantBaseTest {
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,26,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,27,protected UnivariateRealSolver getSolver() {
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,28,return new RegulaFalsiSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,31,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,32,protected int[] getQuinticEvalCounts() {
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,33,"// While the Regula Falsi method guarantees convergence, convergence"
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,34,// may be extremely slow. The last test case does not converge within
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,35,"// even a million iterations. As such, it was disabled."
True,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,36,"return new int[] {3, 7, 8, 19, 18, 11, 67, 55, 288, 151, -1};"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,17,package org.apache.commons.math.analysis.solvers;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,19,import org.apache.commons.math.analysis.QuinticFunction;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,20,import org.apache.commons.math.analysis.SinFunction;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,21,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,22,import org.apache.commons.math.analysis.XMinus5Function;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,23,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,24,import org.apache.commons.math.exception.NoBracketingException;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,25,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,26,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,27,import org.junit.Test;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,30,* Base class for {@link SecantBase} derived root-finding algorithms tests.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,32,* @version $Id$
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,34,public abstract class SecantBaseTest {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,35,/** Returns the solver to use to perform the tests.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,36,* @return the solver to use to perform the tests
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,38,protected abstract UnivariateRealSolver getSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,40,/** Returns the expected number of evaluations for the
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,41,* {@link #testQuinticZero} unit test. A value of {@code -1} indicates that
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,42,* the test should be skipped for that solver.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,43,* @return the expected number of evaluations for the
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,44,* {@link #testQuinticZero} unit test
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,46,protected abstract int[] getQuinticEvalCounts();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,48,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,49,public void testSinZero() {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,50,// The sinus function is behaved well around the root at pi. The second
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,51,"// order derivative is zero, which means linear approximating methods"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,52,// still converge quadratically.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,53,UnivariateRealFunction f = new SinFunction();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,54,double result;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,55,UnivariateRealSolver solver = getSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,57,"result = solver.solve(100, f, 3, 4);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,58,//System.out.println(
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,59,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,60,"Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,61,Assert.assertTrue(solver.getEvaluations() <= 6);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,62,"result = solver.solve(100, f, 1, 4);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,63,//System.out.println(
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,64,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,65,"Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,66,Assert.assertTrue(solver.getEvaluations() <= 7);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,69,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,70,public void testQuinticZero() {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,71,"// The quintic function has zeros at 0, +-0.5 and +-1."
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,72,"// Around the root of 0 the function is well behaved, with a second"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,73,// derivative of zero a 0.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,74,"// The other roots are less well to find, in particular the root at 1,"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,75,// because the function grows fast for x>1.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,76,// The function has extrema (first derivative is zero) at 0.27195613
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,77,"// and 0.82221643, intervals containing these values are harder for"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,78,// the solvers.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,79,UnivariateRealFunction f = new QuinticFunction();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,80,double result;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,81,UnivariateRealSolver solver = getSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,82,double atol = solver.getAbsoluteAccuracy();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,83,int[] counts = getQuinticEvalCounts();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,85,"// Tests data: initial bounds, and expected solution, per test case."
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,86,"double[][] testsData = {{-0.2,  0.2,  0.0},"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,87,"{-0.1,  0.3,  0.0},"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,88,"{-0.3,  0.45, 0.0},"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,89,"{ 0.3,  0.7,  0.5},"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,90,"{ 0.2,  0.6,  0.5},"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,91,"{ 0.05, 0.95, 0.5},"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,92,"{ 0.85, 1.25, 1.0},"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,93,"{ 0.8,  1.2,  1.0},"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,94,"{ 0.85, 1.75, 1.0},"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,95,"{ 0.55, 1.45, 1.0},"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,96,"{ 0.85, 5.0,  1.0},"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,98,int maxIter = 500;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,100,for(int i = 0; i < testsData.length; i++) {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,101,"// Skip test, if needed."
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,102,if (counts[i] == -1) continue;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,104,// Compute solution.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,105,double[] testData = testsData[i];
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,106,"result = solver.solve(maxIter, f, testData[0], testData[1]);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,107,//System.out.println(
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,108,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,110,// Check solution.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,111,"Assert.assertEquals(result, testData[2], atol);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,112,Assert.assertTrue(solver.getEvaluations() <= counts[i] + 1);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,116,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,117,public void testRootEndpoints() {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,118,UnivariateRealFunction f = new XMinus5Function();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,119,UnivariateRealSolver solver = getSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,121,"// End-point is root. This should be a special case in the solver, and"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,122,// the initial end-point should be returned exactly.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,123,"double result = solver.solve(100, f, 5.0, 6.0);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,124,"Assert.assertEquals(5.0, result, 0.0);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,126,"result = solver.solve(100, f, 4.0, 5.0);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,127,"Assert.assertEquals(5.0, result, 0.0);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,129,"result = solver.solve(100, f, 5.0, 6.0, 5.5);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,130,"Assert.assertEquals(5.0, result, 0.0);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,132,"result = solver.solve(100, f, 4.0, 5.0, 4.5);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,133,"Assert.assertEquals(5.0, result, 0.0);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,136,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,137,public void testBadEndpoints() {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,138,UnivariateRealFunction f = new SinFunction();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,139,UnivariateRealSolver solver = getSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,140,try {  // bad interval
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,141,"solver.solve(100, f, 1, -1);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,142,"Assert.fail(""Expecting NumberIsTooLargeException - bad interval"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,143,} catch (NumberIsTooLargeException ex) {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,144,// expected
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,146,try {  // no bracket
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,147,"solver.solve(100, f, 1, 1.5);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,148,"Assert.fail(""Expecting NoBracketingException - non-bracketing"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,149,} catch (NoBracketingException ex) {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,150,// expected
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,152,try {  // no bracket
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,153,"solver.solve(100, f, 1, 1.5, 1.2);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,154,"Assert.fail(""Expecting NoBracketingException - non-bracketing"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,155,} catch (NoBracketingException ex) {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,156,// expected
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,160,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,161,public void testSolutionLeftSide() {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,162,UnivariateRealFunction f = new SinFunction();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,163,UnivariateRealSolver solver = getSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,164,if (!(solver instanceof BracketedSolution)) return;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,165,((BracketedSolution)solver).setAllowedSolutions(
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,166,AllowedSolutions.LEFT_SIDE);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,167,double left = -1.5;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,168,double right = 0.05;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,169,for(int i = 0; i < 10; i++) {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,170,// Test whether the allowed solutions are taken into account.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,171,"double solution = solver.solve(100, f, left, right);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,172,Assert.assertTrue(solution <= 0.0);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,174,// Prepare for next test.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,175,left -= 0.1;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,176,right += 0.3;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,180,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,181,public void testSolutionRightSide() {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,182,UnivariateRealFunction f = new SinFunction();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,183,UnivariateRealSolver solver = getSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,184,if (!(solver instanceof BracketedSolution)) return;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,185,((BracketedSolution)solver).setAllowedSolutions(
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,186,AllowedSolutions.RIGHT_SIDE);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,187,double left = -1.5;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,188,double right = 0.05;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,189,for(int i = 0; i < 10; i++) {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,190,// Test whether the allowed solutions are taken into account.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,191,"double solution = solver.solve(100, f, left, right);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,192,Assert.assertTrue(solution >= 0.0);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,194,// Prepare for next test.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,195,left -= 0.1;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantBaseTest.java,196,right += 0.3;
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,17,ackage org.apache.commons.math.analysis.solvers;
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,19,mport org.apache.commons.math.analysis.QuinticFunction;
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,20,mport org.apache.commons.math.analysis.SinFunction;
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,21,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,22,mport org.apache.commons.math.exception.NumberIsTooLargeException;
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,23,mport org.apache.commons.math.exception.NoBracketingException;
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,24,mport org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,25,mport org.junit.Assert;
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,26,mport org.junit.Test;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,18,package org.apache.commons.math.analysis.solvers;
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,29, Test case for {@link SecantSolver}.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,21,* Test case for {@link SecantSolver Secant} solver.
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,33,ublic final class SecantSolverTest {
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,34,Test
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,35,ublic void testSinZero() {
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,36,/ The sinus function is behaved well around the root at pi. The second
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,37,"/ order derivative is zero, which means linar approximating methods will"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,38,/ still converge quadratically.
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,39,nivariateRealFunction f = new SinFunction();
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,40,ouble result;
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,41,nivariateRealSolver solver = new SecantSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,43,"esult = solver.solve(100, f, 3, 4);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,44,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,45,"/    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,46,"ssert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,47,ssert.assertTrue(solver.getEvaluations() <= 6);
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,48,"esult = solver.solve(100, f, 1, 4);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,49,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,50,"/    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,51,"ssert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,52,ssert.assertTrue(solver.getEvaluations() <= 7);
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,55,Test
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,56,ublic void testQuinticZero() {
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,57,"/ The quintic function has zeros at 0, +-0.5 and +-1."
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,58,"/ Around the root of 0 the function is well behaved, with a second derivative"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,59,/ of zero a 0.
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,60,"/ The other roots are less well to find, in particular the root at 1, because"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,61,/ the function grows fast for x>1.
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,62,"/ The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,63,/ intervals containing these values are harder for the solvers.
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,64,nivariateRealFunction f = new QuinticFunction();
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,65,ouble result;
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,66,/ Brent-Dekker solver.
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,67,nivariateRealSolver solver = new SecantSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,68,"esult = solver.solve(100, f, -0.2, 0.2);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,69,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,70,"/    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,71,"ssert.assertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,72,ssert.assertTrue(solver.getEvaluations() <= 3);
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,73,"esult = solver.solve(100, f, -0.1, 0.3);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,74,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,75,"/    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,76,"ssert.assertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,77,ssert.assertTrue(solver.getEvaluations() <= 7);
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,78,"esult = solver.solve(100, f, -0.3, 0.45);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,79,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,80,"/    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,81,"ssert.assertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,82,ssert.assertTrue(solver.getEvaluations() <= 8);
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,83,"esult = solver.solve(100, f, 0.3, 0.7);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,84,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,85,"/    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,86,"ssert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,87,ssert.assertTrue(solver.getEvaluations() <= 9);
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,88,"esult = solver.solve(100, f, 0.2, 0.6);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,89,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,90,"/    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,91,"ssert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,92,ssert.assertTrue(solver.getEvaluations() <= 8);
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,93,"esult = solver.solve(100, f, 0.05, 0.95);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,94,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,95,"/    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,96,"ssert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,97,ssert.assertTrue(solver.getEvaluations() <= 10);
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,98,"esult = solver.solve(100, f, 0.85, 1.25);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,99,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,100,"/    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,101,"ssert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,102,ssert.assertTrue(solver.getEvaluations() <= 12);
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,103,"esult = solver.solve(100, f, 0.8, 1.2);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,104,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,105,"/    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,106,"ssert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,107,ssert.assertTrue(solver.getEvaluations() <= 10);
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,108,"esult = solver.solve(100, f, 0.85, 1.75);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,109,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,110,"/    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,111,"ssert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,112,ssert.assertTrue(solver.getEvaluations() <= 16);
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,113,/ The followig is especially slow because the solver first has to reduce
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,114,"/ the bracket to exclude the extremum. After that, convergence is rapide."
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,115,"esult = solver.solve(100, f, 0.55, 1.45);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,116,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,117,"/    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,118,"ssert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,119,ssert.assertTrue(solver.getEvaluations() <= 9);
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,120,"esult = solver.solve(100, f, 0.85, 5);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,121,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,122,"/    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,123,"ssert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,124,ssert.assertTrue(solver.getEvaluations() <= 16);
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,127,Test
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,128,ublic void testRootEndpoints() {
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,129,nivariateRealFunction f = new SinFunction();
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,130,ecantSolver solver = new SecantSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,132,/ endpoint is root
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,133,"ouble result = solver.solve(100, f, FastMath.PI, 4);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,134,"ssert.assertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,136,"esult = solver.solve(100, f, 3, FastMath.PI);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,137,"ssert.assertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,139,"esult = solver.solve(100, f, FastMath.PI, 4, 3.5);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,140,"ssert.assertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,142,"esult = solver.solve(100, f, 3, FastMath.PI, 3.07);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,143,"ssert.assertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,25,public final class SecantSolverTest extends SecantBaseTest {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,26,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,27,protected UnivariateRealSolver getSolver() {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,28,return new SecantSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,147,Test
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,148,ublic void testBadEndpoints() {
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,149,nivariateRealFunction f = new SinFunction();
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,150,ecantSolver solver = new SecantSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,151,ry {  // bad interval
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,152,"olver.solve(100, f, 1, -1);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,153,"ssert.fail(""Expecting NumberIsTooLargeException - bad interval"");"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,154, catch (NumberIsTooLargeException ex) {
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,155,/ expected
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,157,ry {  // no bracket
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,158,"olver.solve(100, f, 1, 1.5);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,159,"ssert.fail(""Expecting NoBracketingException - non-bracketing"");"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,160, catch (NoBracketingException ex) {
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,161,/ expected
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,163,ry {  // no bracket
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,164,"olver.solve(100, f, 1, 1.5, 1.2);"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,165,"ssert.fail(""Expecting NoBracketingException - non-bracketing"");"
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,166, catch (NoBracketingException ex) {
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,167,/ expected
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,31,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,32,protected int[] getQuinticEvalCounts() {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,33,"// As the Secant method does not maintain a bracketed solution,"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,34,// convergence is not guaranteed. Two test cases are disabled (-1) due
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,35,// to bad solutions.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,36,"return new int[] {3, 7, -1, 8, 9, 8, 11, 12, 14, -1, 16};"

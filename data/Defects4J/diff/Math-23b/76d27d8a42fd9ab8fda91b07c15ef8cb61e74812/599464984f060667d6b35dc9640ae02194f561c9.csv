is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,546,f (Double.isNaN(pair.cost)) {
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,547,"implex[i] = new PointCostPair(pair.point, evaluateCost(pair.point));"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,546,if (Double.isNaN(pair.getCost())) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,547,"simplex[i] = new PointCostPair(pair.getPoint(), evaluateCost(pair.getPoint()));"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,562,f (simplex[i].cost > pointCostPair.cost) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,562,if (simplex[i].getCost() > pointCostPair.getCost()) {
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,579,ouble cost1 = ((PointCostPair) o1).cost;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,580,ouble cost2 = ((PointCostPair) o2).cost;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,579,double cost1 = ((PointCostPair) o1).getCost();
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,580,double cost2 = ((PointCostPair) o2).getCost();
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,58,ouble originalCost = original[0].cost;
True,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,58,double originalCost = original[0].getCost();
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,97,ouble[] xSmallest = original[0].point;
True,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,97,double[] xSmallest = original[0].getPoint();
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,104,ouble[] xOriginal    = original[i].point;
True,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,104,double[] xOriginal    = original[i].getPoint();
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,114,eturn simplex[0].cost;
True,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,114,return simplex[0].getCost();
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,65,ouble   smallest      = simplex[0].cost;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,66,ouble   secondLargest = simplex[n-1].cost;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,67,ouble   largest       = simplex[n].cost;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,68,ouble[] xLargest      = simplex[n].point;
True,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,65,double   smallest      = simplex[0].getCost();
True,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,66,double   secondLargest = simplex[n-1].getCost();
True,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,67,double   largest       = simplex[n].getCost();
True,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,68,double[] xLargest      = simplex[n].getPoint();
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,74,ouble[] x = simplex[i].point;
True,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,74,double[] x = simplex[i].getPoint();
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,148,ouble[] xSmallest = simplex[0].point;
True,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,148,double[] xSmallest = simplex[0].getPoint();
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,150,ouble[] x = simplex[i].point;
True,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,150,double[] x = simplex[i].getPoint();
True,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/PointCostPair.java,36,/** Get the point.
True,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/PointCostPair.java,37,* @return the stored point
True,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/PointCostPair.java,39,public double[] getPoint() {
True,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/PointCostPair.java,40,return point;
True,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/PointCostPair.java,43,/** Get the cost.
True,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/PointCostPair.java,44,* @return the stored cost
True,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/PointCostPair.java,46,public double getCost() {
True,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/PointCostPair.java,47,return cost;
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/PointCostPair.java,37,ublic final double[] point;
True,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/PointCostPair.java,51,private final double[] point;
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/PointCostPair.java,40,ublic final double cost;
True,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/PointCostPair.java,54,private final double cost;
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,92,ssertTrue(optimum.cost > 0.01);
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,92,assertTrue(optimum.getCost() > 0.01);
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,117,ssertTrue(optimum.cost > 0.015);
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,117,assertTrue(optimum.getCost() > 0.015);
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,130,eturn (largest.cost - smallest.cost) < threshold;
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,130,return (largest.getCost() - smallest.getCost()) < threshold;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,113,"ssertEquals(0.0, optimum.cost, 5.0e-5);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,114,"ssertEquals(1.0, optimum.point[0], 0.01);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,115,"ssertEquals(1.0, optimum.point[1], 0.01);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,113,"assertEquals(0.0, optimum.getCost(), 5.0e-5);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,114,"assertEquals(1.0, optimum.getPoint()[0], 0.01);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,115,"assertEquals(1.0, optimum.getPoint()[1], 0.01);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,128,ssertTrue(minima[i-1].cost <= minima[i].cost);
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,128,assertTrue(minima[i-1].getCost() <= minima[i].getCost());
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,141,"ssertEquals(0.0, optimum.cost, 2.0e-4);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,141,"assertEquals(0.0, optimum.getCost(), 2.0e-4);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,144,"ssertEquals(0.0, optimum.cost, 3.0e-5);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,144,"assertEquals(0.0, optimum.getCost(), 3.0e-5);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,171,"ssertEquals(0.0, optimum.cost, 6.0e-4);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,172,"ssertEquals(0.0, optimum.point[0], 0.07);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,173,"ssertEquals(0.0, optimum.point[1], 0.07);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,174,"ssertEquals(0.0, optimum.point[2], 0.07);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,175,"ssertEquals(0.0, optimum.point[3], 0.07);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,171,"assertEquals(0.0, optimum.getCost(), 6.0e-4);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,172,"assertEquals(0.0, optimum.getPoint()[0], 0.07);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,173,"assertEquals(0.0, optimum.getPoint()[1], 0.07);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,174,"assertEquals(0.0, optimum.getPoint()[2], 0.07);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,175,"assertEquals(0.0, optimum.getPoint()[3], 0.07);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,188,eturn (largest.cost - smallest.cost) < threshold;
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,188,return (largest.getCost() - smallest.getCost()) < threshold;

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,21,import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;
False,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,31,ublic class Logistic implements UnivariateRealFunction {
True,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,32,public class Logistic implements DifferentiableUnivariateRealFunction {
False,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,39,rivate final double n;
True,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,40,private final double oneOverN;
False,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,73,his.n = n;
True,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,74,oneOverN = 1 / n;
False,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,78,"eturn a + (k - a) / FastMath.pow(1 + q * FastMath.exp(b * (m - x)), 1 / n);"
True,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,79,"return a + (k - a) / FastMath.pow(1 + q * FastMath.exp(b * (m - x)), oneOverN);"
True,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,82,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,83,public UnivariateRealFunction derivative() {
True,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,84,return new UnivariateRealFunction() {
True,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,85,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,86,public double value(double x) {
True,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,87,final double exp = q * FastMath.exp(b * (m - x));
True,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,88,if (Double.isInfinite(exp)) {
True,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,89,// Avoid returning NaN in case of overflow.
True,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,90,return 0;
True,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,92,final double exp1 = exp + 1;
True,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,src/main/java/org/apache/commons/math/analysis/function/Logistic.java,93,"return b * oneOverN * exp / FastMath.pow(exp1, oneOverN + 1);"
True,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,80,@Test
True,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,81,public void testCompareDerivativeSigmoid() {
True,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,82,final double k = 3;
True,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,83,final double a = 2;
True,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,85,"final Logistic f = new Logistic(k, 0, 1, 1, a, 1);"
True,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,86,"final Sigmoid g = new Sigmoid(a, k);"
True,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,88,final UnivariateRealFunction dfdx = f.derivative();
True,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,89,final UnivariateRealFunction dgdx = g.derivative();
True,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,91,final double min = -10;
True,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,92,final double max = 10;
True,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,93,final double n = 20;
True,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,94,final double delta = (max - min) / n;
True,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,95,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,96,final double x = min + i * delta;
True,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java,97,"Assert.assertEquals(""x="" + x, dgdx.value(x), dfdx.value(x), EPS);"

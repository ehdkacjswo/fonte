is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,59, @version $Revision: 1.4 $ $Date: 2003/07/09 20:02:44 $
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,59,* @version $Revision: 1.5 $ $Date: 2003/07/30 21:58:10 $
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,64,* Default constructor.
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,71,* Construct an exception with the given message.
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,79,* Construct an exception with the given message and root cause.
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,88,* Construct an exception with the given root cause.
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,59, @version $Revision: 1.2 $ $Date: 2003/07/09 20:02:43 $
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,59,* @version $Revision: 1.3 $ $Date: 2003/07/30 21:58:10 $
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,63,rivate double[][] c = null ;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,63,private double[][] c = null;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,65,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,66," @see org.apache.commons.math.UnivariateRealInterpolator#interpolate(double[], double[])"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,66,* Computes an interpolating function for the data set.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,67,* @param xval the arguments for the interpolation points
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,68,* @param yval the values for the interpolation points
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,69,* @return a function which interpolates the data set
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,70,* @throws MathException if arguments violate assumptions made by the
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,71,*         interpolationg algorithm
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,70,"hrow new IllegalArgumentException(""Dataset arrays must have same length."");"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,75,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,76,"""Dataset arrays must have same length."");"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,73,f ( c == null )
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,79,if (c == null) {
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,80,f (xval[i]>=xval[i+1]) {
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,81,"hrow new IllegalArgumentException(""Dataset must specify sorted, ascending x values."");"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,85,if (xval[i] >= xval[i + 1]) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,86,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,87,"""Dataset must specify sorted, ascending x values."");"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,107,[i] =
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,108,.0
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,109, ((yval[i + 2] - yval[i + 1]) / (xval[i + 2] - xval[i + 1])
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,110, (yval[i + 1] - yval[i]) / (xval[i + 1] - xval[i]));
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,113,b[i] = 6.0 * ((yval[i + 2] - yval[i + 1]) / (xval[i + 2] -
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,114,xval[i + 1]) - (yval[i + 1] - yval[i]) / (xval[i + 1] -
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,115,xval[i]));
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,135,[0][1] =
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,136,yval[1] - yval[0]) / (xval[1] - xval[0])
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,137, d[0] * (xval[1] - xval[0]) / 6.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,140,c[0][1] = (yval[1] - yval[0]) / (xval[1] - xval[0]) - d[0] *
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,141,(xval[1] - xval[0]) / 6.0;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,142,[i][1] =
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,143,yval[i + 1] - yval[i]) / (xval[i + 1] - xval[i])
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,144, d[i] * (xval[i + 1] - xval[i]) / 6.0
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,145, d[i
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,146, 1] * (xval[i + 1] - xval[i]) / 3.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,146,c[i][1] = (yval[i + 1] - yval[i]) / (xval[i + 1] - xval[i]) -
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,147,d[i] * (xval[i + 1] - xval[i]) / 6.0 - d[i - 1] *
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,148,(xval[i + 1] - xval[i]) / 3.0;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,151,[n - 1][1] =
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,152,yval[n] - yval[n - 1]) / (xval[n] - xval[n - 1])
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,153, d[n
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,154, 2] * (xval[n] - xval[n - 1]) / 3.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,153,c[n - 1][1] = (yval[n] - yval[n - 1]) / (xval[n] - xval[n - 1]) -
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,154,d[n - 2] * (xval[n] - xval[n - 1]) / 3.0;
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,65, @version $Revision: 1.3 $ $Date: 2003/07/11 15:59:14 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,65,* @version $Revision: 1.4 $ $Date: 2003/07/30 21:58:10 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,74," @throws RuntimeException if the operation isn't supported, the argument"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,75,  was outside the supported domain or any other problem.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,88," @throws RuntimeException if the operation isn't supported, the argument"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,89,  was outside the supported domain or any other problem.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,102," @throws RuntimeException if the operation isn't supported, the argument"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,103,  was outside the supported domain or any other problem.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,56,mport java.lang.reflect.InvocationTargetException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,58,mport org.apache.commons.math.MathConfigurationException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,59,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,69, @version $Revision: 1.3 $ $Date: 2003/07/11 15:59:14 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,64,* @version $Revision: 1.4 $ $Date: 2003/07/30 21:58:10 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,71,ublic class UnivariateRealSolverFactory {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,66,public abstract class UnivariateRealSolverFactory {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,75,rivate UnivariateRealSolverFactory() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,70,protected UnivariateRealSolverFactory() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,74,* @return a new factory.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,75,* @todo add comment
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,76,"* @todo for now, return the only concrete factory.  Later, allow for a"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,77,"*       plugable implementation, possibly using SPI and commons-discovery."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,79,public static UnivariateRealSolverFactory newInstance() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,80,return new UnivariateRealSolverFactoryImpl();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,80, actual solver returned can be controlled by defining the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,81, <code>org.apache.commons.math.analysis.UnivariateRealSolver</code>
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,82, property on the JVM command-line (<code>
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,83, -Dorg.apache.commons.math.analysis.UnivariateRealSolver=
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,84," <i>class name</i></code>).  The value of the property should be any,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,85, fully qualified class name for a type that implements the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,86," {@link UnivariateRealSolver} interface.  By default, an instance of"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,87, {@link BrentSolver} is returned.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,85,* actual solver returned is determined by the underlying factory.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,90, @throws MathConfigurationException if a
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,92,ublic static UnivariateRealSolver newSolver(UnivariateRealFunction f)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,93,hrows MathConfigurationException {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,94,tring solverClassName =
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,95,ystem.getProperty(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,96,"org.apache.commons.math.analysis.UnivariateRealSolver"","
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,97,"org.apache.commons.math.analysis.BrentSolver"");"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,98,ry {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,99,lass clazz = Class.forName(solverClassName);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,100,lass paramClass[] = new Class[1];
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,101,aramClass[0] = UnivariateRealFunction.class;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,102,bject param[] = new Object[1];
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,103,aram[0] = f;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,104,eturn (UnivariateRealSolver)clazz.getConstructor(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,105,aramClass).newInstance(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,106,aram);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,107, catch (IllegalArgumentException e) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,108,hrow new MathConfigurationException(e);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,109, catch (SecurityException e) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,110,hrow new MathConfigurationException(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,111,"Can't access "" + solverClassName,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,112,);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,113, catch (ClassNotFoundException e) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,114,hrow new MathConfigurationException(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,115,"Class not found: "" + solverClassName,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,116,);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,117, catch (InstantiationException e) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,118,hrow new MathConfigurationException(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,119,"Can't instantiate "" + solverClassName,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,120,);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,121, catch (IllegalAccessException e) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,122,hrow new MathConfigurationException(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,123,"Can't access "" + solverClassName,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,124,);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,125, catch (InvocationTargetException e) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,126,hrow new MathConfigurationException(e);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,127, catch (NoSuchMethodException e) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,128,hrow new MathConfigurationException(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,129,"No constructor with UnivariateRealFunction in "" +"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,130,"olverClassName,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,131,);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,89,public abstract UnivariateRealSolver newDefaultSolver(
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,90,UnivariateRealFunction f);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,136, Convience method to solve for zeros of real univariate functions.  A
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,137, default solver is created and used for solving.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,93,* Create a new {@link UnivariateRealSolver} for the given function.  The
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,94,* solver is an implementation of the bisection method.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,139, @param x0 the lower bound for the interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,140, @param x1 the upper bound for the interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,141, @return a value where the function is zero.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,142, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,143,         solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,96,* @return the new solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,145,"ublic static double solve(UnivariateRealFunction f, double x0, double x1)"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,146,hrows MathException {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,147,"eturn newSolver(f).solve(x0, x1);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,98,public abstract UnivariateRealSolver newBisectionSolver(
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,99,UnivariateRealFunction f);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,151, Convience method to solve for zeros of real univariate functions.  A
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,152, default solver is created and used for solving.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,102,* Create a new {@link UnivariateRealSolver} for the given function.  The
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,103,* solver is an implementation of the Brent method.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,154, @param x0 the lower bound for the interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,155, @param x1 the upper bound for the interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,156, @param absoluteAccuracy the accuracy to be used by the solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,157, @return a value where the function is zero.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,158, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,159,         solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,105,* @return the new solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,161,ublic static double solve(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,162,"nivariateRealFunction f,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,163,"ouble x0,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,164,"ouble x1,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,165,ouble absoluteAccuracy)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,166,hrows MathException {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,167,nivariateRealSolver solver = newSolver(f);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,168,olver.setAbsoluteAccuracy(absoluteAccuracy);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,169,"eturn solver.solve(x0, x1);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,107,public abstract UnivariateRealSolver newBrentSolver(
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,108,UnivariateRealFunction f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,111,* Create a new {@link UnivariateRealSolver} for the given function.  The
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,112,* solver is an implementation of the secant method.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,113,* @param f the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,114,* @return the new solver.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,116,public abstract UnivariateRealSolver newSecantSolver(
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,117,UnivariateRealFunction f);
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,59,mport org.apache.commons.math.analysis.UnivariateRealSolverFactory;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,59,import org.apache.commons.math.analysis.UnivariateRealSolverUtil;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,66, @version $Revision: 1.7 $ $Date: 2003/07/09 20:03:23 $
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,66,* @version $Revision: 1.8 $ $Date: 2003/07/30 21:58:11 $
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,129,ouble root = UnivariateRealSolverFactory.solve(
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,129,double root = UnivariateRealSolverUtil.solve(
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,73, @version $Revision: 1.8 $ $Date: 2003/07/09 20:03:22 $
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,73,* @version $Revision: 1.9 $ $Date: 2003/07/30 21:58:11 $
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,86,"* @todo for now, return the only concrete factory.  Later, allow for a"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,87,"*       plugable implementation, possibly using SPI and commons-discovery."
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,88,"/ for now, return the only concrete factory."
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,89,"/ later, allow for a plugable implementation, possible using SPI and"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,90,/ commons-discovery.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,81, @version $Revision: 1.3 $ $Date: 2003/07/07 23:19:22 $
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,81,* @version $Revision: 1.4 $ $Date: 2003/07/30 21:58:10 $
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,387,f (row < 1 || column < 1 || row > this.getRowDimension()
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,388,| column > this.getColumnDimension()) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,387,if (row < 1 || column < 1 || row > this.getRowDimension() ||
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,388,column > this.getColumnDimension()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,403,f (row < 1 || column < 1 || row > this.getRowDimension()
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,404,| column > this.getColumnDimension()) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,404,if (row < 1 || column < 1 || row > this.getRowDimension() ||
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,405,column > this.getColumnDimension()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,590,nt nRow = this.getRowDimension();
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,62, @version $Revision: 1.7 $ $Date: 2003/07/09 20:03:09 $
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,62,* @version $Revision: 1.8 $ $Date: 2003/07/30 21:58:10 $
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,146,f (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0)
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,147,| (x > 1) || (a <= 0.0) || (b <= 0.0)) {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,146,if (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,147,(x > 1) || (a <= 0.0) || (b <= 0.0)) {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,161,et =
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,162,((a + m) * (a + b + m) * x)
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,163, ((a + (2 * m))
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,164, (a + (2 * m) + 1.0));
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,161,ret = -((a + m) * (a + b + m) * x) /
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,162,((a + (2 * m)) * (a + (2 * m) + 1.0));
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,167,et =
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,168,m * (b - m) * x)
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,169, ((a + (2 * m) - 1) * (a + (2 * m)));
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,165,ret = (m * (b - m) * x) /
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,166,((a + (2 * m) - 1) * (a + (2 * m)));
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,189,et = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x))
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,190," Math.log(a) - logBeta(a, b, epsilon, maxIterations))"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,191," fraction.evaluate(x, epsilon, maxIterations);"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,186,ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,187,"Math.log(a) - logBeta(a, b, epsilon, maxIterations)) *"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,188,"fraction.evaluate(x, epsilon, maxIterations);"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,233,et = Gamma.logGamma(a) + Gamma.logGamma(b)
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,234, Gamma.logGamma(a + b);
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,230,ret = Gamma.logGamma(a) + Gamma.logGamma(b) -
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,231,Gamma.logGamma(a + b);
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,62, @version $Revision: 1.9 $ $Date: 2003/07/09 20:03:09 $
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,62,* @version $Revision: 1.10 $ $Date: 2003/07/30 21:58:10 $
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,159,et = Math.exp(-x +
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,160,a * Math.log(x)) -
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,161,ogGamma(a))
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,162, sum;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,159,ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,201,et = ((x + .5) * Math.log(tmp)) - tmp
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,202, (.5 * Math.log(2.0 * Math.PI)) + Math.log(sum) - Math.log(x);
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,198,ret = ((x + .5) * Math.log(tmp)) - tmp +
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,199,(.5 * Math.log(2.0 * Math.PI)) + Math.log(sum) - Math.log(x);
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,62, @version $Revision: 1.5 $ $Date: 2003/07/15 03:37:10 $
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,62,* @version $Revision: 1.6 $ $Date: 2003/07/30 21:58:11 $
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,80,or (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,80,for (int i = begin; i < l; i++) {
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,285,"esult = UnivariateRealSolverFactory.solve(f, -0.2, 0.2);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,285,"result = UnivariateRealSolverUtil.solve(f, -0.2, 0.2);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,287,"esult = UnivariateRealSolverFactory.solve(f, -0.1, 0.3);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,287,"result = UnivariateRealSolverUtil.solve(f, -0.1, 0.3);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,289,"esult = UnivariateRealSolverFactory.solve(f, -0.3, 0.45);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,289,"result = UnivariateRealSolverUtil.solve(f, -0.3, 0.45);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,291,"esult = UnivariateRealSolverFactory.solve(f, 0.3, 0.7);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,291,"result = UnivariateRealSolverUtil.solve(f, 0.3, 0.7);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,293,"esult = UnivariateRealSolverFactory.solve(f, 0.2, 0.6);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,293,"result = UnivariateRealSolverUtil.solve(f, 0.2, 0.6);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,295,"esult = UnivariateRealSolverFactory.solve(f, 0.05, 0.95);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,295,"result = UnivariateRealSolverUtil.solve(f, 0.05, 0.95);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,297,"esult = UnivariateRealSolverFactory.solve(f, 0.85, 1.25);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,297,"result = UnivariateRealSolverUtil.solve(f, 0.85, 1.25);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,299,"esult = UnivariateRealSolverFactory.solve(f, 0.8, 1.2);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,299,"result = UnivariateRealSolverUtil.solve(f, 0.8, 1.2);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,301,"esult = UnivariateRealSolverFactory.solve(f, 0.85, 1.75);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,301,"result = UnivariateRealSolverUtil.solve(f, 0.85, 1.75);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,303,"esult = UnivariateRealSolverFactory.solve(f, 0.55, 1.45);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,303,"result = UnivariateRealSolverUtil.solve(f, 0.55, 1.45);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,305,"esult = UnivariateRealSolverFactory.solve(f, 0.85, 5);"
True,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,305,"result = UnivariateRealSolverUtil.solve(f, 0.85, 5);"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,69, @version $Revision: 1.2 $ $Date: 2003/06/22 03:57:53 $
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,69,* @version $Revision: 1.3 $ $Date: 2003/07/30 21:58:11 $
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,142,*    public void testN0andN1Conditions() throws Exception {
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,143,ist list = new ArrayList();
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,145,toreUnivariate u = new ListUnivariateImpl( list );
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,147,"ssertTrue(""Mean of n = 0 set should be NaN"", Double.isNaN( u.getMean() ) );"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,148,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"", Double.isNaN( u.getStandardDeviation() ) );"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,149,"ssertTrue(""Variance of n = 0 set should be NaN"", Double.isNaN(u.getVariance() ) );"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,151,ist.add( new Double(one));
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,153,"ssertTrue( ""Mean of n = 1 set should be value of single item n1"", u.getMean() == one);"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,154,"ssertTrue( ""StdDev of n = 1 set should be zero, instead it is: "" + u.getStandardDeviation(), u.getStandardDeviation() == 0);"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,155,"ssertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,158,ublic void testSkewAndKurtosis() {
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,159,toreUnivariate u = new StoreUnivariateImpl();
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,161,"ouble[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,162,".9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,163,or( int i = 0; i < testArray.length; i++) {
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,164,.addValue( testArray[i]);
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,167,"ssertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,168,"ssertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,169,"ssertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,170,"ssertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,173,ublic void testProductAndGeometricMean() throws Exception {
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,174,istUnivariateImpl u = new ListUnivariateImpl(new ArrayList());
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,175,.setWindowSize(10);
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,177,.addValue( 1.0 );
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,178,.addValue( 2.0 );
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,179,.addValue( 3.0 );
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,180,.addValue( 4.0 );
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,182,"ssertEquals( ""Product not expected"", 24.0, u.getProduct(), Double.MIN_VALUE );"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,183,"ssertEquals( ""Geometric mean not expected"", 2.213364, u.getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,185,/ Now test rolling - UnivariateImpl should discount the contribution
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,186,/ of a discarded element
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,187,or( int i = 0; i < 10; i++ ) {
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,188,.addValue( i + 2 );
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,190,"/ Values should be (2,3,4,5,6,7,8,9,10,11)"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,192,"ssertEquals( ""Product not expected"", 39916800.0, u.getProduct(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,193,"ssertEquals( ""Geometric mean not expected"", 5.755931, u.getGeometricMean(), 0.00001 );"

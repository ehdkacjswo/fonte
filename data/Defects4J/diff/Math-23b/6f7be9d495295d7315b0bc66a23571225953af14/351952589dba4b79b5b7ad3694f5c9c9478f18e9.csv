is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1285, Reduce to the primary interval {@code [0 period)}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1285,* <p>Reduce {@code |a - offset|} to the primary interval
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1286,"* {@code [0, |period|)}.</p>"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1288,"* <p>Specifically, the value returned is <br/>"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1289,* {@code a - |period| * floor((a - offset) / |period|) - offset}.</p>
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1291,"* <p>If any of the parameters are {@code NaN} or infinite, the result is"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1292,* {@code NaN}.</p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1290," @return the value, within the interval {@code [0 period)},"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1297,"* @return the value, within the interval {@code [0 |period|)},"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1090,"Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig, Double.NaN, offset)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1091,"Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.NaN, period, offset)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1092,"Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig, period, Double.NaN)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1093,"Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig, period,"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1094,Double.POSITIVE_INFINITY)));
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1095,"Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1096,"period, offset)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1097,"Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig,"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1098,"Double.POSITIVE_INFINITY, offset)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1099,"Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig,"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1100,"Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1101,"Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1102,"period, Double.POSITIVE_INFINITY)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1103,"Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1104,"Double.POSITIVE_INFINITY, offset)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1105,"Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1106,"Double.POSITIVE_INFINITY,  Double.POSITIVE_INFINITY)));"

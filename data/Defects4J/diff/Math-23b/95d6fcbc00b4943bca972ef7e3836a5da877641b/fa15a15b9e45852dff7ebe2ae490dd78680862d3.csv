is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,19,mport org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,59, @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,58,* @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,78,"eturn localmin(min, max, relativeAccuracy, absoluteAccuracy, f);"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,77,"return localMin(min, max, relativeAccuracy, absoluteAccuracy, f);"
False,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,104,"rivate double localmin(double a, double b, final double eps,"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,103,"private double localMin(double a, double b, final double eps,"
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,36,/    /** Maximum error of function. */
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,37,/    protected double functionValueAccuracy;
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,39,/    /** Default maximum error of function. */
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,40,/    protected double defaultFunctionValueAccuracy;
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,62,/        this.functionValueAccuracy = defaultFunctionValueAccuracy;
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,68,rotected void checkResultComputed() throws IllegalArgumentException {
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,61,protected void checkResultComputed() throws IllegalStateException {
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,86,/    /** {@inheritDoc} */
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,87,/    public void setFunctionValueAccuracy(double accuracy) {
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,88,/        functionValueAccuracy = accuracy;
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,91,/    /** {@inheritDoc} */
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,92,/    public double getFunctionValueAccuracy() {
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,93,/        return functionValueAccuracy;
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,96,/    /** {@inheritDoc} */
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,97,/    public void resetFunctionValueAccuracy() {
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,98,/        functionValueAccuracy = defaultFunctionValueAccuracy;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,120,"hrows ConvergenceException, FunctionEvaluationException;"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,120,"throws ConvergenceException, FunctionEvaluationException, IllegalArgumentException;"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,140,"hrows ConvergenceException, FunctionEvaluationException;"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,140,"throws ConvergenceException, FunctionEvaluationException, IllegalArgumentException;"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,105,rotected void checkResultComputed() throws IllegalArgumentException {
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,105,protected void checkResultComputed() throws IllegalStateException {
True,src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,20,import java.io.Serializable;
False,src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,47,ublic interface SecondOrderDifferentialEquations {
True,src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,49,public interface SecondOrderDifferentialEquations extends Serializable {
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,725,f (vector == null && dimensionSize.length > 1) {
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,726,"hrow MathRuntimeException.createIllegalArgumentException(""some dimensions don't math: {0} != {1}"","
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,727,"ew Object[] { 0, dimensionSize.length });"
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,725,if (vector == null) {
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,726,if (dimensionSize.length > 1) {
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,727,"throw MathRuntimeException.createIllegalArgumentException(""some dimensions don't math: {0} != {1}"","
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,728,"new Object[] { 0, dimensionSize.length });"
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,730,return null;
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,737,bject lastDimension = multiDimensionalComplexArray;
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,740,Object[] lastDimension = (Object[]) multiDimensionalComplexArray;
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,740,astDimension = ((Object[]) lastDimension)[vector[i]];
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,742,lastDimension = (Object[]) lastDimension[vector[i]];
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,743,omplex lastValue = (Complex) ((Object[])
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,744,astDimension)[vector[dimensionSize.length - 1]];
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,745,(Object[]) lastDimension)[vector[dimensionSize.length - 1]] =
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,746,agnitude;
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,745,Complex lastValue = (Complex) lastDimension[vector[dimensionSize.length - 1]];
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,746,lastDimension[vector[dimensionSize.length - 1]] = magnitude;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,20,import java.io.IOException;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,21,import java.io.ObjectInputStream;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,585,* Read a serialized object.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,586,* @param stream input stream
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,587,* @throws IOException if object cannot be read
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,588,* @throws ClassNotFoundException if the class corresponding
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,589,* to the serialized object cannot be found
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,591,private void readObject(final ObjectInputStream stream)
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,592,"throws IOException, ClassNotFoundException {"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,593,stream.defaultReadObject();
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,594,count = 0;
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,876,ashData[0] = Arrays.hashCode(internalArray);
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,877,ashData[1] = new Float(expansionFactor).hashCode();
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,878,ashData[2] = new Float(contractionCriteria).hashCode();
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,879,ashData[3] = initialCapacity;
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,880,ashData[4] = expansionMode;
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,881,ashData[5] = numElements;
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,882,ashData[6] = startIndex;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,876,hashData[0] = new Float(expansionFactor).hashCode();
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,877,hashData[1] = new Float(contractionCriteria).hashCode();
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,878,hashData[2] = expansionMode;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,879,synchronized(this) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,880,hashData[3] = Arrays.hashCode(internalArray);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,881,hashData[4] = initialCapacity;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,882,hashData[5] = numElements;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,883,hashData[6] = startIndex;

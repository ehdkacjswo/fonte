is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,24, This class implements the {@link RealVector} interface with a {@link OpenIntToDoubleHashMap}.
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,24,* This class implements the {@link RealVector} interface with a {@link OpenIntToDoubleHashMap} backing store.
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,233,* @throws IllegalArgumentException If the dimensions don't match
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,234,ublic SparseRealVector add(SparseRealVector v) {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,235,public SparseRealVector add(SparseRealVector v) throws IllegalArgumentException{
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,236,parseRealVector res = (SparseRealVector) copy();
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,237,terator iter = res.getEntries().iterator();
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,238,hile (iter.hasNext()) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,239,ter.advance();
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,240,nt key = iter.key();
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,241,f (v.getEntries().containsKey(key)) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,242,"es.setEntry(key, iter.value() + v.getEntry(key));"
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,245,ter = v.getEntries().iterator();
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,237,SparseRealVector res = (SparseRealVector)copy();
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,238,Iterator iter = v.getEntries().iterator();
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,249,f (!entries.containsKey(key)) {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,242,if (entries.containsKey(key)) {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,243,"res.setEntry(key, entries.get(key) + iter.value());"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,244,} else {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,417,* @throws IllegalArgumentException If the dimensions don't match
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,423,ublic double getDistance(SparseRealVector v) {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,419,public double getDistance(SparseRealVector v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1012,* @throws IllegalArgumentException If the dimensions don't match
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1017,ublic SparseRealMatrix outerproduct(SparseRealVector v){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1014,public SparseRealMatrix outerproduct(SparseRealVector v) throws IllegalArgumentException{
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1112,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1113,ublic SparseRealVector subtract(SparseRealVector v) {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1110,* Optimized method to subtract SparseRealVectors
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1111,* @param v The vector to subtract from <code>this</code>
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1112,* @return The difference of <code>this</code> and <code>v</code>
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1113,* @throws IllegalArgumentException If the dimensions don't match
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1115,public SparseRealVector subtract(SparseRealVector v) throws IllegalArgumentException{
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1115,parseRealVector res = new SparseRealVector(this);
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1117,SparseRealVector res = (SparseRealVector)copy();
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1117,penIntToDoubleHashMap values = res.getEntries();
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1122,"alues.put(key, entries.get(key) - iter.value());"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1123,"res.setEntry(key, entries.get(key) - iter.value());"
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1124,"alues.put(key, -iter.value());"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1125,"res.setEntry(key, -iter.value());"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1214,/* (non-Javadoc)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1215,* @see java.lang.Object#hashCode()
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1217,@Override
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1218,public int hashCode() {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1219,final int prime = 31;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1220,int result = 1;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1221,long temp;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1222,temp = Double.doubleToLongBits(epsilon);
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1223,result = prime * result + (int) (temp ^ (temp >>> 32));
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1224,result = prime * result + virtualSize;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1225,return result;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1228,/* (non-Javadoc)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1229,* @see java.lang.Object#equals(java.lang.Object)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1231,@Override
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1232,public boolean equals(Object obj) {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1233,if (this == obj)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1234,return true;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1235,if (obj == null)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1236,return false;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1237,if (!(obj instanceof SparseRealVector))
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1238,return false;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1239,SparseRealVector other = (SparseRealVector) obj;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1240,if (virtualSize != other.virtualSize)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1241,return false;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1242,if (Double.doubleToLongBits(epsilon) != Double
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1243,.doubleToLongBits(other.epsilon))
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1244,return false;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1245,Iterator iter = entries.iterator();
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1246,while(iter.hasNext()){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1247,iter.advance();
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1248,double test = iter.value() - other.getEntry(iter.key());
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1249,if(Math.abs(test) > epsilon)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1250,return false;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1252,iter = other.getEntries().iterator();
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1253,while(iter.hasNext()){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1254,iter.advance();
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1255,double test = iter.value() - getEntry(iter.key());
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1256,if(!isZero(test))
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1257,return false;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1259,return true;
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,23,mport java.util.Arrays;
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1127,/TODO: backing store doesn't implement equals
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1129,"/v.setEntry(0, 0);"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1130,"/assertEquals(v, new SparseRealVector(new double[] { 0, 1, 2 }));"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1131,"/assertNotSame(v, new SparseRealVector(new double[] { 0, 1, 2 + Math.ulp(2)}));"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1132,"/assertNotSame(v, new SparseRealVector(new double[] { 0, 1, 2, 3 }));"
True,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1128,"v.setEntry(0, 0);"
True,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1129,"assertEquals(v, new SparseRealVector(new double[] { 0, 1, 2 }));"
True,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1130,"assertNotSame(v, new SparseRealVector(new double[] { 0, 1, 2 + Math.ulp(2)}));"
True,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1131,"assertNotSame(v, new SparseRealVector(new double[] { 0, 1, 2, 3 }));"

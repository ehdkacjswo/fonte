is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,20,mport java.math.BigDecimal;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,25,mport org.apache.commons.math.exception.MathIllegalArgumentException;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,237, Round the given value to the specified number of decimal places. The
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,238, value is rounded using the {@link BigDecimal#ROUND_HALF_UP} method.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,240, @param x the value to round.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,241, @param scale the number of digits to the right of the decimal point.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,242, @return the rounded value.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,243, @since 1.1
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,245,"ublic static double round(double x, int scale) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,246,"eturn round(x, scale, BigDecimal.ROUND_HALF_UP);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,250, <p>Round the given value to the specified number of decimal places. The
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,251, value is rounded using the given method which is any method defined in
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,252, {@link BigDecimal}.</p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,254," <p>If {@code x} is infinite or NaN, then the value of {@code x} is"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,255," returned unchanged, regardless of the other parameters.</p>"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,257, @param x the value to round.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,258, @param scale the number of digits to the right of the decimal point.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,259, @param roundingMethod the rounding method as defined in
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,260,        {@link BigDecimal}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,261, @return the rounded value.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,262, @throws ArithmeticException if roundingMethod==ROUND_UNNECESSARY and the
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,263, specified scaling operation would require rounding.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,264, @throws IllegalArgumentException if roundingMethod does not represent a
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,265, valid rounding mode.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,266, @since 1.1
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,268,"ublic static double round(double x, int scale, int roundingMethod) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,269,ry {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,270,eturn (new BigDecimal
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,271,Double.toString(x))
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,272,"setScale(scale, roundingMethod))"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,273,doubleValue();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,274, catch (NumberFormatException ex) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,275,f (Double.isInfinite(x)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,276,eturn x;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,277, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,278,eturn Double.NaN;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,284, Round the given value to the specified number of decimal places. The
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,285, value is rounded using the {@link BigDecimal#ROUND_HALF_UP} method.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,287, @param x the value to round.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,288, @param scale the number of digits to the right of the decimal point.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,289, @return the rounded value.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,290, @since 1.1
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,292,"ublic static float round(float x, int scale) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,293,"eturn round(x, scale, BigDecimal.ROUND_HALF_UP);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,297, Round the given value to the specified number of decimal places. The
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,298, value is rounded using the given method which is any method defined in
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,299, {@link BigDecimal}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,301, @param x the value to round.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,302, @param scale the number of digits to the right of the decimal point.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,303, @param roundingMethod the rounding method as defined in
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,304,        {@link BigDecimal}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,305, @return the rounded value.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,306, @since 1.1
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,308,"ublic static float round(float x, int scale, int roundingMethod) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,309,loat sign = indicator(x);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,310,"loat factor = (float)FastMath.pow(10.0f, scale) * sign;"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,311,"eturn (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,315," Round the given non-negative value to the ""nearest"" integer. Nearest is"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,316, determined by the rounding method specified. Rounding methods are defined
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,317, in {@link BigDecimal}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,319, @param unscaled Value to round.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,320," @param sign Sign of the original, scaled value."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,321," @param roundingMethod Rounding method, as defined in {@link BigDecimal}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,322, @return the rounded value.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,323, @throws MathIllegalArgumentException if {@code roundingMethod} is not a valid rounding method.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,324, @since 1.1
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,326,"rivate static double roundUnscaled(double unscaled,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,327,"ouble sign,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,328,nt roundingMethod) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,329,witch (roundingMethod) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,330,ase BigDecimal.ROUND_CEILING :
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,331,f (sign == -1) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,332,"nscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,333, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,334,"nscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,336,reak;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,337,ase BigDecimal.ROUND_DOWN :
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,338,"nscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,339,reak;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,340,ase BigDecimal.ROUND_FLOOR :
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,341,f (sign == -1) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,342,"nscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,343, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,344,"nscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,346,reak;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,347,ase BigDecimal.ROUND_HALF_DOWN : {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,348,"nscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,349,ouble fraction = unscaled - FastMath.floor(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,350,f (fraction > 0.5) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,351,nscaled = FastMath.ceil(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,352, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,353,nscaled = FastMath.floor(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,355,reak;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,357,ase BigDecimal.ROUND_HALF_EVEN : {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,358,ouble fraction = unscaled - FastMath.floor(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,359,f (fraction > 0.5) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,360,nscaled = FastMath.ceil(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,361, else if (fraction < 0.5) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,362,nscaled = FastMath.floor(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,363, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,364,/ The following equality test is intentional and needed for rounding purposes
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,365,f (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,366,floor(unscaled) / 2.0)) { // even
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,367,nscaled = FastMath.floor(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,368, else { // odd
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,369,nscaled = FastMath.ceil(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,372,reak;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,374,ase BigDecimal.ROUND_HALF_UP : {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,375,"nscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,376,ouble fraction = unscaled - FastMath.floor(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,377,f (fraction >= 0.5) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,378,nscaled = FastMath.ceil(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,379, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,380,nscaled = FastMath.floor(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,382,reak;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,384,ase BigDecimal.ROUND_UNNECESSARY :
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,385,f (unscaled != FastMath.floor(unscaled)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,386,hrow new MathArithmeticException();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,388,reak;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,389,ase BigDecimal.ROUND_UP :
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,390,"nscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,391,reak;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,392,efault :
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,393,"hrow new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,394,"oundingMethod,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,395,"ROUND_CEILING"", BigDecimal.ROUND_CEILING,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,396,"ROUND_DOWN"", BigDecimal.ROUND_DOWN,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,397,"ROUND_FLOOR"", BigDecimal.ROUND_FLOOR,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,398,"ROUND_HALF_DOWN"", BigDecimal.ROUND_HALF_DOWN,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,399,"ROUND_HALF_EVEN"", BigDecimal.ROUND_HALF_EVEN,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,400,"ROUND_HALF_UP"", BigDecimal.ROUND_HALF_UP,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,401,"ROUND_UNNECESSARY"", BigDecimal.ROUND_UNNECESSARY,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,402,"ROUND_UP"", BigDecimal.ROUND_UP);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,404,eturn unscaled;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,20,import java.math.BigDecimal;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,21,import org.apache.commons.math.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,22,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,23,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,24,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,300,* Rounds the given value to the specified number of decimal places.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,301,* The value is rounded using the {@link BigDecimal#ROUND_HALF_UP} method.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,303,* @param x Value to round.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,304,* @param scale Number of digits to the right of the decimal point.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,305,* @return the rounded value.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,306,"* @since 1.1 (previously in {@code MathUtils}, moved as of version 3.0)"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,308,"public static double round(double x, int scale) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,309,"return round(x, scale, BigDecimal.ROUND_HALF_UP);"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,313,* Rounds the given value to the specified number of decimal places.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,314,* The value is rounded using the given method which is any method defined
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,315,* in {@link BigDecimal}.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,316,"* If {@code x} is infinite or {@code NaN}, then the value of {@code x} is"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,317,"* returned unchanged, regardless of the other parameters."
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,319,* @param x Value to round.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,320,* @param scale Number of digits to the right of the decimal point.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,321,* @param roundingMethod Rounding method as defined in {@link BigDecimal}.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,322,* @return the rounded value.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,323,* @throws ArithmeticException if {@code roundingMethod == ROUND_UNNECESSARY}
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,324,* and the specified scaling operation would require rounding.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,325,* @throws IllegalArgumentException if {@code roundingMethod} does not
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,326,* represent a valid rounding mode.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,327,"* @since 1.1 (previously in {@code MathUtils}, moved as of version 3.0)"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,329,"public static double round(double x, int scale, int roundingMethod) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,330,try {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,331,return (new BigDecimal
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,332,(Double.toString(x))
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,333,".setScale(scale, roundingMethod))"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,334,.doubleValue();
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,335,} catch (NumberFormatException ex) {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,336,if (Double.isInfinite(x)) {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,337,return x;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,338,} else {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,339,return Double.NaN;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,345,* Rounds the given value to the specified number of decimal places.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,346,* The value is rounded using the {@link BigDecimal#ROUND_HALF_UP} method.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,348,* @param x Value to round.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,349,* @param scale Number of digits to the right of the decimal point.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,350,* @return the rounded value.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,351,"* @since 1.1 (previously in {@code MathUtils}, moved as of version 3.0)"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,353,"public static float round(float x, int scale) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,354,"return round(x, scale, BigDecimal.ROUND_HALF_UP);"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,358,* Rounds the given value to the specified number of decimal places.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,359,* The value is rounded using the given method which is any method defined
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,360,* in {@link BigDecimal}.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,362,* @param x Value to round.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,363,* @param scale Number of digits to the right of the decimal point.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,364,* @param roundingMethod Rounding method as defined in {@link BigDecimal}.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,365,* @return the rounded value.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,366,"* @since 1.1 (previously in {@code MathUtils}, moved as of version 3.0)"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,368,"public static float round(float x, int scale, int roundingMethod) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,369,"final float sign = FastMath.copySign(1f, x);"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,370,"final float factor = (float) FastMath.pow(10.0f, scale) * sign;"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,371,"return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,375,"* Rounds the given non-negative value to the ""nearest"" integer. Nearest is"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,376,* determined by the rounding method specified. Rounding methods are defined
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,377,* in {@link BigDecimal}.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,379,* @param unscaled Value to round.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,380,"* @param sign Sign of the original, scaled value."
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,381,"* @param roundingMethod Rounding method, as defined in {@link BigDecimal}."
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,382,* @return the rounded value.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,383,* @throws MathIllegalArgumentException if {@code roundingMethod} is not a valid rounding method.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,384,"* @since 1.1 (previously in {@code MathUtils}, moved as of version 3.0)"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,386,"private static double roundUnscaled(double unscaled,"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,387,"double sign,"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,388,int roundingMethod) {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,389,switch (roundingMethod) {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,390,case BigDecimal.ROUND_CEILING :
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,391,if (sign == -1) {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,392,"unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,393,} else {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,394,"unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,396,break;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,397,case BigDecimal.ROUND_DOWN :
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,398,"unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,399,break;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,400,case BigDecimal.ROUND_FLOOR :
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,401,if (sign == -1) {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,402,"unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,403,} else {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,404,"unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,406,break;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,407,case BigDecimal.ROUND_HALF_DOWN : {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,408,"unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,409,double fraction = unscaled - FastMath.floor(unscaled);
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,410,if (fraction > 0.5) {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,411,unscaled = FastMath.ceil(unscaled);
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,412,} else {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,413,unscaled = FastMath.floor(unscaled);
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,415,break;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,417,case BigDecimal.ROUND_HALF_EVEN : {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,418,double fraction = unscaled - FastMath.floor(unscaled);
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,419,if (fraction > 0.5) {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,420,unscaled = FastMath.ceil(unscaled);
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,421,} else if (fraction < 0.5) {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,422,unscaled = FastMath.floor(unscaled);
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,423,} else {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,424,// The following equality test is intentional and needed for rounding purposes
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,425,if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,426,.floor(unscaled) / 2.0)) { // even
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,427,unscaled = FastMath.floor(unscaled);
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,428,} else { // odd
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,429,unscaled = FastMath.ceil(unscaled);
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,432,break;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,434,case BigDecimal.ROUND_HALF_UP : {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,435,"unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,436,double fraction = unscaled - FastMath.floor(unscaled);
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,437,if (fraction >= 0.5) {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,438,unscaled = FastMath.ceil(unscaled);
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,439,} else {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,440,unscaled = FastMath.floor(unscaled);
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,442,break;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,444,case BigDecimal.ROUND_UNNECESSARY :
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,445,if (unscaled != FastMath.floor(unscaled)) {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,446,throw new MathArithmeticException();
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,448,break;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,449,case BigDecimal.ROUND_UP :
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,450,"unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,451,break;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,452,default :
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,453,"throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,454,"roundingMethod,"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,455,"""ROUND_CEILING"", BigDecimal.ROUND_CEILING,"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,456,"""ROUND_DOWN"", BigDecimal.ROUND_DOWN,"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,457,"""ROUND_FLOOR"", BigDecimal.ROUND_FLOOR,"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,458,"""ROUND_HALF_DOWN"", BigDecimal.ROUND_HALF_DOWN,"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,459,"""ROUND_HALF_EVEN"", BigDecimal.ROUND_HALF_EVEN,"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,460,"""ROUND_HALF_UP"", BigDecimal.ROUND_HALF_UP,"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,461,"""ROUND_UNNECESSARY"", BigDecimal.ROUND_UNNECESSARY,"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,462,"""ROUND_UP"", BigDecimal.ROUND_UP);"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,464,return unscaled;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,244,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,245,ublic void testRoundDouble() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,246,ouble x = 1.234567890;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,247,"ssert.assertEquals(1.23, MathUtils.round(x, 2), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,248,"ssert.assertEquals(1.235, MathUtils.round(x, 3), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,249,"ssert.assertEquals(1.2346, MathUtils.round(x, 4), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,251,/ JIRA MATH-151
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,252,"ssert.assertEquals(39.25, MathUtils.round(39.245, 2), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,253,"ssert.assertEquals(39.24, MathUtils.round(39.245, 2, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,254,ouble xx = 39.0;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,255,x = xx + 245d / 1000d;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,256,"ssert.assertEquals(39.25, MathUtils.round(xx, 2), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,258,/ BZ 35904
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,259,"ssert.assertEquals(30.1d, MathUtils.round(30.095d, 2), 0.0d);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,260,"ssert.assertEquals(30.1d, MathUtils.round(30.095d, 1), 0.0d);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,261,"ssert.assertEquals(33.1d, MathUtils.round(33.095d, 1), 0.0d);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,262,"ssert.assertEquals(33.1d, MathUtils.round(33.095d, 2), 0.0d);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,263,"ssert.assertEquals(50.09d, MathUtils.round(50.085d, 2), 0.0d);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,264,"ssert.assertEquals(50.19d, MathUtils.round(50.185d, 2), 0.0d);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,265,"ssert.assertEquals(50.01d, MathUtils.round(50.005d, 2), 0.0d);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,266,"ssert.assertEquals(30.01d, MathUtils.round(30.005d, 2), 0.0d);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,267,"ssert.assertEquals(30.65d, MathUtils.round(30.645d, 2), 0.0d);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,269,"ssert.assertEquals(1.24, MathUtils.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,270,"ssert.assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,271,"ssert.assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,272,"ssert.assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,273,"ssert.assertEquals(-1.234, MathUtils.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,274,"ssert.assertEquals(-1.2345, MathUtils.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,276,"ssert.assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,277,"ssert.assertEquals(1.234, MathUtils.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,278,"ssert.assertEquals(1.2345, MathUtils.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,279,"ssert.assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,280,"ssert.assertEquals(-1.234, MathUtils.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,281,"ssert.assertEquals(-1.2345, MathUtils.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,283,"ssert.assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,284,"ssert.assertEquals(1.234, MathUtils.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,285,"ssert.assertEquals(1.2345, MathUtils.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,286,"ssert.assertEquals(-1.24, MathUtils.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,287,"ssert.assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,288,"ssert.assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,290,"ssert.assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,291,"ssert.assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,292,"ssert.assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,293,"ssert.assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,294,"ssert.assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,295,"ssert.assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,296,"ssert.assertEquals(1.234, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,297,"ssert.assertEquals(-1.234, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,299,"ssert.assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,300,"ssert.assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,301,"ssert.assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,302,"ssert.assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,303,"ssert.assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,304,"ssert.assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,305,"ssert.assertEquals(1.234, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,306,"ssert.assertEquals(-1.234, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,307,"ssert.assertEquals(1.236, MathUtils.round(1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,308,"ssert.assertEquals(-1.236, MathUtils.round(-1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,310,"ssert.assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,311,"ssert.assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,312,"ssert.assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,313,"ssert.assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,314,"ssert.assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,315,"ssert.assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,316,"ssert.assertEquals(1.235, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,317,"ssert.assertEquals(-1.235, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,319,"ssert.assertEquals(-1.23, MathUtils.round(-1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,320,"ssert.assertEquals(1.23, MathUtils.round(1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,322,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,323,"athUtils.round(1.234, 2, BigDecimal.ROUND_UNNECESSARY);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,324,ssert.fail();
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,325, catch (ArithmeticException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,326,/ expected
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,329,"ssert.assertEquals(1.24, MathUtils.round(x, 2, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,330,"ssert.assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,331,"ssert.assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,332,"ssert.assertEquals(-1.24, MathUtils.round(-x, 2, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,333,"ssert.assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,334,"ssert.assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,336,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,337,"athUtils.round(1.234, 2, 1923);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,338,ssert.fail();
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,339, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,340,/ expected
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,343,/ MATH-151
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,344,"ssert.assertEquals(39.25, MathUtils.round(39.245, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,346,/ special values
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,347,"estUtils.assertEquals(Double.NaN, MathUtils.round(Double.NaN, 2), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,348,"ssert.assertEquals(0.0, MathUtils.round(0.0, 2), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,349,"ssert.assertEquals(Double.POSITIVE_INFINITY, MathUtils.round(Double.POSITIVE_INFINITY, 2), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,350,"ssert.assertEquals(Double.NEGATIVE_INFINITY, MathUtils.round(Double.NEGATIVE_INFINITY, 2), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,353,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,354,ublic void testRoundFloat() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,355,loat x = 1.234567890f;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,356,"ssert.assertEquals(1.23f, MathUtils.round(x, 2), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,357,"ssert.assertEquals(1.235f, MathUtils.round(x, 3), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,358,"ssert.assertEquals(1.2346f, MathUtils.round(x, 4), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,360,/ BZ 35904
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,361,"ssert.assertEquals(30.1f, MathUtils.round(30.095f, 2), 0.0f);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,362,"ssert.assertEquals(30.1f, MathUtils.round(30.095f, 1), 0.0f);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,363,"ssert.assertEquals(50.09f, MathUtils.round(50.085f, 2), 0.0f);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,364,"ssert.assertEquals(50.19f, MathUtils.round(50.185f, 2), 0.0f);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,365,"ssert.assertEquals(50.01f, MathUtils.round(50.005f, 2), 0.0f);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,366,"ssert.assertEquals(30.01f, MathUtils.round(30.005f, 2), 0.0f);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,367,"ssert.assertEquals(30.65f, MathUtils.round(30.645f, 2), 0.0f);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,369,"ssert.assertEquals(1.24f, MathUtils.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,370,"ssert.assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,371,"ssert.assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,372,"ssert.assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,373,"ssert.assertEquals(-1.234f, MathUtils.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,374,"ssert.assertEquals(-1.2345f, MathUtils.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,376,"ssert.assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,377,"ssert.assertEquals(1.234f, MathUtils.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,378,"ssert.assertEquals(1.2345f, MathUtils.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,379,"ssert.assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,380,"ssert.assertEquals(-1.234f, MathUtils.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,381,"ssert.assertEquals(-1.2345f, MathUtils.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,383,"ssert.assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,384,"ssert.assertEquals(1.234f, MathUtils.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,385,"ssert.assertEquals(1.2345f, MathUtils.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,386,"ssert.assertEquals(-1.24f, MathUtils.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,387,"ssert.assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,388,"ssert.assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,390,"ssert.assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,391,"ssert.assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,392,"ssert.assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,393,"ssert.assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,394,"ssert.assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,395,"ssert.assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,396,"ssert.assertEquals(1.234f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,397,"ssert.assertEquals(-1.234f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,399,"ssert.assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,400,"ssert.assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,401,"ssert.assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,402,"ssert.assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,403,"ssert.assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,404,"ssert.assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,405,"ssert.assertEquals(1.234f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,406,"ssert.assertEquals(-1.234f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,407,"ssert.assertEquals(1.236f, MathUtils.round(1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,408,"ssert.assertEquals(-1.236f, MathUtils.round(-1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,410,"ssert.assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,411,"ssert.assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,412,"ssert.assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,413,"ssert.assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,414,"ssert.assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,415,"ssert.assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,416,"ssert.assertEquals(1.235f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,417,"ssert.assertEquals(-1.235f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,419,"ssert.assertEquals(-1.23f, MathUtils.round(-1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,420,"ssert.assertEquals(1.23f, MathUtils.round(1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,422,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,423,"athUtils.round(1.234f, 2, BigDecimal.ROUND_UNNECESSARY);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,424,ssert.fail();
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,425, catch (MathArithmeticException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,426,/ success
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,429,"ssert.assertEquals(1.24f, MathUtils.round(x, 2, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,430,"ssert.assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,431,"ssert.assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,432,"ssert.assertEquals(-1.24f, MathUtils.round(-x, 2, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,433,"ssert.assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,434,"ssert.assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,436,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,437,"athUtils.round(1.234f, 2, 1923);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,438,ssert.fail();
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,439, catch (MathIllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,440,/ success
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,443,/ special values
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,444,"estUtils.assertEquals(Float.NaN, MathUtils.round(Float.NaN, 2), 0.0f);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,445,"ssert.assertEquals(0.0f, MathUtils.round(0.0f, 2), 0.0f);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,446,"ssert.assertEquals(Float.POSITIVE_INFINITY, MathUtils.round(Float.POSITIVE_INFINITY, 2), 0.0f);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,447,"ssert.assertEquals(Float.NEGATIVE_INFINITY, MathUtils.round(Float.NEGATIVE_INFINITY, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,16,import java.math.BigDecimal;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,17,import org.apache.commons.math.exception.MathArithmeticException;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,18,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,19,import org.apache.commons.math.TestUtils;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,262,@Test
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,263,public void testRoundDouble() {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,264,double x = 1.234567890;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,265,"Assert.assertEquals(1.23, Precision.round(x, 2), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,266,"Assert.assertEquals(1.235, Precision.round(x, 3), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,267,"Assert.assertEquals(1.2346, Precision.round(x, 4), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,269,// JIRA MATH-151
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,270,"Assert.assertEquals(39.25, Precision.round(39.245, 2), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,271,"Assert.assertEquals(39.24, Precision.round(39.245, 2, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,272,double xx = 39.0;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,273,xx = xx + 245d / 1000d;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,274,"Assert.assertEquals(39.25, Precision.round(xx, 2), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,276,// BZ 35904
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,277,"Assert.assertEquals(30.1d, Precision.round(30.095d, 2), 0.0d);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,278,"Assert.assertEquals(30.1d, Precision.round(30.095d, 1), 0.0d);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,279,"Assert.assertEquals(33.1d, Precision.round(33.095d, 1), 0.0d);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,280,"Assert.assertEquals(33.1d, Precision.round(33.095d, 2), 0.0d);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,281,"Assert.assertEquals(50.09d, Precision.round(50.085d, 2), 0.0d);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,282,"Assert.assertEquals(50.19d, Precision.round(50.185d, 2), 0.0d);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,283,"Assert.assertEquals(50.01d, Precision.round(50.005d, 2), 0.0d);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,284,"Assert.assertEquals(30.01d, Precision.round(30.005d, 2), 0.0d);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,285,"Assert.assertEquals(30.65d, Precision.round(30.645d, 2), 0.0d);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,287,"Assert.assertEquals(1.24, Precision.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,288,"Assert.assertEquals(1.235, Precision.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,289,"Assert.assertEquals(1.2346, Precision.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,290,"Assert.assertEquals(-1.23, Precision.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,291,"Assert.assertEquals(-1.234, Precision.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,292,"Assert.assertEquals(-1.2345, Precision.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,294,"Assert.assertEquals(1.23, Precision.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,295,"Assert.assertEquals(1.234, Precision.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,296,"Assert.assertEquals(1.2345, Precision.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,297,"Assert.assertEquals(-1.23, Precision.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,298,"Assert.assertEquals(-1.234, Precision.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,299,"Assert.assertEquals(-1.2345, Precision.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,301,"Assert.assertEquals(1.23, Precision.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,302,"Assert.assertEquals(1.234, Precision.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,303,"Assert.assertEquals(1.2345, Precision.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,304,"Assert.assertEquals(-1.24, Precision.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,305,"Assert.assertEquals(-1.235, Precision.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,306,"Assert.assertEquals(-1.2346, Precision.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,308,"Assert.assertEquals(1.23, Precision.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,309,"Assert.assertEquals(1.235, Precision.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,310,"Assert.assertEquals(1.2346, Precision.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,311,"Assert.assertEquals(-1.23, Precision.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,312,"Assert.assertEquals(-1.235, Precision.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,313,"Assert.assertEquals(-1.2346, Precision.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,314,"Assert.assertEquals(1.234, Precision.round(1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,315,"Assert.assertEquals(-1.234, Precision.round(-1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,317,"Assert.assertEquals(1.23, Precision.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,318,"Assert.assertEquals(1.235, Precision.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,319,"Assert.assertEquals(1.2346, Precision.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,320,"Assert.assertEquals(-1.23, Precision.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,321,"Assert.assertEquals(-1.235, Precision.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,322,"Assert.assertEquals(-1.2346, Precision.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,323,"Assert.assertEquals(1.234, Precision.round(1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,324,"Assert.assertEquals(-1.234, Precision.round(-1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,325,"Assert.assertEquals(1.236, Precision.round(1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,326,"Assert.assertEquals(-1.236, Precision.round(-1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,328,"Assert.assertEquals(1.23, Precision.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,329,"Assert.assertEquals(1.235, Precision.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,330,"Assert.assertEquals(1.2346, Precision.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,331,"Assert.assertEquals(-1.23, Precision.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,332,"Assert.assertEquals(-1.235, Precision.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,333,"Assert.assertEquals(-1.2346, Precision.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,334,"Assert.assertEquals(1.235, Precision.round(1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,335,"Assert.assertEquals(-1.235, Precision.round(-1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,337,"Assert.assertEquals(-1.23, Precision.round(-1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,338,"Assert.assertEquals(1.23, Precision.round(1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,340,try {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,341,"Precision.round(1.234, 2, BigDecimal.ROUND_UNNECESSARY);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,342,Assert.fail();
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,343,} catch (ArithmeticException ex) {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,344,// expected
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,347,"Assert.assertEquals(1.24, Precision.round(x, 2, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,348,"Assert.assertEquals(1.235, Precision.round(x, 3, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,349,"Assert.assertEquals(1.2346, Precision.round(x, 4, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,350,"Assert.assertEquals(-1.24, Precision.round(-x, 2, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,351,"Assert.assertEquals(-1.235, Precision.round(-x, 3, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,352,"Assert.assertEquals(-1.2346, Precision.round(-x, 4, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,354,try {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,355,"Precision.round(1.234, 2, 1923);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,356,Assert.fail();
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,357,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,358,// expected
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,361,// MATH-151
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,362,"Assert.assertEquals(39.25, Precision.round(39.245, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,364,// special values
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,365,"TestUtils.assertEquals(Double.NaN, Precision.round(Double.NaN, 2), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,366,"Assert.assertEquals(0.0, Precision.round(0.0, 2), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,367,"Assert.assertEquals(Double.POSITIVE_INFINITY, Precision.round(Double.POSITIVE_INFINITY, 2), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,368,"Assert.assertEquals(Double.NEGATIVE_INFINITY, Precision.round(Double.NEGATIVE_INFINITY, 2), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,371,@Test
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,372,public void testRoundFloat() {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,373,float x = 1.234567890f;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,374,"Assert.assertEquals(1.23f, Precision.round(x, 2), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,375,"Assert.assertEquals(1.235f, Precision.round(x, 3), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,376,"Assert.assertEquals(1.2346f, Precision.round(x, 4), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,378,// BZ 35904
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,379,"Assert.assertEquals(30.1f, Precision.round(30.095f, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,380,"Assert.assertEquals(30.1f, Precision.round(30.095f, 1), 0.0f);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,381,"Assert.assertEquals(50.09f, Precision.round(50.085f, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,382,"Assert.assertEquals(50.19f, Precision.round(50.185f, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,383,"Assert.assertEquals(50.01f, Precision.round(50.005f, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,384,"Assert.assertEquals(30.01f, Precision.round(30.005f, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,385,"Assert.assertEquals(30.65f, Precision.round(30.645f, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,387,"Assert.assertEquals(1.24f, Precision.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,388,"Assert.assertEquals(1.235f, Precision.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,389,"Assert.assertEquals(1.2346f, Precision.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,390,"Assert.assertEquals(-1.23f, Precision.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,391,"Assert.assertEquals(-1.234f, Precision.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,392,"Assert.assertEquals(-1.2345f, Precision.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,394,"Assert.assertEquals(1.23f, Precision.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,395,"Assert.assertEquals(1.234f, Precision.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,396,"Assert.assertEquals(1.2345f, Precision.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,397,"Assert.assertEquals(-1.23f, Precision.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,398,"Assert.assertEquals(-1.234f, Precision.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,399,"Assert.assertEquals(-1.2345f, Precision.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,401,"Assert.assertEquals(1.23f, Precision.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,402,"Assert.assertEquals(1.234f, Precision.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,403,"Assert.assertEquals(1.2345f, Precision.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,404,"Assert.assertEquals(-1.24f, Precision.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,405,"Assert.assertEquals(-1.235f, Precision.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,406,"Assert.assertEquals(-1.2346f, Precision.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,408,"Assert.assertEquals(1.23f, Precision.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,409,"Assert.assertEquals(1.235f, Precision.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,410,"Assert.assertEquals(1.2346f, Precision.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,411,"Assert.assertEquals(-1.23f, Precision.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,412,"Assert.assertEquals(-1.235f, Precision.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,413,"Assert.assertEquals(-1.2346f, Precision.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,414,"Assert.assertEquals(1.234f, Precision.round(1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,415,"Assert.assertEquals(-1.234f, Precision.round(-1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,417,"Assert.assertEquals(1.23f, Precision.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,418,"Assert.assertEquals(1.235f, Precision.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,419,"Assert.assertEquals(1.2346f, Precision.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,420,"Assert.assertEquals(-1.23f, Precision.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,421,"Assert.assertEquals(-1.235f, Precision.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,422,"Assert.assertEquals(-1.2346f, Precision.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,423,"Assert.assertEquals(1.234f, Precision.round(1.2345f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,424,"Assert.assertEquals(-1.234f, Precision.round(-1.2345f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,425,"Assert.assertEquals(1.236f, Precision.round(1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,426,"Assert.assertEquals(-1.236f, Precision.round(-1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,428,"Assert.assertEquals(1.23f, Precision.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,429,"Assert.assertEquals(1.235f, Precision.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,430,"Assert.assertEquals(1.2346f, Precision.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,431,"Assert.assertEquals(-1.23f, Precision.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,432,"Assert.assertEquals(-1.235f, Precision.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,433,"Assert.assertEquals(-1.2346f, Precision.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,434,"Assert.assertEquals(1.235f, Precision.round(1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,435,"Assert.assertEquals(-1.235f, Precision.round(-1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,437,"Assert.assertEquals(-1.23f, Precision.round(-1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,438,"Assert.assertEquals(1.23f, Precision.round(1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,440,try {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,441,"Precision.round(1.234f, 2, BigDecimal.ROUND_UNNECESSARY);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,442,Assert.fail();
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,443,} catch (MathArithmeticException ex) {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,444,// success
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,447,"Assert.assertEquals(1.24f, Precision.round(x, 2, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,448,"Assert.assertEquals(1.235f, Precision.round(x, 3, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,449,"Assert.assertEquals(1.2346f, Precision.round(x, 4, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,450,"Assert.assertEquals(-1.24f, Precision.round(-x, 2, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,451,"Assert.assertEquals(-1.235f, Precision.round(-x, 3, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,452,"Assert.assertEquals(-1.2346f, Precision.round(-x, 4, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,454,try {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,455,"Precision.round(1.234f, 2, 1923);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,456,Assert.fail();
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,457,} catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,458,// success
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,461,// special values
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,462,"TestUtils.assertEquals(Float.NaN, Precision.round(Float.NaN, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,463,"Assert.assertEquals(0.0f, Precision.round(0.0f, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,464,"Assert.assertEquals(Float.POSITIVE_INFINITY, Precision.round(Float.POSITIVE_INFINITY, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,465,"Assert.assertEquals(Float.NEGATIVE_INFINITY, Precision.round(Float.NEGATIVE_INFINITY, 2), 0.0f);"

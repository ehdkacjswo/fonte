is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,3,* contributor license agreements. See the NOTICE file distributed with this
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,4,* work for additional information regarding copyright ownership. The ASF
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,5,"* licenses this file to You under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,6,"* ""License""); you may not use this file except in compliance with the License."
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,7,* You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,8,* http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,9,"* or agreed to in writing, software distributed under the License is"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,10,"* distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,11,"* KIND, either express or implied. See the License for the specific language"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,12,* governing permissions and limitations under the License.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,14,package org.apache.commons.math3.optimization.general;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,16,import java.io.IOException;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,17,import java.util.Arrays;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,18,import java.util.List;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,19,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,20,import java.awt.geom.Point2D;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,21,import org.apache.commons.math3.optimization.PointVectorValuePair;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,22,import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,23,import org.apache.commons.math3.stat.descriptive.StatisticalSummary;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,24,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,26,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,27,import org.junit.Ignore;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,30,* This class demonstrates the main functionality of the
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,31,"* {@link AbstractLeastSquaresOptimizer}, common to the"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,32,* optimizer implementations in package
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,33,* {@link org.apache.commons.math3.optimization.general}.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,34,* <br/>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,35,"* Not enabled by default, as the class name does not end with ""Test""."
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,36,* <br/>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,37,* Invoke by running
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,38,* <pre><code>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,39,*  mvn test -Dtest=AbstractLeastSquaresOptimizerTestValidation
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,40,* </code></pre>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,41,* or by running
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,42,* <pre><code>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,43,"*  mvn test -Dtest=AbstractLeastSquaresOptimizerTestValidation -DargLine=""-DmcRuns=1234 -server"""
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,44,* </code></pre>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,46,public class AbstractLeastSquaresOptimizerTestValidation {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,47,"private static final int MONTE_CARLO_RUNS = Integer.parseInt(System.getProperty(""mcRuns"","
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,48,"""100""));"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,51,"* Using a Monte-Carlo procedure, this test checks the error estimations"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,52,* as provided by the square-root of the diagonal elements of the
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,53,* covariance matrix.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,54,* <br/>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,55,"* The test generates sets of observations, each sampled from"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,56,* a Gaussian distribution.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,57,* <br/>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,58,* The optimization problem solved is defined in class
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,59,* {@link StraightLineProblem}.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,60,* <br/>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,61,* The output (on stdout) will be a table summarizing the distribution
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,62,* of parameters generated by the Monte-Carlo process and by the direct
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,63,* estimation provided by the diagonal elements of the covariance matrix.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,65,@Test
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,66,public void testParametersErrorMonteCarloObservations() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,67,// Error on the observations.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,68,final double yError = 15;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,70,// True values of the parameters.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,71,final double slope = 123.456;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,72,final double offset = -98.765;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,74,// Samples generator.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,75,final RandomStraightLinePointGenerator lineGenerator
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,76,"= new RandomStraightLinePointGenerator(slope, offset,"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,77,"yError,"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,78,"-1e3, 1e4,"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,79,138577L);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,81,// Number of observations.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,82,final int numObs = 100; // XXX Should be a command-line option.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,83,// number of parameters.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,84,final int numParams = 2;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,86,// Parameters found for each of Monte-Carlo run.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,87,final SummaryStatistics[] paramsFoundByDirectSolution = new SummaryStatistics[numParams];
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,88,// Sigma estimations (square-root of the diagonal elements of the
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,89,"// covariance matrix), for each Monte-Carlo run."
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,90,final SummaryStatistics[] sigmaEstimate = new SummaryStatistics[numParams];
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,92,// Initialize statistics accumulators.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,93,for (int i = 0; i < numParams; i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,94,paramsFoundByDirectSolution[i] = new SummaryStatistics();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,95,sigmaEstimate[i] = new SummaryStatistics();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,98,// Dummy optimizer (to compute the covariance matrix).
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,99,final AbstractLeastSquaresOptimizer optim = new DummyOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,100,"final double[] init = { slope, offset };"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,102,// Monte-Carlo (generates many sets of observations).
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,103,final int mcRepeat = MONTE_CARLO_RUNS;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,104,int mcCount = 0;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,105,while (mcCount < mcRepeat) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,106,// Observations.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,107,final Point2D.Double[] obs = lineGenerator.generate(numObs);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,109,final StraightLineProblem problem = new StraightLineProblem(yError);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,110,for (int i = 0; i < numObs; i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,111,final Point2D.Double p = obs[i];
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,112,"problem.addPoint(p.x, p.y);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,115,// Direct solution (using simple regression).
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,116,final double[] regress = problem.solve();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,118,// Estimation of the standard deviation (diagonal elements of the
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,119,// covariance matrix).
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,120,"optim.optimize(Integer.MAX_VALUE,"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,121,"problem, problem.target(), problem.weight(), init);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,122,final double[] sigma = optim.getSigma();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,124,// Accumulate statistics.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,125,for (int i = 0; i < numParams; i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,126,paramsFoundByDirectSolution[i].addValue(regress[i]);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,127,sigmaEstimate[i].addValue(sigma[i]);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,130,// Next Monte-Carlo.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,131,++mcCount;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,134,// Print statistics.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,135,"final String line = ""--------------------------------------------------------------"";"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,136,"System.out.println(""                 True value       Mean        Std deviation"");"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,137,for (int i = 0; i < numParams; i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,138,System.out.println(line);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,139,"System.out.println(""Parameter #"" + i);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,141,StatisticalSummary s = paramsFoundByDirectSolution[i].getSummary();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,142,"System.out.printf(""              %+.6e   %+.6e   %+.6e\n"","
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,143,"init[i],"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,144,"s.getMean(),"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,145,s.getStandardDeviation());
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,147,s = sigmaEstimate[i].getSummary();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,148,"System.out.printf(""sigma: %+.6e (%+.6e)\n"","
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,149,"s.getMean(),"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,150,s.getStandardDeviation());
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,152,System.out.println(line);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,154,// Check the error estimation.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,155,for (int i = 0; i < numParams; i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,156,"Assert.assertEquals(paramsFoundByDirectSolution[i].getSummary().getStandardDeviation(),"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,157,"sigmaEstimate[i].getSummary().getMean(),"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,158,8e-2);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,163,"* In this test, the set of observations is fixed."
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,164,"* Using a Monte-Carlo procedure, it generates sets of parameters,"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,165,* and determine the parameter change that will result in the
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,166,* normalized chi-square becoming larger by one than the value from
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,167,* the best fit solution.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,168,* <br/>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,169,* The optimization problem solved is defined in class
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,170,* {@link StraightLineProblem}.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,171,* <br/>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,172,* The output (on stdout) will be a list of lines containing:
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,173,* <ul>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,174,"*  <li>slope of the straight line,</li>"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,175,"*  <li>intercept of the straight line,</li>"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,176,*  <li>chi-square of the solution defined by the above two values.</li>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,177,* </ul>
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,178,* The output is separated into two blocks (with a blank line between
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,179,* them); the first block will contain all parameter sets for which
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,180,* {@code chi2 < chi2_b + 1}
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,181,"* and the second block, all sets for which"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,182,* {@code chi2 >= chi2_b + 1}
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,183,* where {@code chi2_b} is the lowest chi-square (corresponding to the
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,184,* best solution).
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,186,@Test
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,187,public void testParametersErrorMonteCarloParameters() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,188,// Error on the observations.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,189,final double yError = 15;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,191,// True values of the parameters.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,192,final double slope = 123.456;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,193,final double offset = -98.765;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,195,// Samples generator.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,196,final RandomStraightLinePointGenerator lineGenerator
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,197,"= new RandomStraightLinePointGenerator(slope, offset,"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,198,"yError,"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,199,"-1e3, 1e4,"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,200,13839013L);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,202,// Number of observations.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,203,final int numObs = 10;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,204,// number of parameters.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,205,final int numParams = 2;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,207,// Create a single set of observations.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,208,final Point2D.Double[] obs = lineGenerator.generate(numObs);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,210,final StraightLineProblem problem = new StraightLineProblem(yError);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,211,for (int i = 0; i < numObs; i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,212,final Point2D.Double p = obs[i];
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,213,"problem.addPoint(p.x, p.y);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,216,// Direct solution (using simple regression).
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,217,final double[] regress = problem.solve();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,219,// Dummy optimizer (to compute the chi-square).
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,220,final AbstractLeastSquaresOptimizer optim = new DummyOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,221,"final double[] init = { slope, offset };"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,222,// Get chi-square of the best parameters set for the given set of
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,223,// observations.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,224,"final double bestChi2N = getChi2N(optim, problem, regress);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,225,final double[] sigma = optim.getSigma();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,227,// Monte-Carlo (generates a grid of parameters).
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,228,final int mcRepeat = MONTE_CARLO_RUNS;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,229,final int gridSize = (int) FastMath.sqrt(mcRepeat);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,231,// Parameters found for each of Monte-Carlo run.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,232,// Index 0 = slope
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,233,// Index 1 = offset
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,234,// Index 2 = normalized chi2
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,235,final List<double[]> paramsAndChi2 = new ArrayList<double[]>(gridSize * gridSize);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,237,final double slopeRange = 10 * sigma[0];
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,238,final double offsetRange = 10 * sigma[1];
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,239,final double minSlope = slope - 0.5 * slopeRange;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,240,final double minOffset = offset - 0.5 * offsetRange;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,241,final double deltaSlope =  slopeRange/ gridSize;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,242,final double deltaOffset = offsetRange / gridSize;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,243,for (int i = 0; i < gridSize; i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,244,final double s = minSlope + i * deltaSlope;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,245,for (int j = 0; j < gridSize; j++) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,246,final double o = minOffset + j * deltaOffset;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,247,"final double chi2N = getChi2N(optim, problem, new double[] {s, o});"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,249,"paramsAndChi2.add(new double[] {s, o, chi2N});"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,253,"// Output (for use with ""gnuplot"")."
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,255,// Some info.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,257,// For plotting separately sets of parameters that have a large chi2.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,258,final double chi2NPlusOne = bestChi2N + 1;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,259,int numLarger = 0;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,261,"final String lineFmt = ""%+.10e %+.10e   %.8e\n"";"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,263,// Point with smallest chi-square.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,264,"System.out.printf(lineFmt, regress[0], regress[1], bestChi2N);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,265,System.out.println(); // Empty line.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,267,// Points within the confidence interval.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,268,for (double[] d : paramsAndChi2) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,269,if (d[2] <= chi2NPlusOne) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,270,"System.out.printf(lineFmt, d[0], d[1], d[2]);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,273,System.out.println(); // Empty line.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,275,// Points outside the confidence interval.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,276,for (double[] d : paramsAndChi2) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,277,if (d[2] > chi2NPlusOne) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,278,++numLarger;
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,279,"System.out.printf(lineFmt, d[0], d[1], d[2]);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,282,System.out.println(); // Empty line.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,284,"System.out.println(""# sigma="" + Arrays.toString(sigma));"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,285,"System.out.println(""# "" + numLarger + "" sets filtered out"");"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,289,* @return the normalized chi-square.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,291,"private double getChi2N(AbstractLeastSquaresOptimizer optim,"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,292,"StraightLineProblem problem,"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,293,double[] params) {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,294,final double[] t = problem.target();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,295,final double[] w = problem.weight();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,297,"optim.optimize(Integer.MAX_VALUE, problem, t, w, params);"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,299,return optim.getChiSquare() / (t.length - params.length);
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,304,* A dummy optimizer.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,305,* Used for computing the covariance matrix.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,307,class DummyOptimizer extends AbstractLeastSquaresOptimizer {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,309,* This method does nothing and returns a dummy value.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,311,@Override
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,312,public PointVectorValuePair doOptimize() {
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,313,// In order to be able to access the chi-square.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,314,updateResidualsAndCost();
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,316,// Dummy value.
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java,317,return null;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,18,package org.apache.commons.math3.optimization.general;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,20,import java.awt.geom.Point2D;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,21,import org.apache.commons.math3.random.RandomData;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,22,import org.apache.commons.math3.random.RandomDataImpl;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,23,import org.apache.commons.math3.random.Well44497b;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,24,import org.apache.commons.math3.util.MathUtils;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,25,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,28,* Factory for generating a cloud of points that approximate a straight line.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,30,public class RandomStraightLinePointGenerator {
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,31,/** RNG. */
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,32,private final RandomData random;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,33,/** Slope. */
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,34,private final double slope;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,35,/** Intercept. */
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,36,private final double intercept;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,37,/** Error on the y-coordinate. */
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,38,private final double sigma;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,39,/** Lowest value of the x-coordinate. */
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,40,private final double lo;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,41,/** Highest value of the x-coordinate. */
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,42,private final double hi;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,45,* The generator will create a cloud of points whose x-coordinates
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,46,"* will be randomly sampled between {@code xLo} and {@code xHi}, and"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,47,* the correspoding y-coordinates will be computed as
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,48,* <pre><code>
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,49,"*  y = a x + b + N(0, error)"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,50,* </code></pre>
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,51,"* where {@code N(mean, sigma)} is a Gaussian distribution with the"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,52,* given mean and standard deviation.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,54,* @param a Slope.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,55,* @param b Intercept.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,56,* @param error Error on the y-coordinate of the point.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,57,* @param xLo Lowest value of the x-coordinate.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,58,* @param xHi Highest value of the x-coordinate.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,59,* @param seed RNG seed.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,61,"public RandomStraightLinePointGenerator(double a,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,62,"double b,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,63,"double error,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,64,"double xLo,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,65,"double xHi,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,66,long seed) {
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,67,random = new RandomDataImpl(new Well44497b((seed)));
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,68,slope = a;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,69,intercept = b;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,70,sigma = error;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,71,lo = xLo;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,72,hi = xHi;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,76,* Point generator.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,78,* @param n Number of points to create.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,79,* @return the cloud of {@code n} points.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,81,public Point2D.Double[] generate(int n) {
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,82,final Point2D.Double[] cloud = new Point2D.Double[n];
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,83,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,84,cloud[i] = create();
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,86,return cloud;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,90,* Create one point.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,92,* @return a point.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,94,private Point2D.Double create() {
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,95,"final double x = random.nextUniform(lo, hi);"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,96,final double yModel = slope * x + intercept;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,97,"final double y = yModel + random.nextGaussian(0, sigma);"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,99,"return new Point2D.Double(x, y);"
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,18,package org.apache.commons.math3.optimization.general;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,20,import java.util.Arrays;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,21,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,22,import org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,23,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,24,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,25,import org.apache.commons.math3.util.MathUtils;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,26,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,27,import org.apache.commons.math3.stat.regression.SimpleRegression;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,30,* Class that models a straight line defined as {@code y = a x + b}.
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,31,* The parameters of problem are:
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,32,* <ul>
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,33,*  <li>{@code a}</li>
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,34,*  <li>{@code b}</li>
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,35,* </ul>
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,36,* The model functions are:
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,37,* <ul>
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,38,"*  <li>for each pair (a, b), the y-coordinate of the line.</li>"
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,39,* </ul>
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,41,class StraightLineProblem implements DifferentiableMultivariateVectorFunction {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,42,/** Cloud of points assumed to be fitted by a straight line. */
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,43,private final ArrayList<double[]> points;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,44,/** Error (on the y-coordinate of the points). */
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,45,private final double sigma;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,48,* @param error Assumed error for the y-coordinate.
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,50,public StraightLineProblem(double error) {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,51,points = new ArrayList<double[]>();
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,52,sigma = error;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,55,"public void addPoint(double px, double py) {"
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,56,"points.add(new double[] { px, py });"
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,60,* @return the list of x-coordinates.
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,62,public double[] x() {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,63,final double[] v = new double[points.size()];
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,64,for (int i = 0; i < points.size(); i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,65,final double[] p = points.get(i);
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,66,v[i] = p[0]; // x-coordinate.
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,69,return v;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,73,* @return the list of y-coordinates.
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,75,public double[] y() {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,76,final double[] v = new double[points.size()];
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,77,for (int i = 0; i < points.size(); i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,78,final double[] p = points.get(i);
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,79,v[i] = p[1]; // y-coordinate.
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,82,return v;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,85,public double[] target() {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,86,return y();
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,89,public double[] weight() {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,90,final double weight = 1 / (sigma * sigma);
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,91,final double[] w = new double[points.size()];
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,92,for (int i = 0; i < points.size(); i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,93,w[i] = weight;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,96,return w;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,99,public double[] value(double[] params) {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,100,"final Model line = new Model(params[0], params[1]);"
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,102,final double[] model = new double[points.size()];
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,103,for (int i = 0; i < points.size(); i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,104,final double[] p = points.get(i);
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,105,model[i] = line.value(p[0]);
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,108,return model;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,111,public MultivariateMatrixFunction jacobian() {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,112,return new MultivariateMatrixFunction() {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,113,public double[][] value(double[] point) {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,114,return jacobian(point);
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,120,"* Directly solve the linear problem, using the {@link SimpleRegression}"
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,121,* class.
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,123,public double[] solve() {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,124,final SimpleRegression regress = new SimpleRegression(true);
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,125,for (double[] d : points) {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,126,"regress.addData(d[0], d[1]);"
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,129,"final double[] result = { regress.getSlope(), regress.getIntercept() };"
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,130,return result;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,133,private double[][] jacobian(double[] params) {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,134,final double[][] jacobian = new double[points.size()][2];
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,136,for (int i = 0; i < points.size(); i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,137,final double[] p = points.get(i);
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,138,"// Partial derivative wrt ""a""."
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,139,jacobian[i][0] = p[0];
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,140,"// Partial derivative wrt ""b""."
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,141,jacobian[i][1] = 1;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,144,return jacobian;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,148,* Linear function.
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,150,public static class Model implements UnivariateFunction {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,151,final double a;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,152,final double b;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,154,"public Model(double a,"
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,155,double b) {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,156,this.a = a;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,157,this.b = b;
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,160,@Override
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,161,public double value(double x) {
True,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java,162,return a * x + b;

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,18,ackage org.apache.commons.math.optimization.fitting;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,20,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,21,mport org.apache.commons.math.optimization.OptimizationException;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,22,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,24,** This class guesses harmonic coefficients from a sample.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,26, <p>The algorithm used to guess the coefficients is as follows:</p>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,28," <p>We know f (t) at some sampling points t<sub>i</sub> and want to find a,"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,29, &omega; and &phi; such that f (t) = a cos (&omega; t + &phi;).
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,30, </p>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,32," <p>From the analytical expression, we can compute two primitives :"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,33, <pre>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,34,     If2  (t) = &int; f<sup>2</sup>  = a<sup>2</sup> &times; [t + S (t)] / 2
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,35,     If'2 (t) = &int; f'<sup>2</sup> = a<sup>2</sup> &omega;<sup>2</sup> &times; [t - S (t)] / 2
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,36,     where S (t) = sin (2 (&omega; t + &phi;)) / (2 &omega;)
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,37, </pre>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,38, </p>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,40, <p>We can remove S between these expressions :
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,41, <pre>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,42,     If'2 (t) = a<sup>2</sup> &omega;<sup>2</sup> t - &omega;<sup>2</sup> If2 (t)
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,43, </pre>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,44, </p>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,46, <p>The preceding expression shows that If'2 (t) is a linear
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,47, combination of both t and If2 (t): If'2 (t) = A &times; t + B &times; If2 (t)
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,48, </p>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,50," <p>From the primitive, we can deduce the same form for definite"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,51, integrals between t<sub>1</sub> and t<sub>i</sub> for each t<sub>i</sub> :
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,52, <pre>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,53,   If2 (t<sub>i</sub>) - If2 (t<sub>1</sub>) = A &times; (t<sub>i</sub> - t<sub>1</sub>) + B &times; (If2 (t<sub>i</sub>) - If2 (t<sub>1</sub>))
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,54, </pre>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,55, </p>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,57, <p>We can find the coefficients A and B that best fit the sample
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,58, to this linear expression by computing the definite integrals for
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,59, each sample points.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,60, </p>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,62," <p>For a bilinear expression z (x<sub>i</sub>, y<sub>i</sub>) = A &times; x<sub>i</sub> + B &times; y<sub>i</sub>, the"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,63, coefficients A and B that minimize a least square criterion
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,64," &sum; (z<sub>i</sub> - z (x<sub>i</sub>, y<sub>i</sub>))<sup>2</sup> are given by these expressions:</p>"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,65, <pre>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,67,         &sum;y<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,68,     A = ------------------------
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,69,         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,71,         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,72,     B = ------------------------
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,73,         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,74, </pre>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,75, </p>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,78," <p>In fact, we can assume both a and &omega; are positive and"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,79," compute them directly, knowing that A = a<sup>2</sup> &omega;<sup>2</sup> and that"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,80, B = - &omega;<sup>2</sup>. The complete algorithm is therefore:</p>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,81, <pre>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,83," for each t<sub>i</sub> from t<sub>1</sub> to t<sub>n-1</sub>, compute:"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,84,   f  (t<sub>i</sub>)
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,85,   f' (t<sub>i</sub>) = (f (t<sub>i+1</sub>) - f(t<sub>i-1</sub>)) / (t<sub>i+1</sub> - t<sub>i-1</sub>)
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,86,   x<sub>i</sub> = t<sub>i</sub> - t<sub>1</sub>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,87,   y<sub>i</sub> = &int; f<sup>2</sup> from t<sub>1</sub> to t<sub>i</sub>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,88,   z<sub>i</sub> = &int; f'<sup>2</sup> from t<sub>1</sub> to t<sub>i</sub>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,89,"   update the sums &sum;x<sub>i</sub>x<sub>i</sub>, &sum;y<sub>i</sub>y<sub>i</sub>, &sum;x<sub>i</sub>y<sub>i</sub>, &sum;x<sub>i</sub>z<sub>i</sub> and &sum;y<sub>i</sub>z<sub>i</sub>"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,90, end for
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,93,         \  | &sum;y<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,94, a     =  \ | ------------------------
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,95,           \| &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,99,         \  | &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,100, &omega;     =  \ | ------------------------
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,101,           \| &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,103, </pre>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,104, </p>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,106," <p>Once we know &omega;, we can compute:"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,107, <pre>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,108,    fc = &omega; f (t) cos (&omega; t) - f' (t) sin (&omega; t)
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,109,    fs = &omega; f (t) sin (&omega; t) + f' (t) cos (&omega; t)
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,110, </pre>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,111, </p>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,113, <p>It appears that <code>fc = a &omega; cos (&phi;)</code> and
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,114," <code>fs = -a &omega; sin (&phi;)</code>, so we can use these"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,115, expressions to compute &phi;. The best estimate over the sample is
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,116, given by averaging these expressions.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,117, </p>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,119, <p>Since integrals and means are involved in the preceding
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,120," estimations, these operations run in O(n) time, where n is the"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,121, number of measurements.</p>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,123, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,124, @since 2.0
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,127,ublic class HarmonicCoefficientsGuesser {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,129,** Sampled observations. */
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,130,rivate final WeightedObservedPoint[] observations;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,132,** Guessed amplitude. */
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,133,rivate double a;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,135,** Guessed pulsation &omega;. */
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,136,rivate double omega;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,138,** Guessed phase &phi;. */
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,139,rivate double phi;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,141,** Simple constructor.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,142, @param observations sampled observations
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,144,ublic HarmonicCoefficientsGuesser(WeightedObservedPoint[] observations) {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,145,his.observations = observations.clone();
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,146,                 = Double.NaN;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,147,mega             = Double.NaN;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,150,** Estimate a first guess of the coefficients.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,151, @exception OptimizationException if the sample is too short or if
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,152, the first guess cannot be computed (when the elements under the
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,153, square roots are negative).
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,155,ublic void guess() throws OptimizationException {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,156,ortObservations();
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,157,uessAOmega();
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,158,uessPhi();
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,161,** Sort the observations with respect to the abscissa.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,163,rivate void sortObservations() {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,165,"/ Since the samples are almost always already sorted, this"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,166,/ method is implemented as an insertion sort that reorders the
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,167,/ elements in place. Insertion sort is very efficient in this case.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,168,eightedObservedPoint curr = observations[0];
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,169,or (int j = 1; j < observations.length; ++j) {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,170,eightedObservedPoint prec = curr;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,171,urr = observations[j];
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,172,f (curr.getX() < prec.getX()) {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,173,/ the current element should be inserted closer to the beginning
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,174,nt i = j - 1;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,175,eightedObservedPoint mI = observations[i];
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,176,hile ((i >= 0) && (curr.getX() < mI.getX())) {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,177,bservations[i + 1] = mI;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,178,f (i-- != 0) {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,179,I = observations[i];
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,182,bservations[i + 1] = curr;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,183,urr = observations[j];
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,189,** Estimate a first guess of the a and &omega; coefficients.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,190, @exception OptimizationException if the sample is too short or if
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,191, the first guess cannot be computed (when the elements under the
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,192, square roots are negative).
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,194,rivate void guessAOmega() throws OptimizationException {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,196,/ initialize the sums for the linear model between the two integrals
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,197,ouble sx2 = 0.0;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,198,ouble sy2 = 0.0;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,199,ouble sxy = 0.0;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,200,ouble sxz = 0.0;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,201,ouble syz = 0.0;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,203,ouble currentX        = observations[0].getX();
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,204,ouble currentY        = observations[0].getY();
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,205,ouble f2Integral      = 0;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,206,ouble fPrime2Integral = 0;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,207,inal double startX = currentX;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,208,or (int i = 1; i < observations.length; ++i) {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,210,/ one step forward
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,211,inal double previousX = currentX;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,212,inal double previousY = currentY;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,213,urrentX = observations[i].getX();
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,214,urrentY = observations[i].getY();
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,216,/ update the integrals of f<sup>2</sup> and f'<sup>2</sup>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,217,/ considering a linear model for f (and therefore constant f')
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,218,inal double dx = currentX - previousX;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,219,inal double dy = currentY - previousY;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,220,inal double f2StepIntegral =
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,221,x * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,222,inal double fPrime2StepIntegral = dy * dy / dx;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,224,inal double x   = currentX - startX;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,225,2Integral      += f2StepIntegral;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,226,Prime2Integral += fPrime2StepIntegral;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,228,x2 += x * x;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,229,y2 += f2Integral * f2Integral;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,230,xy += x * f2Integral;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,231,xz += x * fPrime2Integral;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,232,yz += f2Integral * fPrime2Integral;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,236,/ compute the amplitude and pulsation coefficients
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,237,ouble c1 = sy2 * sxz - sxy * syz;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,238,ouble c2 = sxy * sxz - sx2 * syz;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,239,ouble c3 = sx2 * sy2 - sxy * sxy;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,240,f ((c1 / c2 < 0.0) || (c2 / c3 < 0.0)) {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,241,hrow new OptimizationException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,243,     = FastMath.sqrt(c1 / c2);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,244,mega = FastMath.sqrt(c2 / c3);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,248,** Estimate a first guess of the &phi; coefficient.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,250,rivate void guessPhi() {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,252,/ initialize the means
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,253,ouble fcMean = 0.0;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,254,ouble fsMean = 0.0;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,256,ouble currentX = observations[0].getX();
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,257,ouble currentY = observations[0].getY();
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,258,or (int i = 1; i < observations.length; ++i) {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,260,/ one step forward
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,261,inal double previousX = currentX;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,262,inal double previousY = currentY;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,263,urrentX = observations[i].getX();
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,264,urrentY = observations[i].getY();
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,265,inal double currentYPrime = (currentY - previousY) / (currentX - previousX);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,267,ouble   omegaX = omega * currentX;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,268,ouble   cosine = FastMath.cos(omegaX);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,269,ouble   sine   = FastMath.sin(omegaX);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,270,cMean += omega * currentY * cosine - currentYPrime *   sine;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,271,sMean += omega * currentY *   sine + currentYPrime * cosine;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,275,"hi = FastMath.atan2(-fsMean, fcMean);"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,279,** Get the guessed amplitude a.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,280, @return guessed amplitude a;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,282,ublic double getGuessedAmplitude() {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,283,eturn a;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,286,** Get the guessed pulsation &omega;.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,287, @return guessed pulsation &omega;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,289,ublic double getGuessedPulsation() {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,290,eturn omega;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,293,** Get the guessed phase &phi;.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,294, @return guessed phase &phi;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,296,ublic double getGuessedPhase() {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,297,eturn phi;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,20,import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,21,import org.apache.commons.math.analysis.function.HarmonicOscillator;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,22,import org.apache.commons.math.exception.ZeroException;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,22,mport org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,23,mport org.apache.commons.math.optimization.OptimizationException;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,24,mport org.apache.commons.math.analysis.ParametricUnivariateRealFunction;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,27,** This class implements a curve fitting specialized for sinusoids.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,28, <p>Harmonic fitting is a very simple case of curve fitting. The
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,28,* Class that implements a curve fitting specialized for sinusoids.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,30,* Harmonic fitting is a very simple case of curve fitting. The
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,32, based on integrals.</p>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,34,* based on integrals.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,36,ublic class HarmonicFitter {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,38,** Fitter for the coefficients. */
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,39,rivate final CurveFitter fitter;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,41,"** Values for amplitude, pulsation &omega; and phase &phi;. */"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,42,rivate double[] parameters;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,44,** Simple constructor.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,45, @param optimizer optimizer to use for the fitting
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,39,public class HarmonicFitter extends CurveFitter {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,41,* Simple constructor.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,42,* @param optimizer Optimizer to use for the fitting.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,48,his.fitter = new CurveFitter(optimizer);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,49,arameters  = null;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,45,super(optimizer);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,52,** Simple constructor.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,53, <p>This constructor can be used when a first guess of the
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,54, coefficients is already known.</p>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,55, @param optimizer optimizer to use for the fitting
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,56," @param initialGuess guessed values for amplitude (index 0),"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,57, pulsation &omega; (index 1) and phase &phi; (index 2)
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,49,* Fit an harmonic function to the observed points.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,51,* @param initialGuess First guess values in the following order:
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,52,* <ul>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,53,*  <li>Amplitude</li>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,54,*  <li>Angular frequency</li>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,55,*  <li>Phase</li>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,56,* </ul>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,57,* @return the parameters of the harmonic function that best fits the
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,58,* observed points (in the same order as above).
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,59,"ublic HarmonicFitter(final DifferentiableMultivariateVectorialOptimizer optimizer,"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,60,inal double[] initialGuess) {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,61,his.fitter     = new CurveFitter(optimizer);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,62,his.parameters = initialGuess.clone();
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,60,public double[] fit(double[] initialGuess) {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,61,"return fit(new HarmonicOscillator.Parametric(), initialGuess);"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,65,"** Add an observed weighted (x,y) point to the sample."
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,66, @param weight weight of the observed point in the fit
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,67, @param x abscissa of the point
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,68," @param y observed value of the point at x, after fitting we should"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,69, have P(x) as close as possible to this value
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,65,* Fit an harmonic function to the observed points.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,66,* An initial guess will be automatically computed.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,68,* @return the parameters of the harmonic function that best fits the
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,69,* observed points (see the other {@link #fit(double[]) fit} method.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,70,* @throws NumberIsTooSmallException if the sample is too short for the
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,71,* the first guess to be computed.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,72,* @throws ZeroException if the first guess cannot be computed because
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,73,* the abscissa range is zero.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,71,"ublic void addObservedPoint(double weight, double x, double y) {"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,72,"itter.addObservedPoint(weight, x, y);"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,75,public double[] fit() {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,76,return fit((new ParameterGuesser(getObservations())).guess());
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,76, Fit an harmonic function to the observed points.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,80,* This class guesses harmonic coefficients from a sample.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,81,* <p>The algorithm used to guess the coefficients is as follows:</p>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,83,"* <p>We know f (t) at some sampling points t<sub>i</sub> and want to find a,"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,84,* &omega; and &phi; such that f (t) = a cos (&omega; t + &phi;).
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,85,* </p>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,87,"* <p>From the analytical expression, we can compute two primitives :"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,88,* <pre>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,89,*     If2  (t) = &int; f<sup>2</sup>  = a<sup>2</sup> &times; [t + S (t)] / 2
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,90,*     If'2 (t) = &int; f'<sup>2</sup> = a<sup>2</sup> &omega;<sup>2</sup> &times; [t - S (t)] / 2
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,91,*     where S (t) = sin (2 (&omega; t + &phi;)) / (2 &omega;)
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,92,* </pre>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,93,* </p>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,95,* <p>We can remove S between these expressions :
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,96,* <pre>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,97,*     If'2 (t) = a<sup>2</sup> &omega;<sup>2</sup> t - &omega;<sup>2</sup> If2 (t)
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,98,* </pre>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,99,* </p>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,101,* <p>The preceding expression shows that If'2 (t) is a linear
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,102,* combination of both t and If2 (t): If'2 (t) = A &times; t + B &times; If2 (t)
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,103,* </p>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,105,"* <p>From the primitive, we can deduce the same form for definite"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,106,* integrals between t<sub>1</sub> and t<sub>i</sub> for each t<sub>i</sub> :
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,107,* <pre>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,108,*   If2 (t<sub>i</sub>) - If2 (t<sub>1</sub>) = A &times; (t<sub>i</sub> - t<sub>1</sub>) + B &times; (If2 (t<sub>i</sub>) - If2 (t<sub>1</sub>))
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,109,* </pre>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,110,* </p>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,112,* <p>We can find the coefficients A and B that best fit the sample
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,113,* to this linear expression by computing the definite integrals for
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,114,* each sample points.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,115,* </p>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,117,"* <p>For a bilinear expression z (x<sub>i</sub>, y<sub>i</sub>) = A &times; x<sub>i</sub> + B &times; y<sub>i</sub>, the"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,118,* coefficients A and B that minimize a least square criterion
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,119,"* &sum; (z<sub>i</sub> - z (x<sub>i</sub>, y<sub>i</sub>))<sup>2</sup> are given by these expressions:</p>"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,120,* <pre>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,122,*         &sum;y<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,123,*     A = ------------------------
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,124,*         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,126,*         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,127,*     B = ------------------------
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,128,*         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,129,* </pre>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,130,* </p>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,133,"* <p>In fact, we can assume both a and &omega; are positive and"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,134,"* compute them directly, knowing that A = a<sup>2</sup> &omega;<sup>2</sup> and that"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,135,* B = - &omega;<sup>2</sup>. The complete algorithm is therefore:</p>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,136,* <pre>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,138,"* for each t<sub>i</sub> from t<sub>1</sub> to t<sub>n-1</sub>, compute:"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,139,*   f  (t<sub>i</sub>)
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,140,*   f' (t<sub>i</sub>) = (f (t<sub>i+1</sub>) - f(t<sub>i-1</sub>)) / (t<sub>i+1</sub> - t<sub>i-1</sub>)
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,141,*   x<sub>i</sub> = t<sub>i</sub> - t<sub>1</sub>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,142,*   y<sub>i</sub> = &int; f<sup>2</sup> from t<sub>1</sub> to t<sub>i</sub>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,143,*   z<sub>i</sub> = &int; f'<sup>2</sup> from t<sub>1</sub> to t<sub>i</sub>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,144,"*   update the sums &sum;x<sub>i</sub>x<sub>i</sub>, &sum;y<sub>i</sub>y<sub>i</sub>, &sum;x<sub>i</sub>y<sub>i</sub>, &sum;x<sub>i</sub>z<sub>i</sub> and &sum;y<sub>i</sub>z<sub>i</sub>"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,145,* end for
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,78, @return harmonic Function that best fits the observed points.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,79, @throws NumberIsTooSmallException if the sample is too short or if
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,80, the first guess cannot be computed.
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,81, @throws OptimizationException
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,148,*         \  | &sum;y<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,149,* a     =  \ | ------------------------
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,150,*           \| &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,154,*         \  | &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,155,* &omega;     =  \ | ------------------------
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,156,*           \| &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,158,* </pre>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,159,* </p>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,161,"* <p>Once we know &omega;, we can compute:"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,162,* <pre>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,163,*    fc = &omega; f (t) cos (&omega; t) - f' (t) sin (&omega; t)
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,164,*    fs = &omega; f (t) sin (&omega; t) + f' (t) cos (&omega; t)
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,165,* </pre>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,166,* </p>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,168,* <p>It appears that <code>fc = a &omega; cos (&phi;)</code> and
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,169,"* <code>fs = -a &omega; sin (&phi;)</code>, so we can use these"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,170,* expressions to compute &phi;. The best estimate over the sample is
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,171,* given by averaging these expressions.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,172,* </p>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,174,* <p>Since integrals and means are involved in the preceding
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,175,"* estimations, these operations run in O(n) time, where n is the"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,176,* number of measurements.</p>
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,83,ublic HarmonicFunction fit() throws OptimizationException {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,84,/ shall we compute the first guess of the parameters ourselves ?
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,85,f (parameters == null) {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,86,inal WeightedObservedPoint[] observations = fitter.getObservations();
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,178,public static class ParameterGuesser {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,179,/** Sampled observations. */
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,180,private final WeightedObservedPoint[] observations;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,181,/** Amplitude. */
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,182,private double a;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,183,/** Angular frequency. */
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,184,private double omega;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,185,/** Phase. */
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,186,private double phi;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,189,* Simple constructor.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,190,* @param observations sampled observations
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,191,* @throws NumberIsTooSmallException if the sample is too short or if
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,192,* the first guess cannot be computed.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,194,public ParameterGuesser(WeightedObservedPoint[] observations) {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,92,armonicCoefficientsGuesser guesser = new HarmonicCoefficientsGuesser(observations);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,93,uesser.guess();
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,94,arameters = new double[] {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,95,"uesser.getGuessedAmplitude(),"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,96,"uesser.getGuessedPulsation(),"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,97,uesser.getGuessedPhase()
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,200,this.observations = observations.clone();
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,101,"ouble[] fitted = fitter.fit(new ParametricHarmonicFunction(), parameters);"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,102,"eturn new HarmonicFunction(fitted[0], fitted[1], fitted[2]);"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,105,** Parametric harmonic function. */
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,106,rivate static class ParametricHarmonicFunction implements ParametricUnivariateRealFunction {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,204,* Estimate a first guess of the coefficients.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,206,"* @return the guessed coefficients, in the following order:"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,207,* <ul>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,208,*  <li>Amplitude</li>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,209,*  <li>Angular frequency</li>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,210,*  <li>Phase</li>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,211,* </ul>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,213,public double[] guess() {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,214,sortObservations();
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,215,guessAOmega();
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,216,guessPhi();
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,217,"return new double[] { a, omega, phi };"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,108,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,109,"ublic double value(double x, double[] parameters) {"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,110,inal double a     = parameters[0];
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,111,inal double omega = parameters[1];
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,112,inal double phi   = parameters[2];
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,113,eturn a * FastMath.cos(omega * x + phi);
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,221,* Sort the observations with respect to the abscissa.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,223,private void sortObservations() {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,224,"// Since the samples are almost always already sorted, this"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,225,// method is implemented as an insertion sort that reorders the
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,226,// elements in place. Insertion sort is very efficient in this case.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,227,WeightedObservedPoint curr = observations[0];
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,228,for (int j = 1; j < observations.length; ++j) {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,229,WeightedObservedPoint prec = curr;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,230,curr = observations[j];
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,231,if (curr.getX() < prec.getX()) {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,232,// the current element should be inserted closer to the beginning
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,233,int i = j - 1;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,234,WeightedObservedPoint mI = observations[i];
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,235,while ((i >= 0) && (curr.getX() < mI.getX())) {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,236,observations[i + 1] = mI;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,237,if (i-- != 0) {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,238,mI = observations[i];
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,241,observations[i + 1] = curr;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,242,curr = observations[j];
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,116,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,117,"ublic double[] gradient(double x, double[] parameters) {"
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,118,inal double a     = parameters[0];
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,119,inal double omega = parameters[1];
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,120,inal double phi   = parameters[2];
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,121,inal double alpha = omega * x + phi;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,122,inal double cosAlpha = FastMath.cos(alpha);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,123,inal double sinAlpha = FastMath.sin(alpha);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,124,"eturn new double[] { cosAlpha, -a * x * sinAlpha, -a * sinAlpha };"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,248,* Estimate a first guess of the amplitude and angular frequency.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,249,* This method assumes that the {@link #sortObservations()} method
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,250,* has been called previously.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,252,* @throws ZeroException if the abscissa range is zero.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,254,private void guessAOmega() {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,255,// initialize the sums for the linear model between the two integrals
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,256,double sx2 = 0;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,257,double sy2 = 0;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,258,double sxy = 0;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,259,double sxz = 0;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,260,double syz = 0;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,262,double currentX = observations[0].getX();
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,263,double currentY = observations[0].getY();
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,264,double f2Integral = 0;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,265,double fPrime2Integral = 0;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,266,final double startX = currentX;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,267,for (int i = 1; i < observations.length; ++i) {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,268,// one step forward
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,269,final double previousX = currentX;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,270,final double previousY = currentY;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,271,currentX = observations[i].getX();
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,272,currentY = observations[i].getY();
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,274,// update the integrals of f<sup>2</sup> and f'<sup>2</sup>
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,275,// considering a linear model for f (and therefore constant f')
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,276,final double dx = currentX - previousX;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,277,final double dy = currentY - previousY;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,278,final double f2StepIntegral =
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,279,dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,280,final double fPrime2StepIntegral = dy * dy / dx;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,282,final double x = currentX - startX;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,283,f2Integral += f2StepIntegral;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,284,fPrime2Integral += fPrime2StepIntegral;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,286,sx2 += x * x;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,287,sy2 += f2Integral * f2Integral;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,288,sxy += x * f2Integral;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,289,sxz += x * fPrime2Integral;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,290,syz += f2Integral * fPrime2Integral;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,293,// compute the amplitude and pulsation coefficients
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,294,double c1 = sy2 * sxz - sxy * syz;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,295,double c2 = sxy * sxz - sx2 * syz;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,296,double c3 = sx2 * sy2 - sxy * sxy;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,297,if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,298,a = 0;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,300,"// Range of the observations, assuming that the"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,301,// observations are sorted.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,302,final double range = observations[observations.length - 1].getX() -
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,303,observations[0].getX();
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,305,if (range == 0) {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,306,throw new ZeroException();
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,308,omega = 2 * Math.PI / range;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,309,} else {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,310,a = FastMath.sqrt(c1 / c2);
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,311,omega = FastMath.sqrt(c2 / c3);
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,316,* Estimate a first guess of the phase.
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,318,private void guessPhi() {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,319,// initialize the means
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,320,double fcMean = 0;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,321,double fsMean = 0;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,323,double currentX = observations[0].getX();
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,324,double currentY = observations[0].getY();
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,325,for (int i = 1; i < observations.length; ++i) {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,326,// one step forward
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,327,final double previousX = currentX;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,328,final double previousY = currentY;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,329,currentX = observations[i].getX();
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,330,currentY = observations[i].getY();
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,331,final double currentYPrime = (currentY - previousY) / (currentX - previousX);
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,333,double omegaX = omega * currentX;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,334,double cosine = FastMath.cos(omegaX);
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,335,double sine = FastMath.sin(omegaX);
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,336,fcMean += omega * currentY * cosine - currentYPrime * sine;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,337,fsMean += omega * currentY * sine + currentYPrime * cosine;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,340,"phi = FastMath.atan2(-fsMean, fcMean);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,25,mport org.apache.commons.math.optimization.OptimizationException;
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,25,import org.apache.commons.math.analysis.function.HarmonicOscillator;
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,34,ublic void testNoError() throws OptimizationException {
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,35,"armonicFunction f = new HarmonicFunction(0.2, 3.4, 4.1);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,34,public void testNoError() {
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,35,final double a = 0.2;
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,36,final double w = 3.4;
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,37,final double p = 4.1;
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,38,"HarmonicOscillator f = new HarmonicOscillator(a, w, p);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,40,"itter.addObservedPoint(1.0, x, f.value(x));"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,43,"fitter.addObservedPoint(1, x, f.value(x));"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,43,armonicFunction fitted = fitter.fit();
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,44,"ssertEquals(f.getAmplitude(), fitted.getAmplitude(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,45,"ssertEquals(f.getPulsation(), fitted.getPulsation(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,46,"ssertEquals(f.getPhase(),     MathUtils.normalizeAngle(fitted.getPhase(), f.getPhase()), 1.0e-13);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,46,final double[] fitted = fitter.fit();
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,47,"assertEquals(a, fitted[0], 1.0e-13);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,48,"assertEquals(w, fitted[1], 1.0e-13);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,49,"assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1e-13);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,51,"HarmonicOscillator ff = new HarmonicOscillator(fitted[0], fitted[1], fitted[2]);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,49,ssertTrue(FastMath.abs(f.value(x) - fitted.value(x)) < 1.0e-13);
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,54,assertTrue(FastMath.abs(f.value(x) - ff.value(x)) < 1e-13);
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,55,ublic void test1PercentError() throws OptimizationException {
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,59,public void test1PercentError() {
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,57,"armonicFunction f = new HarmonicFunction(0.2, 3.4, 4.1);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,61,final double a = 0.2;
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,62,final double w = 3.4;
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,63,final double p = 4.1;
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,64,"HarmonicOscillator f = new HarmonicOscillator(a, w, p);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,62,"itter.addObservedPoint(1.0, x,"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,69,"fitter.addObservedPoint(1, x,"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,66,armonicFunction fitted = fitter.fit();
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,67,"ssertEquals(f.getAmplitude(), fitted.getAmplitude(), 7.6e-4);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,68,"ssertEquals(f.getPulsation(), fitted.getPulsation(), 2.7e-3);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,69,"ssertEquals(f.getPhase(),     MathUtils.normalizeAngle(fitted.getPhase(), f.getPhase()), 1.3e-2);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,73,final double[] fitted = fitter.fit();
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,74,"assertEquals(a, fitted[0], 7.6e-4);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,75,"assertEquals(w, fitted[1], 2.7e-3);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,76,"assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.3e-2);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,74,ublic void testInitialGuess() throws OptimizationException {
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,81,public void testInitialGuess() {
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,76,"armonicFunction f = new HarmonicFunction(0.2, 3.4, 4.1);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,83,final double a = 0.2;
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,84,final double w = 3.4;
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,85,final double p = 4.1;
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,86,"HarmonicOscillator f = new HarmonicOscillator(a, w, p);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,79,"ew HarmonicFitter(new LevenbergMarquardtOptimizer(), new double[] { 0.15, 3.6, 4.5 });"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,89,new HarmonicFitter(new LevenbergMarquardtOptimizer());
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,81,"itter.addObservedPoint(1.0, x,"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,91,"fitter.addObservedPoint(1, x,"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,85,armonicFunction fitted = fitter.fit();
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,86,"ssertEquals(f.getAmplitude(), fitted.getAmplitude(), 1.2e-3);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,87,"ssertEquals(f.getPulsation(), fitted.getPulsation(), 3.3e-3);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,88,"ssertEquals(f.getPhase(),     MathUtils.normalizeAngle(fitted.getPhase(), f.getPhase()), 1.7e-2);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,95,"final double[] fitted = fitter.fit(new double[] { 0.15, 3.6, 4.5 });"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,96,"assertEquals(a, fitted[0], 1.2e-3);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,97,"assertEquals(w, fitted[1], 3.3e-3);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,98,"assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.7e-2);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,93,ublic void testUnsorted() throws OptimizationException {
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,102,public void testUnsorted() {
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,95,"armonicFunction f = new HarmonicFunction(0.2, 3.4, 4.1);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,104,final double a = 0.2;
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,105,final double w = 3.4;
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,106,final double p = 4.1;
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,107,"HarmonicOscillator f = new HarmonicOscillator(a, w, p);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,123,"itter.addObservedPoint(1.0, xTab[i], yTab[i]);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,135,"fitter.addObservedPoint(1, xTab[i], yTab[i]);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,126,armonicFunction fitted = fitter.fit();
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,127,"ssertEquals(f.getAmplitude(), fitted.getAmplitude(), 7.6e-4);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,128,"ssertEquals(f.getPulsation(), fitted.getPulsation(), 3.5e-3);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,129,"ssertEquals(f.getPhase(),     MathUtils.normalizeAngle(fitted.getPhase(), f.getPhase()), 1.5e-2);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,138,final double[] fitted = fitter.fit();
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,139,"assertEquals(a, fitted[0], 7.6e-4);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,140,"assertEquals(w, fitted[1], 3.5e-3);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,141,"assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.5e-2);"

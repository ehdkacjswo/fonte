is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,17,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,19,import java.io.IOException;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,20,import java.io.ObjectInputStream;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,21,import java.io.Serializable;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,22,import java.lang.reflect.Array;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,23,import java.util.ConcurrentModificationException;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,24,import java.util.NoSuchElementException;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,26,import org.apache.commons.math.Field;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,27,import org.apache.commons.math.FieldElement;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,28,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,31,* Open addressed map from int to FieldElement.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,32,* <p>This class provides a dedicated map from integers to FieldElements with a
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,33,* much smaller memory overhead than standard <code>java.util.Map</code>.</p>
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,34,* <p>This class is not synchronized. The specialized iterators returned by
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,35,* {@link #iterator()} are fail-fast: they throw a
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,36,* <code>ConcurrentModificationException</code> when they detect the map has been
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,37,* modified during iteration.</p>
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,38,"* @version $Revision: 746578 $ $Date: 2009-02-21 12:01:14 -0800 (Sat, 21 Feb 2009) $"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,39,* @since 2.0
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,41,public class OpenIntToFieldHashMap<T extends FieldElement<T>> implements Serializable {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,43,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,44,private static final long serialVersionUID = 1L;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,46,/** Load factor for the map. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,47,private static final float LOAD_FACTOR = 0.5f;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,49,/** Default starting size.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,50,* <p>This must be a power of two for bit mask to work properly. </p>
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,52,private static final int DEFAULT_EXPECTED_SIZE = 16;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,54,/** Multiplier for size growth when map fills up.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,55,* <p>This must be a power of two for bit mask to work properly. </p>
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,57,private static final int RESIZE_MULTIPLIER = 2;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,59,/** Number of bits to perturb the index when probing for collision resolution. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,60,private static final int PERTURB_SHIFT = 5;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,62,/** Status indicator for free table entries. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,63,protected static final byte FREE    = 0;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,65,/** Status indicator for full table entries. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,66,protected static final byte FULL    = 1;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,68,/** Status indicator for removed table entries. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,69,protected static final byte REMOVED = 2;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,71,/** Field to which the elements belong. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,72,private final Field<T> field;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,74,/** Keys table. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,75,private int[] keys;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,77,/** Values table. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,78,private T[] values;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,80,/** States table. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,81,private byte[] states;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,83,/** Return value for missing entries. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,84,private final T missingEntries;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,86,/** Current size of the map. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,87,private int size;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,89,/** Bit mask for hash values. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,90,private int mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,92,/** Modifications count. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,93,private transient int count;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,96,* Build an empty map with default size and using zero for missing entries.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,98,public OpenIntToFieldHashMap(final Field<T>field) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,99,"this(field, DEFAULT_EXPECTED_SIZE, field.getZero());"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,103,* Build an empty map with default size
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,104,* @param missingEntries value to return when a missing entry is fetched
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,106,"public OpenIntToFieldHashMap(final Field<T>field, final T missingEntries) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,107,"this(field,DEFAULT_EXPECTED_SIZE, missingEntries);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,111,* Build an empty map with specified size and using zero for missing entries.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,112,* @param expectedSize expected number of elements in the map
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,114,"public OpenIntToFieldHashMap(final Field<T> field,final int expectedSize) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,115,"this(field,expectedSize, field.getZero());"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,119,* Build an empty map with specified size.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,120,* @param expectedSize expected number of elements in the map
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,121,* @param missingEntries value to return when a missing entry is fetched
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,123,"public OpenIntToFieldHashMap(final Field<T> field,final int expectedSize,"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,124,final T missingEntries) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,125,this.field = field;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,126,final int capacity = computeCapacity(expectedSize);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,127,keys   = new int[capacity];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,128,values = buildArray(capacity);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,129,states = new byte[capacity];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,130,this.missingEntries = missingEntries;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,131,mask   = capacity - 1;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,135,* Copy constructor.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,136,* @param source map to copy
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,138,public OpenIntToFieldHashMap(final OpenIntToFieldHashMap<T> source) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,139,field = source.field;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,140,final int length = source.keys.length;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,141,keys = new int[length];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,142,"System.arraycopy(source.keys, 0, keys, 0, length);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,143,values = buildArray(length);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,144,"System.arraycopy(source.values, 0, values, 0, length);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,145,states = new byte[length];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,146,"System.arraycopy(source.states, 0, states, 0, length);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,147,missingEntries = source.missingEntries;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,148,size  = source.size;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,149,mask  = source.mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,150,count = source.count;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,154,* Compute the capacity needed for a given size.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,155,* @param expectedSize expected size of the map
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,156,* @return capacity to use for the specified size
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,158,private static int computeCapacity(final int expectedSize) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,159,if (expectedSize == 0) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,160,return 1;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,162,final int capacity   = (int) Math.ceil(expectedSize / LOAD_FACTOR);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,163,final int powerOfTwo = Integer.highestOneBit(capacity);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,164,if (powerOfTwo == capacity) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,165,return capacity;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,167,return nextPowerOfTwo(capacity);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,171,* Find the smallest power of two greater than the input value
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,172,* @param i input value
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,173,* @return smallest power of two greater than the input value
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,175,private static int nextPowerOfTwo(final int i) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,176,return Integer.highestOneBit(i) << 1;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,180,* Get the stored value associated with the given key
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,181,* @param key key associated with the data
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,182,* @return data associated with the key
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,184,public T get(final int key) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,186,final int hash  = hashOf(key);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,187,int index = hash & mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,188,"if (containsKey(key, index)) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,189,return values[index];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,192,if (states[index] == FREE) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,193,return missingEntries;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,196,"for (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,197,"j = probe(perturb, j);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,198,index = j & mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,199,"if (containsKey(key, index)) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,200,return values[index];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,204,return missingEntries;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,209,* Check if a value is associated with a key.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,210,* @param key key to check
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,211,* @return true if a value is associated with key
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,213,public boolean containsKey(final int key) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,215,final int hash  = hashOf(key);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,216,int index = hash & mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,217,"if (containsKey(key, index)) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,218,return true;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,221,if (states[index] == FREE) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,222,return false;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,225,"for (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,226,"j = probe(perturb, j);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,227,index = j & mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,228,"if (containsKey(key, index)) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,229,return true;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,233,return false;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,238,* Get an iterator over map elements.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,239,* <p>The specialized iterators returned are fail-fast: they throw a
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,240,* <code>ConcurrentModificationException</code> when they detect the map
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,241,* has been modified during iteration.</p>
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,242,* @return iterator over the map elements
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,244,public Iterator iterator() {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,245,return new Iterator();
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,249,* Perturb the hash for starting probing.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,250,* @param hash initial hash
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,251,* @return perturbed hash
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,253,private static int perturb(final int hash) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,254,return hash & 0x7fffffff;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,258,* Find the index at which a key should be inserted
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,259,* @param key key to lookup
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,260,* @return index at which key should be inserted
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,262,private int findInsertionIndex(final int key) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,263,"return findInsertionIndex(keys, states, key, mask);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,267,* Find the index at which a key should be inserted
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,268,* @param keys keys table
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,269,* @param states states table
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,270,* @param key key to lookup
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,271,* @param mask bit mask for hash values
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,272,* @return index at which key should be inserted
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,274,"private static int findInsertionIndex(final int[] keys, final byte[] states,"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,275,"final int key, final int mask) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,276,final int hash = hashOf(key);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,277,int index = hash & mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,278,if (states[index] == FREE) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,279,return index;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,280,} else if (states[index] == FULL && keys[index] == key) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,281,return changeIndexSign(index);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,284,int perturb = perturb(hash);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,285,int j = index;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,286,if (states[index] == FULL) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,287,while (true) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,288,"j = probe(perturb, j);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,289,index = j & mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,290,perturb >>= PERTURB_SHIFT;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,292,if (states[index] != FULL || keys[index] == key) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,293,break;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,298,if (states[index] == FREE) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,299,return index;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,300,} else if (states[index] == FULL) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,301,"// due to the loop exit condition,"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,302,// if (states[index] == FULL) then keys[index] == key
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,303,return changeIndexSign(index);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,306,final int firstRemoved = index;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,307,while (true) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,308,"j = probe(perturb, j);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,309,index = j & mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,311,if (states[index] == FREE) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,312,return firstRemoved;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,313,} else if (states[index] == FULL && keys[index] == key) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,314,return changeIndexSign(index);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,317,perturb >>= PERTURB_SHIFT;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,324,* Compute next probe for collision resolution
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,325,* @param perturb perturbed hash
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,326,* @param j previous probe
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,327,* @return next probe
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,329,"private static int probe(final int perturb, final int j) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,330,return (j << 2) + j + perturb + 1;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,334,* Change the index sign
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,335,* @param index initial index
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,336,* @return changed index
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,338,private static int changeIndexSign(final int index) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,339,return -index - 1;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,343,* Get the number of elements stored in the map.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,344,* @return number of elements stored in the map
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,346,public int size() {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,347,return size;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,352,* Remove the value associated with a key.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,353,* @param key key to which the value is associated
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,354,* @return removed value
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,356,public T remove(final int key) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,358,final int hash  = hashOf(key);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,359,int index = hash & mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,360,"if (containsKey(key, index)) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,361,return doRemove(index);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,364,if (states[index] == FREE) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,365,return missingEntries;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,368,"for (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,369,"j = probe(perturb, j);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,370,index = j & mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,371,"if (containsKey(key, index)) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,372,return doRemove(index);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,376,return missingEntries;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,381,* Check if the tables contain an element associated with specified key
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,382,* at specified index.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,383,* @param key key to check
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,384,* @param index index to check
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,385,* @return true if an element is associated with key at index
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,387,"private boolean containsKey(final int key, final int index) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,388,return (key != 0 || states[index] == FULL) && keys[index] == key;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,392,* Remove an element at specified index.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,393,* @param index index of the element to remove
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,394,* @return removed value
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,396,private T doRemove(int index) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,397,keys[index]   = 0;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,398,states[index] = REMOVED;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,399,final T previous = values[index];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,400,values[index] = missingEntries;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,401,--size;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,402,++count;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,403,return previous;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,407,* Put a value associated with a key in the map.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,408,* @param key key to which value is associated
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,409,* @param value value to put in the map
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,410,* @return previous value associated with the key
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,412,"public T put(final int key, final T value) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,413,int index = findInsertionIndex(key);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,414,T previous = missingEntries;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,415,boolean newMapping = true;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,416,if (index < 0) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,417,index = changeIndexSign(index);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,418,previous = values[index];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,419,newMapping = false;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,421,keys[index]   = key;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,422,states[index] = FULL;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,423,values[index] = value;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,424,if (newMapping) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,425,++size;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,426,if (shouldGrowTable()) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,427,growTable();
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,429,++count;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,431,return previous;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,436,* Grow the tables.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,438,private void growTable() {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,440,final int oldLength      = states.length;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,441,final int[] oldKeys      = keys;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,442,final T[] oldValues = values;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,443,final byte[] oldStates   = states;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,445,final int newLength = RESIZE_MULTIPLIER * oldLength;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,446,final int[] newKeys = new int[newLength];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,447,final T[] newValues = buildArray(newLength);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,448,final byte[] newStates = new byte[newLength];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,449,final int newMask = newLength - 1;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,450,for (int i = 0; i < oldLength; ++i) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,451,if (oldStates[i] == FULL) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,452,final int key = oldKeys[i];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,453,"final int index = findInsertionIndex(newKeys, newStates, key, newMask);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,454,newKeys[index]   = key;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,455,newValues[index] = oldValues[i];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,456,newStates[index] = FULL;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,460,mask   = newMask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,461,keys   = newKeys;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,462,values = newValues;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,463,states = newStates;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,468,* Check if tables should grow due to increased size.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,469,* @return true if  tables should grow
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,471,private boolean shouldGrowTable() {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,472,return size > (mask + 1) * LOAD_FACTOR;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,476,* Compute the hash value of a key
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,477,* @param key key to hash
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,478,* @return hash value of the key
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,480,private static int hashOf(final int key) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,481,final int h = key ^ ((key >>> 20) ^ (key >>> 12));
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,482,return h ^ (h >>> 7) ^ (h >>> 4);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,486,/** Iterator class for the map. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,487,public class Iterator {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,489,/** Reference modification count. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,490,private final int referenceCount;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,492,/** Index of current element. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,493,private int current;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,495,/** Index of next element. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,496,private int next;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,499,* Simple constructor.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,501,private Iterator() {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,503,// preserve the modification count of the map to detect concurrent modifications later
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,504,referenceCount = count;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,506,// initialize current index
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,507,next = -1;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,508,try {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,509,advance();
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,510,} catch (NoSuchElementException nsee) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,511,// ignored
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,517,* Check if there is a next element in the map.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,518,* @return true if there is a next element
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,520,public boolean hasNext() {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,521,return next >= 0;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,525,* Get the key of current entry.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,526,* @return key of current entry
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,527,* @exception ConcurrentModificationException if the map is modified during iteration
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,528,* @exception NoSuchElementException if there is no element left in the map
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,530,public int key()
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,531,"throws ConcurrentModificationException, NoSuchElementException {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,532,if (referenceCount != count) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,533,"throw MathRuntimeException.createConcurrentModificationException(""map has been modified while iterating"");"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,535,if (current < 0) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,536,"throw MathRuntimeException.createNoSuchElementException(""iterator exhausted"");"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,538,return keys[current];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,542,* Get the value of current entry.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,543,* @return value of current entry
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,544,* @exception ConcurrentModificationException if the map is modified during iteration
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,545,* @exception NoSuchElementException if there is no element left in the map
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,547,public T value()
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,548,"throws ConcurrentModificationException, NoSuchElementException {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,549,if (referenceCount != count) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,550,"throw MathRuntimeException.createConcurrentModificationException(""map has been modified while iterating"");"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,552,if (current < 0) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,553,"throw MathRuntimeException.createNoSuchElementException(""iterator exhausted"");"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,555,return values[current];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,559,* Advance iterator one step further.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,560,* @exception ConcurrentModificationException if the map is modified during iteration
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,561,* @exception NoSuchElementException if there is no element left in the map
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,563,public void advance()
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,564,"throws ConcurrentModificationException, NoSuchElementException {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,566,if (referenceCount != count) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,567,"throw MathRuntimeException.createConcurrentModificationException(""map has been modified while iterating"");"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,570,// advance on step
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,571,current = next;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,573,// prepare next step
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,574,try {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,575,while (states[++next] != FULL) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,576,// nothing to do
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,578,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,579,next = -2;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,580,if (current < 0) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,581,"throw MathRuntimeException.createNoSuchElementException(""iterator exhausted"");"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,590,* Read a serialized object.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,591,* @param stream input stream
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,592,* @throws IOException if object cannot be read
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,593,* @throws ClassNotFoundException if the class corresponding
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,594,* to the serialized object cannot be found
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,596,private void readObject(final ObjectInputStream stream)
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,597,"throws IOException, ClassNotFoundException {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,598,stream.defaultReadObject();
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,599,count = 0;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,602,/** Build an array of elements.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,603,* @param length size of the array to build
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,604,* @return a new array
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,606,"@SuppressWarnings(""unchecked"")"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,607,private T[] buildArray(final int length) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,608,"return (T[]) Array.newInstance(field.getZero().getClass(), length);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,18,ackage org.apache.commons.math.analysis;
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,20,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,21,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,26, Base class for {@link BivariateRealFunction} that can be composed with other functions.
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,28, @since 2.1
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,29, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,30, @deprecated in 2.2 (to be removed in 3.0). Please use the function classes
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,31, in the {@link org.apache.commons.math.analysis.function} package and the
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,32, methods in {@link FunctionUtils}.
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,34,Deprecated
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,35,ublic abstract class BinaryFunction implements BivariateRealFunction {
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,36,ublic static BinaryFunction make(final BivariateRealFunction f) {
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,37,eturn new BinaryFunction() {
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,38,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,39,Override
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,40,"ublic double value(double x, double y) {"
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,41,"eturn f.value(x, y);"
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,46,** The + operator method wrapped as a {@link BinaryFunction}. */
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,47,ublic static final BinaryFunction ADD =
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,48,ake(new org.apache.commons.math.analysis.function.Add());
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,50,** The - operator method wrapped as a {@link BinaryFunction}. */
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,51,ublic static final BinaryFunction SUBTRACT =
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,52,ake(new org.apache.commons.math.analysis.function.Subtract());
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,54,** The * operator method wrapped as a {@link BinaryFunction}. */
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,55,ublic static final BinaryFunction MULTIPLY =
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,56,ake(new org.apache.commons.math.analysis.function.Multiply());
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,58,** The / operator method wrapped as a {@link BinaryFunction}. */
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,59,ublic static final BinaryFunction DIVIDE =
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,60,ake(new org.apache.commons.math.analysis.function.Divide());
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,62,** The {@code FastMath.pow} method wrapped as a {@link BinaryFunction}. */
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,63,ublic static final BinaryFunction POW =
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,64,ake(new org.apache.commons.math.analysis.function.Pow());
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,66,** The {@code FastMath.atan2} method wrapped as a {@link BinaryFunction}. */
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,67,ublic static final BinaryFunction ATAN2 =
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,68,ake(new org.apache.commons.math.analysis.function.Atan2());
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,70,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,71,"ublic abstract double value(double x, double y) throws MathUserException;"
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,73,** Get a composable function by fixing the first argument of the instance.
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,74, @param fixedX fixed value of the first argument
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,75," @return a function such that {@code f.value(y) == value(fixedX, y)}"
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,77,ublic ComposableFunction fix1stArgument(final double fixedX) {
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,78,"eturn ComposableFunction.make(FunctionUtils.fix1stArgument(this, fixedX));"
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,81,** Get a composable function by fixing the second argument of the instance.
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,82, @param fixedY fixed value of the second argument
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,83," @return a function such that {@code f.value(x) == value(x, fixedY)}"
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,85,ublic ComposableFunction fix2ndArgument(final double fixedY) {
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,86,"eturn ComposableFunction.make(FunctionUtils.fix2ndArgument(this, fixedY));"
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,18,ackage org.apache.commons.math.analysis;
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,20,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,21,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,25, Base class for {@link UnivariateRealFunction} that can be composed with other functions.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,27, @since 2.1
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,28, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,29, @deprecated in 2.2 (to be removed in 3.0). Please use the function classes
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,30, in the {@link org.apache.commons.math.analysis.function} package and the
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,31, methods in {@link FunctionUtils}.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,33,Deprecated
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,34,ublic abstract class ComposableFunction implements UnivariateRealFunction {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,35,ublic static ComposableFunction make(final UnivariateRealFunction f) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,36,eturn new ComposableFunction() {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,37,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,38,Override
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,39,ublic double value(double x) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,40,eturn f.value(x);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,45,** The constant function always returning 0. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,46,ublic static final ComposableFunction ZERO =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,47,ake(new org.apache.commons.math.analysis.function.Constant(0));
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,49,** The constant function always returning 1. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,50,ublic static final ComposableFunction ONE =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,51,ake(new org.apache.commons.math.analysis.function.Constant(1));
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,53,** The identity function. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,54,ublic static final ComposableFunction IDENTITY =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,55,ake(new org.apache.commons.math.analysis.function.Identity());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,57,** The {@code FastMath.abs} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,58,ublic static final ComposableFunction ABS =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,59,ake(new org.apache.commons.math.analysis.function.Abs());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,61,** The - operator wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,62,ublic static final ComposableFunction NEGATE =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,63,ake(new org.apache.commons.math.analysis.function.Minus());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,65,** The invert operator wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,66,ublic static final ComposableFunction INVERT =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,67,ake(new org.apache.commons.math.analysis.function.Inverse());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,69,** The {@code FastMath.sin} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,70,ublic static final ComposableFunction SIN =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,71,ake(new org.apache.commons.math.analysis.function.Sin());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,73,** The {@code FastMath.sqrt} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,74,ublic static final ComposableFunction SQRT =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,75,ake(new org.apache.commons.math.analysis.function.Sqrt());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,77,** The {@code FastMath.sinh} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,78,ublic static final ComposableFunction SINH =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,79,ake(new org.apache.commons.math.analysis.function.Sinh());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,81,** The {@code FastMath.exp} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,82,ublic static final ComposableFunction EXP =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,83,ake(new org.apache.commons.math.analysis.function.Exp());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,85,** The {@code FastMath.expm1} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,86,ublic static final ComposableFunction EXPM1 =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,87,ake(new org.apache.commons.math.analysis.function.Expm1());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,89,** The {@code FastMath.asin} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,90,ublic static final ComposableFunction ASIN =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,91,ake(new org.apache.commons.math.analysis.function.Asin());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,93,** The {@code FastMath.atan} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,94,ublic static final ComposableFunction ATAN =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,95,ake(new org.apache.commons.math.analysis.function.Atan());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,97,** The {@code FastMath.tan} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,98,ublic static final ComposableFunction TAN =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,99,ake(new org.apache.commons.math.analysis.function.Tan());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,101,** The {@code FastMath.tanh} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,102,ublic static final ComposableFunction TANH =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,103,ake(new org.apache.commons.math.analysis.function.Tanh());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,105,** The {@code FastMath.cbrt} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,106,ublic static final ComposableFunction CBRT =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,107,ake(new org.apache.commons.math.analysis.function.Cbrt());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,109,** The {@code FastMath.ceil} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,110,ublic static final ComposableFunction CEIL = new ComposableFunction() {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,111,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,112,Override
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,113,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,114,eturn FastMath.ceil(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,118,** The {@code FastMath.floor} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,119,ublic static final ComposableFunction FLOOR = new ComposableFunction() {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,120,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,121,Override
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,122,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,123,eturn FastMath.floor(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,127,** The {@code FastMath.log} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,128,ublic static final ComposableFunction LOG =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,129,ake(new org.apache.commons.math.analysis.function.Log());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,131,** The {@code FastMath.log10} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,132,ublic static final ComposableFunction LOG10 =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,133,ake(new org.apache.commons.math.analysis.function.Log10());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,135,** The {@code FastMath.log1p} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,136,ublic static final ComposableFunction LOG1P =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,137,ake(new org.apache.commons.math.analysis.function.Log1p());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,139,** The {@code FastMath.cos} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,140,ublic static final ComposableFunction COS =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,141,ake(new org.apache.commons.math.analysis.function.Cos());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,143,** The {@code FastMath.abs} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,144,ublic static final ComposableFunction ACOS =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,145,ake(new org.apache.commons.math.analysis.function.Acos());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,147,** The {@code FastMath.cosh} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,148,ublic static final ComposableFunction COSH =
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,149,ake(new org.apache.commons.math.analysis.function.Cosh());
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,151,** The {@code FastMath.rint} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,152,ublic static final ComposableFunction RINT = new ComposableFunction() {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,153,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,154,Override
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,155,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,156,eturn FastMath.rint(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,160,** The {@code FastMath.signum} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,161,ublic static final ComposableFunction SIGNUM = new ComposableFunction() {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,162,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,163,Override
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,164,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,165,eturn FastMath.signum(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,169,** The {@code FastMath.ulp} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,170,ublic static final ComposableFunction ULP = new ComposableFunction() {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,171,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,172,Override
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,173,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,174,eturn FastMath.ulp(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,178,** Precompose the instance with another function.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,179, <p>
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,180, The composed function h created by {@code h = g.of(f)} is such
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,181, that {@code h.value(x) == g.value(f.value(x))} for all x.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,182, </p>
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,183, @param f function to compose with
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,184, @return a new function which computes {@code this.value(f.value(x))}
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,185, @see #postCompose(UnivariateRealFunction)
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,187,ublic ComposableFunction of(final UnivariateRealFunction f) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,188,eturn new ComposableFunction() {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,189,Override
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,190,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,191,ublic double value(double x) throws MathUserException {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,192,eturn ComposableFunction.this.value(f.value(x));
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,197,** Postcompose the instance with another function.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,198, <p>
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,199, The composed function h created by {@code h = g.postCompose(f)} is such
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,200, that {@code h.value(x) == f.value(g.value(x))} for all x.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,201, </p>
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,202, @param f function to compose with
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,203, @return a new function which computes {@code f.value(this.value(x))}
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,204, @see #of(UnivariateRealFunction)
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,206,ublic ComposableFunction postCompose(final UnivariateRealFunction f) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,207,eturn new ComposableFunction() {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,208,Override
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,209,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,210,ublic double value(double x) throws MathUserException {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,211,eturn f.value(ComposableFunction.this.value(x));
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,217, Return a function combining the instance and another function.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,218, <p>
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,219," The function h created by {@code h = g.combine(f, combiner)} is such that"
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,220," {@code h.value(x) == combiner.value(g.value(x), f.value(x))} for all x."
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,221, </p>
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,222, @param f function to combine with the instance
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,223, @param combiner bivariate function used for combining
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,224," @return a new function which computes {@code combine.value(this.value(x), f.value(x))}"
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,226,"ublic ComposableFunction combine(final UnivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,227,inal BivariateRealFunction combiner) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,228,eturn new ComposableFunction() {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,229,Override
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,230,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,231,ublic double value(double x) throws MathUserException {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,232,"eturn combiner.value(ComposableFunction.this.value(x), f.value(x));"
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,238, Return a function adding the instance and another function.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,239, @param f function to combine with the instance
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,240, @return a new function which computes {@code this.value(x) + f.value(x)}
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,242,ublic ComposableFunction add(final UnivariateRealFunction f) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,243,eturn new ComposableFunction() {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,244,Override
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,245,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,246,ublic double value(double x) throws MathUserException {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,247,eturn ComposableFunction.this.value(x) + f.value(x);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,253, Return a function adding a constant term to the instance.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,254, @param a term to add
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,255, @return a new function which computes {@code this.value(x) + a}
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,257,ublic ComposableFunction add(final double a) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,258,eturn new ComposableFunction() {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,259,Override
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,260,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,261,ublic double value(double x) throws MathUserException {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,262,eturn ComposableFunction.this.value(x) + a;
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,268, Return a function subtracting another function from the instance.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,269, @param f function to combine with the instance
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,270, @return a new function which computes {@code this.value(x) - f.value(x)}
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,272,ublic ComposableFunction subtract(final UnivariateRealFunction f) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,273,eturn new ComposableFunction() {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,274,Override
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,275,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,276,ublic double value(double x) throws MathUserException {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,277,eturn ComposableFunction.this.value(x) - f.value(x);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,283, Return a function multiplying the instance and another function.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,284, @param f function to combine with the instance
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,285, @return a new function which computes {@code this.value(x) * f.value(x)}
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,287,ublic ComposableFunction multiply(final UnivariateRealFunction f) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,288,eturn new ComposableFunction() {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,289,Override
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,290,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,291,ublic double value(double x) throws MathUserException {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,292,eturn ComposableFunction.this.value(x) * f.value(x);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,298, Return a function scaling the instance by a constant factor.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,299, @param scaleFactor constant scaling factor
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,300, @return a new function which computes {@code this.value(x) * scaleFactor}
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,302,ublic ComposableFunction multiply(final double scaleFactor) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,303,eturn new ComposableFunction() {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,304,Override
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,305,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,306,ublic double value(double x) throws MathUserException {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,307,eturn ComposableFunction.this.value(x) * scaleFactor;
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,312, Return a function dividing the instance by another function.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,313, @param f function to combine with the instance
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,314, @return a new function which computes {@code this.value(x) / f.value(x)}
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,316,ublic ComposableFunction divide(final UnivariateRealFunction f) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,317,eturn new ComposableFunction() {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,318,Override
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,319,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,320,ublic double value(double x) throws MathUserException {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,321,eturn ComposableFunction.this.value(x) / f.value(x);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,327, Generates a function that iteratively apply instance function on all
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,328, elements of an array.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,329, <p>
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,330, The generated function behaves as follows:
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,331, <ul>
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,332,   <li>initialize result = initialValue</li>
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,333,"   <li>iterate: {@code result = combiner.value(result,"
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,334,   this.value(nextMultivariateEntry));}</li>
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,335,   <li>return result</li>
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,336, </ul>
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,337, </p>
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,338, @param combiner combiner to use between entries
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,339, @param initialValue initial value to use before first entry
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,340, @return a new function that iteratively applie instance function on all
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,341, elements of an array.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,343,"ublic MultivariateRealFunction asCollector(final BivariateRealFunction combiner,"
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,344,inal double initialValue) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,345,eturn new MultivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,346,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,347,ublic double value(double[] point)
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,348,"hrows MathUserException, IllegalArgumentException {"
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,349,ouble result = initialValue;
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,350,or (final double entry : point) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,351,"esult = combiner.value(result, ComposableFunction.this.value(entry));"
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,353,eturn result;
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,359, Generates a function that iteratively apply instance function on all
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,360, elements of an array.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,361, <p>
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,362, Calling this method is equivalent to call {@link
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,363," #asCollector(BivariateRealFunction, double) asCollector(BivariateRealFunction, 0.0)}."
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,364, </p>
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,365, @param combiner combiner to use between entries
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,366, @return a new function that iteratively applie instance function on all
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,367, elements of an array.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,368," @see #asCollector(BivariateRealFunction, double)"
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,370,ublic  MultivariateRealFunction asCollector(final BivariateRealFunction combiner) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,371,"eturn asCollector(combiner, 0.0);"
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,375, Generates a function that iteratively apply instance function on all
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,376, elements of an array.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,377, <p>
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,378, Calling this method is equivalent to call {@link
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,379," #asCollector(BivariateRealFunction, double) asCollector(BinaryFunction.ADD, initialValue)}."
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,380, </p>
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,381, @param initialValue initial value to use before first entry
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,382, @return a new function that iteratively applie instance function on all
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,383, elements of an array.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,384," @see #asCollector(BivariateRealFunction, double)"
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,385, @see BinaryFunction#ADD
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,387,ublic  MultivariateRealFunction asCollector(final double initialValue) {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,388,"eturn asCollector(BinaryFunction.ADD, initialValue);"
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,392, Generates a function that iteratively apply instance function on all
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,393, elements of an array.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,394, <p>
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,395, Calling this method is equivalent to call {@link
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,396," #asCollector(BivariateRealFunction, double) asCollector(BinaryFunction.ADD, 0.0)}."
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,397, </p>
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,398, @return a new function that iteratively applie instance function on all
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,399, elements of an array.
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,400," @see #asCollector(BivariateRealFunction, double)"
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,401, @see BinaryFunction#ADD
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,403,ublic  MultivariateRealFunction asCollector() {
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,404,"eturn asCollector(BinaryFunction.ADD, 0.0);"
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,407,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,408,ublic abstract double value(double x) throws MathUserException;
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,15, limitations under the License.
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,17,ackage org.apache.commons.math.analysis;
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,19,mport org.apache.commons.math.exception.MathUserException;
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,20,mport org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,21,mport org.junit.Assert;
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,22,mport org.junit.Test;
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,24,ublic class BinaryFunctionTest {
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,26,Test
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,27,ublic void testAdd() throws MathUserException {
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,28,"ssert.assertEquals(5.0, BinaryFunction.ADD.value(2, 3), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,29,"ssert.assertEquals(0.0, BinaryFunction.ADD.value(-1, 1), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,32,Test
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,33,ublic void testSubtract() throws MathUserException {
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,34,"ssert.assertEquals(-1.0, BinaryFunction.SUBTRACT.value(2, 3), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,35,"ssert.assertEquals(-2.0, BinaryFunction.SUBTRACT.value(-1, 1), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,38,Test
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,39,ublic void testMultiply() throws MathUserException {
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,40,"ssert.assertEquals(6.0, BinaryFunction.MULTIPLY.value(2, 3), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,41,"ssert.assertEquals(-1.0, BinaryFunction.MULTIPLY.value(-1, 1), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,44,Test
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,45,ublic void testDivide() throws MathUserException {
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,46,"ssert.assertEquals(1.5, BinaryFunction.DIVIDE.value(3, 2), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,47,"ssert.assertEquals(-1.0, BinaryFunction.DIVIDE.value(-1, 1), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,50,Test
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,51,ublic void testPow() throws MathUserException {
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,52,"ssert.assertEquals(9.0, BinaryFunction.POW.value(3, 2), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,53,"ssert.assertEquals(-1.0, BinaryFunction.POW.value(-1, 1), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,56,Test
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,57,ublic void testAtan2() throws MathUserException {
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,58,"ssert.assertEquals(FastMath.PI / 4, BinaryFunction.ATAN2.value(1, 1), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,59,"ssert.assertEquals(-FastMath.PI / 4, BinaryFunction.ATAN2.value(-1, 1), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,62,Test
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,63,ublic void testFix1st() throws MathUserException {
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,64,omposableFunction f = BinaryFunction.POW.fix1stArgument(2);
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,65,or (double x = 0.0; x < 1.0; x += 0.01) {
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,66,"ssert.assertEquals(FastMath.pow(2.0, x), f.value(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,70,Test
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,71,ublic void testFix2nd() throws MathUserException {
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,72,omposableFunction f = BinaryFunction.POW.fix2ndArgument(2);
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,73,or (double y = 0.0; y < 1.0; y += 0.01) {
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,74,"ssert.assertEquals(y * y, f.value(y), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,15, limitations under the License.
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,17,ackage org.apache.commons.math.analysis;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,19,mport org.apache.commons.math.exception.MathUserException;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,20,mport org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,21,mport org.junit.Assert;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,22,mport org.junit.Test;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,25, @deprecated To be removed when the class {@link ComposableFunction} is removed.
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,27,Deprecated
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,28,ublic class ComposableFunctionTest {
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,30,Test
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,31,ublic void testZero() throws MathUserException {
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,32,"ssert.assertEquals(0.0, ComposableFunction.ZERO.value(1), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,33,"ssert.assertEquals(0.0, ComposableFunction.ZERO.value(2), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,36,Test
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,37,ublic void testOne() throws MathUserException {
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,38,"ssert.assertEquals(1.0, ComposableFunction.ONE.value(1), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,39,"ssert.assertEquals(1.0, ComposableFunction.ONE.value(2), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,42,Test
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,43,ublic void testIdentity() throws MathUserException {
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,44,"ssert.assertEquals(1.0, ComposableFunction.IDENTITY.value(1), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,45,"ssert.assertEquals(2.0, ComposableFunction.IDENTITY.value(2), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,48,Test
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,49,ublic void testRint() throws MathUserException {
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,50,"ssert.assertEquals(1.0, ComposableFunction.RINT.value(0.9), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,51,"ssert.assertEquals(2.0, ComposableFunction.RINT.value(2.2), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,54,Test
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,55,ublic void testSignum() throws MathUserException {
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,56,"ssert.assertEquals(1.0, ComposableFunction.SIGNUM.value(12.3), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,57,"ssert.assertEquals(-1.0, ComposableFunction.SIGNUM.value(-6), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,60,Test
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,61,ublic void testComposition() throws MathUserException {
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,62,omposableFunction abs    = ComposableFunction.ABS;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,63,omposableFunction acos   = ComposableFunction.ACOS;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,64,omposableFunction asin   = ComposableFunction.ASIN;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,65,omposableFunction atan   = ComposableFunction.ATAN;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,66,omposableFunction cbrt   = ComposableFunction.CBRT;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,67,omposableFunction ceil   = ComposableFunction.CEIL;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,68,omposableFunction cos    = ComposableFunction.COS;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,69,omposableFunction cosh   = ComposableFunction.COSH;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,70,omposableFunction exp    = ComposableFunction.EXP;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,71,omposableFunction expm1  = ComposableFunction.EXPM1;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,72,omposableFunction floor  = ComposableFunction.FLOOR;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,73,omposableFunction id     = ComposableFunction.IDENTITY;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,74,omposableFunction log    = ComposableFunction.LOG;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,75,omposableFunction log10  = ComposableFunction.LOG10;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,76,omposableFunction negate = ComposableFunction.NEGATE;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,77,omposableFunction sin    = ComposableFunction.SIN;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,78,omposableFunction sinh   = ComposableFunction.SINH;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,79,omposableFunction sqrt   = ComposableFunction.SQRT;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,80,omposableFunction tan    = ComposableFunction.TAN;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,81,omposableFunction tanh   = ComposableFunction.TANH;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,82,omposableFunction ulp    = ComposableFunction.ULP;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,84,omposableFunction f1 = sqrt.of(abs.of(expm1.of(cbrt.of(tanh).of(id))));
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,85,or (double x = 0.1; x < 0.9; x += 0.01) {
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,86,"ssert.assertEquals(FastMath.sqrt(FastMath.abs(FastMath.expm1(FastMath.cbrt(FastMath.tanh(x))))),"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,87,"1.value(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,90,omposableFunction f2 = cosh.of(sinh.of(tanh.of(ceil.postCompose(log.postCompose(cosh)))));
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,91,or (double x = 0.1; x < 12.9; x += 1.0) {
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,92,"ssert.assertEquals(FastMath.cosh(FastMath.sinh(FastMath.tanh(FastMath.cosh(FastMath.log(FastMath.ceil(x)))))),"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,93,"2.value(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,96,omposableFunction f3 = cos.of(sin.of(tan.of(acos.of(asin.of(log10.of(log.of(ulp)))))));
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,97,or (double x = 1.0e16; x < 1.0e17; x += 1.0e16) {
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,98,"ssert.assertEquals(FastMath.cos(FastMath.sin(FastMath.tan(FastMath.acos(FastMath.asin(FastMath.log10(FastMath.log(FastMath.ulp(x)))))))),"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,99,"3.value(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,102,omposableFunction f4 = atan.of(exp.of(negate.of(floor)));
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,103,or (double x = 1.1; x < 10.2; x += 1.0) {
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,104,"ssert.assertEquals(FastMath.atan(FastMath.exp(-FastMath.floor(x))),"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,105,"4.value(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,110,Test
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,111,ublic void testCombine() throws MathUserException {
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,113,omposableFunction f =
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,114,"omposableFunction.COS.combine(ComposableFunction.ASIN, BinaryFunction.POW);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,115,or (double x = 0.1; x < 0.9; x += 0.01) {
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,116,"ssert.assertEquals(FastMath.pow(FastMath.cos(x), FastMath.asin(x)), f.value(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,121,Test
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,122,ublic void testSimpleCombination() throws MathUserException {
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,124,omposableFunction f1 = ComposableFunction.COS.add(3);
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,125,omposableFunction f2 = ComposableFunction.COS.add(ComposableFunction.SIN);
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,126,omposableFunction f3 = ComposableFunction.COS.subtract(ComposableFunction.SIN);
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,127,omposableFunction f4 = ComposableFunction.COS.multiply(ComposableFunction.SIN);
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,128,omposableFunction f5 = ComposableFunction.COS.multiply(5);
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,129,omposableFunction f6 = ComposableFunction.COS.divide(ComposableFunction.SIN);
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,130,or (double x = 0.1; x < 0.9; x += 0.01) {
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,131,"ssert.assertEquals(FastMath.cos(x) + 3, f1.value(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,132,"ssert.assertEquals(FastMath.cos(x) + FastMath.sin(x), f2.value(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,133,"ssert.assertEquals(FastMath.cos(x) - FastMath.sin(x), f3.value(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,134,"ssert.assertEquals(FastMath.cos(x) * FastMath.sin(x), f4.value(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,135,"ssert.assertEquals(FastMath.cos(x) * 5, f5.value(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,136,"ssert.assertEquals(FastMath.cos(x) / FastMath.sin(x), f6.value(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,141,Test
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,142,ublic void testCollector() throws MathUserException {
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,144,omposableFunction f = BinaryFunction.POW.fix2ndArgument(2);
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,145,"ssert.assertEquals(30, f.asCollector().value(new double[] { 1, 2, 3, 4 }), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,146,"ssert.assertEquals(33, f.asCollector(3).value(new double[] { 1, 2, 3, 4 }), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,147,"ssert.assertEquals(-30, f.asCollector(BinaryFunction.SUBTRACT).value(new double[] { 1, 2, 3, 4 }), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,148,"ssert.assertEquals(1152, f.asCollector(BinaryFunction.MULTIPLY, 2).value(new double[] { 1, 2, 3, 4 }), 1.0e-15);"

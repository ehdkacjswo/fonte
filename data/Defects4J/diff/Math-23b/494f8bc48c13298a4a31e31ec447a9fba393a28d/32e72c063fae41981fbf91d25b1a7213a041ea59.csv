is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,64,* For a random variable X whose values are distributed according
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,65,"* to this distribution, this method returns P(x0 &le; X &le; x1)."
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,67,* @param x0 the (inclusive) lower bound
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,68,* @param x1 the (inclusive) upper bound
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,69,* @return the probability that a random variable with this distribution
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,70,"* will take a value between <code>x0</code> and <code>x1</code>,"
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,71,* including the endpoints.
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,72,* @throws MathException if the cumulative probability can not be
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,73,* computed due to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,74,* @throws IllegalArgumentException if <code>x0 > x1</code>
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,76,"public double cumulativeProbability(double x0, double x1)"
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,77,throws MathException {
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,78,if (x0 > x1) {
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,79,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,80,"(""lower endpoint must be less than or equal to upper endpoint"");"
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,82,if (Math.floor(x0) < x0) {
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,83,"return cumulativeProbability(((int) Math.floor(x0)) + 1,"
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,84,(int) Math.floor(x1)); // don't want to count mass below x0
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,85,"} else { // x0 is mathematical integer, so use as is"
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,86,"return cumulativeProbability((int) Math.floor(x0),"
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,87,(int) Math.floor(x1));
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,191,* Verifies that floating point arguments are correctly handled by
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,192,"* cumulativeProbablility(-,-)"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,193,* JIRA: MATH-184
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,195,public void testFloatingPointArguments() throws Exception {
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,196,for (int i = 0; i < cumulativeTestPoints.length; i++) {
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,197,double arg = (double) cumulativeTestPoints[i];
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,198,assertEquals(
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,199,"""Incorrect cumulative probability value returned for "" +"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,200,"cumulativeTestPoints[i],"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,201,"cumulativeTestValues[i],"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,202,"distribution.cumulativeProbability(arg), tolerance);"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,203,if (i < cumulativeTestPoints.length - 1) {
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,204,double arg2 = (double) cumulativeTestPoints[i + 1];
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,205,"assertEquals(""Inconsistent probability for discrete range "" +"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,206,"""[ "" + arg + "","" + arg2 + "" ]"","
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,207,distribution.cumulativeProbability(
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,208,"cumulativeTestPoints[i],"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,209,"cumulativeTestPoints[i + 1]),"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,210,"distribution.cumulativeProbability(arg, arg2), tolerance);"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,211,arg = arg - Math.random();
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,212,arg2 = arg2 + Math.random();
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,213,"assertEquals(""Inconsistent probability for discrete range "" +"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,214,"""[ "" + arg + "","" + arg2 + "" ]"","
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,215,distribution.cumulativeProbability(
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,216,"cumulativeTestPoints[i],"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,217,"cumulativeTestPoints[i + 1]),"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,218,"distribution.cumulativeProbability(arg, arg2), tolerance);"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,221,int one = 1;
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,222,int ten = 10;
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,223,int two = 2;
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,224,double oned = (double) one;
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,225,double twod = (double) two;
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,226,double tend = (double) ten;
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,227,"assertEquals(distribution.cumulativeProbability(one, two),"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,228,"distribution.cumulativeProbability(oned, twod), tolerance);"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,229,"assertEquals(distribution.cumulativeProbability(one, two),"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,230,"distribution.cumulativeProbability(oned - tolerance,"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,231,"twod + 0.9), tolerance);"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,232,"assertEquals(distribution.cumulativeProbability(two, ten),"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,233,"distribution.cumulativeProbability(twod, tend), tolerance);"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,234,"assertEquals(distribution.cumulativeProbability(two, ten),"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,235,"distribution.cumulativeProbability(twod - tolerance,"
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,236,"tend + 0.9), tolerance);"

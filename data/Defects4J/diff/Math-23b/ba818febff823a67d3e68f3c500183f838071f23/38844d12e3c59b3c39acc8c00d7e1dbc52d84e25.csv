is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,138,inal double t0 = interpolator.getPreviousTime();
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,139,nterpolator.setInterpolatedTime(t0);
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,140,inal double [] y = interpolator.getInterpolatedState();
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,142,"tate.reinitializeBegin(t0, y);"
True,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,139,state.reinitializeBegin(interpolator);
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,143, @param tStart value of the independent <i>time</i> variable at the
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,144, beginning of the step
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,145, @param yStart array containing the current value of the state vector
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,146, at the beginning of the step
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,143,* @param interpolator valid for the current step
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,150,"ublic void reinitializeBegin(final double tStart, final double[] yStart)"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,147,public void reinitializeBegin(final StepInterpolator interpolator)
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,152,0 = tStart;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,153,"0 = handler.g(tStart, yStart);"
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,154,0Positive = g0 >= 0;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,149,try {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,150,// excerpt from MATH-421 issue:
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,151,// If an ODE solver is setup with an EventHandler that return STOP
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,152,"// when the even is triggered, the integrator stops (which is exactly"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,153,// the expected behavior). If however the user want to restart the
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,154,// solver from the final state reached at the event with the same
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,155,// configuration (expecting the event to be triggered again at a
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,156,"// later time), then the integrator may fail to start. It can get stuck"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,157,// at the previous event.
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,159,"// The use case for the bug MATH-421 is fairly general, so events occurring"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,160,"// less than epsilon after the solver start in the first step should be ignored,"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,161,// where epsilon is the convergence threshold of the event. The sign of the g
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,162,"// function should be evaluated after this initial ignore zone, not exactly at"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,163,// beginning (if there are no event at the very beginning g(t0) and g(t0+epsilon)
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,164,"// have the same sign, so this does not hurt ; if there is an event at the very"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,165,"// beginning, g(t0) and g(t0+epsilon) have opposite signs and we want to start"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,166,"// with the second one. Of course, the sign of epsilon depend on the integration"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,167,// direction (forward or backward). This explains what is done below.
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,169,final double ignoreZone = interpolator.isForward() ? getConvergence() : -getConvergence();
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,170,t0 = interpolator.getPreviousTime() + ignoreZone;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,171,interpolator.setInterpolatedTime(t0);
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,172,"g0 = handler.g(t0, interpolator.getInterpolatedState());"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,173,if (g0 == 0) {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,174,// extremely rare case: there is a zero EXACTLY at end of ignore zone
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,175,// we will use the opposite of sign at step beginning to force ignoring this zero
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,176,final double tStart = interpolator.getPreviousTime();
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,177,interpolator.setInterpolatedTime(tStart);
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,178,"g0Positive = handler.g(tStart, interpolator.getInterpolatedState()) <= 0;"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,179,} else {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,180,g0Positive = g0 >= 0;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,183,} catch (DerivativeException de) {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,184,throw new EventException(de);
False,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,52,ouble t0 = r1 - 0.5 * gap;
False,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,53,"s.reinitializeBegin(t0, new double[0]);"
False,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,56,nterpolator.storeTime(t0);
True,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,54,interpolator.storeTime(r1 - 2.5 * gap);
True,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,55,interpolator.shift();
True,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,56,interpolator.storeTime(r1 - 1.5 * gap);
True,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,57,es.reinitializeBegin(interpolator);
True,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,59,interpolator.shift();
True,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,60,interpolator.storeTime(r1 - 0.5 * gap);
True,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,61,Assert.assertFalse(es.evaluateStep(interpolator));

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,25, @version $Id Revision$
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,25,* @version $Id$
False,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,25, @version $Id Revision$
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,25,* @version $Id$
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,17,package org.apache.commons.math.transform;
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,20,* This enumeration defines the various types of normalizations that can be
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,21,* applied to discrete sine transforms (DST). The exact definition of these
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,22,* normalizations is detailed below.
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,24,* @see FastSineTransformer
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,25,* @version $Id$
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,26,* @since 3.0
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,28,public enum DstNormalization {
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,30,* <p>
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,31,* Should be passed to the constructor of {@link FastSineTransformer} to
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,32,* use the <em>standard</em> normalization convention. The standard DST-I
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,33,* normalization convention is defined as follows
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,34,* <ul>
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,35,* <li>forward transform: y<sub>n</sub> = &sum;<sub>k=0</sub><sup>N-1</sup>
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,36,"* x<sub>k</sub> sin(&pi; nk / N),</li>"
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,37,* <li>inverse transform: x<sub>k</sub> = (2 / N)
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,38,"* &sum;<sub>n=0</sub><sup>N-1</sup> y<sub>n</sub> sin(&pi; nk / N),</li>"
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,39,* </ul>
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,40,"* where N is the size of the data sample, and x<sub>0</sub> = 0."
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,41,* </p>
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,43,"STANDARD_DST_I,"
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,46,* <p>
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,47,* Should be passed to the constructor of {@link FastSineTransformer} to
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,48,* use the <em>orthogonal</em> normalization convention. The orthogonal
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,49,* DCT-I normalization convention is defined as follows
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,50,* <ul>
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,51,* <li>Forward transform: y<sub>n</sub> = &radic;(2 / N)
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,52,"* &sum;<sub>k=0</sub><sup>N-1</sup> x<sub>k</sub> sin(&pi; nk / N),</li>"
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,53,* <li>Inverse transform: x<sub>k</sub> = &radic;(2 / N)
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,54,"* &sum;<sub>n=0</sub><sup>N-1</sup> y<sub>n</sub> sin(&pi; nk / N),</li>"
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,55,* </ul>
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,56,"* which makes the transform orthogonal. N is the size of the data sample,"
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,57,* and x<sub>0</sub> = 0.
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,58,* </p>
True,src/main/java/org/apache/commons/math/transform/DstNormalization.java,src/main/java/org/apache/commons/math/transform/DstNormalization.java,60,ORTHOGONAL_DST_I
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,38, which are described below. <strong>It should be noted that regardless to the
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,39," convention, the first element of the dataset to be transformed must be"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,40, zero.</strong>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,38,* which are specified by the parameter {@link DstNormalization}.
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,39,"* <strong>It should be noted that regardless to the convention, the first"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,40,* element of the dataset to be transformed must be zero.</strong>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,42," <h3><a id=""standard"">Standard DST-I</a></h3>"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,43, <p>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,44, The standard normalization convention is defined as follows
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,45, <ul>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,46, <li>forward transform: y<sub>n</sub> = &sum;<sub>k=0</sub><sup>N-1</sup>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,47," x<sub>k</sub> sin(&pi; nk / N),</li>"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,48, <li>inverse transform: x<sub>k</sub> = (2 / N)
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,49," &sum;<sub>n=0</sub><sup>N-1</sup> y<sub>n</sub> sin(&pi; nk / N),</li>"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,50, </ul>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,51," where N is the size of the data sample, and x<sub>0</sub> = 0."
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,52, </p>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,53, <p>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,54, {@link RealTransformer}s following this convention are returned by the
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,55, factory method {@link #create()}.
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,56, </p>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,57," <h3><a id=""orthogonal"">Orthogonal DST-I</a></h3>"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,58, <p>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,59, The orthogonal normalization convention is defined as follows
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,60, <ul>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,61, <li>Forward transform: y<sub>n</sub> = &radic;(2 / N)
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,62," &sum;<sub>k=0</sub><sup>N-1</sup> x<sub>k</sub> sin(&pi; nk / N),</li>"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,63, <li>Inverse transform: x<sub>k</sub> = &radic;(2 / N)
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,64," &sum;<sub>n=0</sub><sup>N-1</sup> y<sub>n</sub> sin(&pi; nk / N),</li>"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,65, </ul>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,66," which makes the transform orthogonal. N is the size of the data sample, and"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,67, x<sub>0</sub> = 0.
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,68, </p>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,69, <p>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,70, {@link RealTransformer}s following this convention are returned by the
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,71, factory method {@link #createOrthogonal()}.
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,72, </p>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,73," <h3>Link with the DFT, and assumptions on the layout of the data set</h3>"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,107, @version $Id: FastSineTransformer.java 1213157 2011-12-12 07:19:23Z celestin$
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,75,* @version $Id$
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,116, {@code true} if the orthogonal version of the DCT should be used.
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,118, @see #create()
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,119, @see #createOrthogonal()
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,121,rivate final boolean orthogonal;
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,83,/** The type of DST to be performed. */
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,84,private final DstNormalization normalization;
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,127," @param orthogonal {@code false} if the DST is <em>not</em> to be scaled,"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,128, {@code true} if it is to be scaled so as to make the transform
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,129, orthogonal.
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,130, @see #create()
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,131, @see #createOrthogonal()
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,133,rivate FastSineTransformer(final boolean orthogonal) {
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,134,his.orthogonal = orthogonal;
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,138, <p>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,139, Returns a new instance of this class. The returned transformer uses the
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,140," <a href=""#standard"">standard normalizing conventions</a>."
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,141, </p>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,143," @return a new DST transformer, with standard normalizing conventions"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,145,ublic static FastSineTransformer create() {
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,146,eturn new FastSineTransformer(false);
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,150, <p>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,151, Returns a new instance of this class. The returned transformer uses the
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,152," <a href=""#orthogonal"">orthogonal normalizing conventions</a>."
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,153, </p>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,155," @return a new DST transformer, with orthogonal normalizing conventions"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,90,* @param normalization the type of normalization to be applied to the
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,91,* transformed data
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,157,ublic static FastSineTransformer createOrthogonal() {
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,158,eturn new FastSineTransformer(true);
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,93,public FastSineTransformer(final DstNormalization normalization) {
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,94,this.normalization = normalization;
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,170,f (orthogonal) {
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,106,if (normalization == DstNormalization.ORTHOGONAL_DST_I) {

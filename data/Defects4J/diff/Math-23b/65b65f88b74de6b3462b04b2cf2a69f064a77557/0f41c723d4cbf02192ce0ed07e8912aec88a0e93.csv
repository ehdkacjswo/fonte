is_addition,old_file_path,new_file_path,line_num,content
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,23, @version $Revision: 1.4 $ $Date: 2004/02/18 03:24:19 $
True,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,23,* @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,27, @version $Revision: 1.4 $ $Date: 2004/02/18 03:24:19 $
True,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,27,* @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,25, @version $Revision: 1.4 $ $Date: 2004/02/18 03:24:19 $
True,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,25,* @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,26, @version $Revision: 1.4 $ $Date: 2004/02/18 03:24:19 $
True,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,26,* @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,26, @version $Revision: 1.4 $ $Date: 2004/02/18 03:24:19 $
True,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,26,* @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,26, @version $Revision: 1.4 $ $Date: 2004/02/18 03:24:19 $
True,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,26,* @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,26, @version $Revision: 1.4 $ $Date: 2004/02/18 03:24:19 $
True,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,26,* @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,35, @version $Revision: 1.1 $ $Date: 2004/06/01 21:28:06 $
True,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,35,* @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,31, @version $Revision: 1.1 $ $Date: 2004/06/01 21:28:06 $
True,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,31,* @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,24, @version $Revision: 1.3 $ $Date: 2004/12/06 05:40:48 $
True,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,24,* @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,25, @version $Revision: 1.3 $ $Date: 2004/12/06 05:40:48 $
True,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,25,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,24, @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:16 $
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,24,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,24, @version $Revision: 1.2 $ $Date: 2004/07/17 21:12:52 $
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,24,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,22, @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:16 $
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,22,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,29, @version $Revision: 1.20 $ $Date: 2004/11/07 02:17:56 $
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,29,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,27, @version $Revision: 1.18 $ $Date: 2004/07/17 21:19:39 $
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,27,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,28, @version $Revision: 1.18 $ $Date: 2004/11/07 02:17:56 $
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,28,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateRealFunction.java,21, @version $Revision: 1.2 $ $Date: 2004/06/23 16:26:14 $
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateRealFunction.java,21,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,28, @version $Revision: 1.6 $ $Date: 2004/07/17 21:19:39 $
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,28,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,26, @version $Revision: 1.12 $ $Date: 2004/07/20 12:55:01 $
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,26,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,53, @version $Revision: 1.9 $ $Date: 2004/07/22 02:34:25 $
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,53,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,38, @version $Revision: 1.17 $ $Date: 2004/07/17 21:19:39 $
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,38,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,40, @version $Revision: 1.19 $ $Date: 2004/06/23 16:26:14 $
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,40,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,23, @version $Revision: 1.14 $ $Date: 2004/07/17 21:19:39 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,23,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,23, @version $Revision: 1.11 $ $Date: 2004/06/23 16:26:14 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,23,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,27, @version $Revision: 1.14 $ $Date: 2004/07/17 21:19:39 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,27,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,44, @version $Revision: 1.16 $ $Date: 2004/07/10 15:59:14 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,44,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,24, @version $Revision: 1.13 $ $Date: 2004/06/23 16:26:14 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,24,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,27, @version $Revision: 1.15 $ $Date: 2004/07/17 21:19:39 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,27,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,24, @version $Revision: 1.10 $ $Date: 2004/07/17 21:19:39 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,24,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,26, @version $Revision: 1.9 $ $Date: 2004/06/23 16:26:16 $
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,26,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,33, @version $Revision: 1.10 $ $Date: 2004/09/21 04:45:55 $
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,33,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,31, @version $Revision: 1.1 $ $Date: 2004/07/12 00:27:09 $
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,31,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,31, @version $Revision: 1.26 $ $Date: 2004/11/07 03:32:48 $
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,31,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,25, @version $Revision: 1.2 $ $Date: 2004/11/07 20:39:15 $
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,25,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,28, @version $Revision: 1.1 $ $Date: 2004/11/07 03:32:48 $
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,28,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,32, @version $Revision: 1.12 $ $Date: 2004/11/07 03:32:48 $
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,32,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,27, @version $Revision: 1.19 $ $Date: 2004/11/07 03:32:48 $
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,27,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,32," @version $Revision: 1.8 $ $Date: 2004-06-23 11:26:18 -0500 (Wed, 23 Jun 2004) $"
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,32,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,25," @version $Revision: 1.13 $ $Date: 2004-07-24 16:41:37 -0500 (Sat, 24 Jul 2004) $"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,25,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,32, @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,32,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,25, @version $Revision: 1.19 $ $Date: 2004/07/24 20:43:29 $
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,25,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,23, @version $Revision: 1.16 $ $Date: 2004/11/07 03:32:48 $
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,23,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,22, @version $Revision: 1.17 $ $Date: 2004/11/07 03:32:48 $
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,22,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,23, @version $Revision: 1.2 $ $Date: 2004/11/07 20:39:15 $
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,23,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,44, @version $Revision: 1.22 $ $Date$
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,44,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,22, @version $Revision: 1.21 $ $Date: 2004/11/07 03:32:48 $
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,22,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,32, @version $Revision: 1.12 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,32,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,25, @version $Revision: 1.19 $ $Date: 2004/07/24 21:41:36 $
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,25,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,32, @version $Revision: 1.13 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,32,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,27, @version $Revision: 1.19 $ $Date: 2004/07/24 21:41:36 $
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,27,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,32, @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,32,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,26, @version $Revision: 1.22 $ $Date: 2004/07/24 21:41:36 $
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,26,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,33, @version $Revision: 1.11 $ $Date: 2004/11/07 03:32:48 $
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,33,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,27, @version $Revision: 1.16 $ $Date: 2004/11/07 03:32:48 $
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,27,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,23, @version $Revision: 1.2 $ $Date: 2004/11/07 20:39:15 $
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,23,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,32, @version $Revision: 1.8 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,32,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,28, @version $Revision: 1.13 $ $Date: 2004/07/24 21:41:36 $
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,28,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,31, @version $Revision: 1.2 $ $Date: 2004/11/07 20:39:15 $
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,31,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,27, @version $Revision: 1.2 $ $Date: 2004/11/07 20:39:15 $
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,27,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,32, @version $Revision: 1.12 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,32,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,27, @version $Revision: 1.19 $ $Date: 2004/07/24 21:41:36 $
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,27,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,25, @version $Revision: $ $Date: $
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,25,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,35," @version $Revision: 1.10 $ $Date: 2004-09-20 23:45:55 -0500 (Mon, 20 Sep 2004) $"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,35,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,29, @version $Revision: $ $Date: $
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,29,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,28, @version $Revision: 1.9 $ $Date: 2004/10/25 03:12:28 $
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,28,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,46, @version $Revision: 1.10 $ $Date: 2004/11/07 20:19:22 $
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,46,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,23, @version $Revision: 1.8 $ $Date: 2004/12/06 05:49:44 $
True,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,23,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,22, @version $Revision: 1.8 $ $Date: 2004/12/06 05:49:44 $
True,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,22,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,24, @version $Revision: 1.2 $ $Date: 2004/10/25 05:36:15 $
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,24,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,25, @version $Revision: 1.25 $ $Date: 2004/10/12 06:19:50 $
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,25,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,48, @version $Revision: 1.35 $ $Date: 2004/11/07 20:19:22 $
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,48,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,46, @version $Revision: 1.23 $ $Date: 2004/10/08 05:08:16 $
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,46,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,57, @version $Revision: 1.30 $ $Date: 2004/10/08 05:08:16 $
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,57,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,22, @version $Revision: 1.10 $ $Date: 2004/06/14 23:15:15 $
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,22,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,74, @version $Revision: 1.16 $ $Date: 2004/07/22 02:34:25 $
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,74,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,42, @version $Revision: 1.17 $ $Date: 2004/08/22 01:41:30 $
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,42,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,27, @version $Revision: 1.21 $ $Date: 2004/06/23 16:26:17 $
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,27,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,26, @version $Revision: 1.2 $ $Date: 2004/06/23 16:26:17 $
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,26,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,28, @version $Revision: 1.22 $ $Date: 2004/10/08 05:53:18 $
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,28,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,38, @version $Revision: 1.29 $ $Date: 2004/09/21 03:02:34 $
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,38,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,34, @version $Revision: 1.33 $ $Date: 2004/10/08 05:08:16 $
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,34,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,30, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,30,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,31, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,31,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,37, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,37,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,26, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,26,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,21, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,21,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,24, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,24,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java,26, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java,26,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,26, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,26,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,32, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,32,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java,25, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java,25,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,45, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,45,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,50, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,50,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,43, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,43,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,38, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,38,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,47, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,47,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,42, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,42,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,37, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,37,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,37, @version $Revision: 1.2 $ $Date: 2004/10/11 06:54:05 $
True,src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,37,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,43, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,43,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,48, @version $Revision: 1.4 $ $Date: 2004/10/11 06:52:39 $
True,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,48,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,35, @version $Revision: 1.2 $ $Date: 2004/11/07 02:44:45 $
True,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,35,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/rank/Median.java,src/java/org/apache/commons/math/stat/descriptive/rank/Median.java,30, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/rank/Median.java,src/java/org/apache/commons/math/stat/descriptive/rank/Median.java,30,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/java/org/apache/commons/math/stat/descriptive/rank/Min.java,37, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/java/org/apache/commons/math/stat/descriptive/rank/Min.java,37,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,63, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
True,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,63,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/java/org/apache/commons/math/stat/descriptive/summary/Product.java,33, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:18 $
True,src/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/java/org/apache/commons/math/stat/descriptive/summary/Product.java,33,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,33, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:18 $
True,src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,33,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,41, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:18 $
True,src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,41,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,33, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:18 $
True,src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,33,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,23, @version $Revision: 1.3 $ $Date: 2004/06/23 16:26:14 $
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,23,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,25, @version $Revision: 1.11 $ $Date: 2004/12/04 20:47:46 $
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,25,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,44, @version $Revision: 1.8 $ $Date: 2004/10/08 05:08:18 $
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,44,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,30, @version $Revision: 1.10 $ $Date: 2004/10/08 05:08:18 $
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,30,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,52, @version $Revision: 1.2 $ $Date: 2004/10/24 06:27:14 $
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,52,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,35, @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:16 $
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,35,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,29, @version $Revision: 1.16 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,29,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,24, @version $Revision: 1.13 $ $Date: 2004/06/23 16:26:16 $
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,24,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,24, @version $Revision: 1.20 $ $Date$
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,24,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,22, @version $Revision: 1.11 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,22,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,69, @version $Revision: 1.2 $ $Date: 2004/06/23 16:26:16 $
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,69,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,31, @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,31,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,22, @version $Revision: 1.1 $ $Date: 2004/07/17 19:41:05 $
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,22,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,22, @version $Revision: 1.7 $ $Date: 2004/02/21 21:35:16 $
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,22,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,26, @version $Revision: 1.8 $ $Date: 2004/07/10 22:23:14 $
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,26,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/RetryTestCase.java,src/test/org/apache/commons/math/RetryTestCase.java,30, @version $Revision: 1.2 $ $Date: 2004/03/07 16:39:38 $
True,src/test/org/apache/commons/math/RetryTestCase.java,src/test/org/apache/commons/math/RetryTestCase.java,30,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,30, @version $Revision: 1.14 $ $Date: 2004/06/17 21:41:56 $
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,30,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,26, @version $Revision: 1.12 $ $Date: 2004/07/17 21:19:39 $
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,26,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,33, @version $Revision: 1.1 $ $Date: 2004/07/17 19:49:02 $
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,33,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,26, @version $Revision: 1.8 $ $Date: 2004/02/18 03:24:20 $
True,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,26,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,25, @version $Revision: 1.2 $ $Date: 2004/07/17 21:19:39 $
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,25,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,29, @version $Revision: 1.6 $
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,29,* @version $Revision$
False,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,28, @version $Revision: 1.2 $
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,28,* @version $Revision$
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,25, @version $Revision: 1.14 $ $Date: 2004/07/17 21:19:39 $
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,25,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,28, @version $Revision: 1.13 $ $Date: 2004/07/17 21:19:39 $
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,28,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,30, @version $Revision: 1.1 $ $Date: 2004/04/02 20:58:59 $
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,30,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,23, @version $Revision: 1.1 $ $Date: 2004/04/27 16:42:32 $
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,23,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,25, @version $Revision: 1.8 $ $Date: 2004/07/17 21:19:39 $
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,25,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,22, @version $Revision: 1.6 $ $Date: 2004/02/21 21:35:16 $
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,22,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,24, @version $Revision: 1.1 $ $Date: 2004/07/12 00:27:09 $
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,24,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,23, @version $Revision: 1.16 $ $Date: 2004/11/07 03:32:49 $
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,23,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,24," @version $Revision: 1.8 $ $Date: 2004-07-24 16:41:37 -0500 (Sat, 24 Jul 2004) $"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,24,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,24, @version $Revision: 1.16 $ $Date: 2004/07/24 20:43:29 $
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,24,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,41, @version $Revision: 1.2 $ $Date: 2004/05/30 03:08:00 $
True,src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,41,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,22, @version $Revision: 1.16 $ $Date$
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,22,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,23, @version $Revision: 1.16 $ $Date: 2004/12/10 05:16:52 $
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,23,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,24, @version $Revision: 1.16 $ $Date: 2004/07/24 21:41:37 $
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,24,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,24, @version $Revision: 1.18 $ $Date: 2004/07/24 21:41:37 $
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,24,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,24, @version $Revision: 1.13 $ $Date$
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,24,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,40, @version $Revision: 1.1 $ $Date: 2004/11/07 03:32:49 $
True,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,40,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,24, @version $Revision: 1.8 $ $Date: 2004/07/24 21:41:37 $
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,24,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,21, @version $Revision: 1.2 $ $Date$
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,21,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,23, @version $Revision: 1.15 $ $Date$
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,23,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,23, @version $Revision: $ $Date: $
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,23,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,2, Copyright 2004 The Apache Software Foundation.
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,5, you may not use this file except in compliance with the License.
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,6, You may obtain a copy of the License at
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,13, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,14, limitations under the License.
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,16,ackage org.apache.commons.math.linear;
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,18,mport junit.framework.Test;
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,19,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,20,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,22,mport java.math.BigDecimal;
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,25, Test cases for the {@link BigMatrixImpl} class.
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,27, @version $Revision: 1.5 $ $Date: 2004/10/25 03:13:31 $
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,30,ublic final class BigMatrixImplTest extends TestCase {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,32,/ Test data for String constructors
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,33,"rotected  String[][] testDataString = { {""1"",""2"",""3""}, {""2"",""5"",""3""}, {""1"",""0"",""8""} };"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,35,/ 3 x 3 identity matrix
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,36,"rotected double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,38,/ Test data for group operations
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,39,"rotected double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,40,"rotected double[][] testDataLU = {{2d, 5d, 3d}, {.5d, -2.5d, 6.5d}, {0.5d, 0.2d, .2d}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,41,"rotected double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,42,"rotected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,43,"-1d,0d,-8d} };"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,44,"rotected double[] testDataRow1 = {1d,2d,3d};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,45,"rotected double[] testDataCol3 = {3d,3d,8d};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,46,rotected double[][] testDataInv =
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,47," {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,48,"rotected double[] preMultTest = {8,12,33};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,49,"rotected double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,50,"rotected double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,51,rotected double[][] testDataPlusInv =
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,52," {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,54,/ lu decomposition tests
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,55,"rotected double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,56,"rotected double[][] luDataLUDecomposition = { {6d,9d,8d}, {0d,5d,7d},"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,57,"0.33333333333333,0d,0.33333333333333} };"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,59,/ singular matrices
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,60,"rotected double[][] singular = { {2d,3d}, {2d,3d} };"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,61,"rotected double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,62,"7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,63,"rotected double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,64,"rotected double[][] detData2 = { {1d, 3d}, {2d, 4d}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,66,/ vectors
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,67,"rotected double[] testVector = {1,2,3};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,68,"rotected double[] testVector2 = {1,2,3,4};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,70,/ submatrix accessor tests
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,71,"rotected double[][] subTestData = {{1, 2, 3, 4}, {1.5, 2.5, 3.5, 4.5},"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,72,"2, 4, 6, 8}, {4, 5, 6, 7}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,73,/ array selections
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,74,"rotected double[][] subRows02Cols13 = { {2, 4}, {4, 8}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,75,"rotected double[][] subRows03Cols12 = { {2, 3}, {5, 6}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,76,"rotected double[][] subRows03Cols123 = { {2, 3, 4} , {5, 6, 7}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,77,/ effective permutations
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,78,"rotected double[][] subRows20Cols123 = { {4, 6, 8} , {2, 3, 4}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,79,"rotected double[][] subRows31Cols31 = {{7, 5}, {4.5, 2.5}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,80,/ contiguous ranges
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,81,"rotected double[][] subRows01Cols23 = {{3,4} , {3.5, 4.5}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,82,"rotected double[][] subRows23Cols00 = {{2} , {4}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,83,rotected double[][] subRows00Cols33 = {{4}};
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,84,/ row matrices
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,85,"rotected double[][] subRow0 = {{1,2,3,4}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,86,"rotected double[][] subRow3 = {{4,5,6,7}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,87,/ column matrices
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,88,"rotected double[][] subColumn1 = {{2}, {2.5}, {4}, {5}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,89,"rotected double[][] subColumn3 = {{4}, {4.5}, {8}, {7}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,91,/ tolerances
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,92,rotected double entryTolerance = 10E-16;
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,93,rotected double normTolerance = 10E-14;
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,95,ublic BigMatrixImplTest(String name) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,96,uper(name);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,99,ublic void setUp() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,103,ublic static Test suite() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,104,estSuite suite = new TestSuite(BigMatrixImplTest.class);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,105,"uite.setName(""BigMatrixImpl Tests"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,106,eturn suite;
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,109,ublic static final double[] asDouble(BigDecimal[] data) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,110,ouble d[] = new double[data.length];
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,111,or (int i=0;i<d.length;i++) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,112,[i] = data[i].doubleValue();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,114,eturn d;
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,117,ublic static final double[][] asDouble(BigDecimal[][] data) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,118,ouble d[][] = new double[data.length][data[0].length];
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,119,or (int i=0;i<d.length;i++) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,120,or (int j=0;j<d[i].length;j++)
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,121,[i][j] = data[i][j].doubleValue();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,123,eturn d;
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,126,ublic static final BigDecimal[] asBigDecimal(double [] data) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,127,igDecimal d[] = new BigDecimal[data.length];
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,128,or (int i=0;i<d.length;i++) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,129,[i] = new BigDecimal(data[i]);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,131,eturn d;
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,134,ublic static final BigDecimal[][] asBigDecimal(double [][] data) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,135,igDecimal d[][] = new BigDecimal[data.length][data[0].length];
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,136,or (int i=0;i<d.length;i++) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,137,or (int j=0;j<data[i].length;j++) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,138,[i][j] = new BigDecimal(data[i][j]);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,141,eturn d;
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,144,** test dimensions */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,145,ublic void testDimensions() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,146,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,147,igMatrixImpl m2 = new BigMatrixImpl(testData2);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,148,"ssertEquals(""testData row dimension"",3,m.getRowDimension());"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,149,"ssertEquals(""testData column dimension"",3,m.getColumnDimension());"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,150,"ssertTrue(""testData is square"",m.isSquare());"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,151,"ssertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,152,"ssertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,153,"ssertTrue(""testData2 is not square"",!m2.isSquare());"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,156,** test copy functions */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,157,ublic void testCopyFunctions() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,158,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,159,igMatrixImpl m2 = new BigMatrixImpl(m.getData());
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,160,"ssertEquals(m2,m);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,163,** test constructors */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,164,ublic void testConstructors() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,165,igMatrix m1 = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,166,igMatrix m2 = new BigMatrixImpl(testDataString);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,167,igMatrix m3 = new BigMatrixImpl(asBigDecimal(testData));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,168,"ssertClose(""double, string"", m1, m2, Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,169,"ssertClose(""double, BigDecimal"", m1, m3, Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,170,"ssertClose(""string, BigDecimal"", m2, m3, Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,171,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,172,"igMatrix m4 = new BigMatrixImpl(new String[][] {{""0"", ""hello"", ""1""}});"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,173,"ail(""Expecting NumberFormatException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,174, catch (NumberFormatException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,175,/ expected
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,179,** test add */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,180,ublic void testAdd() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,181,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,182,igMatrixImpl mInv = new BigMatrixImpl(testDataInv);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,183,igMatrixImpl mPlusMInv = (BigMatrixImpl)m.add(mInv);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,184,ouble[][] sumEntries = asDouble(mPlusMInv.getData());
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,185,or (int row = 0; row < m.getRowDimension(); row++) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,186,or (int col = 0; col < m.getColumnDimension(); col++) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,187,"ssertEquals(""sum entry entry"","
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,188,"estDataPlusInv[row][col],sumEntries[row][col],"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,189,ntryTolerance);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,194,** test add failure */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,195,ublic void testAddFail() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,196,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,197,igMatrixImpl m2 = new BigMatrixImpl(testData2);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,198,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,199,igMatrixImpl mPlusMInv = (BigMatrixImpl)m.add(m2);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,200,"ail(""IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,201, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,206,** test norm */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,207,ublic void testNorm() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,208,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,209,igMatrixImpl m2 = new BigMatrixImpl(testData2);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,210,"ssertEquals(""testData norm"",14d,m.getNorm().doubleValue(),entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,211,"ssertEquals(""testData2 norm"",7d,m2.getNorm().doubleValue(),entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,214,** test m-n = m + -n */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,215,ublic void testPlusMinus() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,216,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,217,igMatrixImpl m2 = new BigMatrixImpl(testDataInv);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,218,"ssertClose(""m-n = m + -n"",m.subtract(m2),"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,219,"2.scalarMultiply(new BigDecimal(-1d)).add(m),entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,220,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,221,igMatrix a = m.subtract(new BigMatrixImpl(testData2));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,222,"ail(""Expecting illegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,223, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,228,** test multiply */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,229,ublic void testMultiply() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,230,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,231,igMatrixImpl mInv = new BigMatrixImpl(testDataInv);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,232,igMatrixImpl identity = new BigMatrixImpl(id);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,233,igMatrixImpl m2 = new BigMatrixImpl(testData2);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,234,"ssertClose(""inverse multiply"",m.multiply(mInv),"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,235,"dentity,entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,236,"ssertClose(""inverse multiply"",mInv.multiply(m),"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,237,"dentity,entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,238,"ssertClose(""identity multiply"",m.multiply(identity),"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,239,",entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,240,"ssertClose(""identity multiply"",identity.multiply(mInv),"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,241,"Inv,entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,242,"ssertClose(""identity multiply"",m2.multiply(identity),"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,243,"2,entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,244,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,245,igMatrix a = m.multiply(new BigMatrixImpl(bigSingular));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,246,"ail(""Expecting illegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,247, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,252,/Additional Test for BigMatrixImplTest.testMultiply
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,254,"rivate double[][] d3 = new double[][] {{1,2,3,4},{5,6,7,8}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,255,"rivate double[][] d4 = new double[][] {{1},{2},{3},{4}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,256,"rivate double[][] d5 = new double[][] {{30},{70}};"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,258,ublic void testMultiply2() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,259,igMatrix m3 = new BigMatrixImpl(d3);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,260,igMatrix m4 = new BigMatrixImpl(d4);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,261,igMatrix m5 = new BigMatrixImpl(d5);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,262,"ssertClose(""m3*m4=m5"", m3.multiply(m4), m5, entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,265,** test isSingular */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,266,ublic void testIsSingular() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,267,igMatrixImpl m = new BigMatrixImpl(singular);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,268,"ssertTrue(""singular"",m.isSingular());"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,269, = new BigMatrixImpl(bigSingular);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,270,"ssertTrue(""big singular"",m.isSingular());"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,271, = new BigMatrixImpl(id);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,272,"ssertTrue(""identity nonsingular"",!m.isSingular());"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,273, = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,274,"ssertTrue(""testData nonsingular"",!m.isSingular());"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,277,** test inverse */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,278,ublic void testInverse() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,279,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,280,igMatrix mInv = new BigMatrixImpl(testDataInv);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,281,"ssertClose(""inverse"",mInv,m.inverse(),normTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,282,"ssertClose(""inverse^2"",m,m.inverse().inverse(),10E-12);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,284,/ Not square
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,285, = new BigMatrixImpl(testData2);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,286,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,287,.inverse();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,288,"ail(""Expecting InvalidMatrixException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,289, catch (InvalidMatrixException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,290,/ expected
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,293,/ Singular
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,294, = new BigMatrixImpl(singular);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,295,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,296,.inverse();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,297,"ail(""Expecting InvalidMatrixException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,298, catch (InvalidMatrixException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,299,/ expected
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,303,** test solve */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,304,ublic void testSolve() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,305,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,306,igMatrix mInv = new BigMatrixImpl(testDataInv);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,307,/ being a bit slothful here -- actually testing that X = A^-1 * B
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,308,"ssertClose(""inverse-operate"","
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,309,"sDouble(mInv.operate(asBigDecimal(testVector))),"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,310,"sDouble(m.solve(asBigDecimal(testVector))),"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,311,ormTolerance);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,312,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,313,ouble[] x = asDouble(m.solve(asBigDecimal(testVector2)));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,314,"ail(""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,315, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,318,igMatrix bs = new BigMatrixImpl(bigSingular);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,319,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,320,igMatrix a = bs.solve(bs);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,321,"ail(""Expecting InvalidMatrixException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,322, catch (InvalidMatrixException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,325,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,326,igMatrix a = m.solve(bs);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,327,"ail(""Expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,328, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,331,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,332,igMatrix a = (new BigMatrixImpl(testData2)).solve(bs);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,333,"ail(""Expecting illegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,334, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,337,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,338,new BigMatrixImpl(testData2)).luDecompose();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,339,"ail(""Expecting InvalidMatrixException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,340, catch (InvalidMatrixException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,345,** test determinant */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,346,ublic void testDeterminant() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,347,igMatrix m = new BigMatrixImpl(bigSingular);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,348,"ssertEquals(""singular determinant"",0,m.getDeterminant().doubleValue(),0);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,349, = new BigMatrixImpl(detData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,350,"ssertEquals(""nonsingular test"",-3d,m.getDeterminant().doubleValue(),normTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,352,"/ Examples verified against R (version 1.8.1, Red Hat Linux 9)"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,353, = new BigMatrixImpl(detData2);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,354,"ssertEquals(""nonsingular R test 1"",-2d,m.getDeterminant().doubleValue(),normTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,355, = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,356,"ssertEquals(""nonsingular  R test 2"",-1d,m.getDeterminant().doubleValue(),normTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,358,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,359,ouble a = new BigMatrixImpl(testData2).getDeterminant().doubleValue();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,360,"ail(""Expecting InvalidMatrixException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,361, catch (InvalidMatrixException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,366,** test trace */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,367,ublic void testTrace() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,368,igMatrix m = new BigMatrixImpl(id);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,369,"ssertEquals(""identity trace"",3d,m.getTrace().doubleValue(),entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,370, = new BigMatrixImpl(testData2);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,371,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,372,ouble x = m.getTrace().doubleValue();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,373,"ail(""Expecting illegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,374, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,379,** test sclarAdd */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,380,ublic void testScalarAdd() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,381,igMatrix m = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,382,"ssertClose(""scalar add"",new BigMatrixImpl(testDataPlus2),"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,383,".scalarAdd(new BigDecimal(2d)),entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,386,** test operate */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,387,ublic void testOperate() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,388,igMatrix m = new BigMatrixImpl(id);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,389,ouble[] x = asDouble(m.operate(asBigDecimal(testVector)));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,390,"ssertClose(""identity operate"",testVector,x,entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,391, = new BigMatrixImpl(bigSingular);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,392,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,393, = asDouble(m.operate(asBigDecimal(testVector)));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,394,"ail(""Expecting illegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,395, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,400,** test transpose */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,401,ublic void testTranspose() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,402,igMatrix m = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,403,"ssertClose(""inverse-transpose"",m.inverse().transpose(),"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,404,".transpose().inverse(),normTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,405, = new BigMatrixImpl(testData2);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,406,igMatrix mt = new BigMatrixImpl(testData2T);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,407,"ssertClose(""transpose"",mt,m.transpose(),normTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,410,** test preMultiply by vector */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,411,ublic void testPremultiplyVector() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,412,igMatrix m = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,413,"ssertClose(""premultiply"",asDouble(m.preMultiply(asBigDecimal(testVector))),preMultTest,normTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,414, = new BigMatrixImpl(bigSingular);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,415,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,416,.preMultiply(asBigDecimal(testVector));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,417,"ail(""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,418, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,423,ublic void testPremultiply() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,424,igMatrix m3 = new BigMatrixImpl(d3);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,425,igMatrix m4 = new BigMatrixImpl(d4);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,426,igMatrix m5 = new BigMatrixImpl(d5);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,427,"ssertClose(""m3*m4=m5"", m4.preMultiply(m3), m5, entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,429,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,430,igMatrixImpl mInv = new BigMatrixImpl(testDataInv);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,431,igMatrixImpl identity = new BigMatrixImpl(id);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,432,igMatrixImpl m2 = new BigMatrixImpl(testData2);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,433,"ssertClose(""inverse multiply"",m.preMultiply(mInv),"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,434,"dentity,entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,435,"ssertClose(""inverse multiply"",mInv.preMultiply(m),"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,436,"dentity,entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,437,"ssertClose(""identity multiply"",m.preMultiply(identity),"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,438,",entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,439,"ssertClose(""identity multiply"",identity.preMultiply(mInv),"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,440,"Inv,entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,441,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,442,igMatrix a = m.preMultiply(new BigMatrixImpl(bigSingular));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,443,"ail(""Expecting illegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,444, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,449,ublic void testGetVectors() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,450,igMatrix m = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,451,"ssertClose(""get row"",m.getRowAsDoubleArray(0),testDataRow1,entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,452,"ssertClose(""get col"",m.getColumnAsDoubleArray(2),testDataCol3,entryTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,453,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,454,ouble[] x = m.getRowAsDoubleArray(10);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,455,"ail(""expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,456, catch (MatrixIndexException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,459,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,460,ouble[] x = m.getColumnAsDoubleArray(-1);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,461,"ail(""expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,462, catch (MatrixIndexException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,467,ublic void testLUDecomposition() throws Exception {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,468,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,469,igMatrix lu = m.getLUMatrix();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,470,"ssertClose(""LU decomposition"", lu, (BigMatrix) new BigMatrixImpl(testDataLU), normTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,471,"erifyDecomposition(m, lu);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,472, = new BigMatrixImpl(luData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,473,u = m.getLUMatrix();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,474,"ssertClose(""LU decomposition"", lu, (BigMatrix) new BigMatrixImpl(luDataLUDecomposition), normTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,475,"erifyDecomposition(m, lu);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,476, = new BigMatrixImpl(testDataMinus);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,477,u = m.getLUMatrix();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,478,"erifyDecomposition(m, lu);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,479, = new BigMatrixImpl(id);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,480,u = m.getLUMatrix();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,481,"erifyDecomposition(m, lu);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,482,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,483, = new BigMatrixImpl(bigSingular); // singular
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,484,u = m.getLUMatrix();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,485,"ail(""Expecting InvalidMatrixException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,486, catch (InvalidMatrixException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,487,/ expected
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,489,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,490, = new BigMatrixImpl(testData2);  // not square
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,491,u = m.getLUMatrix();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,492,"ail(""Expecting InvalidMatrixException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,493, catch (InvalidMatrixException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,494,/ expected
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,499, test submatrix accessors
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,501,ublic void testSubMatrix() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,502,igMatrix m = new BigMatrixImpl(subTestData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,503,igMatrix mRows23Cols00 = new BigMatrixImpl(subRows23Cols00);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,504,igMatrix mRows00Cols33 = new BigMatrixImpl(subRows00Cols33);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,505,igMatrix mRows01Cols23 = new BigMatrixImpl(subRows01Cols23);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,506,igMatrix mRows02Cols13 = new BigMatrixImpl(subRows02Cols13);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,507,igMatrix mRows03Cols12 = new BigMatrixImpl(subRows03Cols12);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,508,igMatrix mRows03Cols123 = new BigMatrixImpl(subRows03Cols123);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,509,igMatrix mRows20Cols123 = new BigMatrixImpl(subRows20Cols123);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,510,igMatrix mRows31Cols31 = new BigMatrixImpl(subRows31Cols31);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,511,"ssertEquals(""Rows23Cols00"", mRows23Cols00,"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,512,".getSubMatrix(2 , 3 , 0, 0));"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,513,"ssertEquals(""Rows00Cols33"", mRows00Cols33,"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,514,".getSubMatrix(0 , 0 , 3, 3));"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,515,"ssertEquals(""Rows01Cols23"", mRows01Cols23,"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,516,".getSubMatrix(0 , 1 , 2, 3));"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,517,"ssertEquals(""Rows02Cols13"", mRows02Cols13,"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,518,".getSubMatrix(new int[] {0,2}, new int[] {1,3}));"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,519,"ssertEquals(""Rows03Cols12"", mRows03Cols12,"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,520,".getSubMatrix(new int[] {0,3}, new int[] {1,2}));"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,521,"ssertEquals(""Rows03Cols123"", mRows03Cols123,"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,522,".getSubMatrix(new int[] {0,3}, new int[] {1,2,3}));"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,523,"ssertEquals(""Rows20Cols123"", mRows20Cols123,"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,524,".getSubMatrix(new int[] {2,0}, new int[] {1,2,3}));"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,525,"ssertEquals(""Rows31Cols31"", mRows31Cols31,"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,526,".getSubMatrix(new int[] {3,1}, new int[] {3,1}));"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,527,"ssertEquals(""Rows31Cols31"", mRows31Cols31,"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,528,".getSubMatrix(new int[] {3,1}, new int[] {3,1}));"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,530,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,531,".getSubMatrix(1,0,2,4);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,532,"ail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,533, catch (MatrixIndexException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,534,/ expected
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,536,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,537,".getSubMatrix(-1,1,2,2);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,538,"ail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,539, catch (MatrixIndexException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,540,/ expected
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,542,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,543,".getSubMatrix(1,0,2,2);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,544,"ail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,545, catch (MatrixIndexException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,546,/ expected
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,548,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,549,".getSubMatrix(1,0,2,4);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,550,"ail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,551, catch (MatrixIndexException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,552,/ expected
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,554,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,555,".getSubMatrix(new int[] {}, new int[] {0});"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,556,"ail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,557, catch (MatrixIndexException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,558,/ expected
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,560,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,561,".getSubMatrix(new int[] {0}, new int[] {4});"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,562,"ail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,563, catch (MatrixIndexException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,564,/ expected
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,568,ublic void testGetColumnMatrix() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,569,igMatrix m = new BigMatrixImpl(subTestData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,570,igMatrix mColumn1 = new BigMatrixImpl(subColumn1);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,571,igMatrix mColumn3 = new BigMatrixImpl(subColumn3);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,572,"ssertEquals(""Column1"", mColumn1,"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,573,.getColumnMatrix(1));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,574,"ssertEquals(""Column3"", mColumn3,"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,575,.getColumnMatrix(3));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,576,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,577,.getColumnMatrix(-1);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,578,"ail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,579, catch (MatrixIndexException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,580,/ expected
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,582,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,583,.getColumnMatrix(4);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,584,"ail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,585, catch (MatrixIndexException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,586,/ expected
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,590,ublic void testGetRowMatrix() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,591,igMatrix m = new BigMatrixImpl(subTestData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,592,igMatrix mRow0 = new BigMatrixImpl(subRow0);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,593,igMatrix mRow3 = new BigMatrixImpl(subRow3);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,594,"ssertEquals(""Row0"", mRow0,"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,595,.getRowMatrix(0));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,596,"ssertEquals(""Row3"", mRow3,"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,597,.getRowMatrix(3));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,598,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,599,.getRowMatrix(-1);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,600,"ail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,601, catch (MatrixIndexException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,602,/ expected
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,604,ry {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,605,.getRowMatrix(4);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,606,"ail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,607, catch (MatrixIndexException ex) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,608,/ expected
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,612,ublic void testEqualsAndHashCode() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,613,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,614,igMatrixImpl m1 = (BigMatrixImpl) m.copy();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,615,igMatrixImpl mt = (BigMatrixImpl) m.transpose();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,616,ssertTrue(m.hashCode() != mt.hashCode());
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,617,"ssertEquals(m.hashCode(), m1.hashCode());"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,618,"ssertEquals(m, m);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,619,"ssertEquals(m, m1);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,620,ssertFalse(m.equals(null));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,621,ssertFalse(m.equals(mt));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,622,ssertFalse(m.equals(new BigMatrixImpl(bigSingular)));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,623,"/ Different scales make BigDecimals, so matrices unequal"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,624," = new BigMatrixImpl(new String[][] {{""2.0""}});"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,625,"1 = new BigMatrixImpl(new String[][] {{""2.00""}});"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,626,ssertTrue(m.hashCode() != m1.hashCode());
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,627,ssertFalse(m.equals(m1));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,630,ublic void testToString() {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,631,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,632,"ssertEquals(""BigMatrixImpl{{1,2,3},{2,5,3},{1,0,8}}"","
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,633,.toString());
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,634, = new BigMatrixImpl();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,635,"ssertEquals(""BigMatrixImpl{}"","
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,636,.toString());
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,639,/--------------- -----------------Protected methods
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,641,** verifies that two matrices are close (1-norm) */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,642,"rotected void assertClose(String msg, BigMatrix m, BigMatrix n,"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,643,ouble tolerance) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,644,"ssertTrue(msg,m.subtract(n).getNorm().doubleValue() < tolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,647,** verifies that two vectors are close (sup norm) */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,648,"rotected void assertClose(String msg, double[] m, double[] n,"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,649,ouble tolerance) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,650,f (m.length != n.length) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,651,"ail(""vectors not same length"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,653,or (int i = 0; i < m.length; i++) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,654,"ssertEquals(msg + "" "" +  i + "" elements differ"","
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,655,"[i],n[i],tolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,659,** extracts the l  and u matrices from compact lu representation */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,660,"rotected void splitLU(BigMatrix lu, BigDecimal[][] lowerData, BigDecimal[][] upperData) throws InvalidMatrixException {"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,661,f (!lu.isSquare() || lowerData.length != lowerData[0].length || upperData.length != upperData[0].length ||
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,662,owerData.length != upperData.length
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,663,| lowerData.length != lu.getRowDimension()) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,664,"hrow new InvalidMatrixException(""incorrect dimensions"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,666,nt n = lu.getRowDimension();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,667,or (int i = 0; i < n; i++) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,668,or (int j = 0; j < n; j++) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,669,f (j < i) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,670,"owerData[i][j] = lu.getEntry(i, j);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,671,pperData[i][j] = new BigDecimal(0);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,672, else if (i == j) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,673,owerData[i][j] = new BigDecimal(1);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,674,"pperData[i][j] = lu.getEntry(i, j);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,675, else {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,676,owerData[i][j] = new BigDecimal(0);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,677,"pperData[i][j] = lu.getEntry(i, j);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,683,** Returns the result of applying the given row permutation to the matrix */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,684,"rotected BigMatrix permuteRows(BigMatrix matrix, int[] permutation) {"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,685,f (!matrix.isSquare() || matrix.getRowDimension() != permutation.length) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,686,"hrow new IllegalArgumentException(""dimension mismatch"");"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,688,nt n = matrix.getRowDimension();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,689,nt m = matrix.getColumnDimension();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,690,igDecimal out[][] = new BigDecimal[m][n];
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,691,or (int i = 0; i < n; i++) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,692,or (int j = 0; j < m; j++) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,693,"ut[i][j] = matrix.getEntry(permutation[i], j);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,696,eturn new BigMatrixImpl(out);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,699,** Extracts l and u matrices from lu and verifies that matrix = l times u modulo permutation */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,700,"rotected void verifyDecomposition(BigMatrix matrix, BigMatrix lu) throws Exception{"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,701,nt n = matrix.getRowDimension();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,702,igDecimal[][] lowerData = new BigDecimal[n][n];
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,703,igDecimal[][] upperData = new BigDecimal[n][n];
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,704,"plitLU(lu, lowerData, upperData);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,705,igMatrix lower =new BigMatrixImpl(lowerData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,706,igMatrix upper = new BigMatrixImpl(upperData);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,707,nt[] permutation = ((BigMatrixImpl) matrix).getPermutation();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,708,"igMatrix permuted = permuteRows(matrix, permutation);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,709,"ssertClose(""lu decomposition does not work"", permuted,"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,710,"ower.multiply(upper), normTolerance);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,713,** Useful for debugging */
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,714,rivate void dumpMatrix(BigMatrix m) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,715,or (int i = 0; i < m.getRowDimension(); i++) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,716,"tring os = """";"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,717,or (int j = 0; j < m.getColumnDimension(); j++) {
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,718,"s += m.getEntry(i, j) + "" "";"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,720,ystem.out.println(os);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,2,* Copyright 2004 The Apache Software Foundation.
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,16,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,18,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,19,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,20,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,22,import java.math.BigDecimal;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,25,* Test cases for the {@link BigMatrixImpl} class.
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,27,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,30,public final class BigMatrixImplTest extends TestCase {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,32,// Test data for String constructors
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,33,"protected  String[][] testDataString = { {""1"",""2"",""3""}, {""2"",""5"",""3""}, {""1"",""0"",""8""} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,35,// 3 x 3 identity matrix
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,36,"protected double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,38,// Test data for group operations
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,39,"protected double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,40,"protected double[][] testDataLU = {{2d, 5d, 3d}, {.5d, -2.5d, 6.5d}, {0.5d, 0.2d, .2d}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,41,"protected double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,42,"protected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,43,"{-1d,0d,-8d} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,44,"protected double[] testDataRow1 = {1d,2d,3d};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,45,"protected double[] testDataCol3 = {3d,3d,8d};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,46,protected double[][] testDataInv =
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,47,"{ {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,48,"protected double[] preMultTest = {8,12,33};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,49,"protected double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,50,"protected double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,51,protected double[][] testDataPlusInv =
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,52,"{ {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,54,// lu decomposition tests
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,55,"protected double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,56,"protected double[][] luDataLUDecomposition = { {6d,9d,8d}, {0d,5d,7d},"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,57,"{0.33333333333333,0d,0.33333333333333} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,59,// singular matrices
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,60,"protected double[][] singular = { {2d,3d}, {2d,3d} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,61,"protected double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,62,"{7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,63,"protected double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,64,"protected double[][] detData2 = { {1d, 3d}, {2d, 4d}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,66,// vectors
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,67,"protected double[] testVector = {1,2,3};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,68,"protected double[] testVector2 = {1,2,3,4};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,70,// submatrix accessor tests
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,71,"protected double[][] subTestData = {{1, 2, 3, 4}, {1.5, 2.5, 3.5, 4.5},"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,72,"{2, 4, 6, 8}, {4, 5, 6, 7}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,73,// array selections
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,74,"protected double[][] subRows02Cols13 = { {2, 4}, {4, 8}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,75,"protected double[][] subRows03Cols12 = { {2, 3}, {5, 6}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,76,"protected double[][] subRows03Cols123 = { {2, 3, 4} , {5, 6, 7}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,77,// effective permutations
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,78,"protected double[][] subRows20Cols123 = { {4, 6, 8} , {2, 3, 4}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,79,"protected double[][] subRows31Cols31 = {{7, 5}, {4.5, 2.5}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,80,// contiguous ranges
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,81,"protected double[][] subRows01Cols23 = {{3,4} , {3.5, 4.5}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,82,"protected double[][] subRows23Cols00 = {{2} , {4}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,83,protected double[][] subRows00Cols33 = {{4}};
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,84,// row matrices
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,85,"protected double[][] subRow0 = {{1,2,3,4}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,86,"protected double[][] subRow3 = {{4,5,6,7}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,87,// column matrices
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,88,"protected double[][] subColumn1 = {{2}, {2.5}, {4}, {5}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,89,"protected double[][] subColumn3 = {{4}, {4.5}, {8}, {7}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,91,// tolerances
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,92,protected double entryTolerance = 10E-16;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,93,protected double normTolerance = 10E-14;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,95,public BigMatrixImplTest(String name) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,96,super(name);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,99,public void setUp() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,103,public static Test suite() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,104,TestSuite suite = new TestSuite(BigMatrixImplTest.class);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,105,"suite.setName(""BigMatrixImpl Tests"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,106,return suite;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,109,public static final double[] asDouble(BigDecimal[] data) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,110,double d[] = new double[data.length];
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,111,for (int i=0;i<d.length;i++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,112,d[i] = data[i].doubleValue();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,114,return d;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,117,public static final double[][] asDouble(BigDecimal[][] data) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,118,double d[][] = new double[data.length][data[0].length];
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,119,for (int i=0;i<d.length;i++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,120,for (int j=0;j<d[i].length;j++)
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,121,d[i][j] = data[i][j].doubleValue();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,123,return d;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,126,public static final BigDecimal[] asBigDecimal(double [] data) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,127,BigDecimal d[] = new BigDecimal[data.length];
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,128,for (int i=0;i<d.length;i++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,129,d[i] = new BigDecimal(data[i]);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,131,return d;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,134,public static final BigDecimal[][] asBigDecimal(double [][] data) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,135,BigDecimal d[][] = new BigDecimal[data.length][data[0].length];
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,136,for (int i=0;i<d.length;i++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,137,for (int j=0;j<data[i].length;j++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,138,d[i][j] = new BigDecimal(data[i][j]);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,141,return d;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,144,/** test dimensions */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,145,public void testDimensions() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,146,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,147,BigMatrixImpl m2 = new BigMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,148,"assertEquals(""testData row dimension"",3,m.getRowDimension());"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,149,"assertEquals(""testData column dimension"",3,m.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,150,"assertTrue(""testData is square"",m.isSquare());"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,151,"assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,152,"assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,153,"assertTrue(""testData2 is not square"",!m2.isSquare());"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,156,/** test copy functions */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,157,public void testCopyFunctions() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,158,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,159,BigMatrixImpl m2 = new BigMatrixImpl(m.getData());
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,160,"assertEquals(m2,m);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,163,/** test constructors */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,164,public void testConstructors() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,165,BigMatrix m1 = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,166,BigMatrix m2 = new BigMatrixImpl(testDataString);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,167,BigMatrix m3 = new BigMatrixImpl(asBigDecimal(testData));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,168,"assertClose(""double, string"", m1, m2, Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,169,"assertClose(""double, BigDecimal"", m1, m3, Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,170,"assertClose(""string, BigDecimal"", m2, m3, Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,171,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,172,"BigMatrix m4 = new BigMatrixImpl(new String[][] {{""0"", ""hello"", ""1""}});"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,173,"fail(""Expecting NumberFormatException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,174,} catch (NumberFormatException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,175,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,179,/** test add */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,180,public void testAdd() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,181,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,182,BigMatrixImpl mInv = new BigMatrixImpl(testDataInv);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,183,BigMatrixImpl mPlusMInv = (BigMatrixImpl)m.add(mInv);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,184,double[][] sumEntries = asDouble(mPlusMInv.getData());
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,185,for (int row = 0; row < m.getRowDimension(); row++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,186,for (int col = 0; col < m.getColumnDimension(); col++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,187,"assertEquals(""sum entry entry"","
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,188,"testDataPlusInv[row][col],sumEntries[row][col],"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,189,entryTolerance);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,194,/** test add failure */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,195,public void testAddFail() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,196,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,197,BigMatrixImpl m2 = new BigMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,198,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,199,BigMatrixImpl mPlusMInv = (BigMatrixImpl)m.add(m2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,200,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,201,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,206,/** test norm */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,207,public void testNorm() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,208,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,209,BigMatrixImpl m2 = new BigMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,210,"assertEquals(""testData norm"",14d,m.getNorm().doubleValue(),entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,211,"assertEquals(""testData2 norm"",7d,m2.getNorm().doubleValue(),entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,214,/** test m-n = m + -n */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,215,public void testPlusMinus() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,216,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,217,BigMatrixImpl m2 = new BigMatrixImpl(testDataInv);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,218,"assertClose(""m-n = m + -n"",m.subtract(m2),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,219,"m2.scalarMultiply(new BigDecimal(-1d)).add(m),entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,220,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,221,BigMatrix a = m.subtract(new BigMatrixImpl(testData2));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,222,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,223,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,228,/** test multiply */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,229,public void testMultiply() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,230,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,231,BigMatrixImpl mInv = new BigMatrixImpl(testDataInv);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,232,BigMatrixImpl identity = new BigMatrixImpl(id);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,233,BigMatrixImpl m2 = new BigMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,234,"assertClose(""inverse multiply"",m.multiply(mInv),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,235,"identity,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,236,"assertClose(""inverse multiply"",mInv.multiply(m),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,237,"identity,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,238,"assertClose(""identity multiply"",m.multiply(identity),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,239,"m,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,240,"assertClose(""identity multiply"",identity.multiply(mInv),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,241,"mInv,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,242,"assertClose(""identity multiply"",m2.multiply(identity),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,243,"m2,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,244,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,245,BigMatrix a = m.multiply(new BigMatrixImpl(bigSingular));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,246,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,247,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,252,//Additional Test for BigMatrixImplTest.testMultiply
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,254,"private double[][] d3 = new double[][] {{1,2,3,4},{5,6,7,8}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,255,"private double[][] d4 = new double[][] {{1},{2},{3},{4}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,256,"private double[][] d5 = new double[][] {{30},{70}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,258,public void testMultiply2() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,259,BigMatrix m3 = new BigMatrixImpl(d3);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,260,BigMatrix m4 = new BigMatrixImpl(d4);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,261,BigMatrix m5 = new BigMatrixImpl(d5);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,262,"assertClose(""m3*m4=m5"", m3.multiply(m4), m5, entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,265,/** test isSingular */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,266,public void testIsSingular() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,267,BigMatrixImpl m = new BigMatrixImpl(singular);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,268,"assertTrue(""singular"",m.isSingular());"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,269,m = new BigMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,270,"assertTrue(""big singular"",m.isSingular());"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,271,m = new BigMatrixImpl(id);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,272,"assertTrue(""identity nonsingular"",!m.isSingular());"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,273,m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,274,"assertTrue(""testData nonsingular"",!m.isSingular());"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,277,/** test inverse */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,278,public void testInverse() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,279,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,280,BigMatrix mInv = new BigMatrixImpl(testDataInv);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,281,"assertClose(""inverse"",mInv,m.inverse(),normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,282,"assertClose(""inverse^2"",m,m.inverse().inverse(),10E-12);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,284,// Not square
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,285,m = new BigMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,286,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,287,m.inverse();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,288,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,289,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,290,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,293,// Singular
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,294,m = new BigMatrixImpl(singular);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,295,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,296,m.inverse();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,297,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,298,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,299,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,303,/** test solve */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,304,public void testSolve() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,305,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,306,BigMatrix mInv = new BigMatrixImpl(testDataInv);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,307,// being a bit slothful here -- actually testing that X = A^-1 * B
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,308,"assertClose(""inverse-operate"","
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,309,"asDouble(mInv.operate(asBigDecimal(testVector))),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,310,"asDouble(m.solve(asBigDecimal(testVector))),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,311,normTolerance);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,312,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,313,double[] x = asDouble(m.solve(asBigDecimal(testVector2)));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,314,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,315,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,318,BigMatrix bs = new BigMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,319,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,320,BigMatrix a = bs.solve(bs);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,321,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,322,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,325,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,326,BigMatrix a = m.solve(bs);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,327,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,328,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,331,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,332,BigMatrix a = (new BigMatrixImpl(testData2)).solve(bs);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,333,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,334,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,337,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,338,(new BigMatrixImpl(testData2)).luDecompose();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,339,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,340,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,345,/** test determinant */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,346,public void testDeterminant() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,347,BigMatrix m = new BigMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,348,"assertEquals(""singular determinant"",0,m.getDeterminant().doubleValue(),0);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,349,m = new BigMatrixImpl(detData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,350,"assertEquals(""nonsingular test"",-3d,m.getDeterminant().doubleValue(),normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,352,"// Examples verified against R (version 1.8.1, Red Hat Linux 9)"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,353,m = new BigMatrixImpl(detData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,354,"assertEquals(""nonsingular R test 1"",-2d,m.getDeterminant().doubleValue(),normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,355,m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,356,"assertEquals(""nonsingular  R test 2"",-1d,m.getDeterminant().doubleValue(),normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,358,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,359,double a = new BigMatrixImpl(testData2).getDeterminant().doubleValue();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,360,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,361,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,366,/** test trace */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,367,public void testTrace() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,368,BigMatrix m = new BigMatrixImpl(id);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,369,"assertEquals(""identity trace"",3d,m.getTrace().doubleValue(),entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,370,m = new BigMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,371,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,372,double x = m.getTrace().doubleValue();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,373,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,374,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,379,/** test sclarAdd */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,380,public void testScalarAdd() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,381,BigMatrix m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,382,"assertClose(""scalar add"",new BigMatrixImpl(testDataPlus2),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,383,"m.scalarAdd(new BigDecimal(2d)),entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,386,/** test operate */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,387,public void testOperate() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,388,BigMatrix m = new BigMatrixImpl(id);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,389,double[] x = asDouble(m.operate(asBigDecimal(testVector)));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,390,"assertClose(""identity operate"",testVector,x,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,391,m = new BigMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,392,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,393,x = asDouble(m.operate(asBigDecimal(testVector)));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,394,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,395,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,400,/** test transpose */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,401,public void testTranspose() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,402,BigMatrix m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,403,"assertClose(""inverse-transpose"",m.inverse().transpose(),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,404,"m.transpose().inverse(),normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,405,m = new BigMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,406,BigMatrix mt = new BigMatrixImpl(testData2T);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,407,"assertClose(""transpose"",mt,m.transpose(),normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,410,/** test preMultiply by vector */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,411,public void testPremultiplyVector() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,412,BigMatrix m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,413,"assertClose(""premultiply"",asDouble(m.preMultiply(asBigDecimal(testVector))),preMultTest,normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,414,m = new BigMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,415,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,416,m.preMultiply(asBigDecimal(testVector));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,417,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,418,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,423,public void testPremultiply() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,424,BigMatrix m3 = new BigMatrixImpl(d3);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,425,BigMatrix m4 = new BigMatrixImpl(d4);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,426,BigMatrix m5 = new BigMatrixImpl(d5);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,427,"assertClose(""m3*m4=m5"", m4.preMultiply(m3), m5, entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,429,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,430,BigMatrixImpl mInv = new BigMatrixImpl(testDataInv);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,431,BigMatrixImpl identity = new BigMatrixImpl(id);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,432,BigMatrixImpl m2 = new BigMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,433,"assertClose(""inverse multiply"",m.preMultiply(mInv),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,434,"identity,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,435,"assertClose(""inverse multiply"",mInv.preMultiply(m),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,436,"identity,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,437,"assertClose(""identity multiply"",m.preMultiply(identity),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,438,"m,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,439,"assertClose(""identity multiply"",identity.preMultiply(mInv),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,440,"mInv,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,441,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,442,BigMatrix a = m.preMultiply(new BigMatrixImpl(bigSingular));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,443,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,444,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,449,public void testGetVectors() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,450,BigMatrix m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,451,"assertClose(""get row"",m.getRowAsDoubleArray(0),testDataRow1,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,452,"assertClose(""get col"",m.getColumnAsDoubleArray(2),testDataCol3,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,453,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,454,double[] x = m.getRowAsDoubleArray(10);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,455,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,456,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,459,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,460,double[] x = m.getColumnAsDoubleArray(-1);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,461,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,462,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,467,public void testLUDecomposition() throws Exception {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,468,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,469,BigMatrix lu = m.getLUMatrix();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,470,"assertClose(""LU decomposition"", lu, (BigMatrix) new BigMatrixImpl(testDataLU), normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,471,"verifyDecomposition(m, lu);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,472,m = new BigMatrixImpl(luData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,473,lu = m.getLUMatrix();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,474,"assertClose(""LU decomposition"", lu, (BigMatrix) new BigMatrixImpl(luDataLUDecomposition), normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,475,"verifyDecomposition(m, lu);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,476,m = new BigMatrixImpl(testDataMinus);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,477,lu = m.getLUMatrix();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,478,"verifyDecomposition(m, lu);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,479,m = new BigMatrixImpl(id);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,480,lu = m.getLUMatrix();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,481,"verifyDecomposition(m, lu);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,482,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,483,m = new BigMatrixImpl(bigSingular); // singular
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,484,lu = m.getLUMatrix();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,485,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,486,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,487,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,489,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,490,m = new BigMatrixImpl(testData2);  // not square
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,491,lu = m.getLUMatrix();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,492,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,493,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,494,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,499,* test submatrix accessors
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,501,public void testSubMatrix() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,502,BigMatrix m = new BigMatrixImpl(subTestData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,503,BigMatrix mRows23Cols00 = new BigMatrixImpl(subRows23Cols00);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,504,BigMatrix mRows00Cols33 = new BigMatrixImpl(subRows00Cols33);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,505,BigMatrix mRows01Cols23 = new BigMatrixImpl(subRows01Cols23);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,506,BigMatrix mRows02Cols13 = new BigMatrixImpl(subRows02Cols13);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,507,BigMatrix mRows03Cols12 = new BigMatrixImpl(subRows03Cols12);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,508,BigMatrix mRows03Cols123 = new BigMatrixImpl(subRows03Cols123);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,509,BigMatrix mRows20Cols123 = new BigMatrixImpl(subRows20Cols123);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,510,BigMatrix mRows31Cols31 = new BigMatrixImpl(subRows31Cols31);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,511,"assertEquals(""Rows23Cols00"", mRows23Cols00,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,512,"m.getSubMatrix(2 , 3 , 0, 0));"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,513,"assertEquals(""Rows00Cols33"", mRows00Cols33,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,514,"m.getSubMatrix(0 , 0 , 3, 3));"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,515,"assertEquals(""Rows01Cols23"", mRows01Cols23,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,516,"m.getSubMatrix(0 , 1 , 2, 3));"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,517,"assertEquals(""Rows02Cols13"", mRows02Cols13,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,518,"m.getSubMatrix(new int[] {0,2}, new int[] {1,3}));"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,519,"assertEquals(""Rows03Cols12"", mRows03Cols12,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,520,"m.getSubMatrix(new int[] {0,3}, new int[] {1,2}));"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,521,"assertEquals(""Rows03Cols123"", mRows03Cols123,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,522,"m.getSubMatrix(new int[] {0,3}, new int[] {1,2,3}));"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,523,"assertEquals(""Rows20Cols123"", mRows20Cols123,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,524,"m.getSubMatrix(new int[] {2,0}, new int[] {1,2,3}));"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,525,"assertEquals(""Rows31Cols31"", mRows31Cols31,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,526,"m.getSubMatrix(new int[] {3,1}, new int[] {3,1}));"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,527,"assertEquals(""Rows31Cols31"", mRows31Cols31,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,528,"m.getSubMatrix(new int[] {3,1}, new int[] {3,1}));"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,530,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,531,"m.getSubMatrix(1,0,2,4);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,532,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,533,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,534,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,536,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,537,"m.getSubMatrix(-1,1,2,2);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,538,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,539,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,540,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,542,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,543,"m.getSubMatrix(1,0,2,2);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,544,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,545,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,546,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,548,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,549,"m.getSubMatrix(1,0,2,4);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,550,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,551,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,552,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,554,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,555,"m.getSubMatrix(new int[] {}, new int[] {0});"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,556,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,557,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,558,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,560,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,561,"m.getSubMatrix(new int[] {0}, new int[] {4});"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,562,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,563,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,564,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,568,public void testGetColumnMatrix() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,569,BigMatrix m = new BigMatrixImpl(subTestData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,570,BigMatrix mColumn1 = new BigMatrixImpl(subColumn1);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,571,BigMatrix mColumn3 = new BigMatrixImpl(subColumn3);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,572,"assertEquals(""Column1"", mColumn1,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,573,m.getColumnMatrix(1));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,574,"assertEquals(""Column3"", mColumn3,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,575,m.getColumnMatrix(3));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,576,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,577,m.getColumnMatrix(-1);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,578,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,579,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,580,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,582,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,583,m.getColumnMatrix(4);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,584,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,585,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,586,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,590,public void testGetRowMatrix() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,591,BigMatrix m = new BigMatrixImpl(subTestData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,592,BigMatrix mRow0 = new BigMatrixImpl(subRow0);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,593,BigMatrix mRow3 = new BigMatrixImpl(subRow3);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,594,"assertEquals(""Row0"", mRow0,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,595,m.getRowMatrix(0));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,596,"assertEquals(""Row3"", mRow3,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,597,m.getRowMatrix(3));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,598,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,599,m.getRowMatrix(-1);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,600,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,601,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,602,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,604,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,605,m.getRowMatrix(4);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,606,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,607,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,608,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,612,public void testEqualsAndHashCode() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,613,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,614,BigMatrixImpl m1 = (BigMatrixImpl) m.copy();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,615,BigMatrixImpl mt = (BigMatrixImpl) m.transpose();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,616,assertTrue(m.hashCode() != mt.hashCode());
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,617,"assertEquals(m.hashCode(), m1.hashCode());"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,618,"assertEquals(m, m);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,619,"assertEquals(m, m1);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,620,assertFalse(m.equals(null));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,621,assertFalse(m.equals(mt));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,622,assertFalse(m.equals(new BigMatrixImpl(bigSingular)));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,623,"// Different scales make BigDecimals, so matrices unequal"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,624,"m = new BigMatrixImpl(new String[][] {{""2.0""}});"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,625,"m1 = new BigMatrixImpl(new String[][] {{""2.00""}});"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,626,assertTrue(m.hashCode() != m1.hashCode());
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,627,assertFalse(m.equals(m1));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,630,public void testToString() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,631,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,632,"assertEquals(""BigMatrixImpl{{1,2,3},{2,5,3},{1,0,8}}"","
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,633,m.toString());
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,634,m = new BigMatrixImpl();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,635,"assertEquals(""BigMatrixImpl{}"","
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,636,m.toString());
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,639,//--------------- -----------------Protected methods
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,641,/** verifies that two matrices are close (1-norm) */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,642,"protected void assertClose(String msg, BigMatrix m, BigMatrix n,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,643,double tolerance) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,644,"assertTrue(msg,m.subtract(n).getNorm().doubleValue() < tolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,647,/** verifies that two vectors are close (sup norm) */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,648,"protected void assertClose(String msg, double[] m, double[] n,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,649,double tolerance) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,650,if (m.length != n.length) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,651,"fail(""vectors not same length"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,653,for (int i = 0; i < m.length; i++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,654,"assertEquals(msg + "" "" +  i + "" elements differ"","
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,655,"m[i],n[i],tolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,659,/** extracts the l  and u matrices from compact lu representation */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,660,"protected void splitLU(BigMatrix lu, BigDecimal[][] lowerData, BigDecimal[][] upperData) throws InvalidMatrixException {"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,661,if (!lu.isSquare() || lowerData.length != lowerData[0].length || upperData.length != upperData[0].length ||
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,662,lowerData.length != upperData.length
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,663,|| lowerData.length != lu.getRowDimension()) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,664,"throw new InvalidMatrixException(""incorrect dimensions"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,666,int n = lu.getRowDimension();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,667,for (int i = 0; i < n; i++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,668,for (int j = 0; j < n; j++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,669,if (j < i) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,670,"lowerData[i][j] = lu.getEntry(i, j);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,671,upperData[i][j] = new BigDecimal(0);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,672,} else if (i == j) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,673,lowerData[i][j] = new BigDecimal(1);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,674,"upperData[i][j] = lu.getEntry(i, j);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,675,} else {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,676,lowerData[i][j] = new BigDecimal(0);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,677,"upperData[i][j] = lu.getEntry(i, j);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,683,/** Returns the result of applying the given row permutation to the matrix */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,684,"protected BigMatrix permuteRows(BigMatrix matrix, int[] permutation) {"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,685,if (!matrix.isSquare() || matrix.getRowDimension() != permutation.length) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,686,"throw new IllegalArgumentException(""dimension mismatch"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,688,int n = matrix.getRowDimension();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,689,int m = matrix.getColumnDimension();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,690,BigDecimal out[][] = new BigDecimal[m][n];
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,691,for (int i = 0; i < n; i++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,692,for (int j = 0; j < m; j++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,693,"out[i][j] = matrix.getEntry(permutation[i], j);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,696,return new BigMatrixImpl(out);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,699,/** Extracts l and u matrices from lu and verifies that matrix = l times u modulo permutation */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,700,"protected void verifyDecomposition(BigMatrix matrix, BigMatrix lu) throws Exception{"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,701,int n = matrix.getRowDimension();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,702,BigDecimal[][] lowerData = new BigDecimal[n][n];
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,703,BigDecimal[][] upperData = new BigDecimal[n][n];
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,704,"splitLU(lu, lowerData, upperData);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,705,BigMatrix lower =new BigMatrixImpl(lowerData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,706,BigMatrix upper = new BigMatrixImpl(upperData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,707,int[] permutation = ((BigMatrixImpl) matrix).getPermutation();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,708,"BigMatrix permuted = permuteRows(matrix, permutation);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,709,"assertClose(""lu decomposition does not work"", permuted,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,710,"lower.multiply(upper), normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,713,/** Useful for debugging */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,714,private void dumpMatrix(BigMatrix m) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,715,for (int i = 0; i < m.getRowDimension(); i++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,716,"String os = """";"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,717,for (int j = 0; j < m.getColumnDimension(); j++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,718,"os += m.getEntry(i, j) + "" "";"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,720,System.out.println(os);
False,src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java,src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java,22, @version $Revision: 1.2 $ $Date: 2004/12/06 05:49:44 $
True,src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java,src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java,22,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/linear/MatrixIndexExceptionTest.java,src/test/org/apache/commons/math/linear/MatrixIndexExceptionTest.java,22, @version $Revision: 1.2 $ $Date: 2004/12/06 05:49:44 $
True,src/test/org/apache/commons/math/linear/MatrixIndexExceptionTest.java,src/test/org/apache/commons/math/linear/MatrixIndexExceptionTest.java,22,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,26, @version $Revision: 1.3 $ $Date: 2004/10/28 03:02:34 $
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,26,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,25, @version $Revision: 1.20 $ $Date: 2004/10/12 06:19:50 $
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,25,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,36, @version $Revision: 1.19 $ $Date: 2004/10/08 05:08:19 $
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,36,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,32, @version $Revision: 1.17 $ $Date: 2004/10/08 05:08:19 $
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,32,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,28, @version $Revision: 1.17 $ $Date: 2004/10/08 05:08:19 $
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,28,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,24, @version $Revision: 1.8 $ $Date: 2004/02/21 21:35:17 $
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,24,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,24, @version $Revision: 1.1 $ $Date: 2004/05/05 19:54:58 $
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,24,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,24, @version $Revision: 1.10 $ $Date: 2004/06/07 20:30:16 $
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,24,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,31, @version $Revision: 1.19 $ $Date: 2004/10/08 05:08:19 $
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,31,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,30, @version $Revision: 1.15 $ $Date: 2004/09/21 03:03:54 $
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,30,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,26, @version $Revision: 1.19 $ $Date: 2004/07/17 22:01:39 $
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,26,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,35, @version $Revision: 1.8 $ $Date: 2004/12/06 05:49:44 $
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,35,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/data/LewTest.java,src/test/org/apache/commons/math/stat/data/LewTest.java,20, @version $Revision: 1.1 $ $Date: 2004/03/18 05:52:37 $
True,src/test/org/apache/commons/math/stat/data/LewTest.java,src/test/org/apache/commons/math/stat/data/LewTest.java,20,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/data/LotteryTest.java,src/test/org/apache/commons/math/stat/data/LotteryTest.java,20, @version $Revision: 1.1 $ $Date: 2004/03/18 05:52:37 $
True,src/test/org/apache/commons/math/stat/data/LotteryTest.java,src/test/org/apache/commons/math/stat/data/LotteryTest.java,20,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,29, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $
True,src/test/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,29,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,28, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,28,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,29, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,29,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/InteractionTest.java,src/test/org/apache/commons/math/stat/descriptive/InteractionTest.java,27, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $
True,src/test/org/apache/commons/math/stat/descriptive/InteractionTest.java,src/test/org/apache/commons/math/stat/descriptive/InteractionTest.java,27,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,29, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,29,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,30, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,30,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,30, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $
True,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,30,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,27, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $
True,src/test/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,27,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,23, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $
True,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,23,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,27, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,27,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,22, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $
True,src/test/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,22,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/FirstMomentTest.java,23, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $
True,src/test/org/apache/commons/math/stat/descriptive/moment/FirstMomentTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/FirstMomentTest.java,23,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/moment/FourthMomentTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/FourthMomentTest.java,23, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $
True,src/test/org/apache/commons/math/stat/descriptive/moment/FourthMomentTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/FourthMomentTest.java,23,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,26, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $
True,src/test/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,26,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,26, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $
True,src/test/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,26,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,26, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $
True,src/test/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,26,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/moment/SecondMomentTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/SecondMomentTest.java,23, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $
True,src/test/org/apache/commons/math/stat/descriptive/moment/SecondMomentTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/SecondMomentTest.java,23,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,27, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $
True,src/test/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,27,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,27, @version $Revision: 1.2 $ $Date: 2004/10/11 06:54:05 $
True,src/test/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,27,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/moment/ThirdMomentTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/ThirdMomentTest.java,23, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $
True,src/test/org/apache/commons/math/stat/descriptive/moment/ThirdMomentTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/ThirdMomentTest.java,23,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,27, @version $Revision: 1.3 $ $Date: 2004/10/11 04:54:09 $
True,src/test/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,27,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,26, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $
True,src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,26,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/rank/MedianTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MedianTest.java,26, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $
True,src/test/org/apache/commons/math/stat/descriptive/rank/MedianTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MedianTest.java,26,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java,26, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $
True,src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java,26,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,26, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $
True,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,26,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,26, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $
True,src/test/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,26,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,26, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $
True,src/test/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,26,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,27, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $
True,src/test/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,27,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/org/apache/commons/math/stat/descriptive/summary/SumTest.java,26, @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $
True,src/test/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/org/apache/commons/math/stat/descriptive/summary/SumTest.java,26,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,25, @version $Revision: 1.5 $ $Date: 2004/12/10 05:18:16 $
True,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,25,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/inference/TTestTest.java,src/test/org/apache/commons/math/stat/inference/TTestTest.java,26, @version $Revision: 1.7 $ $Date: 2004/10/08 05:08:20 $
True,src/test/org/apache/commons/math/stat/inference/TTestTest.java,src/test/org/apache/commons/math/stat/inference/TTestTest.java,26,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,26, @version $Revision: 1.4 $ $Date: 2004/12/10 05:18:16 $
True,src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,26,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,23, @version $Revision: 1.8 $ $Date: 2004/02/21 21:35:18 $
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,23,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,25, @version $Revision: 1.12 $ $Date: 2004/05/23 21:34:19 $
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,25,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,25, @version $Revision: 1.9 $ $Date: 2004/02/21 21:35:18 $
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,25,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,29, @version $Revision: 1.15 $ $Date$
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,29,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,24, @version $Revision: 1.1 $ $Date: 2004/06/14 21:41:33 $
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,24,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,20, @version $Revision: 1.7 $ $Date: 2004/02/21 21:35:18 $
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,20,* @version $Revision$ $Date$
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,22, @version $Revision: 1.7 $ $Date: 2004/02/21 21:35:18 $
True,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,22,* @version $Revision$ $Date$

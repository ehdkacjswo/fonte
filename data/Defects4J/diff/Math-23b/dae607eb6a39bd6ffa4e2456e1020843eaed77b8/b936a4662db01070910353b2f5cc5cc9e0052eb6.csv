is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,19,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,21,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,22,import org.apache.commons.math.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,23,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,24,import org.apache.commons.math.special.Beta;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,25,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,20, The Binomial Distribution.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,22, <p>
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,23, References:
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,24, <ul>
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,25," <li><a href=""http://mathworld.wolfram.com/BinomialDistribution.html"">"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,26, Binomial Distribution</a></li>
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,27, </ul>
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,28, </p>
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,28,* Implementation of the binomial distribution.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,30,"* @see <a href=""http://en.wikipedia.org/wiki/Binomial_distribution"">Binomial distribution (Wikipedia)</a>"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,31,"* @see <a href=""http://mathworld.wolfram.com/BinomialDistribution.html"">Binomial Distribution (MathWorld)</a>"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,32,ublic interface BinomialDistribution extends IntegerDistribution {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,34,public class BinomialDistribution extends AbstractIntegerDistribution
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,35,implements Serializable {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,36,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,37,private static final long serialVersionUID = 6751309484392813623L;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,38,/** The number of trials. */
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,39,private final int numberOfTrials;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,40,/** The probability of success. */
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,41,private final double probabilityOfSuccess;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,44,* Create a binomial distribution with the given number of trials and
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,45,* probability of success.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,47,* @param trials Number of trials.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,48,* @param p Probability of success.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,49,* @throws NotPositiveException if {@code trials < 0}.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,50,* @throws OutOfRangeException if {@code p < 0} or {@code p > 1}.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,52,"public BinomialDistribution(int trials, double p) {"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,53,if (trials < 0) {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,54,"throw new NotPositiveException(LocalizedFormats.NUMBER_OF_TRIALS,"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,55,trials);
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,57,if (p < 0 || p > 1) {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,58,"throw new OutOfRangeException(p, 0, 1);"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,61,probabilityOfSuccess = p;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,62,numberOfTrials = trials;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,38,nt getNumberOfTrials();
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,70,public int getNumberOfTrials() {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,71,return numberOfTrials;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,45,ouble getProbabilityOfSuccess();
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,79,public double getProbabilityOfSuccess() {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,80,return probabilityOfSuccess;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,83,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,84,@Override
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,85,protected int getDomainLowerBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,86,return -1;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,89,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,90,@Override
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,91,protected int getDomainUpperBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,92,return numberOfTrials;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,95,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,96,@Override
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,97,public double cumulativeProbability(int x) {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,98,double ret;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,99,if (x < 0) {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,100,ret = 0.0;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,101,} else if (x >= numberOfTrials) {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,102,ret = 1.0;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,103,} else {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,104,"ret = 1.0 - Beta.regularizedBeta(getProbabilityOfSuccess(),"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,105,"x + 1.0, numberOfTrials - x);"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,107,return ret;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,110,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,111,public double probability(int x) {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,112,double ret;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,113,if (x < 0 || x > numberOfTrials) {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,114,ret = 0.0;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,115,} else {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,116,"ret = FastMath.exp(SaddlePointExpansion.logBinomialProbability(x,"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,117,"numberOfTrials, probabilityOfSuccess,"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,118,1.0 - probabilityOfSuccess));
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,120,return ret;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,124,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,126,* This implementation return -1 when {@code p == 0} and
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,127,* {@code Integer.MAX_VALUE} when {@code p == 1}.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,129,@Override
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,130,public int inverseCumulativeProbability(final double p) {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,131,// handle extreme values explicitly
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,132,if (p == 0) {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,133,return -1;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,135,if (p == 1) {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,136,return Integer.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,139,// use default bisection impl
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,140,return super.inverseCumulativeProbability(p);
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,144,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,146,* The lower bound of the support is always 0 no matter the number of trials
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,147,* and probability parameter.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,149,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,151,@Override
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,152,public int getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,153,return 0;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,157,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,159,* The upper bound of the support is the number of trials.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,161,* @return upper bound of the support (equal to number of trials)
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,163,@Override
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,164,public int getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,165,return getNumberOfTrials();
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,169,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,171,"* For {@code n} trials and probability parameter {@code p}, the mean is"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,172,* {@code n * p}.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,174,@Override
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,175,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,176,return getNumberOfTrials() * getProbabilityOfSuccess();
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,180,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,182,"* For {@code n} trials and probability parameter {@code p}, the variance is"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,183,* {@code n * p * (1 - p)}.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,185,@Override
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,186,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,187,final double p = getProbabilityOfSuccess();
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,188,return getNumberOfTrials() * p * (1 - p);
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,17,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,19,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,21,mport org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,22,mport org.apache.commons.math.exception.NotPositiveException;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,23,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,24,mport org.apache.commons.math.special.Beta;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,25,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,28, The default implementation of {@link BinomialDistribution}.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,30, @version $Id$
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,32,ublic class BinomialDistributionImpl extends AbstractIntegerDistribution
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,33,"mplements BinomialDistribution, Serializable {"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,34,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,35,rivate static final long serialVersionUID = 6751309484392813623L;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,36,** The number of trials. */
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,37,rivate final int numberOfTrials;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,38,** The probability of success. */
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,39,rivate final double probabilityOfSuccess;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,42, Create a binomial distribution with the given number of trials and
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,43, probability of success.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,45, @param trials Number of trials.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,46, @param p Probability of success.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,47, @throws NotPositiveException if {@code trials < 0}.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,48, @throws OutOfRangeException if {@code p < 0} or {@code p > 1}.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,50,"ublic BinomialDistributionImpl(int trials, double p) {"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,51,f (trials < 0) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,52,"hrow new NotPositiveException(LocalizedFormats.NUMBER_OF_TRIALS,"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,53,rials);
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,55,f (p < 0 || p > 1) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,56,"hrow new OutOfRangeException(p, 0, 1);"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,59,robabilityOfSuccess = p;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,60,umberOfTrials = trials;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,64, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,66,ublic int getNumberOfTrials() {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,67,eturn numberOfTrials;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,71, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,73,ublic double getProbabilityOfSuccess() {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,74,eturn probabilityOfSuccess;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,78," Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,79, bracket a PDF root.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,81, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,82," @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,84,Override
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,85,rotected int getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,86,eturn -1;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,90," Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,91, bracket a PDF root.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,93, @param p Desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,94," @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,96,Override
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,97,rotected int getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,98,eturn numberOfTrials;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,102," For this distribution, {@code X}, this method returns {@code P(X <= x)}."
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,104, @param x Value at which the PDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,105, @return PDF for this distribution.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,106, due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,108,Override
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,109,ublic double cumulativeProbability(int x) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,110,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,111,f (x < 0) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,112,et = 0.0;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,113, else if (x >= numberOfTrials) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,114,et = 1.0;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,115, else {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,116,"et = 1.0 - Beta.regularizedBeta(getProbabilityOfSuccess(),"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,117," + 1.0, numberOfTrials - x);"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,119,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,123," For this distribution, {@code X}, this method returns {@code P(X = x)}."
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,125, @param x Value at which the PMF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,126, @return PMF for this distribution.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,128,ublic double probability(int x) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,129,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,130,f (x < 0 || x > numberOfTrials) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,131,et = 0.0;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,132, else {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,133,"et = FastMath.exp(SaddlePointExpansion.logBinomialProbability(x,"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,134,"umberOfTrials, probabilityOfSuccess,"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,135,.0 - probabilityOfSuccess));
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,137,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,141," For this distribution, {@code X}, this method returns the largest"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,142," {@code x}, such that {@code P(X < x) p}."
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,143, It will return -1 when p = 0 and {@code Integer.MAX_VALUE} when p = 1.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,145, @param p Desired probability.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,146, @return the largest {@code x} such that {@code P(X < x) <= p}.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,147, @throws OutOfRangeException if {@code p < 0} or {@code p > 1}.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,149,Override
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,150,ublic int inverseCumulativeProbability(final double p) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,151,/ handle extreme values explicitly
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,152,f (p == 0) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,153,eturn -1;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,155,f (p == 1) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,156,eturn Integer.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,159,/ use default bisection impl
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,160,eturn super.inverseCumulativeProbability(p);
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,164, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,166, The lower bound of the support is always 0 no matter the number of trials
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,167, and probability parameter.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,169, @return lower bound of the support (always 0)
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,171,Override
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,172,ublic int getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,173,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,177, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,179, The upper bound of the support is the number of trials.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,181, @return upper bound of the support (equal to number of trials)
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,183,Override
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,184,ublic int getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,185,eturn getNumberOfTrials();
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,189, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,191, For <code>n</code> number of trials and
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,192," probability parameter <code>p</code>, the mean is"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,193, <code>n * p</code>
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,195, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,197,Override
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,198,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,199,eturn (double)getNumberOfTrials() * getProbabilityOfSuccess();
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,203, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,205, For <code>n</code> number of trials and
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,206," probability parameter <code>p</code>, the variance is"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,207, <code>n * p * (1 - p)</code>
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,209, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,211,Override
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,212,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,213,inal double p = getProbabilityOfSuccess();
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,214,eturn (double)getNumberOfTrials() * p * (1 - p);
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,28,mport org.apache.commons.math.distribution.BinomialDistributionImpl;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,28,import org.apache.commons.math.distribution.BinomialDistribution;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,616, Generates a random value from the {@link BinomialDistributionImpl Binomial Distribution}.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,616,* Generates a random value from the {@link BinomialDistribution Binomial Distribution}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,626,"eturn nextInversionDeviate(new BinomialDistributionImpl(numberOfTrials, probabilityOfSuccess));"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,626,"return nextInversionDeviate(new BinomialDistribution(numberOfTrials, probabilityOfSuccess));"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,34,"eturn new BinomialDistributionImpl(10, 0.70);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,34,"return new BinomialDistribution(10, 0.70);"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,85,"etDistribution(new BinomialDistributionImpl(5, 0.0d));"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,85,"setDistribution(new BinomialDistribution(5, 0.0d));"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,100,"etDistribution(new BinomialDistributionImpl(5, 1.0d));"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,100,"setDistribution(new BinomialDistribution(5, 1.0d));"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,117,"ist = new BinomialDistributionImpl(10, 0.5);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,117,"dist = new BinomialDistribution(10, 0.5);"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,119,"ssert.assertEquals(dist.getNumericalVariance(), 10d * 0.5d * 0.5d, tol);"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,121,"ist = new BinomialDistributionImpl(30, 0.3);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,119,"Assert.assertEquals(dist.getNumericalVariance(), 10d * 0.5d * 0.5d, tol);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,121,"dist = new BinomialDistribution(30, 0.3);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,29,mport org.apache.commons.math.distribution.BinomialDistributionImpl;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,29,import org.apache.commons.math.distribution.BinomialDistribution;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,966,inomialDistributionImpl distribution = (BinomialDistributionImpl) testInstance.makeDistribution();
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,966,BinomialDistribution distribution = (BinomialDistribution) testInstance.makeDistribution();

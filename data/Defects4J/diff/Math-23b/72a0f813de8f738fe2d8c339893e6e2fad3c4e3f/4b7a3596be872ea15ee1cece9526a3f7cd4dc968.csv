is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,24,mport org.apache.commons.math.linear.LUSolver;
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,186,ew LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj))).getInverse();
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,185,new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,24,mport org.apache.commons.math.linear.LUSolver;
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,155,ealVector dX = new LUSolver(new LUDecompositionImpl(a)).solve(b);
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,154,RealVector dX = new LUDecompositionImpl(a).getSolver().solve(b);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,41,rivate LUSolver lu;
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,41,private DecompositionSolver lu;
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,660,"u = new LUSolver(new LUDecompositionImpl(this, MathUtils.SAFE_MIN));"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,660,"lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,669,f (lu == null) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,670,"u = new LUSolver(new LUDecompositionImpl(this, MathUtils.SAFE_MIN));"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,672,eturn lu.getDeterminant();
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,669,"return new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getDeterminant();"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,684,"u = new LUSolver(new LUDecompositionImpl(this, MathUtils.SAFE_MIN));"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,681,"lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,988,"u = new LUSolver(new LUDecompositionImpl(this, MathUtils.SAFE_MIN));"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,985,"lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,998,"u = new LUSolver(new LUDecompositionImpl(this, MathUtils.SAFE_MIN));"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,995,"lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1026,"u = new LUSolver(new LUDecompositionImpl(this, MathUtils.SAFE_MIN));"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1023,"lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();"
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,15, limitations under the License.
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,18,ackage org.apache.commons.math.linear;
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,22, Solver using eigen decomposition to solve A &times; X = B for symmetric matrices A.
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,23," <p>This class finds only exact linear solution, i.e. when"
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,24, ||A &times; X - B|| is exactly 0.</p>
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,26, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,27, @since 2.0
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,29,ublic class EigenSolver implements DecompositionSolver {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,31,** Serializable version identifier. */
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,32,rivate static final long serialVersionUID = -74798755223915020L;
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,34,** Underlying solver. */
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,35,rivate final DecompositionSolver solver;
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,37,** Determinant. */
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,38,rivate final double determinant;
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,41, Simple constructor.
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,42, @param decomposition decomposition to use
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,44,ublic EigenSolver(final EigenDecomposition decomposition) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,45,his.solver      = decomposition.getSolver();
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,46,his.determinant = decomposition.getDeterminant();
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,49,** Solve the linear equation A &times; X = B for symmetric matrices A.
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,50," <p>This method only find exact linear solutions, i.e. solutions for"
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,51, which ||A &times; X - B|| is exactly 0.</p>
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,52, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,53, @return a vector X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,54, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,55, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,57,ublic double[] solve(final double[] b)
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,58,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,59,eturn solver.solve(b);
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,62,** Solve the linear equation A &times; X = B for symmetric matrices A.
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,63," <p>This method only find exact linear solutions, i.e. solutions for"
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,64, which ||A &times; X - B|| is exactly 0.</p>
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,65, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,66, @return a vector X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,67, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,68, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,70,ublic RealVector solve(final RealVector b)
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,71,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,72,eturn solver.solve(b);
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,75,** Solve the linear equation A &times; X = B for symmetric matrices A.
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,76," <p>This method only find exact linear solutions, i.e. solutions for"
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,77, which ||A &times; X - B|| is exactly 0.</p>
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,78, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,79, @return a matrix X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,80, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,81, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,83,ublic RealMatrix solve(final RealMatrix b)
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,84,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,85,eturn solver.solve(b);
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,89, Return the determinant of the matrix
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,90, @return determinant of the matrix
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,91, @see #isNonSingular()
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,93,ublic double getDeterminant() {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,94,eturn determinant;
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,98, Check if the decomposed matrix is non-singular.
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,99, @return true if the decomposed matrix is non-singular
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,101,ublic boolean isNonSingular() {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,102,eturn solver.isNonSingular();
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,105,** Get the inverse of the decomposed matrix.
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,106, @return inverse matrix
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,107, @throws InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,109,ublic RealMatrix getInverse()
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,110,hrows InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,111,eturn solver.getInverse();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,15, limitations under the License.
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,18,ackage org.apache.commons.math.linear;
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,22, Solver using LU decomposition to solve A &times; X = B for square matrices A.
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,23," <p>This class finds only exact linear solution, i.e. when"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,24, ||A &times; X - B|| is exactly 0.</p>
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,26, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,27, @since 2.0
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,29,ublic class LUSolver implements DecompositionSolver {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,31,** Serializable version identifier. */
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,32,rivate static final long serialVersionUID = -369589527412301256L;
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,34,** Underlying solver. */
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,35,rivate final DecompositionSolver solver;
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,37,** Determinant. */
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,38,rivate final double determinant;
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,41, Simple constructor.
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,42, @param decomposition decomposition to use
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,44,ublic LUSolver(final LUDecomposition decomposition) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,45,his.solver      = decomposition.getSolver();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,46,his.determinant = decomposition.getDeterminant();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,49,** Solve the linear equation A &times; X = B for square matrices A.
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,50," <p>This method only find exact linear solutions, i.e. solutions for"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,51, which ||A &times; X - B|| is exactly 0.</p>
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,52, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,53, @return a vector X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,54, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,55, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,57,ublic double[] solve(final double[] b)
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,58,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,59,eturn solver.solve(b);
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,63,** Solve the linear equation A &times; X = B for square matrices A.
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,64," <p>This method only find exact linear solutions, i.e. solutions for"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,65, which ||A &times; X - B|| is exactly 0.</p>
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,66, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,67, @return a vector X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,68, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,69, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,71,ublic RealVector solve(final RealVector b)
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,72,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,73,eturn solver.solve(b);
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,76,** Solve the linear equation A &times; X = B for square matrices A.
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,77," <p>This method only find exact linear solutions, i.e. solutions for"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,78, which ||A &times; X - B|| is exactly 0.</p>
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,79, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,80, @return a matrix X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,81, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,82, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,84,ublic RealMatrix solve(final RealMatrix b)
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,85,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,86,eturn solver.solve(b);
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,90, Check if the decomposed matrix is non-singular.
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,91, @return true if the decomposed matrix is non-singular
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,93,ublic boolean isNonSingular() {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,94,eturn solver.isNonSingular();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,97,** Get the inverse of the decomposed matrix.
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,98, @return inverse matrix
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,99, @throws InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,101,ublic RealMatrix getInverse()
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,102,hrows InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,103,eturn solver.getInverse();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,107, Return the determinant of the matrix
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,108, @return determinant of the matrix
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,110,ublic double getDeterminant() {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,111,eturn determinant;
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,15, limitations under the License.
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,18,ackage org.apache.commons.math.linear;
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,22, Class using QR decomposition to solve A &times; X = B in least square sense
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,23, for any matrices A.
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,24, <p>This class solve A &times; X = B in least squares sense: it finds X
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,25, such that ||A &times; X - B|| is minimal.</p>
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,27, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,28, @since 2.0
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,30,ublic class QRSolver implements DecompositionSolver {
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,32,** Serializable version identifier. */
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,33,rivate static final long serialVersionUID = -446230688570372107L;
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,35,** Underlying decomposition. */
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,36,rivate final DecompositionSolver solver;
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,39, Simple constructor.
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,40, @param decomposition decomposition to use
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,42,ublic QRSolver(final QRDecomposition decomposition) {
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,43,his.solver = decomposition.getSolver();
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,46,** Solve the linear equation A &times; X = B in least square sense.
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,47," <p>The m&times;n matrix A may not be square, the solution X is"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,48, such that ||A &times; X - B|| is minimal.</p>
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,49, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,50, @return a vector X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,51, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,52, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,54,ublic double[] solve(final double[] b)
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,55,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,56,eturn solver.solve(b);
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,59,** Solve the linear equation A &times; X = B in least square sense.
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,60," <p>The m&times;n matrix A may not be square, the solution X is"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,61, such that ||A &times; X - B|| is minimal.</p>
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,62, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,63, @return a vector X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,64, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,65, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,67,ublic RealVector solve(final RealVector b)
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,68,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,69,eturn solver.solve(b);
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,72,** Solve the linear equation A &times; X = B in least square sense.
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,73," <p>The m&times;n matrix A may not be square, the solution X is"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,74, such that ||A &times; X - B|| is minimal.</p>
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,75, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,76, @return a matrix X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,77, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,78, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,80,ublic RealMatrix solve(final RealMatrix b)
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,81,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,82,eturn solver.solve(b);
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,86, Check if the decomposed matrix is non-singular.
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,87, @return true if the decomposed matrix is non-singular
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,89,ublic boolean isNonSingular() {
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,90,eturn solver.isNonSingular();
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,93,** Get the pseudo-inverse of the decomposed matrix.
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,94, @return inverse matrix
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,95, @throws InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,97,ublic RealMatrix getInverse()
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,98,hrows InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,99,eturn solver.getInverse();
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,15, limitations under the License.
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,18,ackage org.apache.commons.math.linear;
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,22, Class using singular value decomposition decomposition to solve A &times;
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,23, X = B in least square sense for any matrices A.
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,24, <p>This class solve A &times; X = B in least squares sense: it finds X
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,25, such that ||A &times; X - B|| is minimal.</p>
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,27," @version $Revision: 723496 $ $Date: 2008-12-05 00:48:18 +0100 (ven., 05 déc. 2008) $"
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,28, @since 2.0
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,30,ublic class SingularValueSolver implements DecompositionSolver {
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,32,** Serializable version identifier. */
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,33,rivate static final long serialVersionUID = 4388219358640335388L;
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,35,** Underlying solver. */
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,36,rivate final DecompositionSolver solver;
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,39, Simple constructor.
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,40, @param decomposition decomposition to use
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,42,ublic SingularValueSolver(final SingularValueDecomposition decomposition) {
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,43,his.solver = decomposition.getSolver();
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,46,** Solve the linear equation A &times; X = B in least square sense.
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,47," <p>The m&times;n matrix A may not be square, the solution X is"
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,48, such that ||A &times; X - B|| is minimal.</p>
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,49, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,50, @return a vector X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,51, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,52, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,54,ublic double[] solve(final double[] b)
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,55,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,56,eturn solver.solve(b);
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,59,** Solve the linear equation A &times; X = B in least square sense.
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,60," <p>The m&times;n matrix A may not be square, the solution X is"
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,61, such that ||A &times; X - B|| is minimal.</p>
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,62, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,63, @return a vector X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,64, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,65, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,67,ublic RealVector solve(final RealVector b)
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,68,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,69,eturn solver.solve(b);
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,72,** Solve the linear equation A &times; X = B in least square sense.
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,73," <p>The m&times;n matrix A may not be square, the solution X is"
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,74, such that ||A &times; X - B|| is minimal.</p>
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,75, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,76, @return a matrix X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,77, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,78, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,80,ublic RealMatrix solve(final RealMatrix b)
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,81,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,82,eturn solver.solve(b);
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,86, Check if the decomposed matrix is non-singular.
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,87, @return true if the decomposed matrix is non-singular
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,89,ublic boolean isNonSingular() {
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,90,eturn solver.isNonSingular();
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,93,** Get the pseudo-inverse of the decomposed matrix.
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,94, @return inverse matrix
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,95, @throws InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,97,ublic RealMatrix getInverse()
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,98,hrows InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,99,eturn solver.getInverse();
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,20,mport org.apache.commons.math.linear.LUSolver;
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,112,eturn new LUSolver(new LUDecompositionImpl(XTOIX)).getInverse();
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,111,return new LUDecompositionImpl(XTOIX).getSolver().getInverse();
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,463,ealMatrix pInverse = new LUSolver(new LUDecompositionImpl(p)).getInverse();
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,463,RealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse();
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,471,ouble[] solution = new LUSolver(new LUDecompositionImpl(coefficients)).solve(constants);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,471,double[] solution = new LUDecompositionImpl(coefficients).getSolver().solve(constants);
False,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,48,"igenSolver es = new EigenSolver(new EigenDecompositionImpl(m, MathUtils.SAFE_MIN));"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,48,"DecompositionSolver es = new EigenDecompositionImpl(m, MathUtils.SAFE_MIN).getSolver();"
False,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,65,"igenSolver es = new EigenSolver(new EigenDecompositionImpl(m, MathUtils.SAFE_MIN));"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,65,"DecompositionSolver es = new EigenDecompositionImpl(m, MathUtils.SAFE_MIN).getSolver();"
False,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,75,"igenSolver es = new EigenSolver(new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN));"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,75,"DecompositionSolver es = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN).getSolver();"
False,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,113,"igenSolver  es = new EigenSolver(new EigenDecompositionImpl(m, MathUtils.SAFE_MIN));"
False,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,114,"ssertEquals(184041, es.getDeterminant(), 2.0e-8);"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,113,"DecompositionSolver es = new EigenDecompositionImpl(m, MathUtils.SAFE_MIN).getSolver();"
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,65,"ssertFalse(new LUSolver(new LUDecompositionImpl(matrix, 1.0e-5)).isNonSingular());"
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,66,"ssertTrue(new LUSolver(new LUDecompositionImpl(matrix, 1.0e-10)).isNonSingular());"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,65,"assertFalse(new LUDecompositionImpl(matrix, 1.0e-5).getSolver().isNonSingular());"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,66,"assertTrue(new LUDecompositionImpl(matrix, 1.0e-10).getSolver().isNonSingular());"
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,71,USolver lu =
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,72,ew LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)));
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,73,ssertTrue(lu.isNonSingular());
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,74,u = new LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(singular)));
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,75,ssertFalse(lu.isNonSingular());
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,76,u = new LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(bigSingular)));
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,77,ssertFalse(lu.isNonSingular());
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,71,DecompositionSolver solver =
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,72,new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)).getSolver();
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,73,assertTrue(solver.isNonSingular());
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,74,solver = new LUDecompositionImpl(MatrixUtils.createRealMatrix(singular)).getSolver();
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,75,assertFalse(solver.isNonSingular());
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,76,solver = new LUDecompositionImpl(MatrixUtils.createRealMatrix(bigSingular)).getSolver();
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,77,assertFalse(solver.isNonSingular());
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,82,USolver solver =
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,83,ew LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)));
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,82,DecompositionSolver solver =
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,83,new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)).getSolver();
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,113,USolver solver =
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,114,ew LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(singular)));
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,113,DecompositionSolver solver =
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,114,new LUDecompositionImpl(MatrixUtils.createRealMatrix(singular)).getSolver();
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,152,USolver solver =
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,153,ew LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)));
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,152,DecompositionSolver solver =
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,153,new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)).getSolver();
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,198,eturn new LUSolver(new LUDecompositionImpl(m)).getDeterminant();
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,198,return new LUDecompositionImpl(m).getDeterminant();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,272,ealMatrix mIT = new LUSolver(new LUDecompositionImpl(m)).getInverse().transpose();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,273,ealMatrix mTI = new LUSolver(new LUDecompositionImpl(m.transpose())).getInverse();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,272,RealMatrix mIT = new LUDecompositionImpl(m).getSolver().getInverse().transpose();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,273,RealMatrix mTI = new LUDecompositionImpl(m.transpose()).getSolver().getInverse();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,363,ealMatrix pInverse = new LUSolver(new LUDecompositionImpl(p)).getInverse();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,363,RealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,371,ouble[] solution = new LUSolver(new LUDecompositionImpl(coefficients)).solve(constants);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,371,double[] solution = new LUDecompositionImpl(coefficients).getSolver().solve(constants);
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,45,ingularValueSolver solver =
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,46,ew SingularValueSolver(new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare)));
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,45,DecompositionSolver solver =
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,46,new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare)).getSolver();
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,81,ingularValueSolver solver = new SingularValueSolver(new SingularValueDecompositionImpl(m));
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,81,DecompositionSolver solver = new SingularValueDecompositionImpl(m).getSolver();
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,119,ingularValueSolver solver =
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,120,ew SingularValueSolver(new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare)));
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,119,DecompositionSolver solver =
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,120,new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare)).getSolver();
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,280,ealMatrix mIT = new LUSolver(new LUDecompositionImpl(m)).getInverse().transpose();
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,281,ealMatrix mTI = new LUSolver(new LUDecompositionImpl(m.transpose())).getInverse();
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,280,RealMatrix mIT = new LUDecompositionImpl(m).getSolver().getInverse().transpose();
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,281,RealMatrix mTI = new LUDecompositionImpl(m.transpose()).getSolver().getInverse();
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,371,ealMatrix pInverse = new LUSolver(new LUDecompositionImpl(p)).getInverse();
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,371,RealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse();
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,380,ouble[] solution = new LUSolver(new LUDecompositionImpl(coefficients)).solve(constants);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,380,double[] solution = new LUDecompositionImpl(coefficients).getSolver().solve(constants);

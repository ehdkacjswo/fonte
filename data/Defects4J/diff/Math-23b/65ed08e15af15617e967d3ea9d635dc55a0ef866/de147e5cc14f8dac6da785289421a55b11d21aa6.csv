is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,996," {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,997, {@link FastMath#cosh} and {@link FastMath#sinh}.
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,996,"* {@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,997,* {@link FastMath#sinh}.
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1007,   tan(1 &plusmn; INFINITY i) = 0 + NaN i
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1008,   tan(&plusmn;INFINITY + i) = NaN + NaN i
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1007,*   tan(a &plusmn; INFINITY i) = 0 &plusmn; i
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1008,*   tan(&plusmn;INFINITY + bi) = NaN + NaN i
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1018,f (isNaN) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1018,if (isNaN || Double.isInfinite(real)) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1021,if (imaginary > 20.0) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1022,"return createComplex(0.0, 1.0);"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1024,if (imaginary < -20.0) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1025,"return createComplex(0.0, -1.0);"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1041," {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1042, {@link FastMath#cosh} and {@link FastMath#sinh}.
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1047,"* {@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1048,* {@link FastMath#sinh}.
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1052,   tanh(1 &plusmn; INFINITY i) = NaN + NaN i
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1053,   tanh(&plusmn;INFINITY + i) = NaN + 0 i
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1058,*   tanh(a &plusmn; INFINITY i) = NaN + NaN i
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1059,*   tanh(&plusmn;INFINITY + bi) = &plusmn;1 + 0 i
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1063,f (isNaN) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1069,if (isNaN || Double.isInfinite(imaginary)) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1072,if (real > 20.0) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1073,"return createComplex(1.0, 0.0);"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1075,if (real < -20.0) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1076,"return createComplex(-1.0, 0.0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,999,/* Check that no overflow occurs (MATH-722) */
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1000,"Complex actual = new Complex(3.0, 1E10).tan();"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1001,"expected = new Complex(0, 1);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1002,"TestUtils.assertEquals(expected, actual, 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1003,"actual = new Complex(3.0, -1E10).tan();"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1004,"expected = new Complex(0, -1);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1005,"TestUtils.assertEquals(expected, actual, 1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1008,"estUtils.assertSame(zeroNaN, oneInf.tan());"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1009,"estUtils.assertSame(zeroNaN, oneNegInf.tan());"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1015,"TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1016,"TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1036,/* Check that no overflow occurs (MATH-722) */
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1037,"Complex actual = new Complex(1E10, 3.0).tanh();"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1038,"expected = new Complex(1, 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1039,"TestUtils.assertEquals(expected, actual, 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1040,"actual = new Complex(-1E10, 3.0).tanh();"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1041,"expected = new Complex(-1, 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1042,"TestUtils.assertEquals(expected, actual, 1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1040,"estUtils.assertSame(nanZero, infOne.tanh());"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1041,"estUtils.assertSame(nanZero, negInfOne.tanh());"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1054,"TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1055,"TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());"

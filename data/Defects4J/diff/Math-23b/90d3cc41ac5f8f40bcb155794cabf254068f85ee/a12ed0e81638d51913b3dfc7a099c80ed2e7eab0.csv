is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,19,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,20,import org.apache.commons.math3.exception.NoDataException;
True,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,21,import org.apache.commons.math3.exception.NullArgumentException;
False,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,23, Default implementation of a {@link MeasurementModel} for the use with a
False,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,24, {@link KalmanFilter}.
True,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,26,* Default implementation of a {@link MeasurementModel} for the use with a {@link KalmanFilter}.
False,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,43," Create a new {@link MeasurementModel}, taking double arrays as input"
False,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,44, parameters for the respective measurement matrix and noise.
True,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,45,"* Create a new {@link MeasurementModel}, taking double arrays as input parameters for the"
True,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,46,* respective measurement matrix and noise.
False,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,46, @param measMatrix the measurement matrix
False,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,47, @param measNoise the measurement noise matrix
True,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,48,* @param measMatrix
True,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,49,*            the measurement matrix
True,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,50,* @param measNoise
True,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,51,*            the measurement noise matrix
True,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,52,* @throws NullArgumentException
True,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,53,*             if any of the input matrices is {@code null}
True,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,54,* @throws NoDataException
True,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,55,*             if any row / column dimension of the input matrices is zero
True,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,56,* @throws DimensionMismatchException
True,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,57,*             if any of the input matrices is non-rectangular
False,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,49,"ublic DefaultMeasurementModel(final double[][] measMatrix, final double[][] measNoise) {"
True,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,59,"public DefaultMeasurementModel(final double[][] measMatrix, final double[][] measNoise)"
True,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java,60,"throws NullArgumentException, NoDataException, DimensionMismatchException {"
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,19,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,20,import org.apache.commons.math3.exception.NoDataException;
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,21,import org.apache.commons.math3.exception.NullArgumentException;
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,25, Default implementation of a {@link ProcessModel} for the use with a
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,26, {@link KalmanFilter}.
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,28,* Default implementation of a {@link ProcessModel} for the use with a {@link KalmanFilter}.
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,33," The state transition matrix, used to advance the internal state"
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,34, estimation each time-step.
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,35,"* The state transition matrix, used to advance the internal state estimation each time-step."
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,39," The control matrix, used to integrate a control input into the state"
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,40, estimation.
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,40,"* The control matrix, used to integrate a control input into the state estimation."
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,54," Create a new {@link ProcessModel}, taking double arrays as input"
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,55, parameters.
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,54,"* Create a new {@link ProcessModel}, taking double arrays as input parameters."
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,57, @param stateTransition the state transition matrix
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,58, @param control the control matrix
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,59, @param processNoise the process noise matrix
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,60, @param initialStateEstimate the initial state estimate vector
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,61, @param initialErrorCovariance the initial error covariance matrix
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,56,* @param stateTransition
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,57,*            the state transition matrix
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,58,* @param control
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,59,*            the control matrix
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,60,* @param processNoise
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,61,*            the process noise matrix
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,62,* @param initialStateEstimate
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,63,*            the initial state estimate vector
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,64,* @param initialErrorCovariance
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,65,*            the initial error covariance matrix
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,66,* @throws NullArgumentException
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,67,*             if any of the input arrays is {@code null}
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,68,* @throws NoDataException
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,69,*             if any row / column dimension of the input matrices is zero
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,70,* @throws DimensionMismatchException
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,71,*             if any of the input matrices is non-rectangular
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,67,inal double[][] initialErrorCovariance) {
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,77,final double[][] initialErrorCovariance)
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,78,"throws NullArgumentException, NoDataException, DimensionMismatchException {"
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,76," Create a new {@link ProcessModel}, taking double arrays as input"
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,77, parameters. The initial state estimate and error covariance are omitted
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,78, and will be initialized by the {@link KalmanFilter} to default values.
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,88,"* Create a new {@link ProcessModel}, taking double arrays as input parameters."
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,89,* <p>
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,90,* The initial state estimate and error covariance are omitted and will be initialized by the
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,91,* {@link KalmanFilter} to default values.
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,80, @param stateTransition the state transition matrix
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,81, @param control the control matrix
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,82, @param processNoise the process noise matrix
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,93,* @param stateTransition
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,94,*            the state transition matrix
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,95,* @param control
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,96,*            the control matrix
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,97,* @param processNoise
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,98,*            the process noise matrix
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,99,* @throws NullArgumentException
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,100,*             if any of the input arrays is {@code null}
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,101,* @throws NoDataException
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,102,*             if any row / column dimension of the input matrices is zero
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,103,* @throws DimensionMismatchException
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,104,*             if any of the input matrices is non-rectangular
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,86,inal double[][] processNoise) {
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,108,final double[][] processNoise)
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,109,"throws NullArgumentException, NoDataException, DimensionMismatchException {"
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,93," Create a new {@link ProcessModel}, taking double arrays as input"
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,94, parameters.
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,117,"* Create a new {@link ProcessModel}, taking double arrays as input parameters."
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,96, @param stateTransition the state transition matrix
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,97, @param control the control matrix
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,98, @param processNoise the process noise matrix
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,99, @param initialStateEstimate the initial state estimate vector
False,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,100, @param initialErrorCovariance the initial error covariance matrix
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,119,* @param stateTransition
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,120,*            the state transition matrix
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,121,* @param control
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,122,*            the control matrix
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,123,* @param processNoise
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,124,*            the process noise matrix
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,125,* @param initialStateEstimate
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,126,*            the initial state estimate vector
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,127,* @param initialErrorCovariance
True,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java,128,*            the initial error covariance matrix
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,20,import org.apache.commons.math3.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,30,import org.apache.commons.math3.linear.SingularMatrixException;
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,48,* <p>
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,55, </p>
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,56, <br/>
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,71, </p>
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,111, @throws org.apache.commons.math3.exception.NullArgumentException
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,112,             if any of the given inputs is null (except for the control
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,113,             matrix)
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,111,* @throws NullArgumentException
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,112,*             if any of the given inputs is null (except for the control matrix)
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,115,* @throws DimensionMismatchException
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,116,*             if the column dimension of the transition matrix does not match the dimension of the
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,117,*             initial state estimation vector
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,119,"ublic KalmanFilter(final ProcessModel process,"
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,120,inal MeasurementModel measurement) {
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,121,"public KalmanFilter(final ProcessModel process, final MeasurementModel measurement)"
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,122,"throws NullArgumentException, NonSquareMatrixException, DimensionMismatchException,"
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,123,MatrixDimensionMismatchException {
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,154,tateEstimation =
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,155,ew ArrayRealVector(transitionMatrix.getColumnDimension());
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,157,stateEstimation = new ArrayRealVector(transitionMatrix.getColumnDimension());
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,282,ublic void predict(final double[] u) {
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,284,public void predict(final double[] u) throws DimensionMismatchException {
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,289, @param u the control vector
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,290, @throws DimensionMismatchException if the dimension of the control
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,291, vector does not fit
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,291,* @param u
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,292,*            the control vector
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,293,* @throws DimensionMismatchException
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,294,*             if the dimension of the control vector does not match
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,293,ublic void predict(final RealVector u) {
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,296,public void predict(final RealVector u) throws DimensionMismatchException {
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,320, @param z the measurement vector
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,323,* @param z
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,324,*            the measurement vector
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,325,* @throws NullArgumentException
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,326,*             if the measurement vector is {@code null}
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,322, if the dimension of the measurement vector does not fit
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,323, @throws org.apache.commons.math3.linear.SingularMatrixException
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,324, if the covariance matrix could not be inverted
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,328,*             if the dimension of the measurement vector does not fit
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,329,* @throws SingularMatrixException
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,330,*             if the covariance matrix could not be inverted
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,326,ublic void correct(final double[] z) {
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,332,public void correct(final double[] z)
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,333,"throws NullArgumentException, DimensionMismatchException, SingularMatrixException {"
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,333, @param z the measurement vector
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,334, @throws DimensionMismatchException if the dimension of the
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,335, measurement vector does not fit
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,336, @throws org.apache.commons.math3.linear.SingularMatrixException
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,337, if the covariance matrix could not be inverted
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,340,* @param z
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,341,*            the measurement vector
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,342,* @throws NullArgumentException
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,343,*             if the measurement vector is {@code null}
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,344,* @throws DimensionMismatchException
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,345,*             if the dimension of the measurement vector does not fit
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,346,* @throws SingularMatrixException
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,347,*             if the covariance matrix could not be inverted
False,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,339,ublic void correct(final RealVector z) {
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,349,public void correct(final RealVector z)
True,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,src/main/java/org/apache/commons/math3/filter/KalmanFilter.java,350,"throws NullArgumentException, DimensionMismatchException, SingularMatrixException {"
False,src/main/java/org/apache/commons/math3/filter/MeasurementModel.java,src/main/java/org/apache/commons/math3/filter/MeasurementModel.java,36, Returns the measurement noise matrix. This method is called by the
False,src/main/java/org/apache/commons/math3/filter/MeasurementModel.java,src/main/java/org/apache/commons/math3/filter/MeasurementModel.java,37," {@link KalmanFilter} every correct step, so implementations of this"
False,src/main/java/org/apache/commons/math3/filter/MeasurementModel.java,src/main/java/org/apache/commons/math3/filter/MeasurementModel.java,38, interface may return a modified measurement noise depending on current
False,src/main/java/org/apache/commons/math3/filter/MeasurementModel.java,src/main/java/org/apache/commons/math3/filter/MeasurementModel.java,39, iteration step.
True,src/main/java/org/apache/commons/math3/filter/MeasurementModel.java,src/main/java/org/apache/commons/math3/filter/MeasurementModel.java,36,* Returns the measurement noise matrix. This method is called by the {@link KalmanFilter} every
True,src/main/java/org/apache/commons/math3/filter/MeasurementModel.java,src/main/java/org/apache/commons/math3/filter/MeasurementModel.java,37,"* correction step, so implementations of this interface may return a modified measurement noise"
True,src/main/java/org/apache/commons/math3/filter/MeasurementModel.java,src/main/java/org/apache/commons/math3/filter/MeasurementModel.java,38,* depending on the current iteration step.
False,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,44, Returns the process noise matrix. This method is called by the
False,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,45," {@link KalmanFilter} every predict step, so implementations of this"
False,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,46, interface may return a modified process noise depending on current
False,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,47, iteration step.
True,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,44,* Returns the process noise matrix. This method is called by the {@link KalmanFilter} every
True,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,45,"* prediction step, so implementations of this interface may return a modified process noise"
True,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,46,* depending on the current iteration step.
False,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,59," Note: if the return value is zero, the Kalman filter will initialize the"
True,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,58,"* <b>Note:</b> if the return value is zero, the Kalman filter will initialize the"
False,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,61, </p>
False,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,70," Note: if the return value is zero, the Kalman filter will initialize the"
True,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,68,"* <b>Note:</b> if the return value is zero, the Kalman filter will initialize the"
False,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,src/main/java/org/apache/commons/math3/filter/ProcessModel.java,72, </p>

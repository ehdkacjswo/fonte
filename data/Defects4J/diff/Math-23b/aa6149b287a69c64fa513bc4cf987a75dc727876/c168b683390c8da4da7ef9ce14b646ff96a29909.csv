is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,75,@Test
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,76,public void testMath372()
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,77,"throws OptimizationException, FunctionEvaluationException {"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,78,LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,79,CurveFitter curveFitter = new CurveFitter(optimizer);
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,81,"curveFitter.addObservedPoint( 15,  4443);"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,82,"curveFitter.addObservedPoint( 31,  8493);"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,83,"curveFitter.addObservedPoint( 62, 17586);"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,84,"curveFitter.addObservedPoint(125, 30582);"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,85,"curveFitter.addObservedPoint(250, 45087);"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,86,"curveFitter.addObservedPoint(500, 50683);"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,88,ParametricRealFunction f = new ParametricRealFunction() {
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,90,"public double value(double x, double[] parameters) {"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,92,double a = parameters[0];
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,93,double b = parameters[1];
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,94,double c = parameters[2];
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,95,double d = parameters[3];
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,97,"return d + ((a - d) / (1 + Math.pow(x / c, b)));"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,100,"public double[] gradient(double x, double[] parameters) {"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,102,double a = parameters[0];
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,103,double b = parameters[1];
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,104,double c = parameters[2];
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,105,double d = parameters[3];
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,107,double[] gradients = new double[4];
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,108,"double den = 1 + Math.pow(x / c, b);"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,110,// derivative with respect to a
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,111,gradients[0] = 1 / den;
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,113,// derivative with respect to b
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,114,"// in the reported (invalid) issue, there was a sign error here"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,115,"gradients[1] = -((a - d) * Math.pow(x / c, b) * Math.log(x / c)) / (den * den);"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,117,// derivative with respect to c
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,118,"gradients[2] = (b * Math.pow(x / c, b - 1) * (x / (c * c)) * (a - d)) / (den * den);"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,120,// derivative with respect to d
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,121,gradients[3] = 1 - (1 / den);
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,123,return gradients;
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,128,"double[] initialGuess = new double[] { 1500, 0.95, 65, 35000 };"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,129,"double[] estimatedParameters = curveFitter.fit(f, initialGuess);"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,131,"Assert.assertEquals( 2411.00, estimatedParameters[0], 500.00);"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,132,"Assert.assertEquals(    1.62, estimatedParameters[1],   0.04);"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,133,"Assert.assertEquals(  111.22, estimatedParameters[2],   0.30);"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,134,"Assert.assertEquals(55347.47, estimatedParameters[3], 300.00);"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,135,Assert.assertTrue(optimizer.getRMS() < 600.0);

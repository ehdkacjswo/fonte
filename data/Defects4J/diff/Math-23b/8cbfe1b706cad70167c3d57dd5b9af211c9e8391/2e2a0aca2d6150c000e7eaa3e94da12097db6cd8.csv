is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,20,mport java.io.IOException;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,20,import java.io.BufferedReader;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,22,import java.io.FileReader;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,23,import java.io.IOException;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,24,import java.io.InputStreamReader;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,25,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,27,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,30,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,31,import org.apache.commons.math.exception.MathIllegalStateException;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,33,import org.apache.commons.math.exception.ZeroException;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,34,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,37,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,38,import org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,30," Represents an <a href=""http://random.mat.sbg.ac.at/~ste/dipl/node11.html"">"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,41,"* Represents an <a href=""http://http://en.wikipedia.org/wiki/Empirical_distribution_function"">"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,34," Implementations of this interface maintain data structures, called"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,45,"* An <code>EmpiricalDistribution</code> maintains data structures, called"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,44, Applications can use <code>EmpiricalDistribution</code> implementations to
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,45, build grouped frequency histograms representing the input data or to
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,46," generate random values ""like"" those in the input file -- i.e., the values"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,47, generated will follow the distribution of the values in the file.</p>
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,55,* Applications can use <code>EmpiricalDistribution</code> to build grouped
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,56,* frequency histograms representing the input data or to generate random values
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,57,"* ""like"" those in the input file -- i.e., the values generated will follow the"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,58,* distribution of the values in the file.</p>
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,59,* <p>The implementation uses what amounts to the
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,60,"* <a href=""http://nedwww.ipac.caltech.edu/level5/March02/Silverman/Silver2_6.html"">"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,61,* Variable Kernel Method</a> with Gaussian smoothing:<p>
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,62,* <strong>Digesting the input file</strong>
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,63,* <ol><li>Pass the file once to compute min and max.</li>
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,64,"* <li>Divide the range from min-max into <code>binCount</code> ""bins.""</li>"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,65,"* <li>Pass the data file again, computing bin counts and univariate"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,66,"*     statistics (mean, std dev.) for each of the bins </li>"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,67,"* <li>Divide the interval (0,1) into subintervals associated with the bins,"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,68,*     with the length of a bin's subinterval proportional to its count.</li></ol>
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,69,* <strong>Generating random values from the distribution</strong><ol>
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,70,"* <li>Generate a uniformly distributed value in (0,1) </li>"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,71,* <li>Select the subinterval to which the value belongs.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,72,* <li>Generate a random Gaussian value with mean = mean of the associated
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,73,*     bin and std dev = std dev of associated bin.</li></ol></p><p>
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,74,*<strong>USAGE NOTES:</strong><ul>
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,75,*<li>The <code>binCount</code> is set by default to 1000.  A good rule of thumb
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,76,*    is to set the bin count to approximately the length of the input file divided
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,77,*    by 10. </li>
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,78,*<li>The input file <i>must</i> be a plain text file containing one valid numeric
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,79,*    entry per line.</li>
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,80,* </ul></p>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,51,ublic interface EmpiricalDistribution {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,84,public class EmpiricalDistribution implements Serializable {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,86,/** Default bin count */
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,87,public static final int DEFAULT_BIN_COUNT = 1000;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,89,/** Serializable version identifier */
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,90,private static final long serialVersionUID = 5729073523949762654L;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,92,/** List of SummaryStatistics objects characterizing the bins */
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,93,private final List<SummaryStatistics> binStats;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,95,/** Sample statistics */
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,96,private SummaryStatistics sampleStats = null;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,98,/** Max loaded value */
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,99,private double max = Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,101,/** Min loaded value */
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,102,private double min = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,104,/** Grid size */
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,105,private double delta = 0d;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,107,/** number of bins */
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,108,private final int binCount;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,110,/** is the distribution loaded? */
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,111,private boolean loaded = false;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,113,"/** upper bounds of subintervals in (0,1) ""belonging"" to the bins */"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,114,private double[] upperBounds = null;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,116,/** RandomDataImpl instance to use in repeated calls to getNext() */
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,117,private final RandomDataImpl randomData;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,120,* Creates a new EmpiricalDistribution with the default bin count.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,122,public EmpiricalDistribution() {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,123,"this(DEFAULT_BIN_COUNT, new RandomDataImpl());"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,127,* Creates a new EmpiricalDistribution with the specified bin count.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,129,* @param binCount number of bins
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,131,public EmpiricalDistribution(int binCount) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,132,"this(binCount, new RandomDataImpl());"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,136,* Creates a new EmpiricalDistribution with the specified bin count using the
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,137,* provided {@link RandomGenerator} as the source of random data.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,139,* @param binCount number of bins
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,140,"* @param generator random data generator (may be null, resulting in default JDK generator)"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,141,* @since 3.0
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,143,"public EmpiricalDistribution(int binCount, RandomGenerator generator) {"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,144,this.binCount = binCount;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,145,randomData = new RandomDataImpl(generator);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,146,binStats = new ArrayList<SummaryStatistics>();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,150,* Creates a new EmpiricalDistribution with default bin count using the
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,151,* provided {@link RandomGenerator} as the source of random data.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,153,"* @param generator random data generator (may be null, resulting in default JDK generator)"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,154,* @since 3.0
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,156,public EmpiricalDistribution(RandomGenerator generator) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,157,"this(DEFAULT_BIN_COUNT, generator);"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,161,* Creates a new EmpiricalDistribution with the specified bin count using the
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,162,* provided {@link RandomDataImpl} instance as the source of random data.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,164,* @param binCount number of bins
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,165,"* @param randomData random data generator (may be null, resulting in default JDK generator)"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,166,* @since 3.0
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,168,"public EmpiricalDistribution(int binCount, RandomDataImpl randomData) {"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,169,this.binCount = binCount;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,170,this.randomData = randomData;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,171,binStats = new ArrayList<SummaryStatistics>();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,175,* Creates a new EmpiricalDistribution with default bin count using the
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,176,* provided {@link RandomDataImpl} as the source of random data.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,178,"* @param randomData random data generator (may be null, resulting in default JDK generator)"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,179,* @since 3.0
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,181,public EmpiricalDistribution(RandomDataImpl randomData) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,182,"this(DEFAULT_BIN_COUNT, randomData);"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,57, @param dataArray the data array
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,189,* @param in the input data array
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,190,* @exception NullArgumentException if in is null
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,192,public void load(double[] in) throws NullArgumentException {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,193,DataAdapter da = new ArrayDataAdapter(in);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,194,try {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,195,da.computeStats();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,196,fillBinStats(in);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,197,} catch (IOException e) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,198,"throw new MathIllegalStateException(e, LocalizedFormats.SIMPLE_MESSAGE, e.getLocalizedMessage());"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,200,loaded = true;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,205,* Computes the empirical distribution using data read from a URL.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,206,* @param url  url of the input file
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,208,* @throws IOException if an IO error occurs
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,209,* @throws NullArgumentException if url is null
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,59,oid load(double[] dataArray);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,211,"public void load(URL url) throws IOException, NullArgumentException {"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,212,MathUtils.checkNotNull(url);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,213,BufferedReader in =
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,214,new BufferedReader(new InputStreamReader(url.openStream()));
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,215,try {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,216,DataAdapter da = new StreamDataAdapter(in);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,217,da.computeStats();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,218,if (sampleStats.getN() == 0) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,219,"throw new ZeroException(LocalizedFormats.URL_CONTAINS_NO_DATA, url);"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,221,in = new BufferedReader(new InputStreamReader(url.openStream()));
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,222,fillBinStats(in);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,223,loaded = true;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,224,} finally {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,225,try {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,226,in.close();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,227,} catch (IOException ex) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,228,// ignore
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,68,oid load(File file) throws IOException;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,240,"public void load(File file) throws IOException, NullArgumentException {"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,241,MathUtils.checkNotNull(file);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,242,BufferedReader in = new BufferedReader(new FileReader(file));
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,243,try {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,244,DataAdapter da = new StreamDataAdapter(in);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,245,da.computeStats();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,246,in = new BufferedReader(new FileReader(file));
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,247,fillBinStats(in);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,248,loaded = true;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,249,} finally {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,250,try {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,251,in.close();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,252,} catch (IOException ex) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,253,// ignore
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,71, Computes the empirical distribution using data read from a URL.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,259,* Provides methods for computing <code>sampleStats</code> and
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,260,* <code>beanStats</code> abstracting the source of data.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,262,private abstract class DataAdapter{
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,265,* Compute bin stats.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,267,* @throws IOException  if an error occurs computing bin stats
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,269,public abstract void computeBinStats() throws IOException;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,272,* Compute sample statistics.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,274,* @throws IOException if an error occurs computing sample stats
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,276,public abstract void computeStats() throws IOException;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,281,* Factory of <code>DataAdapter</code> objects. For every supported source
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,282,"* of data (array of doubles, file, etc.) an instance of the proper object"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,283,* is returned.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,285,private class DataAdapterFactory{
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,287,* Creates a DataAdapter from a data object
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,289,* @param in object providing access to the data
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,290,* @return DataAdapter instance
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,292,public DataAdapter getAdapter(Object in) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,293,if (in instanceof BufferedReader) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,294,BufferedReader inputStream = (BufferedReader) in;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,295,return new StreamDataAdapter(inputStream);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,296,} else if (in instanceof double[]) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,297,double[] inputArray = (double[]) in;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,298,return new ArrayDataAdapter(inputArray);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,299,} else {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,300,throw new MathIllegalArgumentException(
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,301,"LocalizedFormats.INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE,"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,302,"in.getClass().getName(),"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,303,"BufferedReader.class.getName(), double[].class.getName());"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,308,* <code>DataAdapter</code> for data provided through some input stream
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,310,private class StreamDataAdapter extends DataAdapter{
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,312,/** Input stream providing access to the data */
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,313,private BufferedReader inputStream;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,316,* Create a StreamDataAdapter from a BufferedReader
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,318,* @param in BufferedReader input stream
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,320,public StreamDataAdapter(BufferedReader in){
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,321,super();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,322,inputStream = in;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,325,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,326,@Override
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,327,public void computeBinStats() throws IOException {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,328,String str = null;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,329,double val = 0.0d;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,330,while ((str = inputStream.readLine()) != null) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,331,val = Double.parseDouble(str);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,332,SummaryStatistics stats = binStats.get(findBin(val));
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,333,stats.addValue(val);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,336,inputStream.close();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,337,inputStream = null;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,340,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,341,@Override
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,342,public void computeStats() throws IOException {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,343,String str = null;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,344,double val = 0.0;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,345,sampleStats = new SummaryStatistics();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,346,while ((str = inputStream.readLine()) != null) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,347,val = Double.valueOf(str).doubleValue();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,348,sampleStats.addValue(val);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,350,inputStream.close();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,351,inputStream = null;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,356,* <code>DataAdapter</code> for data provided as array of doubles.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,358,private class ArrayDataAdapter extends DataAdapter {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,360,/** Array of input  data values */
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,361,private double[] inputArray;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,364,* Construct an ArrayDataAdapter from a double[] array
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,366,* @param in double[] array holding the data
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,367,* @throws NullArgumentException if in is null
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,369,public ArrayDataAdapter(double[] in) throws NullArgumentException {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,370,super();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,371,MathUtils.checkNotNull(in);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,372,inputArray = in;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,375,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,376,@Override
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,377,public void computeStats() throws IOException {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,378,sampleStats = new SummaryStatistics();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,379,for (int i = 0; i < inputArray.length; i++) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,380,sampleStats.addValue(inputArray[i]);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,384,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,385,@Override
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,386,public void computeBinStats() throws IOException {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,387,for (int i = 0; i < inputArray.length; i++) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,388,SummaryStatistics stats =
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,389,binStats.get(findBin(inputArray[i]));
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,390,stats.addValue(inputArray[i]);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,396,* Fills binStats array (second pass through data file).
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,73, @param url url of the input file
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,74, @throws IOException if an IO error occurs
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,75, @throws NullArgumentException if url is null
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,398,* @param in object providing access to the data
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,399,* @throws IOException  if an IO error occurs
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,77,"oid load(URL url) throws IOException, NullArgumentException;"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,401,private void fillBinStats(Object in) throws IOException {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,402,// Set up grid
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,403,min = sampleStats.getMin();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,404,max = sampleStats.getMax();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,405,delta = (max - min)/(Double.valueOf(binCount)).doubleValue();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,407,// Initialize binStats ArrayList
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,408,if (!binStats.isEmpty()) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,409,binStats.clear();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,411,for (int i = 0; i < binCount; i++) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,412,SummaryStatistics stats = new SummaryStatistics();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,413,"binStats.add(i,stats);"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,416,// Filling data in binStats Array
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,417,DataAdapterFactory aFactory = new DataAdapterFactory();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,418,DataAdapter da = aFactory.getAdapter(in);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,419,da.computeBinStats();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,421,// Assign upperBounds based on bin counts
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,422,upperBounds = new double[binCount];
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,423,upperBounds[0] =
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,424,((double) binStats.get(0).getN()) / (double) sampleStats.getN();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,425,for (int i = 1; i < binCount-1; i++) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,426,upperBounds[i] = upperBounds[i-1] +
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,427,((double) binStats.get(i).getN()) / (double) sampleStats.getN();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,429,upperBounds[binCount-1] = 1.0d;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,433,* Returns the index of the bin to which the given value belongs
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,435,* @param value  the value whose bin we are trying to find
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,436,* @return the index of the bin containing the value
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,438,private int findBin(double value) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,439,return FastMath.min(
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,440,"FastMath.max((int) FastMath.ceil((value- min) / delta) - 1, 0),"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,441,binCount - 1);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,85, @throws IllegalStateException if the distribution has not been loaded
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,449,* @throws MathIllegalStateException if the distribution has not been loaded
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,87,ouble getNextValue() throws IllegalStateException;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,451,public double getNextValue() throws MathIllegalStateException {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,453,if (!loaded) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,454,throw new MathIllegalStateException(LocalizedFormats.DISTRIBUTION_NOT_LOADED);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,457,"// Start with a uniformly distributed random number in (0,1)"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,458,"double x = randomData.nextUniform(0,1);"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,460,// Use this to select the bin and generate a Gaussian within the bin
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,461,for (int i = 0; i < binCount; i++) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,462,if (x <= upperBounds[i]) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,463,SummaryStatistics stats = binStats.get(i);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,464,if (stats.getN() > 0) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,465,if (stats.getStandardDeviation() > 0) {  // more than one obs
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,466,return randomData.nextGaussian
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,467,"(stats.getMean(),stats.getStandardDeviation());"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,468,} else {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,469,return stats.getMean(); // only one obs in bin
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,474,throw new MathIllegalStateException(LocalizedFormats.NO_BIN_SELECTED);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,91, Returns a
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,92, {@link org.apache.commons.math.stat.descriptive.StatisticalSummary}
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,93, describing this distribution.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,478,* Returns a {@link StatisticalSummary} describing this distribution.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,95, <li>the distribution must be loaded before invoking this method</li>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,96, </ul>
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,480,* <li>the distribution must be loaded before invoking this method</li></ul>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,101,tatisticalSummary getSampleStats() throws IllegalStateException;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,485,public StatisticalSummary getSampleStats() {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,486,return sampleStats;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,104, Property indicating whether or not the distribution has been loaded.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,106, @return true if the distribution has been loaded
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,108,oolean isLoaded();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,113, @return the number of bins
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,492,* @return the number of bins.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,115,nt getBinCount();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,494,public int getBinCount() {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,495,return binCount;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,118, Returns a list of
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,119, {@link org.apache.commons.math.stat.descriptive.SummaryStatistics}
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,120, containing statistics describing the values in each of the bins.  The
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,121, List is indexed on the bin number.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,499,* Returns a List of {@link SummaryStatistics} instances containing
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,500,* statistics describing the values in each of the bins.  The list is
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,501,* indexed on the bin number.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,123, @return List of bin statistics
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,503,* @return List of bin statistics.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,125,ist<SummaryStatistics> getBinStats();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,505,public List<SummaryStatistics> getBinStats() {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,506,return binStats;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,128, Returns the array of upper bounds for the bins.  Bins are: <br/>
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,510,* <p>Returns a fresh copy of the array of upper bounds for the bins.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,511,* Bins are: <br/>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,130,"  (upperBounds[binCount-2], upperBounds[binCount-1] = max]."
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,513,"*  (upperBounds[binCount-2], upperBounds[binCount-1] = max].</p>"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,515,"* <p>Note: In versions 1.0-2.0 of commons-math, this method"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,516,* incorrectly returned the array of probability generator upper
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,517,* bounds now returned by {@link #getGeneratorUpperBounds()}.</p>
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,520,* @since 2.1
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,134,ouble[] getUpperBounds();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,522,public double[] getUpperBounds() {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,523,double[] binUpperBounds = new double[binCount];
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,524,binUpperBounds[0] = min + delta;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,525,for (int i = 1; i < binCount - 1; i++) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,526,binUpperBounds[i] = binUpperBounds[i-1] + delta;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,528,binUpperBounds[binCount - 1] = max;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,529,return binUpperBounds;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,533,* <p>Returns a fresh copy of the array of upper bounds of the subintervals
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,534,"* of [0,1] used in generating data from the empirical distribution."
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,535,* Subintervals correspond to bins with lengths proportional to bin counts.</p>
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,537,"* <p>In versions 1.0-2.0 of commons-math, this array was (incorrectly) returned"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,538,* by {@link #getUpperBounds()}.</p>
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,540,* @since 2.1
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,541,* @return array of upper bounds of subintervals used in data generation
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,543,public double[] getGeneratorUpperBounds() {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,544,int len = upperBounds.length;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,545,double[] out = new double[len];
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,546,"System.arraycopy(upperBounds, 0, out, 0, len);"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,547,return out;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,551,* Property indicating whether or not the distribution has been loaded.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,553,* @return true if the distribution has been loaded
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,555,public boolean isLoaded() {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,556,return loaded;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,560,* Reseeds the random number generator used by {@link #getNextValue()}.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,562,* @param seed random generator seed
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,563,* @since 3.0
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,565,public void reSeed(long seed) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,566,randomData.reSeed(seed);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,18,ackage org.apache.commons.math.random;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,20,mport java.io.BufferedReader;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,21,mport java.io.File;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,22,mport java.io.FileReader;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,23,mport java.io.IOException;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,24,mport java.io.InputStreamReader;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,25,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,26,mport java.net.URL;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,27,mport java.util.ArrayList;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,28,mport java.util.List;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,30,mport org.apache.commons.math.exception.MathIllegalArgumentException;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,31,mport org.apache.commons.math.exception.MathIllegalStateException;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,32,mport org.apache.commons.math.exception.NullArgumentException;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,33,mport org.apache.commons.math.exception.ZeroException;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,34,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,35,mport org.apache.commons.math.stat.descriptive.StatisticalSummary;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,36,mport org.apache.commons.math.stat.descriptive.SummaryStatistics;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,37,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,38,mport org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,41, Implements <code>EmpiricalDistribution</code> interface.  This implementation
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,42, uses what amounts to the
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,43," <a href=""http://nedwww.ipac.caltech.edu/level5/March02/Silverman/Silver2_6.html"">"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,44, Variable Kernel Method</a> with Gaussian smoothing:<p>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,45, <strong>Digesting the input file</strong>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,46, <ol><li>Pass the file once to compute min and max.</li>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,47," <li>Divide the range from min-max into <code>binCount</code> ""bins.""</li>"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,48," <li>Pass the data file again, computing bin counts and univariate"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,49,"     statistics (mean, std dev.) for each of the bins </li>"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,50," <li>Divide the interval (0,1) into subintervals associated with the bins,"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,51,     with the length of a bin's subinterval proportional to its count.</li></ol>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,52, <strong>Generating random values from the distribution</strong><ol>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,53," <li>Generate a uniformly distributed value in (0,1) </li>"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,54, <li>Select the subinterval to which the value belongs.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,55, <li>Generate a random Gaussian value with mean = mean of the associated
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,56,     bin and std dev = std dev of associated bin.</li></ol></p><p>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,57,<strong>USAGE NOTES:</strong><ul>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,58,<li>The <code>binCount</code> is set by default to 1000.  A good rule of thumb
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,59,    is to set the bin count to approximately the length of the input file divided
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,60,    by 10. </li>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,61,<li>The input file <i>must</i> be a plain text file containing one valid numeric
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,62,    entry per line.</li>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,63, </ul></p>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,65, @version $Id$
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,67,"ublic class EmpiricalDistributionImpl implements Serializable, EmpiricalDistribution {"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,69,** Default bin count */
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,70,ublic static final int DEFAULT_BIN_COUNT = 1000;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,72,** Serializable version identifier */
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,73,rivate static final long serialVersionUID = 5729073523949762654L;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,75,** List of SummaryStatistics objects characterizing the bins */
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,76,rivate final List<SummaryStatistics> binStats;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,78,** Sample statistics */
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,79,rivate SummaryStatistics sampleStats = null;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,81,** Max loaded value */
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,82,rivate double max = Double.NEGATIVE_INFINITY;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,84,** Min loaded value */
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,85,rivate double min = Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,87,** Grid size */
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,88,rivate double delta = 0d;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,90,** number of bins */
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,91,rivate final int binCount;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,93,** is the distribution loaded? */
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,94,rivate boolean loaded = false;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,96,"** upper bounds of subintervals in (0,1) ""belonging"" to the bins */"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,97,rivate double[] upperBounds = null;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,99,** RandomDataImpl instance to use in repeated calls to getNext() */
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,100,rivate final RandomDataImpl randomData;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,103, Creates a new EmpiricalDistribution with the default bin count.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,105,ublic EmpiricalDistributionImpl() {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,106,"his(DEFAULT_BIN_COUNT, new RandomDataImpl());"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,110, Creates a new EmpiricalDistribution with the specified bin count.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,112, @param binCount number of bins
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,114,ublic EmpiricalDistributionImpl(int binCount) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,115,"his(binCount, new RandomDataImpl());"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,119, Creates a new EmpiricalDistribution with the specified bin count using the
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,120, provided {@link RandomGenerator} as the source of random data.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,122, @param binCount number of bins
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,123," @param generator random data generator (may be null, resulting in default JDK generator)"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,124, @since 3.0
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,126,"ublic EmpiricalDistributionImpl(int binCount, RandomGenerator generator) {"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,127,his.binCount = binCount;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,128,andomData = new RandomDataImpl(generator);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,129,inStats = new ArrayList<SummaryStatistics>();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,133, Creates a new EmpiricalDistribution with default bin count using the
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,134, provided {@link RandomGenerator} as the source of random data.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,136," @param generator random data generator (may be null, resulting in default JDK generator)"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,137, @since 3.0
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,139,ublic EmpiricalDistributionImpl(RandomGenerator generator) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,140,"his(DEFAULT_BIN_COUNT, generator);"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,144, Creates a new EmpiricalDistribution with the specified bin count using the
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,145, provided {@link RandomDataImpl} instance as the source of random data.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,147, @param binCount number of bins
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,148," @param randomData random data generator (may be null, resulting in default JDK generator)"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,149, @since 3.0
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,151,"ublic EmpiricalDistributionImpl(int binCount, RandomDataImpl randomData) {"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,152,his.binCount = binCount;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,153,his.randomData = randomData;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,154,inStats = new ArrayList<SummaryStatistics>();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,158, Creates a new EmpiricalDistribution with default bin count using the
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,159, provided {@link RandomDataImpl} as the source of random data.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,161," @param randomData random data generator (may be null, resulting in default JDK generator)"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,162, @since 3.0
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,164,ublic EmpiricalDistributionImpl(RandomDataImpl randomData) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,165,"his(DEFAULT_BIN_COUNT, randomData);"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,169, Computes the empirical distribution from the provided
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,170, array of numbers.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,172, @param in the input data array
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,173, @exception NullArgumentException if in is null
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,175,ublic void load(double[] in) throws NullArgumentException {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,176,ataAdapter da = new ArrayDataAdapter(in);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,177,ry {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,178,a.computeStats();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,179,illBinStats(in);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,180, catch (IOException e) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,181,"hrow new MathIllegalStateException(e, LocalizedFormats.SIMPLE_MESSAGE, e.getLocalizedMessage());"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,183,oaded = true;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,188, Computes the empirical distribution using data read from a URL.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,189, @param url  url of the input file
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,191, @throws IOException if an IO error occurs
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,192, @throws NullArgumentException if url is null
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,194,"ublic void load(URL url) throws IOException, NullArgumentException {"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,195,athUtils.checkNotNull(url);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,196,ufferedReader in =
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,197,ew BufferedReader(new InputStreamReader(url.openStream()));
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,198,ry {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,199,ataAdapter da = new StreamDataAdapter(in);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,200,a.computeStats();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,201,f (sampleStats.getN() == 0) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,202,"hrow new ZeroException(LocalizedFormats.URL_CONTAINS_NO_DATA, url);"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,204,n = new BufferedReader(new InputStreamReader(url.openStream()));
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,205,illBinStats(in);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,206,oaded = true;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,207, finally {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,208,ry {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,209,n.close();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,210, catch (IOException ex) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,211,/ ignore
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,217, Computes the empirical distribution from the input file.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,219, @param file the input file
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,220, @throws IOException if an IO error occurs
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,221, @throws NullArgumentException if file is null
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,223,"ublic void load(File file) throws IOException, NullArgumentException {"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,224,athUtils.checkNotNull(file);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,225,ufferedReader in = new BufferedReader(new FileReader(file));
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,226,ry {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,227,ataAdapter da = new StreamDataAdapter(in);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,228,a.computeStats();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,229,n = new BufferedReader(new FileReader(file));
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,230,illBinStats(in);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,231,oaded = true;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,232, finally {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,233,ry {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,234,n.close();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,235, catch (IOException ex) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,236,/ ignore
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,242, Provides methods for computing <code>sampleStats</code> and
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,243, <code>beanStats</code> abstracting the source of data.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,245,rivate abstract class DataAdapter{
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,248, Compute bin stats.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,250, @throws IOException  if an error occurs computing bin stats
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,252,ublic abstract void computeBinStats() throws IOException;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,255, Compute sample statistics.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,257, @throws IOException if an error occurs computing sample stats
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,259,ublic abstract void computeStats() throws IOException;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,264, Factory of <code>DataAdapter</code> objects. For every supported source
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,265," of data (array of doubles, file, etc.) an instance of the proper object"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,266, is returned.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,268,rivate class DataAdapterFactory{
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,270, Creates a DataAdapter from a data object
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,272, @param in object providing access to the data
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,273, @return DataAdapter instance
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,275,ublic DataAdapter getAdapter(Object in) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,276,f (in instanceof BufferedReader) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,277,ufferedReader inputStream = (BufferedReader) in;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,278,eturn new StreamDataAdapter(inputStream);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,279, else if (in instanceof double[]) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,280,ouble[] inputArray = (double[]) in;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,281,eturn new ArrayDataAdapter(inputArray);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,282, else {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,283,hrow new MathIllegalArgumentException(
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,284,"ocalizedFormats.INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE,"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,285,"n.getClass().getName(),"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,286,"ufferedReader.class.getName(), double[].class.getName());"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,291, <code>DataAdapter</code> for data provided through some input stream
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,293,rivate class StreamDataAdapter extends DataAdapter{
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,295,** Input stream providing access to the data */
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,296,rivate BufferedReader inputStream;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,299, Create a StreamDataAdapter from a BufferedReader
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,301, @param in BufferedReader input stream
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,303,ublic StreamDataAdapter(BufferedReader in){
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,304,uper();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,305,nputStream = in;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,308,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,309,Override
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,310,ublic void computeBinStats() throws IOException {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,311,tring str = null;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,312,ouble val = 0.0d;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,313,hile ((str = inputStream.readLine()) != null) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,314,al = Double.parseDouble(str);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,315,ummaryStatistics stats = binStats.get(findBin(val));
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,316,tats.addValue(val);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,319,nputStream.close();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,320,nputStream = null;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,323,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,324,Override
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,325,ublic void computeStats() throws IOException {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,326,tring str = null;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,327,ouble val = 0.0;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,328,ampleStats = new SummaryStatistics();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,329,hile ((str = inputStream.readLine()) != null) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,330,al = Double.valueOf(str).doubleValue();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,331,ampleStats.addValue(val);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,333,nputStream.close();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,334,nputStream = null;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,339, <code>DataAdapter</code> for data provided as array of doubles.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,341,rivate class ArrayDataAdapter extends DataAdapter {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,343,** Array of input  data values */
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,344,rivate double[] inputArray;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,347, Construct an ArrayDataAdapter from a double[] array
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,349, @param in double[] array holding the data
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,350, @throws NullArgumentException if in is null
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,352,ublic ArrayDataAdapter(double[] in) throws NullArgumentException {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,353,uper();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,354,athUtils.checkNotNull(in);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,355,nputArray = in;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,358,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,359,Override
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,360,ublic void computeStats() throws IOException {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,361,ampleStats = new SummaryStatistics();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,362,or (int i = 0; i < inputArray.length; i++) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,363,ampleStats.addValue(inputArray[i]);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,367,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,368,Override
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,369,ublic void computeBinStats() throws IOException {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,370,or (int i = 0; i < inputArray.length; i++) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,371,ummaryStatistics stats =
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,372,inStats.get(findBin(inputArray[i]));
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,373,tats.addValue(inputArray[i]);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,379, Fills binStats array (second pass through data file).
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,381, @param in object providing access to the data
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,382, @throws IOException  if an IO error occurs
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,384,rivate void fillBinStats(Object in) throws IOException {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,385,/ Set up grid
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,386,in = sampleStats.getMin();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,387,ax = sampleStats.getMax();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,388,elta = (max - min)/(Double.valueOf(binCount)).doubleValue();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,390,/ Initialize binStats ArrayList
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,391,f (!binStats.isEmpty()) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,392,inStats.clear();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,394,or (int i = 0; i < binCount; i++) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,395,ummaryStatistics stats = new SummaryStatistics();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,396,"inStats.add(i,stats);"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,399,/ Filling data in binStats Array
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,400,ataAdapterFactory aFactory = new DataAdapterFactory();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,401,ataAdapter da = aFactory.getAdapter(in);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,402,a.computeBinStats();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,404,/ Assign upperBounds based on bin counts
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,405,pperBounds = new double[binCount];
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,406,pperBounds[0] =
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,407,(double) binStats.get(0).getN()) / (double) sampleStats.getN();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,408,or (int i = 1; i < binCount-1; i++) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,409,pperBounds[i] = upperBounds[i-1] +
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,410,(double) binStats.get(i).getN()) / (double) sampleStats.getN();
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,412,pperBounds[binCount-1] = 1.0d;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,416, Returns the index of the bin to which the given value belongs
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,418, @param value  the value whose bin we are trying to find
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,419, @return the index of the bin containing the value
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,421,rivate int findBin(double value) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,422,eturn FastMath.min(
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,423,"astMath.max((int) FastMath.ceil((value- min) / delta) - 1, 0),"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,424,inCount - 1);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,428, Generates a random value from this distribution.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,430, @return the random value.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,431, @throws MathIllegalStateException if the distribution has not been loaded
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,433,ublic double getNextValue() throws MathIllegalStateException {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,435,f (!loaded) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,436,hrow new MathIllegalStateException(LocalizedFormats.DISTRIBUTION_NOT_LOADED);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,439,"/ Start with a uniformly distributed random number in (0,1)"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,440,"ouble x = randomData.nextUniform(0,1);"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,442,/ Use this to select the bin and generate a Gaussian within the bin
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,443,or (int i = 0; i < binCount; i++) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,444,f (x <= upperBounds[i]) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,445,ummaryStatistics stats = binStats.get(i);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,446,f (stats.getN() > 0) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,447,f (stats.getStandardDeviation() > 0) {  // more than one obs
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,448,eturn randomData.nextGaussian
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,449,"stats.getMean(),stats.getStandardDeviation());"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,450, else {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,451,eturn stats.getMean(); // only one obs in bin
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,456,hrow new MathIllegalStateException(LocalizedFormats.NO_BIN_SELECTED);
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,460, Returns a {@link StatisticalSummary} describing this distribution.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,461, <strong>Preconditions:</strong><ul>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,462, <li>the distribution must be loaded before invoking this method</li></ul>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,464, @return the sample statistics
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,465, @throws IllegalStateException if the distribution has not been loaded
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,467,ublic StatisticalSummary getSampleStats() {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,468,eturn sampleStats;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,472, Returns the number of bins.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,474, @return the number of bins.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,476,ublic int getBinCount() {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,477,eturn binCount;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,481, Returns a List of {@link SummaryStatistics} instances containing
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,482, statistics describing the values in each of the bins.  The list is
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,483, indexed on the bin number.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,485, @return List of bin statistics.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,487,ublic List<SummaryStatistics> getBinStats() {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,488,eturn binStats;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,492, <p>Returns a fresh copy of the array of upper bounds for the bins.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,493, Bins are: <br/>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,494," [min,upperBounds[0]],(upperBounds[0],upperBounds[1]],...,"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,495,"  (upperBounds[binCount-2], upperBounds[binCount-1] = max].</p>"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,497," <p>Note: In versions 1.0-2.0 of commons-math, this method"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,498, incorrectly returned the array of probability generator upper
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,499, bounds now returned by {@link #getGeneratorUpperBounds()}.</p>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,501, @return array of bin upper bounds
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,502, @since 2.1
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,504,ublic double[] getUpperBounds() {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,505,ouble[] binUpperBounds = new double[binCount];
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,506,inUpperBounds[0] = min + delta;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,507,or (int i = 1; i < binCount - 1; i++) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,508,inUpperBounds[i] = binUpperBounds[i-1] + delta;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,510,inUpperBounds[binCount - 1] = max;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,511,eturn binUpperBounds;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,515, <p>Returns a fresh copy of the array of upper bounds of the subintervals
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,516," of [0,1] used in generating data from the empirical distribution."
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,517, Subintervals correspond to bins with lengths proportional to bin counts.</p>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,519," <p>In versions 1.0-2.0 of commons-math, this array was (incorrectly) returned"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,520, by {@link #getUpperBounds()}.</p>
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,522, @since 2.1
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,523, @return array of upper bounds of subintervals used in data generation
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,525,ublic double[] getGeneratorUpperBounds() {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,526,nt len = upperBounds.length;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,527,ouble[] out = new double[len];
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,528,"ystem.arraycopy(upperBounds, 0, out, 0, len);"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,529,eturn out;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,533, Property indicating whether or not the distribution has been loaded.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,535, @return true if the distribution has been loaded
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,537,ublic boolean isLoaded() {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,538,eturn loaded;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,542, Reseeds the random number generator used by {@link #getNextValue()}.
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,544, @param seed random generator seed
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,545, @since 3.0
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,547,ublic void reSeed(long seed) {
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,548,andomData.reSeed(seed);
False,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,173,omputeDistribution(EmpiricalDistributionImpl.DEFAULT_BIN_COUNT);
True,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,173,computeDistribution(EmpiricalDistribution.DEFAULT_BIN_COUNT);
False,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,192,"mpiricalDistribution = new EmpiricalDistributionImpl(binCount, randomData);"
True,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,192,"empiricalDistribution = new EmpiricalDistribution(binCount, randomData);"
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,41,rotected EmpiricalDistributionImpl empiricalDistribution = null;
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,42,rotected EmpiricalDistributionImpl empiricalDistribution2 = null;
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,41,protected EmpiricalDistribution empiricalDistribution = null;
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,42,protected EmpiricalDistribution empiricalDistribution2 = null;
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,49,mpiricalDistribution = new EmpiricalDistributionImpl(100);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,49,empiricalDistribution = new EmpiricalDistribution(100);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,52,mpiricalDistribution2 = new EmpiricalDistributionImpl(100);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,52,empiricalDistribution2 = new EmpiricalDistribution(100);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,145,mpiricalDistribution = new EmpiricalDistributionImpl(1001);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,145,empiricalDistribution = new EmpiricalDistribution(1001);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,147,mpiricalDistribution2 = new EmpiricalDistributionImpl(1001);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,147,empiricalDistribution2 = new EmpiricalDistribution(1001);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,156,mpiricalDistribution = new EmpiricalDistributionImpl(1);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,156,empiricalDistribution = new EmpiricalDistribution(1);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,159,mpiricalDistribution2 = new EmpiricalDistributionImpl(1);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,159,empiricalDistribution2 = new EmpiricalDistribution(1);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,169,ew EmpiricalDistributionImpl().load(x);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,169,new EmpiricalDistribution().load(x);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,175,mpiricalDistribution dist = new EmpiricalDistributionImpl();
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,175,EmpiricalDistribution dist = new EmpiricalDistribution();
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,187,ew EmpiricalDistributionImpl().load((double[]) null);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,187,new EmpiricalDistribution().load((double[]) null);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,192,ew EmpiricalDistributionImpl().load((URL) null);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,192,new EmpiricalDistribution().load((URL) null);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,197,ew EmpiricalDistributionImpl().load((File) null);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,197,new EmpiricalDistribution().load((File) null);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,206,mpiricalDistributionImpl dist = new EmpiricalDistributionImpl(5);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,206,EmpiricalDistribution dist = new EmpiricalDistribution(5);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,220,"mpiricalDistribution dist = new EmpiricalDistributionImpl(5, generator);"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,220,"EmpiricalDistribution dist = new EmpiricalDistribution(5, generator);"
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,227,"ist = new EmpiricalDistributionImpl(5, (RandomGenerator) null);"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,227,"dist = new EmpiricalDistribution(5, (RandomGenerator) null);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,20,import org.apache.commons.math3.exception.NumberIsTooLargeException;
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,21,import org.apache.commons.math3.exception.NumberIsTooSmallException;
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,54,@Test
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,55,public void testBoundaries() {
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,56,final double lower = -1.0;
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,57,final double upper = +1.0;
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,58,UnivariateFunction f = new UnivariateFunction() {
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,59,public double value(double x) {
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,60,if (x < lower) {
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,61,"throw new NumberIsTooSmallException(x, lower, true);"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,62,} else if (x > upper) {
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,63,"throw new NumberIsTooLargeException(x, upper, true);"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,64,} else {
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,65,return x;
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,69,"UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,70,"Assert.assertEquals(lower,"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,71,"optimizer.optimize(100, f, GoalType.MINIMIZE, lower, upper).getPoint(),"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,72,1.0e-8);
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,73,"Assert.assertEquals(upper,"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,74,"optimizer.optimize(100, f, GoalType.MAXIMIZE, lower, upper).getPoint(),"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,75,1.0e-8);

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,17,package org.apache.commons.math.analysis.solvers;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,20,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,21,import org.apache.commons.math.exception.MathInternalError;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,22,import org.apache.commons.math.exception.NoBracketingException;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,23,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,24,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,25,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,28,* This class implements a modification of the <a
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,29,"* href=""http://mathworld.wolfram.com/BrentsMethod.html""> Brent algorithm</a>."
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,30,* <p>
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,31,* The changes with respect to the original Brent algorithm are:
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,32,* <ul>
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,33,*   <li>the returned value is chosen in the current interval according
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,34,"*   to user specified {@link AllowedSolutions},</li>"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,35,*   <li>the maximal order for the invert polynomial root search is
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,36,*   user-specified instead of being invert quadratic only</li>
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,37,* </ul>
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,38,* </p>
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,39,* The given interval must bracket the root.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,41,* @version $Id$
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,43,public class BracketingNthOrderBrentSolver
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,44,extends AbstractUnivariateRealSolver
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,45,implements BracketedUnivariateRealSolver<UnivariateRealFunction> {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,47,/** Default absolute accuracy. */
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,48,private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,50,/** Default maximal order. */
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,51,private static final int DEFAULT_MAXIMAL_ORDER = 5;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,53,/** Maximal aging triggering an attempt to balance the bracketing interval. */
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,54,private static final int MAXIMAL_AGING = 2;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,56,/** Reduction factor for attempts to balance the bracketing interval. */
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,57,private static final double REDUCTION_FACTOR = 1.0 / 16.0;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,59,/** Maximal order. */
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,60,private final int maximalOrder;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,62,/** The kinds of solutions that the algorithm may accept. */
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,63,private AllowedSolutions allowed;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,66,* Construct a solver with default accuracy and maximal order (1e-6 and 5 respectively)
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,68,public BracketingNthOrderBrentSolver() {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,69,"this(DEFAULT_ABSOLUTE_ACCURACY, DEFAULT_MAXIMAL_ORDER);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,73,* Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,75,* @param absoluteAccuracy Absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,76,* @param maximalOrder maximal order.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,77,* @exception NumberIsTooSmallException if maximal order is lower than 2
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,79,"public BracketingNthOrderBrentSolver(final double absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,80,final int maximalOrder)
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,81,throws NumberIsTooSmallException {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,82,super(absoluteAccuracy);
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,83,if (maximalOrder < 2) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,84,"throw new NumberIsTooSmallException(maximalOrder, 2, true);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,86,this.maximalOrder = maximalOrder;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,87,this.allowed = AllowedSolutions.ANY_SIDE;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,91,* Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,93,* @param relativeAccuracy Relative accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,94,* @param absoluteAccuracy Absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,95,* @param maximalOrder maximal order.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,96,* @exception NumberIsTooSmallException if maximal order is lower than 2
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,98,"public BracketingNthOrderBrentSolver(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,99,"final double absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,100,final int maximalOrder)
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,101,throws NumberIsTooSmallException {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,102,"super(relativeAccuracy, absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,103,if (maximalOrder < 2) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,104,"throw new NumberIsTooSmallException(maximalOrder, 2, true);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,106,this.maximalOrder = maximalOrder;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,107,this.allowed = AllowedSolutions.ANY_SIDE;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,111,* Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,113,* @param relativeAccuracy Relative accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,114,* @param absoluteAccuracy Absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,115,* @param functionValueAccuracy Function value accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,116,* @param maximalOrder maximal order.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,117,* @exception NumberIsTooSmallException if maximal order is lower than 2
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,119,"public BracketingNthOrderBrentSolver(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,120,"final double absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,121,"final double functionValueAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,122,final int maximalOrder)
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,123,throws NumberIsTooSmallException {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,124,"super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,125,if (maximalOrder < 2) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,126,"throw new NumberIsTooSmallException(maximalOrder, 2, true);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,128,this.maximalOrder = maximalOrder;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,129,this.allowed = AllowedSolutions.ANY_SIDE;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,132,/** Get the maximal order.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,133,* @return maximal order
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,135,public int getMaximalOrder() {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,136,return maximalOrder;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,140,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,142,@Override
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,143,protected double doSolve() {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,145,// prepare arrays with the first points
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,146,final double[] x = new double[maximalOrder + 1];
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,147,final double[] y = new double[maximalOrder + 1];
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,148,x[0] = getMin();
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,149,x[1] = getStartValue();
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,150,x[2] = getMax();
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,151,"verifySequence(x[0], x[1], x[2]);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,153,// evaluate initial guess
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,154,y[1] = computeObjectiveValue(x[1]);
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,155,"if (MathUtils.equals(y[1], 0.0, 1)) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,156,// return the initial guess if it is a perfect root.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,157,return x[1];
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,160,// evaluate first  endpoint
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,161,y[0] = computeObjectiveValue(x[0]);
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,162,"if (MathUtils.equals(y[0], 0.0, 1)) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,163,// return the first endpoint if it is a perfect root.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,164,return x[0];
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,167,int nbPoints;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,168,int signChangeIndex;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,169,if (y[0] * y[1] < 0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,171,// reduce interval if it brackets the root
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,172,nbPoints        = 2;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,173,signChangeIndex = 1;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,175,} else {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,177,// evaluate second endpoint
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,178,y[2] = computeObjectiveValue(x[2]);
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,179,"if (MathUtils.equals(y[2], 0.0, 1)) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,180,// return the second endpoint if it is a perfect root.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,181,return x[2];
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,184,if (y[1] * y[2] < 0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,185,// use all computed point as a start sampling array for solving
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,186,nbPoints        = 3;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,187,signChangeIndex = 2;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,188,} else {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,189,"throw new NoBracketingException(x[0], x[2], y[0], y[2]);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,194,// prepare a work array for inverse polynomial interpolation
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,195,final double[] tmpX = new double[x.length];
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,197,// current tightest bracketing of the root
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,198,double xA    = x[signChangeIndex - 1];
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,199,double yA    = y[signChangeIndex - 1];
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,200,double absYA = FastMath.abs(yA);
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,201,int agingA   = 0;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,202,double xB    = x[signChangeIndex];
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,203,double yB    = y[signChangeIndex];
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,204,double absYB = FastMath.abs(yB);
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,205,int agingB   = 0;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,207,// search loop
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,208,while (true) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,210,// check convergence of bracketing interval
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,211,final double xTol = getAbsoluteAccuracy() +
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,212,"getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,213,"if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,214,switch (allowed) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,215,case ANY_SIDE :
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,216,return absYA < absYB ? xA : xB;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,217,case LEFT_SIDE :
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,218,return xA;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,219,case RIGHT_SIDE :
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,220,return xB;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,221,case BELOW_SIDE :
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,222,return (yA <= 0) ? xA : xB;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,223,case ABOVE_SIDE :
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,224,return (yA <  0) ? xB : xA;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,225,default :
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,226,// this should never happen
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,227,throw new MathInternalError(null);
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,231,// target for the next evaluation point
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,232,double targetY;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,233,if (agingA >= MAXIMAL_AGING) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,234,"// we keep updating the high bracket, try to compensate this"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,235,targetY = -REDUCTION_FACTOR * yB;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,236,} else if (agingB >= MAXIMAL_AGING) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,237,"// we keep updating the low bracket, try to compensate this"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,238,targetY = -REDUCTION_FACTOR * yA;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,239,} else {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,240,"// bracketing is balanced, try to find the root itself"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,241,targetY = 0;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,244,"// make a few attempts to guess a root,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,245,double nextX;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,246,int start = 0;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,247,int end   = nbPoints;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,248,do {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,250,"// guess a value for current target, using inverse polynomial interpolation"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,251,"System.arraycopy(x, start, tmpX, start, end - start);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,252,"nextX = guessX(targetY, tmpX, y, start, end);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,254,if (!((nextX > xA) && (nextX < xB))) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,255,// the guessed root is not strictly inside of the tightest bracketing interval
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,257,// the guessed root is either not strictly inside the interval or it
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,258,// is a NaN (which occurs when some sampling points share the same y)
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,259,// we try again with a lower interpolation order
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,260,if (signChangeIndex - start >= end - signChangeIndex) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,261,"// we have more points before the sign change, drop the lowest point"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,262,++start;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,263,} else {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,264,"// we have more points after sign change, drop the highest point"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,265,--end;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,268,// we need to do one more attempt
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,269,nextX = Double.NaN;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,273,} while (Double.isNaN(nextX) && (end - start > 1));
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,275,if (Double.isNaN(nextX)) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,276,// fall back to bisection
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,277,nextX = xA + 0.5 * (xB - xA);
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,278,start = signChangeIndex - 1;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,279,end   = signChangeIndex;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,282,// evaluate the function at the guessed root
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,283,final double nextY = computeObjectiveValue(nextX);
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,284,"if (MathUtils.equals(nextY, 0.0, 1)) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,285,"// we have found an exact root, since it is not an approximation"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,286,// we don't need to bother about the allowed solutions setting
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,287,return nextX;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,290,if ((nbPoints > 2) && (end - start != nbPoints)) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,292,"// we have been forced to ignore some points to keep bracketing,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,293,"// they are probably too far from the root, drop them from now on"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,294,nbPoints = end - start;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,295,"System.arraycopy(x, start, x, 0, nbPoints);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,296,"System.arraycopy(y, start, y, 0, nbPoints);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,297,signChangeIndex -= start;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,299,} else  if (nbPoints == x.length) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,301,// we have to drop one point in order to insert the new one
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,302,nbPoints--;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,304,// keep the tightest bracketing interval as centered as possible
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,305,if (signChangeIndex >= (x.length + 1) / 2) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,306,"// we drop the lowest point, we have to shift the arrays and the index"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,307,"System.arraycopy(x, 1, x, 0, nbPoints);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,308,"System.arraycopy(y, 1, y, 0, nbPoints);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,309,--signChangeIndex;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,314,// insert the last computed point
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,315,"//(by construction, we know it lies inside the tightest bracketing interval)"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,316,"System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,317,x[signChangeIndex] = nextX;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,318,"System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,319,y[signChangeIndex] = nextY;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,320,++nbPoints;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,322,// update the bracketing interval
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,323,if (nextY * yA <= 0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,324,// the sign change occurs before the inserted point
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,325,xB = nextX;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,326,yB = nextY;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,327,absYB = FastMath.abs(yB);
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,328,++agingA;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,329,agingB = 0;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,330,} else {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,331,// the sign change occurs after the inserted point
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,332,xA = nextX;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,333,yA = nextY;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,334,absYA = FastMath.abs(yA);
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,335,agingA = 0;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,336,++agingB;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,338,// update the sign change index
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,339,signChangeIndex++;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,347,/** Guess an x value by n<sup>th</sup> order inverse polynomial interpolation.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,348,* <p>
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,349,"* The x value is guessed by evaluating polynomial Q(y) at y = targetY, where Q"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,350,"* is built such that for all considered points (x<sub>i</sub>, y<sub>i</sub>),"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,351,* Q(y<sub>i</sub>) = x<sub>i</sub>.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,352,* </p>
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,353,* @param targetY target value for y
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,354,"* @param x reference points abscissas for interpolation,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,355,* note that this array <em>is</em> modified during computation
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,356,* @param y reference points ordinates for interpolation
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,357,* @param start start index of the points to consider (inclusive)
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,358,* @param end end index of the points to consider (exclusive)
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,359,* @return guessed root (will be a NaN if two points share the same y)
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,361,"private double guessX(final double targetY, final double[] x, final double[] y,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,362,"final int start, final int end) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,364,// compute Q Newton coefficients by divided differences
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,365,for (int i = start; i < end - 1; ++i) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,366,final int delta = i + 1 - start;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,367,for (int j = end - 1; j > i; --j) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,368,x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,372,// evaluate Q(targetY)
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,373,double x0 = 0;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,374,for (int j = end - 1; j >= start; --j) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,375,x0 = x[j] + x0 * (targetY - y[j]);
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,378,return x0;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,382,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,383,"public double solve(int maxEval, UnivariateRealFunction f, double min,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,384,"double max, AllowedSolutions allowedSolutions) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,385,this.allowed = allowedSolutions;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,386,"return super.solve(maxEval, f, min, max);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,389,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,390,"public double solve(int maxEval, UnivariateRealFunction f, double min,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,391,"double max, double startValue,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,392,AllowedSolutions allowedSolutions) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,393,this.allowed = allowedSolutions;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,394,"return super.solve(maxEval, f, min, max, startValue);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,18,package org.apache.commons.math.analysis.solvers;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,20,import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,21,import org.apache.commons.math.analysis.QuinticFunction;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,22,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,23,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,24,import org.apache.commons.math.exception.TooManyEvaluationsException;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,25,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,26,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,27,import org.junit.Test;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,30,* Test case for {@link BracketingNthOrderBrentSolver bracketing n<sup>th</sup> order Brent} solver.
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,32,* @version $Id$
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,34,public final class BracketingNthOrderBrentSolverTest extends BaseSecantSolverAbstractTest {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,35,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,36,protected UnivariateRealSolver getSolver() {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,37,return new BracketingNthOrderBrentSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,40,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,41,protected int[] getQuinticEvalCounts() {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,42,"return new int[] {1, 3, 8, 1, 9, 4, 8, 1, 12, 1, 14};"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,45,@Test(expected=NumberIsTooSmallException.class)
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,46,public void testInsufficientOrder1() {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,47,"new BracketingNthOrderBrentSolver(1.0e-10, 1);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,50,@Test(expected=NumberIsTooSmallException.class)
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,51,public void testInsufficientOrder2() {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,52,"new BracketingNthOrderBrentSolver(1.0e-10, 1.0e-10, 1);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,55,@Test(expected=NumberIsTooSmallException.class)
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,56,public void testInsufficientOrder3() {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,57,"new BracketingNthOrderBrentSolver(1.0e-10, 1.0e-10, 1.0e-10, 1);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,60,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,61,public void testConstructorsOK() {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,62,"Assert.assertEquals(2, new BracketingNthOrderBrentSolver(1.0e-10, 2).getMaximalOrder());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,63,"Assert.assertEquals(2, new BracketingNthOrderBrentSolver(1.0e-10, 1.0e-10, 2).getMaximalOrder());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,64,"Assert.assertEquals(2, new BracketingNthOrderBrentSolver(1.0e-10, 1.0e-10, 1.0e-10, 2).getMaximalOrder());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,67,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,68,public void testConvergenceOnFunctionAccuracy() {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,69,BracketingNthOrderBrentSolver solver =
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,70,"new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 0.001, 3);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,71,QuinticFunction f = new QuinticFunction();
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,72,"double result = solver.solve(20, f, 0.2, 0.9, 0.4, AllowedSolutions.BELOW_SIDE);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,73,"Assert.assertEquals(0, f.value(result), solver.getFunctionValueAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,74,Assert.assertTrue(f.value(result) <= 0);
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,75,Assert.assertTrue(result - 0.5 > solver.getAbsoluteAccuracy());
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,76,"result = solver.solve(20, f, -0.9, -0.2,  -0.4, AllowedSolutions.ABOVE_SIDE);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,77,"Assert.assertEquals(0, f.value(result), solver.getFunctionValueAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,78,Assert.assertTrue(f.value(result) >= 0);
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,79,Assert.assertTrue(result + 0.5 < -solver.getAbsoluteAccuracy());
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,82,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,83,public void testFasterThanNewton() {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,84,// the following test functions come from Beny Neta's paper:
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,85,"// ""Several New Methods for solving Equations"""
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,86,// intern J. Computer Math Vol 23 pp 265-282
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,87,// available here: http://www.math.nps.navy.mil/~bneta/SeveralNewMethods.PDF
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,88,// the reference roots have been computed by the Dfp solver to more than
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,89,// 80 digits and checked with emacs (only the first 20 digits are reproduced here)
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,90,"compare(new TestFunction(0.0, -2, 2) {"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,91,public double value(double x)      { return FastMath.sin(x) - 0.5 * x; }
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,92,public double derivative(double x) { return FastMath.cos(x) - 0.5; }
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,94,"compare(new TestFunction(6.3087771299726890947, -5, 10) {"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,95,"public double value(double x)      { return FastMath.pow(x, 5) + x - 10000; }"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,96,"public double derivative(double x) { return 5 * FastMath.pow(x, 4) + 1; }"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,98,"compare(new TestFunction(9.6335955628326951924, 0.001, 10) {"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,99,public double value(double x)      { return FastMath.sqrt(x) - 1 / x - 3; }
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,100,public double derivative(double x) { return 0.5 / FastMath.sqrt(x) + 1 / (x * x); }
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,102,"compare(new TestFunction(2.8424389537844470678, -5, 5) {"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,103,public double value(double x)      { return FastMath.exp(x) + x - 20; }
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,104,public double derivative(double x) { return FastMath.exp(x) + 1; }
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,106,"compare(new TestFunction(8.3094326942315717953, 0.001, 10) {"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,107,public double value(double x)      { return FastMath.log(x) + FastMath.sqrt(x) - 5; }
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,108,public double derivative(double x) { return 1 / x + 0.5 / FastMath.sqrt(x); }
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,110,"compare(new TestFunction(1.4655712318767680266, -0.5, 1.5) {"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,111,public double value(double x)      { return (x - 1) * x * x - 1; }
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,112,public double derivative(double x) { return (3 * x - 2) * x; }
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,117,private void compare(TestFunction f) {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,118,"compare(f, f.getRoot(), f.getMin(), f.getMax());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,121,"private void compare(DifferentiableUnivariateRealFunction f,"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,122,"double root, double min, double max) {"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,123,NewtonSolver newton = new NewtonSolver(1.0e-12);
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,124,BracketingNthOrderBrentSolver bracketing =
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,125,"new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-12, 1.0e-18, 5);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,126,double resultN;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,127,try {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,128,"resultN = newton.solve(100, f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,129,} catch (TooManyEvaluationsException tmee) {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,130,resultN = Double.NaN;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,132,double resultB;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,133,try {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,134,"resultB = bracketing.solve(100, f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,135,} catch (TooManyEvaluationsException tmee) {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,136,resultB = Double.NaN;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,138,"Assert.assertEquals(root, resultN, newton.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,139,"Assert.assertEquals(root, resultB, bracketing.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,140,Assert.assertTrue(bracketing.getEvaluations() < newton.getEvaluations());
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,143,private static abstract class TestFunction implements DifferentiableUnivariateRealFunction {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,145,private final double root;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,146,private final double min;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,147,private final double max;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,149,"protected TestFunction(final double root, final double min, final double max) {"
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,150,this.root = root;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,151,this.min  = min;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,152,this.max  = max;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,155,public double getRoot() {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,156,return root;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,159,public double getMin() {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,160,return min;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,163,public double getMax() {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,164,return max;
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,167,public abstract double value(double x);
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,169,public abstract double derivative(double x);
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,171,public UnivariateRealFunction derivative() {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,172,return new UnivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,173,public double value(double x) {
True,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,174,return derivative(x);

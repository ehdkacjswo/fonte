is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,457,"ublic static Vector3D crossProduct(Vector3D v1, Vector3D v2) {"
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,458,"eturn new Vector3D(v1.y * v2.z - v1.z * v2.y,"
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,459,"1.z * v2.x - v1.x * v2.z,"
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,460,1.x * v2.y - v1.y * v2.x);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,457,"public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {"
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,459,final double n1 = v1.getNormSq();
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,460,final double n2 = v2.getNormSq();
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,461,if ((n1 * n2) < MathUtils.SAFE_MIN) {
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,462,return ZERO;
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,465,"// rescale both vectors without losing precision,"
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,466,// to ensure their norm are the same order of magnitude
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,467,final int deltaExp = (FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4;
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,468,"final double x1    = FastMath.scalb(v1.x, -deltaExp);"
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,469,"final double y1    = FastMath.scalb(v1.y, -deltaExp);"
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,470,"final double z1    = FastMath.scalb(v1.z, -deltaExp);"
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,471,"final double x2    = FastMath.scalb(v2.x,  deltaExp);"
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,472,"final double y2    = FastMath.scalb(v2.y,  deltaExp);"
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,473,"final double z2    = FastMath.scalb(v2.z,  deltaExp);"
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,475,"// we reduce cancellation errors by preconditioning,"
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,476,// we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,477,// v3 without loss of precision. See Kahan lecture
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,478,"// ""Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"""
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,479,// available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,481,// compute rho as an 8 bits approximation of v1.v2 / v2.v2
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,482,"final double ratio = (x1 * x2 + y1 * y2 + z1 * z2) / FastMath.scalb(n2, 2 * deltaExp);"
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,483,final double rho   = FastMath.rint(256 * ratio) / 256;
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,485,final double x3 = x1 - rho * x2;
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,486,final double y3 = y1 - rho * y2;
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,487,final double z3 = z1 - rho * z2;
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,489,// compute cross product from v3 and v2 instead of v1 and v2
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,490,"return new Vector3D(y3 * z2 - z3 * y2, z3 * x2 - x3 * z2, x3 * y2 - y3 * x2);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,155,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,156,public void testCrossProductCancellation() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,157,"Vector3D v1 = new Vector3D(9070467121.0, 4535233560.0, 1);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,158,"Vector3D v2 = new Vector3D(9070467123.0, 4535233561.0, 1);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,159,"checkVector(Vector3D.crossProduct(v1, v2), -1, 2, 1);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,161,"double scale    = FastMath.scalb(1.0, 100);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,162,"Vector3D big1   = new Vector3D(scale, v1);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,163,"Vector3D small2 = new Vector3D(1 / scale, v2);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,164,"checkVector(Vector3D.crossProduct(big1, small2), -1, 2, 1);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,92,* @since 1.2
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,93,ublic abstract PascalDistribution createPascalDistribution(
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,94,"nt numberOfSuccesses, double probabilityOfSuccess);"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,94,public PascalDistribution createPascalDistribution(
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,95,"int numberOfSuccesses, double probabilityOfSuccess) {"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,96,"return new PascalDistributionImpl(numberOfSuccesses, probabilityOfSuccess);"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,159, Create a Pascal distribution with the given number of successes and
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,160, probability of success.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,162, @param numberOfSuccesses the number of successes.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,163, @param probabilityOfSuccess the probability of success
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,164, @return a new Pascal distribution
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,166,"ublic PascalDistribution createPascalDistribution(int numberOfSuccesses, double probabilityOfSuccess) {"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,167,"eturn new PascalDistributionImpl(numberOfSuccesses, probabilityOfSuccess);"
False,src/java/org/apache/commons/math/distribution/PascalDistribution.java,src/java/org/apache/commons/math/distribution/PascalDistribution.java,20, The Pascal Distribution.
True,src/java/org/apache/commons/math/distribution/PascalDistribution.java,src/java/org/apache/commons/math/distribution/PascalDistribution.java,20,* The Pascal distribution.  The Pascal distribution is a special case of the
True,src/java/org/apache/commons/math/distribution/PascalDistribution.java,src/java/org/apache/commons/math/distribution/PascalDistribution.java,21,* Negative Binomial distribution where the number of successes parameter is an
True,src/java/org/apache/commons/math/distribution/PascalDistribution.java,src/java/org/apache/commons/math/distribution/PascalDistribution.java,22,* integer.
True,src/java/org/apache/commons/math/distribution/PascalDistribution.java,src/java/org/apache/commons/math/distribution/PascalDistribution.java,24,* There are various ways to express the probability mass and distribution
True,src/java/org/apache/commons/math/distribution/PascalDistribution.java,src/java/org/apache/commons/math/distribution/PascalDistribution.java,25,* functions for the Pascal distribution.  The convention employed by the
True,src/java/org/apache/commons/math/distribution/PascalDistribution.java,src/java/org/apache/commons/math/distribution/PascalDistribution.java,26,* library is to express these functions in terms of the number of failures in
True,src/java/org/apache/commons/math/distribution/PascalDistribution.java,src/java/org/apache/commons/math/distribution/PascalDistribution.java,27,* a Bernoulli experiment [2].
False,src/java/org/apache/commons/math/distribution/PascalDistribution.java,src/java/org/apache/commons/math/distribution/PascalDistribution.java,27, <ul>
True,src/java/org/apache/commons/math/distribution/PascalDistribution.java,src/java/org/apache/commons/math/distribution/PascalDistribution.java,34,* <ol>
True,src/java/org/apache/commons/math/distribution/PascalDistribution.java,src/java/org/apache/commons/math/distribution/PascalDistribution.java,37,"* <oi><a href=""http://en.wikipedia.org/wiki/Negative_binomial_distribution#Waiting_time_in_a_Bernoulli_process"">Waiting Time in a Bernoulli Process</a></li>"
True,src/java/org/apache/commons/math/distribution/PascalDistribution.java,src/java/org/apache/commons/math/distribution/PascalDistribution.java,42,* @since 1.2
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,28,* @since 1.2
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,30,ublic class PascalDistributionImpl
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,31,xtends AbstractIntegerDistribution
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,30,public class PascalDistributionImpl extends AbstractIntegerDistribution
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,37,** The number of trials */
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,36,/** The number of successes */
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,57, Access the number of trials for this distribution.
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,59, @return the number of trials
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,55,* Access the number of successes for this distribution.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,56,* @return the number of successes
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,75, Change the number of trials for this distribution.
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,77, @param successes the new number of trials
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,78, @throws IllegalArgumentException if <code>trials</code> is not positive.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,71,* Change the number of successes for this distribution.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,72,* @param successes the new number of successes
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,73,* @throws IllegalArgumentException if <code>successes</code> is not
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,74,*         positive.
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,82,"hrow new IllegalArgumentException(""number of trials must be non-negative."");"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,78,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,79,"""number of successes must be non-negative."");"
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,96,"hrow new IllegalArgumentException(""probability of success must be between 0.0 and 1.0, inclusive."");"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,92,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,93,"""probability of success must be between 0.0 and 1.0, inclusive."");"
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,106," @return domain value lower bound, i.e."
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,107,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,102,"* @return domain value lower bound, i.e. P(X &lt; <i>lower bound</i>) &lt;"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,103,*         <code>p</code>
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,118," @return domain value upper bound, i.e."
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,119,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,113,"* @return domain value upper bound, i.e. P(X &lt; <i>upper bound</i>) &gt;"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,114,*         <code>p</code>
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,122,/ use MAX - 1 because MAX causes loop
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,123,eturn Integer.MAX_VALUE - 1;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,117,// use MAX - 1 because MAX causes loop
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,118,return Integer.MAX_VALUE - 1;
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,131, @throws MathException if the cumulative probability can not be
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,132,            computed due to convergence or other numerical errors
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,125,* @throws MathException if the cumulative probability can not be computed
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,126,*         due to convergence or other numerical errors
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,139,et = Beta.regularizedBeta(
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,140,"etProbabilityOfSuccess(),"
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,141,"etNumberOfSuccesses(),"
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,142, + 1);
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,133,"ret = Beta.regularizedBeta(getProbabilityOfSuccess(),"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,134,"getNumberOfSuccesses(), x + 1);"
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,151, @return PMF for this distribution
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,142,* @return PMF for this distribution
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,158,"et = MathUtils.binomialCoefficientDouble(x + getNumberOfSuccesses() - 1,"
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,159,etNumberOfSuccesses() - 1) *
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,160,"ath.pow(getProbabilityOfSuccess(), getNumberOfSuccesses()) *"
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,161,"ath.pow(1.0 - getProbabilityOfSuccess(),"
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,162,);
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,149,ret = MathUtils.binomialCoefficientDouble(x
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,150,"+ getNumberOfSuccesses() - 1, getNumberOfSuccesses() - 1)"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,151,"* Math.pow(getProbabilityOfSuccess(), getNumberOfSuccesses())"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,152,"* Math.pow(1.0 - getProbabilityOfSuccess(), x);"
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,168," For this distribution, X, this method returns the largest x, such"
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,169, that P(X &le; x) &le; <code>p</code>.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,158,"* For this distribution, X, this method returns the largest x, such that"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,159,* P(X &le; x) &le; <code>p</code>.
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,171, Returns <code>-1</code> for p=0 and <code>Integer.MAX_VALUE</code> for
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,172, p=1.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,161,* Returns <code>-1</code> for p=0 and <code>Integer.MAX_VALUE</code>
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,162,* for p=1.
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,177,            computed due to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,166,*         computed due to convergence or other numerical errors.
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,180,ublic int inverseCumulativeProbability(final double p) throws MathException {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,169,public int inverseCumulativeProbability(final double p)
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,170,throws MathException {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,171,int ret;
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,183,eturn -1;
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,185,f (p == 1) {
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,186,eturn Integer.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,175,ret = -1;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,176,} else if (p == 1) {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,177,ret = Integer.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,178,} else {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,179,ret = super.inverseCumulativeProbability(p);
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,189,/ use default bisection impl
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,190,eturn super.inverseCumulativeProbability(p);
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,182,return ret;

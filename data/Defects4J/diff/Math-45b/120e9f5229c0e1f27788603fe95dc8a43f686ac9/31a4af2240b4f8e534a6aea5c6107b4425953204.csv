is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,23,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,23,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,24,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,25,import org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,43, RandomData instance used to generate samples from the distribution
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,43,* RandomData instance used to generate samples from the distribution.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,51,rotected AbstractIntegerDistribution() {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,52,uper();
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,51,protected AbstractIntegerDistribution() {}
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,56, For a random variable X whose values are distributed according
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,57," to this distribution, this method returns P(X &le; x).  In other words,"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,58," this method represents the  (cumulative) distribution function, or"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,59," CDF, for this distribution."
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,60, <p>
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,61," If <code>x</code> does not represent an integer value, the CDF is"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,62, evaluated at the greatest integer less than x.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,54,* For a random variable {@code X} whose values are distributed according
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,55,"* to this distribution, this method returns {@code P(X < x)}.  In other"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,56,"* words, this method represents the (cumulative) distribution function,"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,57,"* or CDF, for this distribution."
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,58,"* If {@code x} does not represent an integer value, the CDF is"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,59,* evaluated at the greatest integer less than {@code x}.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,64, @param x the value at which the distribution function is evaluated.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,65, @return cumulative probability that a random variable with this
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,66, distribution takes a value less than or equal to <code>x</code>
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,61,* @param x Value at which the distribution function is evaluated.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,62,* @return the cumulative probability that a random variable with this
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,63,* distribution takes a value less than or equal to {@code x}.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,75, For a random variable X whose values are distributed according
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,76," to this distribution, this method returns P(x0 &le; X &le; x1)."
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,72,* For a random variable {@code X} whose values are distributed
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,73,"* according to this distribution, this method returns"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,74,* {@code P(x0 < X < x1)}.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,78, @param x0 the (inclusive) lower bound
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,79, @param x1 the (inclusive) upper bound
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,76,* @param x0 Inclusive lower bound.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,77,* @param x1 Inclusive upper bound.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,81," will take a value between <code>x0</code> and <code>x1</code>,"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,79,"* will take a value between {@code x0} and {@code x1},"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,85, @throws IllegalArgumentException if <code>x0 > x1</code>
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,83,* @throws NumberIsTooSmallException if {@code x1 > x0}.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,90,f (x0 > x1) {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,91,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,92,"ocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, x0, x1);"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,88,if (x1 < x0) {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,89,"throw new NumberIsTooSmallException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,90,"x0, x1, true);"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,104, For a random variable X whose values are distributed according
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,105," to this distribution, this method returns P(X &le; x).  In other words,"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,106," this method represents the probability distribution function, or PDF,"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,107, for this distribution.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,102,* For a random variable {@code X} whose values are distributed according
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,103,"* to this distribution, this method returns {@code P(X < x)}. In other"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,104,"* words, this method represents the probability distribution function,"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,105,"* or PDF, for this distribution."
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,109, @param x the value at which the PDF is evaluated.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,107,* @param x Value at which the PDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,112,            computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,110,* computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,117, For a random variable X whose values are distributed according
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,118," to this distribution, this method returns P(X = x). In other words, this"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,119," method represents the probability mass function,  or PMF, for the distribution."
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,120, <p>
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,121," If <code>x</code> does not represent an integer value, 0 is returned."
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,115,* For a random variable {@code X} whose values are distributed according
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,116,"* to this distribution, this method returns {@code P(X = x)}. In other"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,117,"* words, this method represents the probability mass function, or PMF,"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,118,* for the distribution.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,119,"* If {@code x} does not represent an integer value, 0 is returned."
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,123, @param x the value at which the probability density function is evaluated
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,124, @return the value of the probability density function at x
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,121,* @param x Value at which the probability density function is evaluated.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,122,* @return the value of the probability density function at {@code x}.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,136, For a random variable X whose values are distributed according
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,137," to this distribution, this method returns P(x0 &le; X &le; x1)."
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,134,* For a random variable {@code X} whose values are distributed according
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,135,"* to this distribution, this method returns {@code P(x0 < X < x1)}."
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,139," @param x0 the inclusive, lower bound"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,140," @param x1 the inclusive, upper bound"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,137,* @param x0 Inclusive lower bound.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,138,* @param x1 Inclusive upper bound.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,143,            computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,144, @throws IllegalArgumentException if x0 > x1
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,141,* computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,142,* @throws NumberIsTooSmallException {@code if x0 > x1}.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,147,f (x0 > x1) {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,148,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,149,"ocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, x0, x1);"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,145,if (x1 < x0) {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,146,"throw new NumberIsTooSmallException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,147,"x0, x1, true);"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,155, For a random variable X whose values are distributed according
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,156," to this distribution, this method returns the largest x, such"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,157, that P(X &le; x) &le; <code>p</code>.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,153,* For a random variable {@code X} whose values are distributed according
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,154,"* to this distribution, this method returns the largest {@code x}, such"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,155,* that {@code P(X < x) < p}.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,159, @param p the desired probability
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,160, @return the largest x such that P(X &le; x) <= p
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,157,* @param p Desired probability.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,158,* @return the largest {@code x} such that {@code P(X < x) <= p}.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,162,            computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,163, @throws IllegalArgumentException if p < 0 or p > 1
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,160,* computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,161,* @throws OutOfRangeException if {@code p < 0} or {@code p > 1}.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,166,f (p < 0.0 || p > 1.0) {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,167,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,168,"ocalizedFormats.OUT_OF_RANGE_SIMPLE, p, 0.0, 1.0);"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,164,if (p < 0 || p > 1) {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,165,"throw new OutOfRangeException(p, 0, 1);"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,213, Reseeds the random generator used to generate samples.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,215, @param seed the new seed
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,216, @since 2.2
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,210,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,225," <a href=""http://en.wikipedia.org/wiki/Inverse_transform_sampling""> inversion method.</a>"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,219,"* <a href=""http://en.wikipedia.org/wiki/Inverse_transform_sampling"">"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,220,*  inversion method.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,221,* </a>
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,227, @return random value
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,223,* @return a random value.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,229, @throws MathException if an error occurs generating the random value
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,225,* @throws MathException if an error occurs generating the random value.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,236, Generates a random sample from the distribution.  The default implementation
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,237, generates the sample by calling {@link #sample()} in a loop.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,232,* Generates a random sample from the distribution.  The default
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,233,* implementation generates the sample by calling {@link #sample()}
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,234,* in a loop.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,239, @param sampleSize number of random values to generate
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,236,* @param sampleSize number of random values to generate.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,241, @return an array representing the random sample
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,242, @throws MathException if an error occurs generating the sample
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,243, @throws IllegalArgumentException if sampleSize is not positive
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,238,* @return an array representing the random sample.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,239,* @throws MathException if an error occurs generating the sample.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,240,* @throws NotStrictlyPositiveException if {@code sampleSize <= 0}.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,247,"athRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE, sampleSize);"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,244,"throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,245,sampleSize);
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,257, Computes the cumulative probability function and checks for NaN values returned.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,258, Throws MathException if the value is NaN. Wraps and rethrows any MathException encountered
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,259, evaluating the cumulative probability function in a FunctionEvaluationException. Throws
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,260, FunctionEvaluationException of the cumulative probability function returns NaN.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,255,* Computes the cumulative probability function and checks for NaN
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,256,* values returned.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,257,* Throws MathException if the value is NaN. Wraps and rethrows any
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,258,* MathException encountered evaluating the cumulative probability
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,259,* function in a FunctionEvaluationException.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,260,* Throws FunctionEvaluationException of the cumulative probability
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,261,* function returns NaN.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,262, @param argument input value
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,263, @return cumulative probability
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,264, @throws FunctionEvaluationException if a MathException occurs computing the cumulative probability
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,263,* @param argument Input value.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,264,* @return the cumulative probability.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,265,* @throws FunctionEvaluationException if a MathException occurs
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,266,* computing the cumulative probability.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,266,rivate double checkedCumulativeProbability(int argument) throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,268,private double checkedCumulativeProbability(int argument)
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,269,throws FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,281," Access the domain value lower bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,284,"* Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,285, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,286," @return domain value lower bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,287,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,288,* @param p Desired probability for the critical value
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,289,"* @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,292," Access the domain value upper bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,294,"* Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,296, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,297," @return domain value upper bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,298,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,298,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,299,"* @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,42, Default inverse cumulative probability accurac
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,41,* Default inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,51,rivate double alpha;
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,48,private final double alpha;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,54,rivate double beta;
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,50,private final double beta;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,61,** Inverse cumulative probability accuracy */
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,55,/** Inverse cumulative probability accuracy. */
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,46, Change the number of trials for this distribution.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,47, @param trials the new number of trials.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,48, @deprecated as of v2.1
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,50,Deprecated
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,51,oid setNumberOfTrials(int trials);
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,54, Change the probability of success for this distribution.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,55, @param p the new probability of success.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,56, @deprecated as of v2.1
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,58,Deprecated
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,59,oid setProbabilityOfSuccess(double p);
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,22,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,22,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,23,import org.apache.commons.math.exception.NotPositiveException;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,35,** Serializable version identifier */
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,35,/** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,39,rivate int numberOfTrials;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,38,private final int numberOfTrials;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,42,rivate double probabilityOfSuccess;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,40,private final double probabilityOfSuccess;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,48, @param trials the number of trials.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,49, @param p the probability of success.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,46,* @param trials Number of trials.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,47,* @param p Probability of success.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,48,* @throws NotPositiveException if {@code trials < 0}.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,49,* @throws OutOfRangeException if {@code p < 0} or {@code p > 1}.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,52,uper();
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,53,etNumberOfTrialsInternal(trials);
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,54,etProbabilityOfSuccessInternal(p);
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,52,if (trials < 0) {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,53,"throw new NotPositiveException(LocalizedFormats.NUMBER_OF_TRIALS,"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,54,trials);
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,56,if (p < 0 || p > 1) {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,57,"throw new OutOfRangeException(p, 0, 1);"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,60,probabilityOfSuccess = p;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,61,numberOfTrials = trials;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,58, Access the number of trials for this distribution.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,60, @return the number of trials.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,65,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,67, Access the probability of success for this distribution.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,69, @return the probability of success.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,72,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,76, Change the number of trials for this distribution.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,78, @param trials the new number of trials.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,79, @throws IllegalArgumentException if <code>trials</code> is not a valid
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,80,             number of trials.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,81, @deprecated as of 2.1 (class will become immutable in 3.0)
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,83,Deprecated
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,84,ublic void setNumberOfTrials(int trials) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,85,etNumberOfTrialsInternal(trials);
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,88, Change the number of trials for this distribution.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,90, @param trials the new number of trials.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,91, @throws IllegalArgumentException if <code>trials</code> is not a valid
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,92,             number of trials.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,94,rivate void setNumberOfTrialsInternal(int trials) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,95,f (trials < 0) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,96,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,97,"ocalizedFormats.NEGATIVE_NUMBER_OF_TRIALS, trials);"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,99,umberOfTrials = trials;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,103, Change the probability of success for this distribution.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,105, @param p the new probability of success.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,106, @throws IllegalArgumentException if <code>p</code> is not a valid
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,107,             probability.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,108, @deprecated as of 2.1 (class will become immutable in 3.0)
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,110,Deprecated
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,111,ublic void setProbabilityOfSuccess(double p) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,112,etProbabilityOfSuccessInternal(p);
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,115, Change the probability of success for this distribution.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,117, @param p the new probability of success.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,118, @throws IllegalArgumentException if <code>p</code> is not a valid
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,119,             probability.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,121,rivate void setProbabilityOfSuccessInternal(double p) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,122,f (p < 0.0 || p > 1.0) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,123,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,124,"ocalizedFormats.OUT_OF_RANGE_SIMPLE, p, 0.0, 1.0);"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,126,robabilityOfSuccess = p;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,130," Access the domain value lower bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,79,"* Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,133, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,134," @return domain value lower bound, i.e. P(X &lt; <i>lower bound</i>) &lt;"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,135,         <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,82,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,83,"* @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,143," Access the domain value upper bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,91,"* Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,146, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,147," @return domain value upper bound, i.e. P(X &lt; <i>upper bound</i>) &gt;"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,148,         <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,94,* @param p Desired probability for the critical value
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,95,"* @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,156," For this distribution, X, this method returns P(X &le; x)."
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,103,"* For this distribution, {@code X}, this method returns {@code P(X < x)}."
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,158, @param x the value at which the PDF is evaluated.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,105,* @param x Value at which the PDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,161,             due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,108,* due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,178," For this distribution, X, this method returns P(X = x)."
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,125,"* For this distribution, {@code X}, this method returns {@code P(X = x)}."
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,180, @param x the value at which the PMF is evaluated.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,127,* @param x Value at which the PMF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,196," For this distribution, X, this method returns the largest x, such that"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,197, P(X &le; x) &le; <code>p</code>.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,198, <p>
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,199, Returns <code>-1</code> for p=0 and <code>Integer.MAX_VALUE</code> for
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,200, p=1.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,201, </p>
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,143,"* For this distribution, {@code X}, this method returns the largest"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,144,"* {@code x}, such that {@code P(X < x) p}."
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,145,* It will return -1 when p = 0 and {@code Integer.MAX_VALUE} when p = 1.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,203, @param p the desired probability
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,204, @return the largest x such that P(X &le; x) <= p
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,147,* @param p Desired probability.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,148,* @return the largest {@code x} such that {@code P(X < x) <= p}.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,206,             computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,207, @throws IllegalArgumentException if p < 0 or p > 1
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,150,* computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,151,* @throws OutOfRangeException if {@code p < 0} or {@code p > 1}.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,35,"mplements CauchyDistribution, Serializable {"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,35,"implements CauchyDistribution, Serializable {"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,37, Default inverse cumulative probability accuracy
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,37,* Default inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,44,rivate double median = 0;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,44,private final double median;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,46,rivate double scale = 1;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,46,private final double scale;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,39,rivate GammaDistribution gamma;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,39,private final GammaDistribution gamma;
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,47,* Reseed the random generator used to generate samples.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,49,* @param seed New seed.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,50,* @since 3.0
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,52,void reseedRandomGenerator(long seed);
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,55,* Generate a random value sampled from this distribution.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,57,* @return a random value.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,58,* @throws MathException if an error occurs generating the random value.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,59,* @since 3.0
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,61,double sample() throws MathException;
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,64,* Generate a random sample from the distribution.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,66,* @param sampleSize number of random values to generate.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,67,* @return an array representing the random sample.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,68,* @throws MathException if an error occurs generating the sample.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,69,* @throws org.apache.commons.math.exception.NotStrictlyPositiveException
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,70,* if {@code sampleSize} is not positive.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,71,* @since 3.0
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,73,double[] sample(int sampleSize) throws MathException;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,35, Default inverse cumulative probability accuracy
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,35,* Default inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,42,rivate double mean;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,43,** Inverse cumulative probability accuracy */
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,42,private final double mean;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,43,/** Inverse cumulative probability accuracy. */
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,38, Default inverse cumulative probability accuracy
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,38,* Default inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,42,** Serializable version identifier */
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,42,/** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,44,** The numerator degrees of freedom*/
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,45,rivate double numeratorDegreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,46,** The numerator degrees of freedom*/
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,47,rivate double denominatorDegreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,48,** Inverse cumulative probability accuracy */
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,44,/** The numerator degrees of freedom. */
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,45,private final double numeratorDegreesOfFreedom;
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,46,/** The numerator degrees of freedom. */
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,47,private final double denominatorDegreesOfFreedom;
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,48,/** Inverse cumulative probability accuracy. */
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,36, Default inverse cumulative probability accuracy
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,35,* Default inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,41,** Serializable version identifier */
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,39,/** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,45,rivate double alpha;
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,42,private final double alpha;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,48,rivate double beta;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,50,** Inverse cumulative probability accuracy */
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,44,private final double beta;
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,45,/** Inverse cumulative probability accuracy. */
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,54, Modify the number of successes.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,55, @param num the new number of successes.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,56, @deprecated as of v2.1
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,58,Deprecated
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,59,oid setNumberOfSuccesses(int num);
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,62, Modify the population size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,63, @param size the new population size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,64, @deprecated as of v2.1
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,66,Deprecated
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,67,oid setPopulationSize(int size);
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,70, Modify the sample size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,71, @param size the new sample size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,72, @deprecated as of v2.1
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,74,Deprecated
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,75,oid setSampleSize(int size);
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,22,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,22,import org.apache.commons.math.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,23,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,24,import org.apache.commons.math.exception.NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,33,"mplements HypergeometricDistribution, Serializable {"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,35,** Serializable version identifier */
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,35,"implements HypergeometricDistribution, Serializable {"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,36,/** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,39,rivate int numberOfSuccesses;
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,39,private final int numberOfSuccesses;
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,42,rivate int populationSize;
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,41,private final int populationSize;
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,45,rivate int sampleSize;
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,43,private final int sampleSize;
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,48, Construct a new hypergeometric distribution with the given the population
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,49," size, the number of successes in the population, and the sample size."
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,46,* Construct a new hypergeometric distribution with the given the
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,47,"* population size, the number of successes in the population, and"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,48,* the sample size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,51, @param populationSize the population size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,52, @param numberOfSuccesses number of successes in the population.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,53, @param sampleSize the sample size.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,50,* @param populationSize Population size.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,51,* @param numberOfSuccesses Number of successes in the population.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,52,* @param sampleSize Sample size.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,53,* @throws NotPositiveException if {@code numberOfSuccesses < 0}.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,54,* @throws NotStrictlyPositiveException if {@code populationSize <= 0}.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,55,* @throws NotPositiveException if {@code populationSize < 0}.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,56,* @throws NumberIsTooLargeException if {@code numberOfSuccesses > populationSize}.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,57,* @throws NumberIsTooLargeException if {@code sampleSize > populationSize}.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,56,"nt numberOfSuccesses, int sampleSize) {"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,57,uper();
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,60,"int numberOfSuccesses,"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,61,int sampleSize) {
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,62,if (populationSize <= 0) {
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,63,"throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,64,populationSize);
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,66,if (numberOfSuccesses < 0) {
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,67,"throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,68,numberOfSuccesses);
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,70,if (sampleSize < 0) {
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,71,"throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,72,sampleSize);
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,59,hrow MathRuntimeException
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,60,createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,61,"ocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,62,"umberOfSuccesses, populationSize);"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,76,"throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,77,"numberOfSuccesses, populationSize, true);"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,65,hrow MathRuntimeException
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,66,createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,67,"ocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,68,"ampleSize, populationSize);"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,80,"throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,81,"sampleSize, populationSize, true);"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,71,etPopulationSizeInternal(populationSize);
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,72,etSampleSizeInternal(sampleSize);
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,73,etNumberOfSuccessesInternal(numberOfSuccesses);
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,84,this.numberOfSuccesses = numberOfSuccesses;
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,85,this.populationSize = populationSize;
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,86,this.sampleSize = sampleSize;
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,77," For this distribution, X, this method returns P(X &le; x)."
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,90,"* For this distribution, {@code X}, this method returns {@code P(X < x)}."
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,79, @param x the value at which the PDF is evaluated.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,92,* @param x Value at which the PDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,102, @param n the population size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,103, @param m number of successes in the population.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,104, @param k the sample size.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,115,* @param n Population size.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,116,* @param m Number of successes in the population.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,117,* @param k Sample size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,106,         hypergeometric distribution.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,119,* hypergeometric distribution.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,113," Access the domain value lower bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,126,"* Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,116, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,117," @return domain value lower bound, i.e. P(X &lt; <i>lower bound</i>) &lt;"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,118,         <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,129,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,130,"* @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,126," Access the domain value upper bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,138,"* Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,129, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,130," @return domain value upper bound, i.e. P(X &lt; <i>upper bound</i>) &gt;"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,131,         <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,141,* @param p Desired probability for the critical value
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,142,"* @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,142, @param n the population size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,143, @param m number of successes in the population.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,144, @param k the sample size.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,153,* @param n Population size.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,154,* @param m Number of successes in the population.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,155,* @param k Sample size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,152, Access the number of successes.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,154, @return the number of successes.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,163,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,161, Access the population size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,163, @return the population size.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,170,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,170, Access the sample size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,172, @return the sample size.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,177,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,182, @param m number of successes in the population.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,183, @param k the sample size.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,187,* @param m Number of successes in the population.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,188,* @param k Sample size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,191," For this distribution, X, this method returns P(X = x)."
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,196,"* For this distribution, {@code X}, this method returns {@code P(X = x)}."
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,193, @param x the value at which the PMF is evaluated.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,198,* @param x Value at which the PMF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,219," For the distribution, X, defined by the given hypergeometric distribution"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,220," parameters, this method returns P(X = x)."
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,224,"* For this distribution, {@code X}, defined by the given hypergeometric"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,225,"*  distribution parameters, this method returns {@code P(X = x)}."
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,227,* @param x Value at which the PMF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,225, @param x the value at which the PMF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,235, Modify the number of successes.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,237, @param num the new number of successes.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,238, @throws IllegalArgumentException if <code>num</code> is negative.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,239, @deprecated as of 2.1 (class will become immutable in 3.0)
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,241,Deprecated
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,242,ublic void setNumberOfSuccesses(int num) {
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,243,etNumberOfSuccessesInternal(num);
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,246, Modify the number of successes.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,248, @param num the new number of successes.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,249, @throws IllegalArgumentException if <code>num</code> is negative.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,251,rivate void setNumberOfSuccessesInternal(int num) {
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,252,f (num < 0) {
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,253,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,254,"ocalizedFormats.NEGATIVE_NUMBER_OF_SUCCESSES, num);"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,256,umberOfSuccesses = num;
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,260, Modify the population size.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,240,"* For this distribution, {@code X}, this method returns {@code P(X >= x)}."
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,262, @param size the new population size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,263, @throws IllegalArgumentException if <code>size</code> is not positive.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,264, @deprecated as of 2.1 (class will become immutable in 3.0)
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,266,Deprecated
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,267,ublic void setPopulationSize(int size) {
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,268,etPopulationSizeInternal(size);
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,271, Modify the population size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,273, @param size the new population size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,274, @throws IllegalArgumentException if <code>size</code> is not positive.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,276,rivate void setPopulationSizeInternal(int size) {
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,277,f (size <= 0) {
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,278,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,279,"ocalizedFormats.NOT_POSITIVE_POPULATION_SIZE, size);"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,281,opulationSize = size;
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,285, Modify the sample size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,287, @param size the new sample size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,288, @throws IllegalArgumentException if <code>size</code> is negative.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,289, @deprecated as of 2.1 (class will become immutable in 3.0)
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,291,Deprecated
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,292,ublic void setSampleSize(int size) {
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,293,etSampleSizeInternal(size);
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,296, Modify the sample size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,298, @param size the new sample size.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,299, @throws IllegalArgumentException if <code>size</code> is negative.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,301,rivate void setSampleSizeInternal(int size) {
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,302,f (size < 0) {
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,303,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,304,"ocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE, size);"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,306,ampleSize = size;
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,310," For this distribution, X, this method returns P(X &ge; x)."
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,312, @param x the value at which the CDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,313, @return upper tail CDF for this distribution.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,242,* @param x Value at which the CDF is evaluated.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,243,* @return the upper tail CDF for this distribution.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,325,"et = innerCumulativeProbability(domain[1], x, -1, populationSize, numberOfSuccesses, sampleSize);"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,255,"ret = innerCumulativeProbability(domain[1], x, -1, populationSize,"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,256,"numberOfSuccesses, sampleSize);"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,332," For this distribution, X, this method returns P(x0 &le; X &le; x1). This"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,333, probability is computed by summing the point probabilities for the values
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,334," x0, x0 + 1, x0 + 2, ..., x1, in the order directed by dx."
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,263,"* For this distribution, {@code X}, this method returns"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,264,* {@code P(x0 <= X <= x1)}.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,265,* This probability is computed by summing the point probabilities for the
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,266,"* values {@code x0, x0 + 1, x0 + 2, ..., x1}, in the order directed by"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,267,* {@code dx}.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,336," @param x0 the inclusive, lower bound"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,337," @param x1 the inclusive, upper bound"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,338, @param dx the direction of summation. 1 indicates summing from x0 to x1.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,339,            0 indicates summing from x1 to x0.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,269,* @param x0 Inclusive lower bound.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,270,* @param x1 Inclusive upper bound.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,271,"* @param dx Direction of summation (1 indicates summing from x0 to x1, and"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,272,* 0 indicates summing from x1 to x0).
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,343, @return P(x0 &le; X &le; x1).
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,276,* @return {@code P(x0 <= X <= x1)}.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,345,"rivate double innerCumulativeProbability(int x0, int x1, int dx, int n,"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,346,"nt m, int k) {"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,278,"private double innerCumulativeProbability(int x0, int x1, int dx,"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,279,"int n, int m, int k) {"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,28, For a random variable X whose values are distributed according
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,29," to this distribution, this method returns P(X = x). In other words, this"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,30, method represents the probability mass function for the distribution.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,28,* For a random variable {@code X} whose values are distributed according
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,29,"* to this distribution, this method returns {@code P(X = x)}. In other"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,30,"* words, this method represents the probability mass function for the"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,31,* distribution.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,32, @param x the value at which the probability density function is evaluated.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,33, @return the value of the probability density function at x
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,33,* @param x Value at which the probability density function is evaluated.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,34,* @return the value of the probability density function at {@code x}.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,38, For a random variable X whose values are distributed according
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,39," to this distribution, this method returns P(X &le; x).  In other words,"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,40," this method represents the probability distribution function, or PDF"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,41, for the distribution.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,39,* For a random variable {@code X} whose values are distributed according
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,40,"* to this distribution, this method returns {@code P(X < x)}.  In other"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,41,"* words, this method represents the probability distribution function, or"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,42,* PDF for the distribution.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,43, @param x the value at which the PDF is evaluated.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,44,* @param x Value at which the PDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,45, @throws MathException if the cumulative probability can not be
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,46,            computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,46,* @throws MathException if the cumulative probability cannot be
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,47,* computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,51," For this distribution, X, this method returns P(x0 &le; X &le; x1)."
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,52,"* For this distribution, {@code X}, this method returns"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,53,* {@code P(x0 < X < x1)}.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,56,            computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,57, @throws IllegalArgumentException if x0 > x1
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,59,* computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,60,* @throws IllegalArgumentException if {@code x0 > x1}.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,62," For this distribution, X, this method returns the largest x such that"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,63, P(X &le; x) <= p.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,64, <p>
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,65, Note that this definition implies: <ul>
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,66," <li> If there is a minimum value, <code>m</code>, with positive"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,67," probability under (the density of) X, then <code>m - 1</code> is"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,68, returned by <code>inverseCumulativeProbability(0).</code>  If there is
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,69," no such value <code>m,  Integer.MIN_VALUE</code> is"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,70, returned.</li>
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,71," <li> If there is a maximum value, <code>M</code>, such that"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,72," P(X &le; M) =1, then <code>M</code> is returned by"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,73, <code>inverseCumulativeProbability(1).</code>
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,74," If there is no such value, <code>M, Integer.MAX_VALUE</code> is"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,75, returned.</li></ul></p>
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,65,"* For this distribution, {@code X}, this method returns the largest"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,66,* {@code x} such that {@code P(X < x) <= p}.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,67,* <br/>
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,68,* Note that this definition implies:
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,69,* <ul>
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,70,"*  <li> If there is a minimum value, {@code m}, with positive"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,71,"*   probability under (the density of) {@code X}, then {@code m - 1} is"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,72,*   returned by {@code inverseCumulativeProbability(0).}  If there is
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,73,"*   no such value {@code m},  {@code Integer.MIN_VALUE} is returned."
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,74,*  </li>
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,75,"*  <li> If there is a maximum value, {@code M}, such that"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,76,"*   {@code P(X < M) = 1}, then {@code M} is returned by"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,77,*   {@code inverseCumulativeProbability(1)}.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,78,"*   If there is no such value, {@code M}, {@code Integer.MAX_VALUE} is"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,79,*   returned.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,80,*  </li>
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,81,* </ul>
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,77, @param p the cumulative probability.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,78, @return the largest x such that P(X &le; x) <= p
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,79, @throws MathException if the inverse cumulative probability can not be
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,80,            computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,81, @throws IllegalArgumentException if p is not between 0 and 1 (inclusive)
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,83,* @param p Cumulative probability.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,84,* @return the largest {@code x} such that {@code P(X < x) <= p}.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,85,* @throws MathException if the inverse cumulative probability cannot be
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,86,* computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,87,* @throws IllegalArgumentException if {@code p} is not between 0 and 1
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,88,* (inclusive).
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,93,* Reseed the random generator used to generate samples.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,95,* @param seed New seed.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,96,* @since 3.0
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,98,void reseedRandomGenerator(long seed);
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,101,* Generate a random value sampled from this distribution.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,103,* @return a random value.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,104,* @throws MathException if an error occurs generating the random value.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,105,* @since 3.0
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,107,int sample() throws MathException;
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,110,* Generate a random sample from the distribution.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,112,* @param sampleSize number of random values to generate.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,113,* @return an array representing the random sample.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,114,* @throws MathException if an error occurs generating the sample.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,115,* @throws org.apache.commons.math.exception.NotStrictlyPositiveException
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,116,* if {@code sampleSize} is not positive.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,117,* @since 3.0
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,119,int[] sample(int sampleSize) throws MathException;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,38, Default inverse cumulative probability accuracy
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,38,* Default inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,47,rivate double mean = 0;
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,47,private final double mean;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,49,rivate double standardDeviation = 1;
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,49,private final double standardDeviation;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,45, @return the number of successes
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,45,* @return the number of successes.
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,52, @return the probability of success
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,52,* @return the probability of success.
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,57, Change the number of successes for this distribution.
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,59, @param successes the new number of successes
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,60, @deprecated as of v2.1
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,62,Deprecated
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,63,oid setNumberOfSuccesses(int successes);
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,66, Change the probability of success for this distribution.
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,68, @param p the new probability of success
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,69, @deprecated as of v2.1
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,71,Deprecated
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,72,oid setProbabilityOfSuccess(double p);
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,22,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,22,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,23,import org.apache.commons.math.exception.NotPositiveException;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,36,** Serializable version identifier */
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,36,/** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,39,** The number of successes */
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,40,rivate int numberOfSuccesses;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,42,** The probability of success */
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,43,rivate double probabilityOfSuccess;
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,38,/** The number of successes. */
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,39,private final int numberOfSuccesses;
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,40,/** The probability of success. */
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,41,private final double probabilityOfSuccess;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,48, @param r the number of successes
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,49, @param p the probability of success
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,47,* @param r Number of successes.
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,48,* @param p Probability of success.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,52,uper();
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,53,etNumberOfSuccessesInternal(r);
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,54,etProbabilityOfSuccessInternal(p);
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,51,if (r < 0) {
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,52,"throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,"
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,53,r);
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,55,if (p < 0 || p > 1) {
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,56,"throw new OutOfRangeException(p, 0, 1);"
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,59,numberOfSuccesses = r;
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,60,probabilityOfSuccess = p;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,58, Access the number of successes for this distribution.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,59, @return the number of successes
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,64,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,66, Access the probability of success for this distribution.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,67, @return the probability of success
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,71,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,74, Change the number of successes for this distribution.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,75, @param successes the new number of successes
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,76, @throws IllegalArgumentException if <code>successes</code> is not
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,77,         positive.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,78, @deprecated as of 2.1 (class will become immutable in 3.0)
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,80,Deprecated
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,81,ublic void setNumberOfSuccesses(int successes) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,82,etNumberOfSuccessesInternal(successes);
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,85, Change the number of successes for this distribution.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,86, @param successes the new number of successes
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,87, @throws IllegalArgumentException if <code>successes</code> is not
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,88,         positive.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,90,rivate void setNumberOfSuccessesInternal(int successes) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,91,f (successes < 0) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,92,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,93,"ocalizedFormats.NEGATIVE_NUMBER_OF_SUCCESSES,"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,94,uccesses);
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,96,umberOfSuccesses = successes;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,100, Change the probability of success for this distribution.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,101, @param p the new probability of success
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,102, @throws IllegalArgumentException if <code>p</code> is not a valid
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,103,         probability.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,104, @deprecated as of 2.1 (class will become immutable in 3.0)
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,106,Deprecated
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,107,ublic void setProbabilityOfSuccess(double p) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,108,etProbabilityOfSuccessInternal(p);
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,111, Change the probability of success for this distribution.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,112, @param p the new probability of success
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,113, @throws IllegalArgumentException if <code>p</code> is not a valid
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,114,         probability.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,116,rivate void setProbabilityOfSuccessInternal(double p) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,117,f (p < 0.0 || p > 1.0) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,118,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,119,"ocalizedFormats.OUT_OF_RANGE_SIMPLE, p, 0.0, 1.0);"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,121,robabilityOfSuccess = p;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,125," Access the domain value lower bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,78,"* Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,127, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,128," @return domain value lower bound, i.e. P(X &lt; <i>lower bound</i>) &lt;"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,129,         <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,81,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,82,"* @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,137," Access the domain value upper bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,90,"* Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,139, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,140," @return domain value upper bound, i.e. P(X &lt; <i>upper bound</i>) &gt;"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,141,         <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,93,* @param p Desired probability for the critical value
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,94,"* @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,150," For this distribution, X, this method returns P(X &le; x)."
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,151, @param x the value at which the PDF is evaluated
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,152, @return PDF for this distribution
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,103,"* For this distribution, {@code X}, this method returns {@code P(X < x)}."
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,105,* @param x Value at which the PDF is evaluated.
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,106,* @return PDF for this distribution.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,154,         due to convergence or other numerical errors
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,108,* due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,169," For this distribution, X, this method returns P(X = x)."
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,170, @param x the value at which the PMF is evaluated
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,171, @return PMF for this distribution
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,123,"* For this distribution, {@code X}, this method returns {@code P(X = x)}."
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,125,* @param x Value at which the PMF is evaluated.
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,126,* @return PMF for this distribution.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,187," For this distribution, X, this method returns the largest x, such that"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,188, P(X &le; x) &le; <code>p</code>.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,189, <p>
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,190, Returns <code>-1</code> for p=0 and <code>Integer.MAX_VALUE</code>
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,191, for p=1.</p>
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,192, @param p the desired probability
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,193, @return the largest x such that P(X &le; x) <= p
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,142,"* For this distribution, {@code X}, this method returns the largest"
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,143,"* {@code x}, such that {@code P(X < x) p}."
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,144,* It will return -1 when p = 0 and {@code Integer.MAX_VALUE} when p = 1.
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,146,* @param p Desired probability.
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,147,* @return the largest {@code x} such that {@code P(X < x) <= p}.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,195,         computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,196, @throws IllegalArgumentException if p < 0 or p > 1
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,149,* computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,150,* @throws OutOfRangeException if {@code p < 0} or {@code p > 1}.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,34,"mplements PoissonDistribution, Serializable {"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,34,"implements PoissonDistribution, Serializable {"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,46,ublic static final double DEFAULT_EPSILON = 1E-12;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,48,** Serializable version identifier */
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,44,public static final double DEFAULT_EPSILON = 1e-12;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,45,/** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,52,rivate NormalDistribution normal;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,55, Holds the Poisson mean for the distribution.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,57,rivate double mean;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,48,private final NormalDistribution normal;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,49,/** Mean of the distribution. */
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,50,private final double mean;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,65,rivate int maxIterations = DEFAULT_MAX_ITERATIONS;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,57,private final int maxIterations;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,70,rivate double epsilon = DEFAULT_EPSILON;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,61,private final double epsilon;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,77, @throws IllegalArgumentException if p &le; 0
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,68,* @throws NotStrictlyPositiveException if {@code p <= 0}.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,87, @param p the Poisson mean
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,88, @param epsilon the convergence criteria for cumulative probabilites
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,89, @param maxIterations the maximum number of iterations for cumulative probabilites
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,78,* @param p Poisson mean.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,79,* @param epsilon Convergence criterion for cumulative probabilities.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,80,* @param maxIterations the maximum number of iterations for cumulative
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,81,* probabilities.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,105, @param p the Poisson mean
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,106, @param epsilon the convergence criteria for cumulative probabilites
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,97,* @param p Poisson mean.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,98,* @param epsilon Convergence criterion for cumulative probabilities.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,116, @param p the Poisson mean
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,117, @param maxIterations the maximum number of iterations for cumulative probabilites
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,108,* @param p Poisson mean.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,109,* @param maxIterations Maximum number of iterations for cumulative probabilities.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,125, Get the Poisson mean for the distribution.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,127, @return the Poisson mean for the distribution.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,117,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,134, The probability mass function P(X = x) for a Poisson distribution.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,124,* The probability mass function {@code P(X = x)} for a Poisson distribution.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,136, @param x the value at which the probability density function is
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,137,            evaluated.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,138, @return the value of the probability mass function at x
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,126,* @param x Value at which the probability density function is evaluated.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,127,* @return the value of the probability mass function at {@code x}.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,155, The probability distribution function P(X <= x) for a Poisson
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,144,* The probability distribution function {@code P(X <= x)} for a Poisson
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,158, @param x the value at which the PDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,159, @return Poisson distribution function evaluated at x
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,160, @throws MathException if the cumulative probability can not be computed
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,161,             due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,147,* @param x Value at which the PDF is evaluated.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,148,* @return the Poisson distribution function evaluated at {@code x}.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,149,* @throws MathException if the cumulative probability cannot be computed
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,150,* due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,176," approximation. The <code>N(mean, sqrt(mean))</code> distribution is used"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,165,"* approximation. The {@code N(mean, sqrt(mean))} distribution is used"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,178, <p>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,179," The computation uses ""half-correction"" -- evaluating the normal"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,180, distribution function at <code>x + 0.5</code>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,181, </p>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,167,"* The computation uses ""half-correction"" (evaluating the normal"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,168,* distribution function at {@code x + 0.5}).
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,183," @param x the upper bound, inclusive"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,170,"* @param x Upper bound, inclusive."
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,185,         approximation
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,172,* approximation.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,187,             approximation
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,174,* approximation.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,183,* <br/>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,184,* <strong>Algorithm Description</strong>:
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,185,* <ul>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,186,"*  <li>For small means, uses simulation of a Poisson process"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,187,"*   using Uniform deviates, as described"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,188,"*   <a href=""http://irmi.epfl.ch/cmos/Pmmi/interactive/rng7.htm""> here</a>."
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,189,*   The Poisson process (and hence value returned) is bounded by 1000 * mean.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,190,*  </li>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,191,"*  <li>For large means, uses the rejection algorithm described in"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,192,*   <quote>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,193,"*    Devroye, Luc. (1981).<i>The Computer Generation of Poisson Random Variables</i>"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,194,*    <strong>Computing</strong> vol. 26 pp. 197-207.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,195,*   </quote>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,196,*  </li>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,197,* </ul>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,197, <p><strong>Algorithm Description</strong>:
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,198," <ul><li> For small means, uses simulation of a Poisson process"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,199," using Uniform deviates, as described"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,200," <a href=""http://irmi.epfl.ch/cmos/Pmmi/interactive/rng7.htm""> here.</a>"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,201, The Poisson process (and hence value returned) is bounded by 1000 * mean.</li><
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,203," <li> For large means, uses the rejection algorithm described in <br/>"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,204," Devroye, Luc. (1981).<i>The Computer Generation of Poisson Random Variables</i>"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,205, <strong>Computing</strong> vol. 26 pp. 197-207.</li></ul></p>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,207, @return random value
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,199,* @return a random value.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,209, @throws MathException if an error occurs generating the random value
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,201,* @throws MathException if an error occurs generating the random value.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,217," Access the domain value lower bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,209,"* Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,221, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,222, @return domain lower bound
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,213,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,214,* @return the domain lower bound.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,230," Access the domain value upper bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,222,"* Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,234, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,235, @return domain upper bound
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,226,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,227,* @return the domain upper bound.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,45,rivate double degreesOfFreedom;
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,45,private final double degreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,35,"mplements WeibullDistribution, Serializable {"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,35,"implements WeibullDistribution, Serializable {"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,37, Default inverse cumulative probability accuracy
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,37,* Default inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,41,** Serializable version identifier */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,41,/** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,44,rivate double shape;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,44,private final double shape;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,46,rivate double scale;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,46,private final double scale;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,42, Set the number of elements (e.g. corpus size) for the distribution.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,43, The parameter value must be positive; otherwise an
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,44, <code>IllegalArgumentException</code> is thrown.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,46, @param n the number of elements
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,47, @throws IllegalArgumentException if n &le; 0
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,48, @deprecated as of v2.1
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,50,Deprecated
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,51,oid setNumberOfElements(int n);
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,61, Set the exponent characterising the distribution.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,62, The parameter value must be positive; otherwise an
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,63, <code>IllegalArgumentException</code> is thrown.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,65, @param s the exponent
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,66, @throws IllegalArgumentException if s &le; 0.0
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,67, @deprecated as of v2.1
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,69,Deprecated
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,70,oid setExponent(double s);
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,22,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,22,import org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,38,rivate int numberOfElements;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,36,private final int numberOfElements;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,41,rivate double exponent;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,38,private final double exponent;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,45, exponent. Both values must be positive; otherwise an
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,46, <code>IllegalArgumentException</code> is thrown.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,42,* exponent.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,48, @param numberOfElements the number of elements
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,49, @param exponent the exponent
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,50, @exception IllegalArgumentException if n &le; 0 or s &le; 0.0
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,44,* @param numberOfElements Number of elements.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,45,* @param exponent Exponent.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,46,* @exception NotStrictlyPositiveException if {@code numberOfElements <= 0}
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,47,* or {@code exponent <= 0}.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,52,"ublic ZipfDistributionImpl(final int numberOfElements, final double exponent)"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,53,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,54,etNumberOfElementsInternal(numberOfElements);
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,55,etExponentInternal(exponent);
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,49,"public ZipfDistributionImpl(final int numberOfElements,"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,50,final double exponent) {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,51,if (numberOfElements <= 0) {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,52,"throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,53,numberOfElements);
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,55,if (exponent <= 0) {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,56,"throw new NotStrictlyPositiveException(LocalizedFormats.EXPONENT,"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,57,exponent);
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,60,this.numberOfElements = numberOfElements;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,61,this.exponent = exponent;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,59, Get the number of elements (e.g. corpus size) for the distribution.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,61, @return the number of elements
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,65,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,68, Set the number of elements (e.g. corpus size) for the distribution.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,69, The parameter value must be positive; otherwise an
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,70, <code>IllegalArgumentException</code> is thrown.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,72, @param n the number of elements
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,73, @exception IllegalArgumentException if n &le; 0
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,74, @deprecated as of 2.1 (class will become immutable in 3.0)
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,76,Deprecated
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,77,ublic void setNumberOfElements(final int n) {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,78,etNumberOfElementsInternal(n);
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,81, Set the number of elements (e.g. corpus size) for the distribution.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,82, The parameter value must be positive; otherwise an
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,83, <code>IllegalArgumentException</code> is thrown.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,85, @param n the number of elements
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,86, @exception IllegalArgumentException if n &le; 0
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,88,rivate void setNumberOfElementsInternal(final int n)
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,89,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,90,f (n <= 0) {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,91,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,92,"ocalizedFormats.INSUFFICIENT_DIMENSION, n, 0);"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,94,his.numberOfElements = n;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,98, Get the exponent characterising the distribution.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,100, @return the exponent
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,72,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,107, Set the exponent characterising the distribution.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,108, The parameter value must be positive; otherwise an
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,109, <code>IllegalArgumentException</code> is thrown.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,111, @param s the exponent
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,112, @exception IllegalArgumentException if s &le; 0.0
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,113, @deprecated as of 2.1 (class will become immutable in 3.0)
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,115,Deprecated
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,116,ublic void setExponent(final double s) {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,117,etExponentInternal(s);
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,120, Set the exponent characterising the distribution.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,121, The parameter value must be positive; otherwise an
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,122, <code>IllegalArgumentException</code> is thrown.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,124, @param s the exponent
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,125, @exception IllegalArgumentException if s &le; 0.0
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,127,rivate void setExponentInternal(final double s)
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,128,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,129,f (s <= 0.0) {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,130,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,131,"ocalizedFormats.NOT_POSITIVE_EXPONENT,"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,132,);
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,134,his.exponent = s;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,138, The probability mass function P(X = x) for a Zipf distribution.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,79,* The probability mass function {@code P(X = x)} for a Zipf distribution.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,140, @param x the value at which the probability density function is evaluated.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,141, @return the value of the probability mass function at x
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,81,* @param x Value at which the probability density function is evaluated.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,82,* @return the value of the probability mass function at {@code x}.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,153, The probability distribution function P(X <= x) for a Zipf distribution.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,93,* The probability distribution function {@code P(X <= x)} for a
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,94,* Zipf distribution.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,155, @param x the value at which the PDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,156, @return Zipf distribution function evaluated at x
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,96,* @param x Value at which the PDF is evaluated.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,97,* @return Zipf distribution function evaluated at {@code x}.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,171," Access the domain value lower bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,111,"* Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,174, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,175," @return domain value lower bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,176,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,114,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,115,"* @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,184," Access the domain value upper bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,123,"* Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,187, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,188," @return domain value upper bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,189,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,126,* @param p Desired probability for the critical value
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,127,"* @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,202, @param n the term in the series to calculate (must be &ge; 1)
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,203, @param m the exponent; special case m == 1.0 is the harmonic series
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,204, @return the nth generalized harmonic number
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,139,* @param n Term in the series to calculate (must be larger than 1)
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,140,* @param m Exponent (special case {@code m = 1} is the harmonic series).
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,141,* @return the n<sup>th</sup> generalized harmonic number.
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,122,"DIMENSION(""dimension ({0})""), /* keep */"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,154,"NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,156,"NUMBER_OF_TRIALS(""number of trials ({0})""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,184,"EXPONENT(""exponent ({0})""), /* keep */"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,195,"POPULATION_SIZE(""population size ({0})""), /* keep */"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,21,import org.apache.commons.math.exception.NotPositiveException;
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,22,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,23,import org.apache.commons.math.exception.NumberIsTooLargeException;
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,130,ublic void testPopulationSize() {
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,131,"ypergeometricDistribution dist = new HypergeometricDistributionImpl(5,3,5);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,133,public void testPreconditions() {
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,134,HypergeometricDistribution dist;
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,133,ist.setPopulationSize(-1);
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,134,"ail(""negative population size.  IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,135, catch(IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,136,"dist = new HypergeometricDistributionImpl(0, 3, 5);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,137,"fail(""negative population size. NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,138,} catch(NotStrictlyPositiveException ex) {
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,139,// Expected.
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,141,try {
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,142,"dist = new HypergeometricDistributionImpl(5, -1, 5);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,143,"fail(""negative number of successes. NotPositiveException expected"");"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,144,} catch(NotPositiveException ex) {
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,145,// Expected.
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,147,try {
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,148,"dist = new HypergeometricDistributionImpl(5, 3, -1);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,149,"fail(""negative sample size. NotPositiveException expected"");"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,150,} catch(NotPositiveException ex) {
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,151,// Expected.
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,153,try {
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,154,"dist = new HypergeometricDistributionImpl(5, 6, 5);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,155,"fail(""numberOfSuccesses > populationSize. NumberIsTooLargeException expected"");"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,156,} catch(NumberIsTooLargeException ex) {
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,157,// Expected.
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,159,try {
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,160,"dist = new HypergeometricDistributionImpl(5, 3, 6);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,161,"fail(""sampleSize > populationSize. NumberIsTooLargeException expected"");"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,162,} catch(NumberIsTooLargeException ex) {
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,163,// Expected.
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,138,ist.setPopulationSize(10);
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,139,"ssertEquals(10, dist.getPopulationSize());"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,167,public void testAccessors() {
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,168,"HypergeometricDistribution dist = new HypergeometricDistributionImpl(5, 3, 4);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,169,"assertEquals(5, dist.getPopulationSize());"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,170,"assertEquals(3, dist.getNumberOfSuccesses());"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,171,"assertEquals(4, dist.getSampleSize());"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,20,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,34,public void testPreconditions() {
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,35,ZipfDistribution dist;
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,36,try {
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,37,"dist = new ZipfDistributionImpl(0, 1);"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,38,"fail(""NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,39,} catch (NotStrictlyPositiveException e) {
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,40,// Expected.
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,42,try {
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,43,"dist = new ZipfDistributionImpl(1, 0);"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,44,"fail(""NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,45,} catch (NotStrictlyPositiveException e) {
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,46,// Expected.

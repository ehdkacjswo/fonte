is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,151,"hrows DimensionMismatchException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,151,"throws DimensionMismatchException, NoDataException {"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,40,* @param <T> the type of the objective function to be optimized
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,123,ublic void setConvergenceChecker(RealConvergenceChecker checker) {
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,124,his.checker = checker;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,124,public void setConvergenceChecker(RealConvergenceChecker convergenceChecker) {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,125,this.checker = convergenceChecker;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,49,rivate GoalType goal;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,49,private GoalType optimizationGoal;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,51,rivate double min;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,51,private double searchMin;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,53,rivate double max;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,53,private double searchMax;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,55,rivate double startValue;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,55,private double searchStart;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,158,eturn goal;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,158,return optimizationGoal;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,164,eturn min;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,164,return searchMin;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,170,eturn max;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,170,return searchMax;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,176,eturn startValue;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,176,return searchStart;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,218,"ublic double optimize(UnivariateRealFunction function, GoalType goal,"
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,218,"public double optimize(UnivariateRealFunction f, GoalType goal,"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,222,his.min = min;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,223,his.max = max;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,224,his.startValue = startValue;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,225,his.goal = goal;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,226,his.function = function;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,222,this.searchMin = min;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,223,this.searchMax = max;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,224,this.searchStart = startValue;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,225,this.optimizationGoal = goal;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,226,this.function = f;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,231,* @see #getFLow()
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,238,* Get function value at {@link #getLo()}.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,239,* @return function value at {@link #getLo()}
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,241,public double getFLow() {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,242,return fLo;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,247,* @see #getFHi()
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,254,* Get function value at {@link #getHi()}.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,255,* @return function value at {@link #getHi()}
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,257,public double getFHi() {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,258,return fHi;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,263,* @see #getFMid()
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,270,* Get function value at {@link #getMid()}.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,271,* @return function value at {@link #getMid()}
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,273,public double getFMid() {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,274,return fMid;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1872,/** Enumerate type for increasing/decreasing directions. */
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1872,"NCREASING,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1873,ECREASING
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1875,/** Constant for increasing direction. */
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1876,"INCREASING,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1878,/** Constant for decreasing direction. */
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1879,DECREASING
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,143, {@link #MultidimensionalCounter(int[])
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,143,* {@link MultidimensionalCounter#MultidimensionalCounter(int[])
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,162, @throws {@link NotStrictlyPositiveException} if one of the sizes is
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,162,* @throws NotStrictlyPositiveException if one of the sizes is
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,213, @throws {@link OutOfRangeException} if {@code index} is not between
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,213,* @throws OutOfRangeException if {@code index} is not between
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,217,f (index < 0
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,218,| index >= totalSize) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,217,if (index < 0 ||
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,218,index >= totalSize) {
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,253, @throws {@link DimensionMismatchException} if the size of {@code c}
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,254, does not match the size of the array given in the contructor.
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,255, @throws {@link OutOfRangeException} if a value of {@code c} is not in
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,253,* @throws DimensionMismatchException if the size of {@code c}
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,254,* does not match the size of the array given in the constructor.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,255,* @throws OutOfRangeException if a value of {@code c} is not in
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,257, {@link #MultidimensionalCounter(int[]) constructor}.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,257,* {@link MultidimensionalCounter#MultidimensionalCounter(int...) constructor}.
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,259,ublic int getCount(int ... c) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,259,public int getCount(int ... c) throws OutOfRangeException {
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,266,f (index < 0
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,267,| index >= size[i]) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,266,if (index < 0 ||
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,267,index >= size[i]) {

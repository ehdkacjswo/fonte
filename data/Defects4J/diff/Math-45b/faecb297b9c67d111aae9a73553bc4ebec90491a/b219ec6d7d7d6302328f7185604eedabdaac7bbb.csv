is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,22,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,23,import org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction;
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,23, This interface represents an optimization algorithm for {@link ScalarDifferentiableObjectiveFunction
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,26,* This interface represents an optimization algorithm for {@link DifferentiableMultivariateRealFunction
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,25, @see ScalarOptimizer
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,26, @see VectorialDifferentiableOptimizer
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,28,* <p>Optimization algorithms find the input point set that either {@link GoalType
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,29,* maximize or minimize} an objective function.</p>
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,30,* @see MultivariateRealOptimizer
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,31,* @see DifferentiableMultivariateVectorialOptimizer
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,30,ublic interface ScalarDifferentiableOptimizer extends Serializable {
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,35,public interface DifferentiableMultivariateRealOptimizer extends Serializable {
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,45," {@link #optimize(ScalarDifferentiableObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,50,"* {@link #optimize(DifferentiableMultivariateRealFunction, GoalType, double[]) optimize}"
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,55," {@link #optimize(ScalarDifferentiableObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,60,"* {@link #optimize(DifferentiableMultivariateRealFunction, GoalType, double[]) optimize}"
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,65," {@link #optimize(ScalarDifferentiableObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,70,"* {@link #optimize(DifferentiableMultivariateRealFunction, GoalType, double[]) optimize}"
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,75,oid setConvergenceChecker(ScalarConvergenceChecker checker);
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,80,void setConvergenceChecker(RealConvergenceChecker checker);
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,80,calarConvergenceChecker getConvergenceChecker();
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,85,RealConvergenceChecker getConvergenceChecker();
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,88, @exception ObjectiveException if the objective function throws one during
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,93,* @exception FunctionEvaluationException if the objective function throws one during
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,93,"calarPointValuePair optimize(ScalarDifferentiableObjectiveFunction f,"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,98,"RealPointValuePair optimize(DifferentiableMultivariateRealFunction f,"
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,96,"hrows ObjectiveException, OptimizationException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,101,"throws FunctionEvaluationException, OptimizationException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,22,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,23,import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,23, This interface represents an optimization algorithm for {@link VectorialDifferentiableObjectiveFunction
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,26,* This interface represents an optimization algorithm for {@link DifferentiableMultivariateVectorialFunction
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,25, @see ScalarOptimizer
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,26, @see ScalarDifferentiableOptimizer
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,28,* <p>Optimization algorithms find the input point set that either {@link GoalType
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,29,* maximize or minimize} an objective function.</p>
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,30,* @see MultivariateRealOptimizer
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,31,* @see DifferentiableMultivariateRealOptimizer
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,30,ublic interface VectorialDifferentiableOptimizer extends Serializable {
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,35,public interface DifferentiableMultivariateVectorialOptimizer extends Serializable {
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,89, @exception ObjectiveException if the objective function throws one during
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,94,* @exception FunctionEvaluationException if the objective function throws one during
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,94,"ectorialPointValuePair optimize(VectorialDifferentiableObjectiveFunction f,"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,99,"VectorialPointValuePair optimize(DifferentiableMultivariateVectorialFunction f,"
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,97,"hrows ObjectiveException, OptimizationException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,102,"throws FunctionEvaluationException, OptimizationException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,24,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,26,import org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,27,import org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,28, Special implementation of the {@link ScalarDifferentiableOptimizer} interface adding
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,31,* Special implementation of the {@link DifferentiableMultivariateRealOptimizer} interface adding
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,38,ublic class MultiStartScalarDifferentiableOptimizer implements ScalarDifferentiableOptimizer {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,41,public class MultiStartDifferentiableMultivariateRealOptimizer
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,42,implements DifferentiableMultivariateRealOptimizer {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,41,rivate static final long serialVersionUID = 6185821146433609962L;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,45,private static final long serialVersionUID = -3220364832729994537L;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,44,rivate final ScalarDifferentiableOptimizer optimizer;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,48,private final DifferentiableMultivariateRealOptimizer optimizer;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,65,rivate ScalarPointValuePair[] optima;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,69,private RealPointValuePair[] optima;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,75,"ublic MultiStartScalarDifferentiableOptimizer(final ScalarDifferentiableOptimizer optimizer,"
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,76,"inal int starts,"
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,77,inal RandomVectorGenerator generator) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,79,"public MultiStartDifferentiableMultivariateRealOptimizer(final DifferentiableMultivariateRealOptimizer optimizer,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,80,"final int starts,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,81,final RandomVectorGenerator generator) {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,89," #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize}."
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,93,"* #optimize(MultivariateRealFunction, GoalType, double[]) optimize}."
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,91," restarts. The {@link #optimize(ScalarObjectiveFunction, GoalType,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,95,"* restarts. The {@link #optimize(MultivariateRealFunction, GoalType,"
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,95," #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,99,"* #optimize(MultivariateRealFunction, GoalType, double[]) optimize}"
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,105," elements will be null if the {@link #optimize(ScalarObjectiveFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,109,"* elements will be null if the {@link #optimize(MultivariateRealFunction,"
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,111," @exception IllegalStateException if {@link #optimize(ScalarObjectiveFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,115,"* @exception IllegalStateException if {@link #optimize(MultivariateRealFunction,"
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,114,ublic ScalarPointValuePair[] getOptima() throws IllegalStateException {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,118,public RealPointValuePair[] getOptima() throws IllegalStateException {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,118,eturn (ScalarPointValuePair[]) optima.clone();
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,122,return (RealPointValuePair[]) optima.clone();
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,147,ublic void setConvergenceChecker(ScalarConvergenceChecker checker) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,151,public void setConvergenceChecker(RealConvergenceChecker checker) {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,152,ublic ScalarConvergenceChecker getConvergenceChecker() {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,156,public RealConvergenceChecker getConvergenceChecker() {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,157,"ublic ScalarPointValuePair optimize(final ScalarDifferentiableObjectiveFunction f,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,161,"public RealPointValuePair optimize(final DifferentiableMultivariateRealFunction f,"
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,160,"hrows ObjectiveException, OptimizationException {"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,164,"throws FunctionEvaluationException, OptimizationException {"
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,162,ptima                   = new ScalarPointValuePair[starts];
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,166,optima                   = new RealPointValuePair[starts];
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,174, catch (ObjectiveException obe) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,178,} catch (FunctionEvaluationException fee) {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,176, catch (OptimizationException ope) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,180,} catch (OptimizationException oe) {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,187,"rrays.sort(optima, new Comparator<ScalarPointValuePair>() {"
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,188,"ublic int compare(final ScalarPointValuePair o1, final ScalarPointValuePair o2) {"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,191,"Arrays.sort(optima, new Comparator<RealPointValuePair>() {"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,192,"public int compare(final RealPointValuePair o1, final RealPointValuePair o2) {"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,24,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,26,import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,27,import org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,28, Special implementation of the {@link VectorialDifferentiableOptimizer} interface adding
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,31,* Special implementation of the {@link DifferentiableMultivariateVectorialOptimizer} interface adding
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,38,ublic class MultiStartVectorialDifferentiableOptimizer implements VectorialDifferentiableOptimizer {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,41,public class MultiStartDifferentiableMultivariateVectorialOptimizer
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,42,implements DifferentiableMultivariateVectorialOptimizer {
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,41,rivate static final long serialVersionUID = -9109278856437190136L;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,45,private static final long serialVersionUID = 9206382258980561530L;
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,44,rivate final VectorialDifferentiableOptimizer optimizer;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,48,private final DifferentiableMultivariateVectorialOptimizer optimizer;
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,75,"ublic MultiStartVectorialDifferentiableOptimizer(final VectorialDifferentiableOptimizer optimizer,"
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,76,"inal int starts,"
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,77,inal RandomVectorGenerator generator) {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,79,public MultiStartDifferentiableMultivariateVectorialOptimizer(
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,80,"final DifferentiableMultivariateVectorialOptimizer optimizer,"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,81,"final int starts,"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,82,final RandomVectorGenerator generator) {
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,89," #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize}."
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,94,"* #optimize(MultivariateRealFunction, GoalType, double[]) optimize}."
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,91," restarts. The {@link #optimize(ScalarObjectiveFunction, GoalType,"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,96,"* restarts. The {@link #optimize(MultivariateRealFunction, GoalType,"
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,95," #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,100,"* #optimize(MultivariateRealFunction, GoalType, double[]) optimize}"
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,105," elements will be null if the {@link #optimize(ScalarObjectiveFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,110,"* elements will be null if the {@link #optimize(MultivariateRealFunction,"
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,111," @exception IllegalStateException if {@link #optimize(ScalarObjectiveFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,116,"* @exception IllegalStateException if {@link #optimize(MultivariateRealFunction,"
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,157,"ublic VectorialPointValuePair optimize(final VectorialDifferentiableObjectiveFunction f,"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,162,"public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f,"
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,160,"hrows ObjectiveException, OptimizationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,165,"throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {"
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,174, catch (ObjectiveException obe) {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,179,} catch (FunctionEvaluationException fee) {
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,176, catch (OptimizationException ope) {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,181,} catch (OptimizationException oe) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,24,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,26,import org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,28, Special implementation of the {@link ScalarOptimizer} interface adding
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,30,* Special implementation of the {@link MultivariateRealOptimizer} interface adding
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,38,ublic class MultiStartScalarOptimizer implements ScalarOptimizer {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,40,public class MultiStartMultivariateRealOptimizer implements MultivariateRealOptimizer {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,41,rivate static final long serialVersionUID = -7333253288301713047L;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,43,private static final long serialVersionUID = 5983375963110961019L;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,44,rivate final ScalarOptimizer optimizer;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,46,private final MultivariateRealOptimizer optimizer;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,62,rivate ScalarPointValuePair[] optima;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,64,private RealPointValuePair[] optima;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,72,"ublic MultiStartScalarOptimizer(final ScalarOptimizer optimizer, final int starts,"
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,73,inal RandomVectorGenerator generator) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,74,"public MultiStartMultivariateRealOptimizer(final MultivariateRealOptimizer optimizer,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,75,"final int starts,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,76,final RandomVectorGenerator generator) {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,84," #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize}."
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,87,"* #optimize(MultivariateRealFunction, GoalType, double[]) optimize}."
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,86," restarts. The {@link #optimize(ScalarObjectiveFunction, GoalType,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,89,"* restarts. The {@link #optimize(MultivariateRealFunction, GoalType,"
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,90," #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,93,"* #optimize(MultivariateRealFunction, GoalType, double[]) optimize}"
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,100," elements will be null if the {@link #optimize(ScalarObjectiveFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,103,"* elements will be null if the {@link #optimize(MultivariateRealFunction,"
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,106," @exception IllegalStateException if {@link #optimize(ScalarObjectiveFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,109,"* @exception IllegalStateException if {@link #optimize(MultivariateRealFunction,"
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,109,ublic ScalarPointValuePair[] getOptima() throws IllegalStateException {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,112,public RealPointValuePair[] getOptima() throws IllegalStateException {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,113,eturn (ScalarPointValuePair[]) optima.clone();
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,116,return (RealPointValuePair[]) optima.clone();
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,137,ublic void setConvergenceChecker(ScalarConvergenceChecker checker) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,140,public void setConvergenceChecker(RealConvergenceChecker checker) {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,142,ublic ScalarConvergenceChecker getConvergenceChecker() {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,145,public RealConvergenceChecker getConvergenceChecker() {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,147,"ublic ScalarPointValuePair optimize(final ScalarObjectiveFunction f,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,150,"public RealPointValuePair optimize(final MultivariateRealFunction f,"
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,150,"hrows ObjectiveException, OptimizationException {"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,153,"throws FunctionEvaluationException, OptimizationException {"
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,152,ptima           = new ScalarPointValuePair[starts];
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,155,optima           = new RealPointValuePair[starts];
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,163, catch (ObjectiveException obe) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,166,} catch (FunctionEvaluationException fee) {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,165, catch (OptimizationException ope) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,168,} catch (OptimizationException oe) {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,175,"rrays.sort(optima, new Comparator<ScalarPointValuePair>() {"
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,176,"ublic int compare(final ScalarPointValuePair o1, final ScalarPointValuePair o2) {"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,178,"Arrays.sort(optima, new Comparator<RealPointValuePair>() {"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,179,"public int compare(final RealPointValuePair o1, final RealPointValuePair o2) {"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,20,import java.util.Arrays;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,22,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,23,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,24,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,25,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,26,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,27,import org.apache.commons.math.random.RandomGenerator;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,30,* Special implementation of the {@link UnivariateRealOptimizer} interface adding
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,31,* multi-start features to an existing optimizer.
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,32,* <p>
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,33,* This class wraps a classical optimizer to use it several times in
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,34,* turn with different starting points in order to avoid being trapped
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,35,* into a local extremum when looking for a global one.
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,36,* </p>
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,37,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,38,* @since 2.0
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,40,public class MultiStartUnivariateRealOptimizer implements UnivariateRealOptimizer {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,42,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,43,private static final long serialVersionUID = 5983375963110961019L;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,45,/** Underlying classical optimizer. */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,46,private final UnivariateRealOptimizer optimizer;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,48,/** Maximal number of iterations allowed. */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,49,private int maxIterations;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,51,/** Number of iterations already performed for all starts. */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,52,private int totalIterations;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,54,/** Number of starts to go. */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,55,private int starts;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,57,/** Random generator for multi-start. */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,58,private RandomGenerator generator;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,60,/** Found optima. */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,61,private double[] optima;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,64,* Create a multi-start optimizer from a single-start optimizer
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,65,* @param optimizer single-start optimizer to wrap
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,66,* @param starts number of starts to perform (including the
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,67,"* first one), multi-start is disabled if value is less than or"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,68,* equal to 1
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,69,* @param generator random generator to use for restarts
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,71,"public MultiStartUnivariateRealOptimizer(final UnivariateRealOptimizer optimizer,"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,72,"final int starts,"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,73,final RandomGenerator generator) {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,74,this.optimizer        = optimizer;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,75,this.maxIterations    = Integer.MAX_VALUE;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,76,this.totalIterations  = 0;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,77,this.starts           = starts;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,78,this.generator        = generator;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,79,this.optima           = null;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,82,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,83,public double getFunctionValue() {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,84,return optimizer.getFunctionValue();
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,87,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,88,public double getResult() {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,89,return optimizer.getResult();
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,92,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,93,public double getAbsoluteAccuracy() {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,94,return optimizer.getAbsoluteAccuracy();
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,97,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,98,public int getIterationCount() {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,99,return totalIterations;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,102,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,103,public int getMaximalIterationCount() {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,104,return maxIterations;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,107,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,108,public double getRelativeAccuracy() {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,109,return optimizer.getRelativeAccuracy();
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,112,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,113,public void resetAbsoluteAccuracy() {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,114,optimizer.resetAbsoluteAccuracy();
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,117,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,118,public void resetMaximalIterationCount() {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,119,optimizer.resetMaximalIterationCount();
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,122,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,123,public void resetRelativeAccuracy() {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,124,optimizer.resetRelativeAccuracy();
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,127,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,128,public void setAbsoluteAccuracy(double accuracy) {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,129,optimizer.setAbsoluteAccuracy(accuracy);
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,132,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,133,public void setMaximalIterationCount(int count) {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,134,this.maxIterations = count;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,137,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,138,public void setRelativeAccuracy(double accuracy) {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,139,optimizer.setRelativeAccuracy(accuracy);
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,142,/** Get all the optima found during the last call to {@link
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,143,"* #optimize(MultivariateRealFunction, GoalType, double[]) optimize}."
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,144,* <p>The optimizer stores all the optima found during a set of
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,145,"* restarts. The {@link #optimize(MultivariateRealFunction, GoalType,"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,146,* double[]) optimize} method returns the best point only. This
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,147,"* method returns all the points found at the end of each starts,"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,148,* including the best one already returned by the {@link
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,149,"* #optimize(MultivariateRealFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,150,* method.
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,151,* </p>
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,152,* <p>
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,153,* The returned array as one element for each start as specified
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,154,* in the constructor. It is ordered with the results from the
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,155,"* runs that did converge first, sorted from best to worst"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,156,* objective value (i.e in ascending order if minimizing and in
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,157,"* descending order if maximizing), followed by and null elements"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,158,* corresponding to the runs that did not converge. This means all
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,159,"* elements will be null if the {@link #optimize(MultivariateRealFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,160,"* GoalType, double[]) optimize} method did throw a {@link"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,161,* ConvergenceException ConvergenceException}). This also means that
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,162,"* if the first element is non null, it is the best point found across"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,163,* all starts.</p>
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,164,* @return array containing the optima
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,165,"* @exception IllegalStateException if {@link #optimize(MultivariateRealFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,166,"* GoalType, double[]) optimize} has not been called"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,168,public double[] getOptima() throws IllegalStateException {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,169,if (optima == null) {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,170,"throw MathRuntimeException.createIllegalStateException(""no optimum computed yet"");"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,172,return optima.clone();
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,175,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,176,"public double optimize(final UnivariateRealFunction f, final GoalType goalType,"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,177,"final double min, final double max)"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,178,"throws ConvergenceException,"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,179,FunctionEvaluationException {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,180,"return optimize(f, goalType, min, max, min + generator.nextDouble() * (max - min));"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,183,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,184,"public double optimize(final UnivariateRealFunction f, final GoalType goalType,"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,185,"final double min, final double max, final double startValue)"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,186,"throws ConvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,188,optima          = new double[starts];
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,189,totalIterations = 0;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,191,// multi-start loop
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,192,for (int i = 0; i < starts; ++i) {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,194,try {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,195,optimizer.setMaximalIterationCount(maxIterations - totalIterations);
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,196,"optima[i] = optimizer.optimize(f, goalType, min, max,"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,197,(i == 0) ? startValue : generator.nextDouble() * (max - min));
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,198,} catch (FunctionEvaluationException fee) {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,199,optima[i] = Double.NaN;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,200,} catch (ConvergenceException ce) {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,201,optima[i] = Double.NaN;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,204,totalIterations  += optimizer.getIterationCount();
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,208,"// sort the optima from best to worst, followed by NaN elements"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,209,int lastNaN = optima.length;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,210,for (int i = 0; i < lastNaN; ++i) {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,211,if (Double.isNaN(optima[i])) {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,212,optima[i] = optima[--lastNaN];
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,213,optima[lastNaN + 1] = Double.NaN;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,216,"Arrays.sort(optima, 0, lastNaN);"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,217,if (goalType == GoalType.MAXIMIZE) {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,218,"for (int i = 0, j = lastNaN - 1; i < j; ++i, --j) {"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,219,double tmp = optima[i];
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,220,optima[i] = optima[j];
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,221,optima[j] = tmp;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,225,if (Double.isNaN(optima[0])) {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,226,throw new OptimizationException(
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,227,"""none of the {0} start points lead to convergence"","
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,228,starts);
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,231,// return the found point given the best objective function value
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,232,return optima[0];
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,22,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,23,import org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,23, This interface represents an optimization algorithm for {@link ScalarObjectiveFunction
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,26,* This interface represents an optimization algorithm for {@link MultivariateRealFunction
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,25, @see ScalarDifferentiableOptimizer
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,26, @see VectorialDifferentiableOptimizer
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,28,* <p>Optimization algorithms find the input point set that either {@link GoalType
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,29,* maximize or minimize} an objective function.</p>
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,30,* @see DifferentiableMultivariateRealOptimizer
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,31,* @see DifferentiableMultivariateVectorialOptimizer
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,30,ublic interface ScalarOptimizer extends Serializable {
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,35,public interface MultivariateRealOptimizer extends Serializable {
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,45," {@link #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,50,"* {@link #optimize(MultivariateRealFunction, GoalType, double[]) optimize}"
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,55," {@link #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,60,"* {@link #optimize(MultivariateRealFunction, GoalType, double[]) optimize}"
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,65,oid setConvergenceChecker(ScalarConvergenceChecker checker);
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,70,void setConvergenceChecker(RealConvergenceChecker checker);
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,70,calarConvergenceChecker getConvergenceChecker();
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,75,RealConvergenceChecker getConvergenceChecker();
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,78, @exception ObjectiveException if the objective function throws one during
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,83,* @exception FunctionEvaluationException if the objective function throws one during
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,83,"calarPointValuePair optimize(ScalarObjectiveFunction f,"
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,88,"RealPointValuePair optimize(MultivariateRealFunction f,"
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,86,"hrows ObjectiveException, OptimizationException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,91,"throws FunctionEvaluationException, OptimizationException, IllegalArgumentException;"
False,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,22,** This interface specifies how to check if an {@link ScalarOptimizer optimization
True,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,22,/** This interface specifies how to check if an {@link MultivariateRealOptimizer optimization
False,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,25, <p>Deciding if convergence has been reached is a problem-dependent
False,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,26, issue. The user should provide a class implementing this interface
False,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,27, to allow the optimization algorithm to stop its search according to
False,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,28, the problem at hand.</p>
True,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,25,* <p>Deciding if convergence has been reached is a problem-dependent issue. The
True,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,26,* user should provide a class implementing this interface to allow the optimization
True,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,27,* algorithm to stop its search according to the problem at hand.</p>
True,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,28,"* <p>For convenience, two implementations that fit simple needs are already provided:"
True,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,29,* {@link SimpleScalarValueChecker} and {@link SimpleScalarPointChecker}. The first
True,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,30,* one considers convergence is reached when the objective function value does not
True,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,31,"* change much anymore, it does not use the point set at all. The second one"
True,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,32,* considers convergence is reached when the input point set does not change
True,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,33,"* much anymore, it does not use objective function value at all.</p>"
False,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,34,ublic interface ScalarConvergenceChecker extends Serializable {
True,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,39,public interface RealConvergenceChecker extends Serializable {
False,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,50,"oolean converged(int iteration, ScalarPointValuePair previous, ScalarPointValuePair current);"
True,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,55,"boolean converged(int iteration, RealPointValuePair previous, RealPointValuePair current);"
True,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,src/java/org/apache/commons/math/optimization/RealPointValuePair.java,22,import org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,src/java/org/apache/commons/math/optimization/RealPointValuePair.java,26, @see ScalarObjectiveFunction
True,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,src/java/org/apache/commons/math/optimization/RealPointValuePair.java,28,* @see MultivariateRealFunction
False,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,src/java/org/apache/commons/math/optimization/RealPointValuePair.java,30,ublic class ScalarPointValuePair implements Serializable {
True,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,src/java/org/apache/commons/math/optimization/RealPointValuePair.java,32,public class RealPointValuePair implements Serializable {
False,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,src/java/org/apache/commons/math/optimization/RealPointValuePair.java,46,"ublic ScalarPointValuePair(final double[] point, final double value) {"
True,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,src/java/org/apache/commons/math/optimization/RealPointValuePair.java,48,"public RealPointValuePair(final double[] point, final double value) {"
False,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,src/java/org/apache/commons/math/optimization/RealPointValuePair.java,58,"ublic ScalarPointValuePair(final double[] point, final double value,"
True,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,src/java/org/apache/commons/math/optimization/RealPointValuePair.java,60,"public RealPointValuePair(final double[] point, final double value,"
False,src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,23, Simple implementation of the {@link ScalarConvergenceChecker} interface using
True,src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,23,* Simple implementation of the {@link RealConvergenceChecker} interface using
False,src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,34,ublic class SimpleScalarValueChecker implements ScalarConvergenceChecker {
True,src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,34,public class SimpleScalarValueChecker implements RealConvergenceChecker {
False,src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,75,"inal ScalarPointValuePair previous,"
False,src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,76,inal ScalarPointValuePair current) {
True,src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,75,"final RealPointValuePair previous,"
True,src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,76,final RealPointValuePair current) {
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,17,ackage org.apache.commons.math.optimization.univariate;
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,17,package org.apache.commons.math.optimization;
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,26, Interface for (univariate real) minimization algorithms.
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,26,* Interface for (univariate real) optimization algorithms.
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,31,ublic interface UnivariateRealMinimizer extends ConvergingAlgorithm {
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,31,public interface UnivariateRealOptimizer extends ConvergingAlgorithm {
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,34, Find a minimum in the given interval.
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,34,* Find an optimum in the given interval.
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,36, A minimizer may require that the interval brackets a single minimum.
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,36,* An optimizer may require that the interval brackets a single optimum.
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,38, @param f the function to minimize.
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,38,* @param f the function to optimize.
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,39,* @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,40,* or {@link GoalType#MINIMIZE}
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,41, @return a value where the function is minimum
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,43,* @return a value where the function is optimum
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,43, or the minimizer detects convergence problems otherwise.
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,45,* or the optimizer detects convergence problems otherwise.
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,47, satisfy the requirements specified by the minimizer
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,49,* satisfy the requirements specified by the optimizer
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,49,"ouble minimize(UnivariateRealFunction f, double min, double max)"
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,51,"double optimize(UnivariateRealFunction f, GoalType goalType,"
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,52,"double min, double max)"
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,53," Find a minimum in the given interval, start at startValue."
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,56,"* Find an optimum in the given interval, start at startValue."
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,55, A minimizer may require that the interval brackets a single minimum.
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,58,* An optimizer may require that the interval brackets a single optimum.
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,57, @param f the function to minimize.
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,60,* @param f the function to optimize.
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,61,* @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,62,* or {@link GoalType#MINIMIZE}
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,61, @return a value where the function is minimum
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,66,* @return a value where the function is optimum
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,63, or the minimizer detects convergence problems otherwise.
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,68,* or the optimizer detects convergence problems otherwise.
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,67, satisfy the requirements specified by the minimizer
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,72,* satisfy the requirements specified by the optimizer
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,69,"ouble minimize(UnivariateRealFunction f, double min, double max, double startValue)"
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,74,"double optimize(UnivariateRealFunction f, GoalType goalType,"
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,75,"double min, double max, double startValue)"
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,73, Get the result of the last run of the minimizer.
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,79,* Get the result of the last run of the optimizer.
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,82, Get the result of the last run of the minimizer.
True,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java,88,* Get the result of the last run of the optimizer.
False,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,25, <p>Deciding if convergence has been reached is a problem-dependent
False,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,26, issue. The user should provide a class implementing this interface
False,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,27, to allow the optimization algorithm to stop its search according to
False,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,28, the problem at hand.</p>
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,25,* <p>Deciding if convergence has been reached is a problem-dependent issue. The
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,26,* user should provide a class implementing this interface to allow the optimization
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,27,* algorithm to stop its search according to the problem at hand.</p>
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,28,"* <p>For convenience, two implementations that fit simple needs are already provided:"
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,29,* {@link SimpleVectorialValueChecker} and {@link SimpleVectorialPointChecker}. The first
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,30,* one considers convergence is reached when the objective function value does not
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,31,"* change much anymore, it does not use the point set at all. The second one"
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,32,* considers convergence is reached when the input point set does not change
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,33,"* much anymore, it does not use objective function value at all.</p>"
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,22,import org.apache.commons.math.analysis.MultivariateVectorialFunction;
False,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,25, @see ScalarPointValuePair
False,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,26, @see VectorialObjectiveFunction
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,27,* @see RealPointValuePair
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,28,* @see MultivariateVectorialFunction
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,15, limitations under the License.
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,18,ackage org.apache.commons.math.optimization.univariate;
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,20,mport org.apache.commons.math.ConvergingAlgorithmImpl;
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,21,mport org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,24, Provide a default implementation for several functions useful to generic
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,25, minimizers.
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,27, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,28, @since 2.0
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,30,ublic abstract class UnivariateRealMinimizerImpl
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,31,xtends ConvergingAlgorithmImpl implements UnivariateRealMinimizer {
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,33,** Serializable version identifier. */
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,34,rivate static final long serialVersionUID = 4543031162377070699L;
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,36,** Indicates where a root has been computed. */
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,37,rotected boolean resultComputed = false;
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,39,** The last computed root. */
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,40,rotected double result;
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,42,** Value of the function at the last computed result. */
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,43,rotected double functionValue;
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,46, Construct a solver with given iteration count and accuracy.
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,48, @param defaultAbsoluteAccuracy maximum absolute error
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,49, @param defaultMaximalIterationCount maximum number of iterations
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,50, @throws IllegalArgumentException if f is null or the
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,51, defaultAbsoluteAccuracy is not valid
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,53,"rotected UnivariateRealMinimizerImpl(int defaultMaximalIterationCount,"
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,54,ouble defaultAbsoluteAccuracy) {
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,55,"uper(defaultMaximalIterationCount, defaultAbsoluteAccuracy);"
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,58,** Check if a result has been computed.
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,59, @exception IllegalStateException if no result has been computed
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,61,rotected void checkResultComputed() throws IllegalStateException {
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,62,f (!resultComputed) {
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,63,"hrow MathRuntimeException.createIllegalStateException(""no result available"");"
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,67,** {@inheritDoc} */
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,68,ublic double getResult() {
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,69,heckResultComputed();
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,70,eturn result;
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,73,** {@inheritDoc} */
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,74,ublic double getFunctionValue() {
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,75,heckResultComputed();
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,76,eturn functionValue;
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,80, Convenience function for implementations.
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,82, @param result the result to set
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,83, @param iterationCount the iteration count to set
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,85,"rotected final void setResult(double result, int iterationCount) {"
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,86,his.result = result;
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,87,his.iterationCount = iterationCount;
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,88,his.resultComputed = true;
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,92, Convenience function for implementations.
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,94, @param x the result to set
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,95, @param fx the result to set
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,96, @param iterationCount the iteration count to set
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,98,"rotected final void setResult(double x, double fx, int iterationCount) {"
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,99,his.result = x;
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,100,his.functionValue = fx;
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,101,his.iterationCount = iterationCount;
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,102,his.resultComputed = true;
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,106, Convenience function for implementations.
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,108,rotected final void clearResult() {
False,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,109,his.resultComputed = false;

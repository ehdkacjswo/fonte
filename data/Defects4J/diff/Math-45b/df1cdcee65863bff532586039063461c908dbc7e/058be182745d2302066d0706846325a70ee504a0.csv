is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,27,import junit.framework.AssertionFailedError;
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,30,import org.apache.commons.math.complex.ComplexFormat;
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,112,/ deserialize the Book
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,113,// deserialize the Object
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,173,* Fails iff values does not contain a number within epsilon of z.
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,175,* @param msg  message to return with failure
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,176,* @param values complex array to search
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,177,* @param z  value sought
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,178,* @param epsilon  tolerance
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,180,"public static void assertContains(String msg, Complex[] values,"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,181,"Complex z, double epsilon) {"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,182,int i = 0;
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,183,boolean found = false;
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,184,while (!found && i < values.length) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,185,try {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,186,"assertEquals(values[i], z, epsilon);"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,187,found = true;
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,188,} catch (AssertionFailedError er) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,189,// no match
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,191,i++;
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,193,if (!found) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,194,Assert.fail(msg +
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,195,""" Unable to find "" + ComplexFormat.formatComplex(z));"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,200,* Fails iff values does not contain a number within epsilon of z.
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,202,* @param values complex array to search
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,203,* @param z  value sought
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,204,* @param epsilon  tolerance
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,206,"public static void assertContains(Complex[] values,"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,207,"Complex z, double epsilon) {"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,208,"assertContains(null, values, z, epsilon);"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,212,* Fails iff values does not contain a number within epsilon of x.
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,214,* @param msg  message to return with failure
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,215,* @param values double array to search
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,216,* @param x value sought
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,217,* @param epsilon  tolerance
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,219,"public static void assertContains(String msg, double[] values,"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,220,"double x, double epsilon) {"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,221,int i = 0;
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,222,boolean found = false;
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,223,while (!found && i < values.length) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,224,try {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,225,"assertEquals(values[i], x, epsilon);"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,226,found = true;
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,227,} catch (AssertionFailedError er) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,228,// no match
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,230,i++;
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,232,if (!found) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,233,"Assert.fail(msg + "" Unable to find"" + x);"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,238,* Fails iff values does not contain a number within epsilon of x.
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,240,* @param values double array to search
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,241,* @param x value sought
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,242,* @param epsilon  tolerance
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,244,"public static void assertContains(double[] values, double x,"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,245,double epsilon) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,246,"assertContains(null, values, x, epsilon);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,2, Copyright 2003-2005 The Apache Software Foundation.
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,5, you may not use this file except in compliance with the License.
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,6, You may obtain a copy of the License at
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,13, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,14, limitations under the License.
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,16,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,18,mport org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,19,mport org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,22," Implements the <a href=""http://mathworld.wolfram.com/RombergIntegration.html"">"
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,23, Romberg Algorithm</a> for integrating of real univariate functions. For
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,24," reference, see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X,"
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,25, chapter 3.
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,26, <p>
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,27, Romberg integration employs k successvie refinements of the trapezoid
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,28, rule to remove error terms less than order O(N^(-2k)). Simpson's rule
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,29, is a special case of k = 2.
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,31, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,33,ublic class RombergIntegrator extends UnivariateRealIntegratorImpl {
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,35,** serializable version identifier */
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,36,tatic final long serialVersionUID = -1058849527738180243L;
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,39, Construct an integrator for the given function.
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,41, @param f function to solve
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,43,ublic RombergIntegrator(UnivariateRealFunction f) {
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,44,"uper(f, 32);"
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,48, Integrate the function in the given interval.
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,50, @param min the lower bound for the interval
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,51, @param max the upper bound for the interval
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,52, @return the value of integral
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,53, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,54, or the integrator detects convergence problems otherwise
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,55, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,56, function
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,57, @throws IllegalArgumentException if any parameters are invalid
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,59,"ublic double integrate(double min, double max) throws ConvergenceException,"
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,60,"unctionEvaluationException, IllegalArgumentException {"
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,62,"nt i = 1, j, m = maximalIterationCount + 1;"
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,63,/ Array strcture here can be improved for better space
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,64,/ efficiency because only the lower triangle is used.
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,65,"ouble r, t[][] = new double[m][m], s, olds;"
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,67,learResult();
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,68,"erifyInterval(min, max);"
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,69,erifyIterationCount();
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,71,rapezoidIntegrator qtrap = new TrapezoidIntegrator(this.f);
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,72,"[0][0] = qtrap.stage(min, max, 0);"
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,73,lds = t[0][0];
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,74,hile (i <= maximalIterationCount) {
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,75,"[i][0] = qtrap.stage(min, max, i);"
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,76,or (j = 1; j <= i; j++) {
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,77,/ Richardson extrapolation coefficient
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,78, = (1L << (2 * j)) -1;
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,79,[i][j] = t[i][j-1] + (t[i][j-1] - t[i-1][j-1]) / r;
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,81, = t[i][i];
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,82,f (i >= minimalIterationCount) {
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,83,f (Math.abs(s - olds) <= Math.abs(relativeAccuracy * olds)) {
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,84,"etResult(s, i);"
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,85,eturn result;
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,88,lds = s;
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,89,++;
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,91,"hrow new ConvergenceException(""Maximum number of iterations exceeded."");"
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,95, Verifies that the iteration limits are valid and within the range.
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,97, @throws IllegalArgumentException if not
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,99,rotected void verifyIterationCount() throws IllegalArgumentException {
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,100,uper.verifyIterationCount();
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,101,/ at most 32 bisection refinements due to higher order divider
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,102,f (maximalIterationCount > 32) {
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,103,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,104,"""Iteration upper limit out of [0, 32] range: "" +"
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,105,aximalIterationCount);
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,16,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,18,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,19,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,22,"* Implements the <a href=""http://mathworld.wolfram.com/RombergIntegration.html"">"
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,23,* Romberg Algorithm</a> for integrating of real univariate functions. For
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,24,"* reference, see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X,"
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,25,* chapter 3.
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,26,* <p>
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,27,* Romberg integration employs k successvie refinements of the trapezoid
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,28,* rule to remove error terms less than order O(N^(-2k)). Simpson's rule
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,29,* is a special case of k = 2.
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,31,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,33,public class RombergIntegrator extends UnivariateRealIntegratorImpl {
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,35,/** serializable version identifier */
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,36,static final long serialVersionUID = -1058849527738180243L;
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,39,* Construct an integrator for the given function.
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,41,* @param f function to solve
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,43,public RombergIntegrator(UnivariateRealFunction f) {
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,44,"super(f, 32);"
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,48,* Integrate the function in the given interval.
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,50,* @param min the lower bound for the interval
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,51,* @param max the upper bound for the interval
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,52,* @return the value of integral
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,53,* @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,54,* or the integrator detects convergence problems otherwise
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,55,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,56,* function
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,57,* @throws IllegalArgumentException if any parameters are invalid
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,59,"public double integrate(double min, double max) throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,60,"FunctionEvaluationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,62,"int i = 1, j, m = maximalIterationCount + 1;"
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,63,// Array strcture here can be improved for better space
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,64,// efficiency because only the lower triangle is used.
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,65,"double r, t[][] = new double[m][m], s, olds;"
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,67,clearResult();
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,68,"verifyInterval(min, max);"
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,69,verifyIterationCount();
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,71,TrapezoidIntegrator qtrap = new TrapezoidIntegrator(this.f);
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,72,"t[0][0] = qtrap.stage(min, max, 0);"
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,73,olds = t[0][0];
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,74,while (i <= maximalIterationCount) {
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,75,"t[i][0] = qtrap.stage(min, max, i);"
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,76,for (j = 1; j <= i; j++) {
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,77,// Richardson extrapolation coefficient
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,78,r = (1L << (2 * j)) -1;
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,79,t[i][j] = t[i][j-1] + (t[i][j-1] - t[i-1][j-1]) / r;
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,81,s = t[i][i];
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,82,if (i >= minimalIterationCount) {
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,83,if (Math.abs(s - olds) <= Math.abs(relativeAccuracy * olds)) {
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,84,"setResult(s, i);"
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,85,return result;
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,88,olds = s;
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,89,i++;
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,91,"throw new ConvergenceException(""Maximum number of iterations exceeded."");"
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,95,* Verifies that the iteration limits are valid and within the range.
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,97,* @throws IllegalArgumentException if not
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,99,protected void verifyIterationCount() throws IllegalArgumentException {
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,100,super.verifyIterationCount();
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,101,// at most 32 bisection refinements due to higher order divider
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,102,if (maximalIterationCount > 32) {
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,103,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,104,"(""Iteration upper limit out of [0, 32] range: "" +"
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,105,maximalIterationCount);
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,2, Copyright 2005 The Apache Software Foundation.
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,5, you may not use this file except in compliance with the License.
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,6, You may obtain a copy of the License at
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,13, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,14, limitations under the License.
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,16,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,18,mport org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,19,mport org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,22," Implements the <a href=""http://mathworld.wolfram.com/SimpsonsRule.html"">"
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,23, Simpson's Rule</a> for integrating of real univariate functions. For
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,24," reference, see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X,"
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,25, chapter 3.
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,26, <p>
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,27, This implementation employs basic trapezoid rule as building blocks to
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,28, calculate the Simpson's rule of alternating 2/3 and 4/3.
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,30, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,32,ublic class SimpsonIntegrator extends UnivariateRealIntegratorImpl {
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,34,** serializable version identifier */
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,35,tatic final long serialVersionUID = 3405465123320678216L;
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,38, Construct an integrator for the given function.
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,40, @param f function to solve
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,42,ublic SimpsonIntegrator(UnivariateRealFunction f) {
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,43,"uper(f, 64);"
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,47, Integrate the function in the given interval.
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,49, @param min the lower bound for the interval
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,50, @param max the upper bound for the interval
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,51, @return the value of integral
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,52, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,53, or the integrator detects convergence problems otherwise
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,54, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,55, function
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,56, @throws IllegalArgumentException if any parameters are invalid
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,58,"ublic double integrate(double min, double max) throws ConvergenceException,"
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,59,"unctionEvaluationException, IllegalArgumentException {"
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,61,nt i = 1;
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,62,"ouble s, olds, t, oldt;"
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,64,learResult();
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,65,"erifyInterval(min, max);"
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,66,erifyIterationCount();
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,68,rapezoidIntegrator qtrap = new TrapezoidIntegrator(this.f);
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,69,f (minimalIterationCount == 1) {
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,70," = (4 * qtrap.stage(min, max, 1) - qtrap.stage(min, max, 0)) / 3.0;"
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,71,"etResult(s, 1);"
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,72,eturn result;
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,74,/ Simpson's rule requires at least two trapezoid stages.
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,75,lds = 0;
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,76,"ldt = qtrap.stage(min, max, 0);"
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,77,hile (i <= maximalIterationCount) {
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,78," = qtrap.stage(min, max, i);"
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,79, = (4 * t - oldt) / 3.0;
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,80,f (i >= minimalIterationCount) {
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,81,f (Math.abs(s - olds) <= Math.abs(relativeAccuracy * olds)) {
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,82,"etResult(s, i);"
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,83,eturn result;
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,86,lds = s;
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,87,ldt = t;
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,88,++;
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,90,"hrow new ConvergenceException(""Maximum number of iterations exceeded."");"
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,94, Verifies that the iteration limits are valid and within the range.
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,96, @throws IllegalArgumentException if not
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,98,rotected void verifyIterationCount() throws IllegalArgumentException {
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,99,uper.verifyIterationCount();
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,100,/ at most 64 bisection refinements
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,101,f (maximalIterationCount > 64) {
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,102,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,103,"""Iteration upper limit out of [0, 64] range: "" +"
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,104,aximalIterationCount);
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,16,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,18,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,19,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,22,"* Implements the <a href=""http://mathworld.wolfram.com/SimpsonsRule.html"">"
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,23,* Simpson's Rule</a> for integrating of real univariate functions. For
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,24,"* reference, see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X,"
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,25,* chapter 3.
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,26,* <p>
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,27,* This implementation employs basic trapezoid rule as building blocks to
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,28,* calculate the Simpson's rule of alternating 2/3 and 4/3.
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,30,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,32,public class SimpsonIntegrator extends UnivariateRealIntegratorImpl {
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,34,/** serializable version identifier */
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,35,static final long serialVersionUID = 3405465123320678216L;
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,38,* Construct an integrator for the given function.
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,40,* @param f function to solve
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,42,public SimpsonIntegrator(UnivariateRealFunction f) {
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,43,"super(f, 64);"
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,47,* Integrate the function in the given interval.
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,49,* @param min the lower bound for the interval
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,50,* @param max the upper bound for the interval
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,51,* @return the value of integral
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,52,* @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,53,* or the integrator detects convergence problems otherwise
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,54,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,55,* function
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,56,* @throws IllegalArgumentException if any parameters are invalid
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,58,"public double integrate(double min, double max) throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,59,"FunctionEvaluationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,61,int i = 1;
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,62,"double s, olds, t, oldt;"
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,64,clearResult();
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,65,"verifyInterval(min, max);"
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,66,verifyIterationCount();
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,68,TrapezoidIntegrator qtrap = new TrapezoidIntegrator(this.f);
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,69,if (minimalIterationCount == 1) {
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,70,"s = (4 * qtrap.stage(min, max, 1) - qtrap.stage(min, max, 0)) / 3.0;"
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,71,"setResult(s, 1);"
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,72,return result;
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,74,// Simpson's rule requires at least two trapezoid stages.
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,75,olds = 0;
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,76,"oldt = qtrap.stage(min, max, 0);"
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,77,while (i <= maximalIterationCount) {
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,78,"t = qtrap.stage(min, max, i);"
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,79,s = (4 * t - oldt) / 3.0;
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,80,if (i >= minimalIterationCount) {
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,81,if (Math.abs(s - olds) <= Math.abs(relativeAccuracy * olds)) {
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,82,"setResult(s, i);"
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,83,return result;
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,86,olds = s;
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,87,oldt = t;
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,88,i++;
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,90,"throw new ConvergenceException(""Maximum number of iterations exceeded."");"
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,94,* Verifies that the iteration limits are valid and within the range.
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,96,* @throws IllegalArgumentException if not
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,98,protected void verifyIterationCount() throws IllegalArgumentException {
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,99,super.verifyIterationCount();
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,100,// at most 64 bisection refinements
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,101,if (maximalIterationCount > 64) {
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,102,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,103,"(""Iteration upper limit out of [0, 64] range: "" +"
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,104,maximalIterationCount);
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,2, Copyright 2005 The Apache Software Foundation.
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,5, you may not use this file except in compliance with the License.
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,6, You may obtain a copy of the License at
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,13, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,14, limitations under the License.
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,16,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,18,mport org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,19,mport org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,22," Implements the <a href=""http://mathworld.wolfram.com/TrapezoidalRule.html"">"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,23, Trapezoidal Rule</a> for integrating of real univariate functions. For
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,24," reference, see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X,"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,25, chapter 3.
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,26, <p>
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,27, The function should be integrable.
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,29, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,31,ublic class TrapezoidIntegrator extends UnivariateRealIntegratorImpl {
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,33,** serializable version identifier */
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,34,tatic final long serialVersionUID = 4978222553983172543L;
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,36,** intermediate result */
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,37,rivate double s;
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,40, Construct an integrator for the given function.
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,42, @param f function to solve
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,44,ublic TrapezoidIntegrator(UnivariateRealFunction f) {
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,45,"uper(f, 64);"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,49, Compute the n-th stage integral of trapezoid rule. This function
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,50, should only be called by API <code>integrate()</code> in the package.
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,51, To save time it does not verify arguments - caller does.
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,52, <p>
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,53, The interval is divided equally into 2^n sections rather than an
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,54, arbitrary m sections because this configuration can best utilize the
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,55, alrealy computed values.
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,57, @param min the lower bound for the interval
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,58, @param max the upper bound for the interval
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,59," @param n the stage of 1/2 refinement, n = 0 is no refinement"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,60, @return the value of n-th stage integral
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,61, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,62, function
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,64,"ouble stage(double min, double max, int n) throws"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,65,unctionEvaluationException {
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,67,"ong i, np;"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,68,"ouble x, spacing, sum = 0;"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,70,f (n == 0) {
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,71, = 0.5 * (max - min) * (f.value(min) + f.value(max));
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,72,eturn s;
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,73, else {
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,74,p = 1L << (n-1);           // number of new points in this stage
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,75,pacing = (max - min) / np; // spacing between adjacent new points
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,76, = min + 0.5 * spacing;    // the first new point
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,77,or (i = 0; i < np; i++) {
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,78,um += f.value(x);
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,79, += spacing;
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,81,/ add the new sum to previously calculated result
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,82, = 0.5 * (s + sum * spacing);
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,83,eturn s;
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,88, Integrate the function in the given interval.
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,90, @param min the lower bound for the interval
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,91, @param max the upper bound for the interval
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,92, @return the value of integral
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,93, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,94, or the integrator detects convergence problems otherwise
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,95, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,96, function
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,97, @throws IllegalArgumentException if any parameters are invalid
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,99,"ublic double integrate(double min, double max) throws ConvergenceException,"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,100,"unctionEvaluationException, IllegalArgumentException {"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,102,nt i = 1;
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,103,"ouble t, oldt;"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,105,learResult();
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,106,"erifyInterval(min, max);"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,107,erifyIterationCount();
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,109,"ldt = stage(min, max, 0);"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,110,hile (i <= maximalIterationCount) {
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,111," = stage(min, max, i);"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,112,f (i >= minimalIterationCount) {
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,113,f (Math.abs(t - oldt) <= Math.abs(relativeAccuracy * oldt)) {
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,114,"etResult(t, i);"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,115,eturn result;
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,118,ldt = t;
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,119,++;
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,121,"hrow new ConvergenceException(""Maximum number of iterations exceeded."");"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,125, Verifies that the iteration limits are valid and within the range.
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,127, @throws IllegalArgumentException if not
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,129,rotected void verifyIterationCount() throws IllegalArgumentException {
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,130,uper.verifyIterationCount();
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,131,/ at most 64 bisection refinements
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,132,f (maximalIterationCount > 64) {
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,133,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,134,"""Iteration upper limit out of [0, 64] range: "" +"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,135,aximalIterationCount);
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,16,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,18,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,19,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,22,"* Implements the <a href=""http://mathworld.wolfram.com/TrapezoidalRule.html"">"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,23,* Trapezoidal Rule</a> for integrating of real univariate functions. For
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,24,"* reference, see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X,"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,25,* chapter 3.
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,26,* <p>
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,27,* The function should be integrable.
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,29,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,31,public class TrapezoidIntegrator extends UnivariateRealIntegratorImpl {
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,33,/** serializable version identifier */
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,34,static final long serialVersionUID = 4978222553983172543L;
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,36,/** intermediate result */
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,37,private double s;
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,40,* Construct an integrator for the given function.
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,42,* @param f function to solve
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,44,public TrapezoidIntegrator(UnivariateRealFunction f) {
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,45,"super(f, 64);"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,49,* Compute the n-th stage integral of trapezoid rule. This function
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,50,* should only be called by API <code>integrate()</code> in the package.
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,51,* To save time it does not verify arguments - caller does.
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,52,* <p>
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,53,* The interval is divided equally into 2^n sections rather than an
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,54,* arbitrary m sections because this configuration can best utilize the
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,55,* alrealy computed values.
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,57,* @param min the lower bound for the interval
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,58,* @param max the upper bound for the interval
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,59,"* @param n the stage of 1/2 refinement, n = 0 is no refinement"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,60,* @return the value of n-th stage integral
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,61,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,62,* function
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,64,"double stage(double min, double max, int n) throws"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,65,FunctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,67,"long i, np;"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,68,"double x, spacing, sum = 0;"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,70,if (n == 0) {
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,71,s = 0.5 * (max - min) * (f.value(min) + f.value(max));
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,72,return s;
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,73,} else {
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,74,np = 1L << (n-1);           // number of new points in this stage
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,75,spacing = (max - min) / np; // spacing between adjacent new points
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,76,x = min + 0.5 * spacing;    // the first new point
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,77,for (i = 0; i < np; i++) {
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,78,sum += f.value(x);
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,79,x += spacing;
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,81,// add the new sum to previously calculated result
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,82,s = 0.5 * (s + sum * spacing);
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,83,return s;
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,88,* Integrate the function in the given interval.
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,90,* @param min the lower bound for the interval
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,91,* @param max the upper bound for the interval
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,92,* @return the value of integral
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,93,* @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,94,* or the integrator detects convergence problems otherwise
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,95,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,96,* function
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,97,* @throws IllegalArgumentException if any parameters are invalid
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,99,"public double integrate(double min, double max) throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,100,"FunctionEvaluationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,102,int i = 1;
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,103,"double t, oldt;"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,105,clearResult();
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,106,"verifyInterval(min, max);"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,107,verifyIterationCount();
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,109,"oldt = stage(min, max, 0);"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,110,while (i <= maximalIterationCount) {
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,111,"t = stage(min, max, i);"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,112,if (i >= minimalIterationCount) {
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,113,if (Math.abs(t - oldt) <= Math.abs(relativeAccuracy * oldt)) {
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,114,"setResult(t, i);"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,115,return result;
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,118,oldt = t;
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,119,i++;
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,121,"throw new ConvergenceException(""Maximum number of iterations exceeded."");"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,125,* Verifies that the iteration limits are valid and within the range.
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,127,* @throws IllegalArgumentException if not
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,129,protected void verifyIterationCount() throws IllegalArgumentException {
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,130,super.verifyIterationCount();
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,131,// at most 64 bisection refinements
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,132,if (maximalIterationCount > 64) {
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,133,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,134,"(""Iteration upper limit out of [0, 64] range: "" +"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,135,maximalIterationCount);
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,2, Copyright 2005 The Apache Software Foundation.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,5, you may not use this file except in compliance with the License.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,6, You may obtain a copy of the License at
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,13, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,14, limitations under the License.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,16,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,18,mport org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,19,mport org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,22, Interface for univariate real integration algorithms.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,24, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,26,ublic interface UnivariateRealIntegrator {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,29, Set the upper limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,30, <p>
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,31," Usually a high iteration count indicates convergence problem. However,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,32," the ""reasonable value"" varies widely for different cases.  Users are"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,33, advised to use the default value.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,34, <p>
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,35, A <code>ConvergenceException</code> will be thrown if this number
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,36, is exceeded.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,38, @param count maximum number of iterations
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,40,oid setMaximalIterationCount(int count);
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,43, Get the upper limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,45, @return the actual upper limit
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,47,nt getMaximalIterationCount();
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,50, Reset the upper limit for the number of iterations to the default.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,51, <p>
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,52, The default value is supplied by the implementation.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,54, @see #setMaximalIterationCount(int)
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,56,oid resetMaximalIterationCount();
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,59, Set the lower limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,60, <p>
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,61," Minimal iteration is needed to avoid false early convergence, e.g."
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,62, the sample points happen to be zeroes of the function. Users can
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,63, use the default value or choose one that they see as appropriate.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,64, <p>
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,65, A <code>ConvergenceException</code> will be thrown if this number
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,66, is not met.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,68, @param count minimum number of iterations
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,70,oid setMinimalIterationCount(int count);
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,73, Get the lower limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,75, @return the actual lower limit
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,77,nt getMinimalIterationCount();
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,80, Reset the lower limit for the number of iterations to the default.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,81, <p>
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,82, The default value is supplied by the implementation.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,84, @see #setMinimalIterationCount(int)
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,86,oid resetMinimalIterationCount();
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,89, Set the relative accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,90, <p>
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,91, This is used to stop iterations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,93, @param accuracy the relative accuracy
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,94, @throws IllegalArgumentException if the accuracy can't be achieved
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,95, or is otherwise deemed unreasonable
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,97,oid setRelativeAccuracy(double accuracy);
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,100, Get the actual relative accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,102, @return the accuracy
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,104,ouble getRelativeAccuracy();
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,107, Reset the relative accuracy to the default.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,108, <p>
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,109, The default value is provided by the implementation.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,111, @see #setRelativeAccuracy(double)
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,113,oid resetRelativeAccuracy();
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,116, Integrate the function in the given interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,118, @param min the lower bound for the interval
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,119, @param max the upper bound for the interval
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,120, @return the value of integral
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,121, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,122, or the integrator detects convergence problems otherwise
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,123, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,124, function
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,125, @throws IllegalArgumentException if min > max or the endpoints do not
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,126, satisfy the requirements specified by the integrator
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,128,"ouble integrate(double min, double max) throws ConvergenceException,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,129,"unctionEvaluationException, IllegalArgumentException;"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,132, Get the result of the last run of the integrator.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,134, @return the last result
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,135," @throws IllegalStateException if there is no result available, either"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,136, because no result was yet computed or the last attempt failed
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,138,ouble getResult() throws IllegalStateException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,141, Get the number of iterations in the last run of the integrator.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,142, <p>
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,143, This is mainly meant for testing purposes. It may occasionally
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,144, help track down performance problems: if the iteration count
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,145," is notoriously high, check whether the function is evaluated"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,146," properly, and whether another integrator is more amenable to the"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,147, problem.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,149, @return the last iteration count
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,150," @throws IllegalStateException if there is no result available, either"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,151, because no result was yet computed or the last attempt failed
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,153,nt getIterationCount() throws IllegalStateException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,16,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,18,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,19,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,22,* Interface for univariate real integration algorithms.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,24,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,26,public interface UnivariateRealIntegrator {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,29,* Set the upper limit for the number of iterations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,30,* <p>
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,31,"* Usually a high iteration count indicates convergence problem. However,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,32,"* the ""reasonable value"" varies widely for different cases.  Users are"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,33,* advised to use the default value.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,34,* <p>
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,35,* A <code>ConvergenceException</code> will be thrown if this number
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,36,* is exceeded.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,38,* @param count maximum number of iterations
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,40,void setMaximalIterationCount(int count);
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,43,* Get the upper limit for the number of iterations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,45,* @return the actual upper limit
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,47,int getMaximalIterationCount();
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,50,* Reset the upper limit for the number of iterations to the default.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,51,* <p>
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,52,* The default value is supplied by the implementation.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,54,* @see #setMaximalIterationCount(int)
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,56,void resetMaximalIterationCount();
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,59,* Set the lower limit for the number of iterations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,60,* <p>
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,61,"* Minimal iteration is needed to avoid false early convergence, e.g."
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,62,* the sample points happen to be zeroes of the function. Users can
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,63,* use the default value or choose one that they see as appropriate.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,64,* <p>
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,65,* A <code>ConvergenceException</code> will be thrown if this number
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,66,* is not met.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,68,* @param count minimum number of iterations
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,70,void setMinimalIterationCount(int count);
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,73,* Get the lower limit for the number of iterations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,75,* @return the actual lower limit
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,77,int getMinimalIterationCount();
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,80,* Reset the lower limit for the number of iterations to the default.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,81,* <p>
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,82,* The default value is supplied by the implementation.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,84,* @see #setMinimalIterationCount(int)
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,86,void resetMinimalIterationCount();
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,89,* Set the relative accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,90,* <p>
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,91,* This is used to stop iterations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,93,* @param accuracy the relative accuracy
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,94,* @throws IllegalArgumentException if the accuracy can't be achieved
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,95,* or is otherwise deemed unreasonable
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,97,void setRelativeAccuracy(double accuracy);
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,100,* Get the actual relative accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,102,* @return the accuracy
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,104,double getRelativeAccuracy();
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,107,* Reset the relative accuracy to the default.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,108,* <p>
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,109,* The default value is provided by the implementation.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,111,* @see #setRelativeAccuracy(double)
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,113,void resetRelativeAccuracy();
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,116,* Integrate the function in the given interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,118,* @param min the lower bound for the interval
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,119,* @param max the upper bound for the interval
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,120,* @return the value of integral
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,121,* @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,122,* or the integrator detects convergence problems otherwise
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,123,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,124,* function
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,125,* @throws IllegalArgumentException if min > max or the endpoints do not
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,126,* satisfy the requirements specified by the integrator
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,128,"double integrate(double min, double max) throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,129,"FunctionEvaluationException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,132,* Get the result of the last run of the integrator.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,134,* @return the last result
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,135,"* @throws IllegalStateException if there is no result available, either"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,136,* because no result was yet computed or the last attempt failed
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,138,double getResult() throws IllegalStateException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,141,* Get the number of iterations in the last run of the integrator.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,142,* <p>
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,143,* This is mainly meant for testing purposes. It may occasionally
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,144,* help track down performance problems: if the iteration count
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,145,"* is notoriously high, check whether the function is evaluated"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,146,"* properly, and whether another integrator is more amenable to the"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,147,* problem.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,149,* @return the last iteration count
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,150,"* @throws IllegalStateException if there is no result available, either"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,151,* because no result was yet computed or the last attempt failed
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegrator.java,153,int getIterationCount() throws IllegalStateException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,2, Copyright 2005 The Apache Software Foundation.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,5, you may not use this file except in compliance with the License.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,6, You may obtain a copy of the License at
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,13, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,14, limitations under the License.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,16,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,18,mport java.io.Serializable;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,21, Provide a default implementation for several generic functions.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,23, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,25,ublic abstract class UnivariateRealIntegratorImpl implements
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,26,"nivariateRealIntegrator, Serializable {"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,28,** serializable version identifier */
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,29,tatic final long serialVersionUID = -3365294665201465048L;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,31,** maximum relative error */
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,32,rotected double relativeAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,34,** maximum number of iterations */
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,35,rotected int maximalIterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,37,** minimum number of iterations */
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,38,rotected int minimalIterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,40,** default maximum relative error */
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,41,rotected double defaultRelativeAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,43,** default maximum number of iterations */
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,44,rotected int defaultMaximalIterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,46,** default minimum number of iterations */
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,47,rotected int defaultMinimalIterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,49,** indicates whether an integral has been computed */
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,50,rotected boolean resultComputed = false;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,52,** the last computed integral */
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,53,rotected double result;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,55,** the last iteration count */
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,56,rotected int iterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,58,** the integrand function */
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,59,rotected UnivariateRealFunction f;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,62, Construct an integrator with given iteration count and accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,64, @param f the integrand function
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,65, @param defaultMaximalIterationCount maximum number of iterations
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,66, @throws IllegalArgumentException if f is null or the iteration
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,67, limits are not valid
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,69,rotected UnivariateRealIntegratorImpl(
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,70,"nivariateRealFunction f,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,71,nt defaultMaximalIterationCount) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,73,f (f == null) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,74,"hrow new IllegalArgumentException(""Function can not be null."");"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,77,his.f = f;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,78,/ parameters that may depend on algorithm
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,79,his.defaultMaximalIterationCount = defaultMaximalIterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,80,his.maximalIterationCount = defaultMaximalIterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,81,/ parameters that are problem specific
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,82,his.defaultRelativeAccuracy = 1E-6;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,83,his.relativeAccuracy = defaultRelativeAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,84,his.defaultMinimalIterationCount = 3;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,85,his.minimalIterationCount = defaultMinimalIterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,87,erifyIterationCount();
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,91, Access the last computed integral.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,93, @return the last computed integral
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,94, @throws IllegalStateException if no integral has been computed
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,96,ublic double getResult() throws IllegalStateException {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,97,f (resultComputed) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,98,eturn result;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,99, else {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,100,"hrow new IllegalStateException(""No result available."");"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,105, Access the last iteration count.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,107, @return the last iteration count
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,108, @throws IllegalStateException if no integral has been computed
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,110,ublic int getIterationCount() throws IllegalStateException {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,111,f (resultComputed) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,112,eturn iterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,113, else {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,114,"hrow new IllegalStateException(""No result available."");"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,119, Convenience function for implementations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,121, @param result the result to set
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,122, @param iterationCount the iteration count to set
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,124,"rotected final void setResult(double result, int iterationCount) {"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,125,his.result = result;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,126,his.iterationCount = iterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,127,his.resultComputed = true;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,131, Convenience function for implementations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,133,rotected final void clearResult() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,134,his.resultComputed = false;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,138, Set the upper limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,140, @param count maximum number of iterations
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,142,ublic void setMaximalIterationCount(int count) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,143,aximalIterationCount = count;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,147, Get the upper limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,149, @return the actual upper limit
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,151,ublic int getMaximalIterationCount() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,152,eturn maximalIterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,156, Reset the upper limit for the number of iterations to the default.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,158,ublic void resetMaximalIterationCount() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,159,aximalIterationCount = defaultMaximalIterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,163, Set the lower limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,165, @param count minimum number of iterations
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,167,ublic void setMinimalIterationCount(int count) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,168,inimalIterationCount = count;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,172, Get the lower limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,174, @return the actual lower limit
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,176,ublic int getMinimalIterationCount() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,177,eturn minimalIterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,181, Reset the lower limit for the number of iterations to the default.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,183,ublic void resetMinimalIterationCount() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,184,inimalIterationCount = defaultMinimalIterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,188, Set the relative accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,190, @param accuracy the relative accuracy
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,191, @throws IllegalArgumentException if the accuracy can't be achieved by
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,192, the integrator or is otherwise deemed unreasonable
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,194,ublic void setRelativeAccuracy(double accuracy) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,195,elativeAccuracy = accuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,199, Get the actual relative accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,201, @return the accuracy
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,203,ublic double getRelativeAccuracy() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,204,eturn relativeAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,208, Reset the relative accuracy to the default.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,210,ublic void resetRelativeAccuracy() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,211,elativeAccuracy = defaultRelativeAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,215, Returns true if the arguments form a (strictly) increasing sequence
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,217, @param start first number
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,218, @param mid second number
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,219, @param end third number
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,220, @return true if the arguments form an increasing sequence
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,222,"rotected boolean isSequence(double start, double mid, double end) {"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,223,eturn (start < mid) && (mid < end);
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,227, Verifies that the endpoints specify an interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,229, @param lower lower endpoint
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,230, @param upper upper endpoint
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,231, @throws IllegalArgumentException if not interval
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,233,"rotected void verifyInterval(double lower, double upper) throws"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,234,llegalArgumentException {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,235,f (lower >= upper) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,236,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,237,"""Endpoints do not specify an interval: ["" + lower +"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,238,", "" + upper + ""]"");"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,243, Verifies that the upper and lower limits of iterations are valid.
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,245, @throws IllegalArgumentException if not valid
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,247,rotected void verifyIterationCount() throws IllegalArgumentException {
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,248,"f (!isSequence(0, minimalIterationCount, maximalIterationCount+1)) {"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,249,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,250,"""Invalid iteration limits: min="" + minimalIterationCount +"
False,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,251," max="" + maximalIterationCount);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,16,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,18,import java.io.Serializable;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,21,* Provide a default implementation for several generic functions.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,23,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,25,public abstract class UnivariateRealIntegratorImpl implements
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,26,"UnivariateRealIntegrator, Serializable {"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,28,/** serializable version identifier */
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,29,static final long serialVersionUID = -3365294665201465048L;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,31,/** maximum relative error */
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,32,protected double relativeAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,34,/** maximum number of iterations */
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,35,protected int maximalIterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,37,/** minimum number of iterations */
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,38,protected int minimalIterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,40,/** default maximum relative error */
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,41,protected double defaultRelativeAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,43,/** default maximum number of iterations */
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,44,protected int defaultMaximalIterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,46,/** default minimum number of iterations */
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,47,protected int defaultMinimalIterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,49,/** indicates whether an integral has been computed */
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,50,protected boolean resultComputed = false;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,52,/** the last computed integral */
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,53,protected double result;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,55,/** the last iteration count */
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,56,protected int iterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,58,/** the integrand function */
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,59,protected UnivariateRealFunction f;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,62,* Construct an integrator with given iteration count and accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,64,* @param f the integrand function
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,65,* @param defaultMaximalIterationCount maximum number of iterations
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,66,* @throws IllegalArgumentException if f is null or the iteration
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,67,* limits are not valid
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,69,protected UnivariateRealIntegratorImpl(
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,70,"UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,71,int defaultMaximalIterationCount) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,73,if (f == null) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,74,"throw new IllegalArgumentException(""Function can not be null."");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,77,this.f = f;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,78,// parameters that may depend on algorithm
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,79,this.defaultMaximalIterationCount = defaultMaximalIterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,80,this.maximalIterationCount = defaultMaximalIterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,81,// parameters that are problem specific
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,82,this.defaultRelativeAccuracy = 1E-6;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,83,this.relativeAccuracy = defaultRelativeAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,84,this.defaultMinimalIterationCount = 3;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,85,this.minimalIterationCount = defaultMinimalIterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,87,verifyIterationCount();
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,91,* Access the last computed integral.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,93,* @return the last computed integral
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,94,* @throws IllegalStateException if no integral has been computed
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,96,public double getResult() throws IllegalStateException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,97,if (resultComputed) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,98,return result;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,99,} else {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,100,"throw new IllegalStateException(""No result available."");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,105,* Access the last iteration count.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,107,* @return the last iteration count
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,108,* @throws IllegalStateException if no integral has been computed
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,110,public int getIterationCount() throws IllegalStateException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,111,if (resultComputed) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,112,return iterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,113,} else {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,114,"throw new IllegalStateException(""No result available."");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,119,* Convenience function for implementations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,121,* @param result the result to set
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,122,* @param iterationCount the iteration count to set
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,124,"protected final void setResult(double result, int iterationCount) {"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,125,this.result = result;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,126,this.iterationCount = iterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,127,this.resultComputed = true;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,131,* Convenience function for implementations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,133,protected final void clearResult() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,134,this.resultComputed = false;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,138,* Set the upper limit for the number of iterations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,140,* @param count maximum number of iterations
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,142,public void setMaximalIterationCount(int count) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,143,maximalIterationCount = count;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,147,* Get the upper limit for the number of iterations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,149,* @return the actual upper limit
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,151,public int getMaximalIterationCount() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,152,return maximalIterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,156,* Reset the upper limit for the number of iterations to the default.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,158,public void resetMaximalIterationCount() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,159,maximalIterationCount = defaultMaximalIterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,163,* Set the lower limit for the number of iterations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,165,* @param count minimum number of iterations
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,167,public void setMinimalIterationCount(int count) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,168,minimalIterationCount = count;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,172,* Get the lower limit for the number of iterations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,174,* @return the actual lower limit
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,176,public int getMinimalIterationCount() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,177,return minimalIterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,181,* Reset the lower limit for the number of iterations to the default.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,183,public void resetMinimalIterationCount() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,184,minimalIterationCount = defaultMinimalIterationCount;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,188,* Set the relative accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,190,* @param accuracy the relative accuracy
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,191,* @throws IllegalArgumentException if the accuracy can't be achieved by
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,192,* the integrator or is otherwise deemed unreasonable
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,194,public void setRelativeAccuracy(double accuracy) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,195,relativeAccuracy = accuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,199,* Get the actual relative accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,201,* @return the accuracy
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,203,public double getRelativeAccuracy() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,204,return relativeAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,208,* Reset the relative accuracy to the default.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,210,public void resetRelativeAccuracy() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,211,relativeAccuracy = defaultRelativeAccuracy;
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,215,* Returns true if the arguments form a (strictly) increasing sequence
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,217,* @param start first number
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,218,* @param mid second number
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,219,* @param end third number
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,220,* @return true if the arguments form an increasing sequence
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,222,"protected boolean isSequence(double start, double mid, double end) {"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,223,return (start < mid) && (mid < end);
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,227,* Verifies that the endpoints specify an interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,229,* @param lower lower endpoint
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,230,* @param upper upper endpoint
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,231,* @throws IllegalArgumentException if not interval
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,233,"protected void verifyInterval(double lower, double upper) throws"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,234,IllegalArgumentException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,235,if (lower >= upper) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,236,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,237,"(""Endpoints do not specify an interval: ["" + lower +"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,238,""", "" + upper + ""]"");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,243,* Verifies that the upper and lower limits of iterations are valid.
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,245,* @throws IllegalArgumentException if not valid
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,247,protected void verifyIterationCount() throws IllegalArgumentException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,248,"if (!isSequence(0, minimalIterationCount, maximalIterationCount+1)) {"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,249,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,250,"(""Invalid iteration limits: min="" + minimalIterationCount +"
True,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java,251,""" max="" + maximalIterationCount);"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,2, Copyright 2003-2005 The Apache Software Foundation.
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,5, you may not use this file except in compliance with the License.
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,6, You may obtain a copy of the License at
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,13, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,14, limitations under the License.
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,16,ackage org.apache.commons.math.analysis;
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,18,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,19,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,22, Testcase for Romberg integrator.
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,23, <p>
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,24, Romberg algorithm is very fast for good behavior integrand. Test runs
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,25," show that for a default relative accuracy of 1E-6, it generally takes"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,26, takes less than 5 iterations for the integral to converge.
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,28, @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,30,ublic final class RombergIntegratorTest extends TestCase {
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,33, Test of integrator for the sine function.
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,35,ublic void testSinFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,36,nivariateRealFunction f = new SinFunction();
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,37,nivariateRealIntegrator integrator = new RombergIntegrator(f);
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,38,"ouble min, max, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,40,in = 0; max = Math.PI; expected = 2;
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,41,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,42,"esult = integrator.integrate(min, max);"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,43,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,45,in = -Math.PI/3; max = 0; expected = -0.5;
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,46,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,47,"esult = integrator.integrate(min, max);"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,48,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,52, Test of integrator for the quintic function.
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,54,ublic void testQuinticFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,55,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,56,nivariateRealIntegrator integrator = new RombergIntegrator(f);
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,57,"ouble min, max, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,59,in = 0; max = 1; expected = -1.0/48;
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,60,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,61,"esult = integrator.integrate(min, max);"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,62,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,64,in = 0; max = 0.5; expected = 11.0/768;
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,65,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,66,"esult = integrator.integrate(min, max);"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,67,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,69,in = -1; max = 4; expected = 2048/3.0 - 78 + 1.0/48;
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,70,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,71,"esult = integrator.integrate(min, max);"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,72,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,76, Test of parameters for the integrator.
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,78,ublic void testParameters() throws Exception {
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,79,nivariateRealFunction f = new SinFunction();
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,80,nivariateRealIntegrator integrator = new RombergIntegrator(f);
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,82,ry {
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,83,/ bad interval
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,84,"ntegrator.integrate(1, -1);"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,85,"ail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,86, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,87,/ expected
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,89,ry {
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,90,/ bad iteration limits
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,91,ntegrator.setMinimalIterationCount(5);
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,92,ntegrator.setMaximalIterationCount(4);
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,93,"ntegrator.integrate(-1, 1);"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,94,"ail(""Expecting IllegalArgumentException - bad iteration limits"");"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,95, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,96,/ expected
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,98,ry {
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,99,/ bad iteration limits
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,100,ntegrator.setMinimalIterationCount(10);
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,101,ntegrator.setMaximalIterationCount(50);
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,102,"ntegrator.integrate(-1, 1);"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,103,"ail(""Expecting IllegalArgumentException - bad iteration limits"");"
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,104, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,105,/ expected
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,16,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,18,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,19,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,22,* Testcase for Romberg integrator.
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,23,* <p>
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,24,* Romberg algorithm is very fast for good behavior integrand. Test runs
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,25,"* show that for a default relative accuracy of 1E-6, it generally takes"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,26,* takes less than 5 iterations for the integral to converge.
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,28,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,30,public final class RombergIntegratorTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,33,* Test of integrator for the sine function.
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,35,public void testSinFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,36,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,37,UnivariateRealIntegrator integrator = new RombergIntegrator(f);
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,38,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,40,min = 0; max = Math.PI; expected = 2;
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,41,tolerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,42,"result = integrator.integrate(min, max);"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,43,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,45,min = -Math.PI/3; max = 0; expected = -0.5;
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,46,tolerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,47,"result = integrator.integrate(min, max);"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,48,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,52,* Test of integrator for the quintic function.
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,54,public void testQuinticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,55,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,56,UnivariateRealIntegrator integrator = new RombergIntegrator(f);
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,57,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,59,min = 0; max = 1; expected = -1.0/48;
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,60,tolerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,61,"result = integrator.integrate(min, max);"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,62,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,64,min = 0; max = 0.5; expected = 11.0/768;
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,65,tolerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,66,"result = integrator.integrate(min, max);"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,67,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,69,min = -1; max = 4; expected = 2048/3.0 - 78 + 1.0/48;
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,70,tolerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,71,"result = integrator.integrate(min, max);"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,72,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,76,* Test of parameters for the integrator.
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,78,public void testParameters() throws Exception {
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,79,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,80,UnivariateRealIntegrator integrator = new RombergIntegrator(f);
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,82,try {
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,83,// bad interval
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,84,"integrator.integrate(1, -1);"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,85,"fail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,86,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,87,// expected
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,89,try {
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,90,// bad iteration limits
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,91,integrator.setMinimalIterationCount(5);
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,92,integrator.setMaximalIterationCount(4);
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,93,"integrator.integrate(-1, 1);"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,94,"fail(""Expecting IllegalArgumentException - bad iteration limits"");"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,95,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,96,// expected
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,98,try {
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,99,// bad iteration limits
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,100,integrator.setMinimalIterationCount(10);
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,101,integrator.setMaximalIterationCount(50);
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,102,"integrator.integrate(-1, 1);"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,103,"fail(""Expecting IllegalArgumentException - bad iteration limits"");"
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,104,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,src/test/org/apache/commons/math/analysis/RombergIntegratorTest.java,105,// expected
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,2, Copyright 2005 The Apache Software Foundation.
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,5, you may not use this file except in compliance with the License.
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,6, You may obtain a copy of the License at
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,13, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,14, limitations under the License.
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,16,ackage org.apache.commons.math.analysis;
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,18,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,19,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,22, Testcase for Simpson integrator.
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,23, <p>
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,24," Test runs show that for a default relative accuracy of 1E-6, it"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,25, generally takes 5 to 10 iterations for the integral to converge.
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,27, @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,29,ublic final class SimpsonIntegratorTest extends TestCase {
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,32, Test of integrator for the sine function.
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,34,ublic void testSinFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,35,nivariateRealFunction f = new SinFunction();
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,36,nivariateRealIntegrator integrator = new SimpsonIntegrator(f);
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,37,"ouble min, max, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,39,in = 0; max = Math.PI; expected = 2;
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,40,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,41,"esult = integrator.integrate(min, max);"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,42,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,44,in = -Math.PI/3; max = 0; expected = -0.5;
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,45,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,46,"esult = integrator.integrate(min, max);"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,47,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,51, Test of integrator for the quintic function.
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,53,ublic void testQuinticFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,54,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,55,nivariateRealIntegrator integrator = new SimpsonIntegrator(f);
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,56,"ouble min, max, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,58,in = 0; max = 1; expected = -1.0/48;
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,59,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,60,"esult = integrator.integrate(min, max);"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,61,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,63,in = 0; max = 0.5; expected = 11.0/768;
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,64,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,65,"esult = integrator.integrate(min, max);"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,66,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,68,in = -1; max = 4; expected = 2048/3.0 - 78 + 1.0/48;
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,69,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,70,"esult = integrator.integrate(min, max);"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,71,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,75, Test of parameters for the integrator.
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,77,ublic void testParameters() throws Exception {
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,78,nivariateRealFunction f = new SinFunction();
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,79,nivariateRealIntegrator integrator = new SimpsonIntegrator(f);
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,81,ry {
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,82,/ bad interval
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,83,"ntegrator.integrate(1, -1);"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,84,"ail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,85, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,86,/ expected
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,88,ry {
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,89,/ bad iteration limits
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,90,ntegrator.setMinimalIterationCount(5);
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,91,ntegrator.setMaximalIterationCount(4);
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,92,"ntegrator.integrate(-1, 1);"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,93,"ail(""Expecting IllegalArgumentException - bad iteration limits"");"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,94, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,95,/ expected
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,97,ry {
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,98,/ bad iteration limits
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,99,ntegrator.setMinimalIterationCount(10);
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,100,ntegrator.setMaximalIterationCount(99);
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,101,"ntegrator.integrate(-1, 1);"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,102,"ail(""Expecting IllegalArgumentException - bad iteration limits"");"
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,103, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,104,/ expected
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,16,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,18,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,19,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,22,* Testcase for Simpson integrator.
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,23,* <p>
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,24,"* Test runs show that for a default relative accuracy of 1E-6, it"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,25,* generally takes 5 to 10 iterations for the integral to converge.
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,27,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,29,public final class SimpsonIntegratorTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,32,* Test of integrator for the sine function.
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,34,public void testSinFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,35,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,36,UnivariateRealIntegrator integrator = new SimpsonIntegrator(f);
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,37,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,39,min = 0; max = Math.PI; expected = 2;
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,40,tolerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,41,"result = integrator.integrate(min, max);"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,42,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,44,min = -Math.PI/3; max = 0; expected = -0.5;
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,45,tolerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,46,"result = integrator.integrate(min, max);"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,47,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,51,* Test of integrator for the quintic function.
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,53,public void testQuinticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,54,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,55,UnivariateRealIntegrator integrator = new SimpsonIntegrator(f);
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,56,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,58,min = 0; max = 1; expected = -1.0/48;
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,59,tolerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,60,"result = integrator.integrate(min, max);"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,61,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,63,min = 0; max = 0.5; expected = 11.0/768;
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,64,tolerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,65,"result = integrator.integrate(min, max);"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,66,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,68,min = -1; max = 4; expected = 2048/3.0 - 78 + 1.0/48;
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,69,tolerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,70,"result = integrator.integrate(min, max);"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,71,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,75,* Test of parameters for the integrator.
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,77,public void testParameters() throws Exception {
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,78,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,79,UnivariateRealIntegrator integrator = new SimpsonIntegrator(f);
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,81,try {
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,82,// bad interval
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,83,"integrator.integrate(1, -1);"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,84,"fail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,85,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,86,// expected
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,88,try {
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,89,// bad iteration limits
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,90,integrator.setMinimalIterationCount(5);
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,91,integrator.setMaximalIterationCount(4);
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,92,"integrator.integrate(-1, 1);"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,93,"fail(""Expecting IllegalArgumentException - bad iteration limits"");"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,94,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,95,// expected
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,97,try {
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,98,// bad iteration limits
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,99,integrator.setMinimalIterationCount(10);
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,100,integrator.setMaximalIterationCount(99);
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,101,"integrator.integrate(-1, 1);"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,102,"fail(""Expecting IllegalArgumentException - bad iteration limits"");"
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,103,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,src/test/org/apache/commons/math/analysis/SimpsonIntegratorTest.java,104,// expected
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,2, Copyright 2005 The Apache Software Foundation.
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,5, you may not use this file except in compliance with the License.
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,6, You may obtain a copy of the License at
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,13, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,14, limitations under the License.
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,16,ackage org.apache.commons.math.analysis;
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,18,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,19,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,22, Testcase for trapezoid integrator.
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,23, <p>
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,24," Test runs show that for a default relative accuracy of 1E-6, it"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,25, generally takes 10 to 15 iterations for the integral to converge.
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,27, @version $Revision$ $Date$
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,29,ublic final class TrapezoidIntegratorTest extends TestCase {
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,32, Test of integrator for the sine function.
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,34,ublic void testSinFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,35,nivariateRealFunction f = new SinFunction();
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,36,nivariateRealIntegrator integrator = new TrapezoidIntegrator(f);
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,37,"ouble min, max, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,39,in = 0; max = Math.PI; expected = 2;
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,40,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,41,"esult = integrator.integrate(min, max);"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,42,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,44,in = -Math.PI/3; max = 0; expected = -0.5;
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,45,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,46,"esult = integrator.integrate(min, max);"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,47,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,51, Test of integrator for the quintic function.
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,53,ublic void testQuinticFunction() throws MathException {
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,54,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,55,nivariateRealIntegrator integrator = new TrapezoidIntegrator(f);
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,56,"ouble min, max, expected, result, tolerance;"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,58,in = 0; max = 1; expected = -1.0/48;
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,59,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,60,"esult = integrator.integrate(min, max);"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,61,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,63,in = 0; max = 0.5; expected = 11.0/768;
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,64,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,65,"esult = integrator.integrate(min, max);"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,66,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,68,in = -1; max = 4; expected = 2048/3.0 - 78 + 1.0/48;
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,69,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,70,"esult = integrator.integrate(min, max);"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,71,"ssertEquals(expected, result, tolerance);"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,75, Test of parameters for the integrator.
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,77,ublic void testParameters() throws Exception {
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,78,nivariateRealFunction f = new SinFunction();
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,79,nivariateRealIntegrator integrator = new TrapezoidIntegrator(f);
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,81,ry {
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,82,/ bad interval
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,83,"ntegrator.integrate(1, -1);"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,84,"ail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,85, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,86,/ expected
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,88,ry {
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,89,/ bad iteration limits
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,90,ntegrator.setMinimalIterationCount(5);
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,91,ntegrator.setMaximalIterationCount(4);
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,92,"ntegrator.integrate(-1, 1);"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,93,"ail(""Expecting IllegalArgumentException - bad iteration limits"");"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,94, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,95,/ expected
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,97,ry {
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,98,/ bad iteration limits
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,99,ntegrator.setMinimalIterationCount(10);
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,100,ntegrator.setMaximalIterationCount(99);
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,101,"ntegrator.integrate(-1, 1);"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,102,"ail(""Expecting IllegalArgumentException - bad iteration limits"");"
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,103, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,104,/ expected
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,16,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,18,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,19,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,22,* Testcase for trapezoid integrator.
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,23,* <p>
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,24,"* Test runs show that for a default relative accuracy of 1E-6, it"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,25,* generally takes 10 to 15 iterations for the integral to converge.
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,27,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,29,public final class TrapezoidIntegratorTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,32,* Test of integrator for the sine function.
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,34,public void testSinFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,35,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,36,UnivariateRealIntegrator integrator = new TrapezoidIntegrator(f);
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,37,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,39,min = 0; max = Math.PI; expected = 2;
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,40,tolerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,41,"result = integrator.integrate(min, max);"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,42,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,44,min = -Math.PI/3; max = 0; expected = -0.5;
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,45,tolerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,46,"result = integrator.integrate(min, max);"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,47,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,51,* Test of integrator for the quintic function.
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,53,public void testQuinticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,54,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,55,UnivariateRealIntegrator integrator = new TrapezoidIntegrator(f);
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,56,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,58,min = 0; max = 1; expected = -1.0/48;
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,59,tolerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,60,"result = integrator.integrate(min, max);"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,61,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,63,min = 0; max = 0.5; expected = 11.0/768;
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,64,tolerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,65,"result = integrator.integrate(min, max);"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,66,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,68,min = -1; max = 4; expected = 2048/3.0 - 78 + 1.0/48;
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,69,tolerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,70,"result = integrator.integrate(min, max);"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,71,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,75,* Test of parameters for the integrator.
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,77,public void testParameters() throws Exception {
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,78,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,79,UnivariateRealIntegrator integrator = new TrapezoidIntegrator(f);
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,81,try {
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,82,// bad interval
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,83,"integrator.integrate(1, -1);"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,84,"fail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,85,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,86,// expected
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,88,try {
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,89,// bad iteration limits
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,90,integrator.setMinimalIterationCount(5);
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,91,integrator.setMaximalIterationCount(4);
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,92,"integrator.integrate(-1, 1);"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,93,"fail(""Expecting IllegalArgumentException - bad iteration limits"");"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,94,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,95,// expected
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,97,try {
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,98,// bad iteration limits
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,99,integrator.setMinimalIterationCount(10);
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,100,integrator.setMaximalIterationCount(99);
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,101,"integrator.integrate(-1, 1);"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,102,"fail(""Expecting IllegalArgumentException - bad iteration limits"");"
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,103,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,src/test/org/apache/commons/math/analysis/TrapezoidIntegratorTest.java,104,// expected

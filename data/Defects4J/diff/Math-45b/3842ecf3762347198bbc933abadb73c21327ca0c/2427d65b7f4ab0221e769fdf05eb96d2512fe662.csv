is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,25,import java.util.Locale;
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,32, @version $Revision: 1.9 $ $Date: 2004/06/23 16:26:16 $
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,33,* @version $Revision: 1.10 $ $Date: 2004/09/21 04:45:55 $
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,39,** The default complex format. */
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,40,rivate static final ComplexFormat DEFAULT = new ComplexFormat();
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,125,eturn DEFAULT.format( c );
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,129, Create a default number format.  The default number format is based on
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,130, {@link NumberFormat#getInstance()} with the only customizing is the
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,131," maximum number of fraction digits, which is set to 2."
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,133, @return the default number format.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,135,rivate static NumberFormat getDefaultNumberFormat() {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,136,umberFormat nf = NumberFormat.getInstance();
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,137,f.setMaximumFractionDigits(2);
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,138,eturn nf;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,123,return getInstance().format( c );
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,221,* Get the set of locales for which complex formats are available.  This
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,222,* is the same set as the {@link NumberFormat} set.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,223,* @return available complex format locales.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,225,public static Locale[] getAvailableLocales() {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,226,return NumberFormat.getAvailableLocales();
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,230,* Create a default number format.  The default number format is based on
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,231,* {@link NumberFormat#getInstance()} with the only customizing is the
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,232,"* maximum number of fraction digits, which is set to 2."
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,233,* @return the default number format.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,235,private static NumberFormat getDefaultNumberFormat() {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,236,return getDefaultNumberFormat(Locale.getDefault());
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,240,* Create a default number format.  The default number format is based on
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,241,* {@link NumberFormat#getInstance(java.util.Locale)} with the only
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,242,"* customizing is the maximum number of fraction digits, which is set to 2."
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,243,* @param locale the specific locale used by the format.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,244,* @return the default number format specific to the given locale.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,246,private static NumberFormat getDefaultNumberFormat(Locale locale) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,247,NumberFormat nf = NumberFormat.getInstance(locale);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,248,nf.setMaximumFractionDigits(2);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,249,return nf;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,269,* Returns the default complex format for the current locale.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,270,* @return the default complex format.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,272,public static ComplexFormat getInstance() {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,273,return getInstance(Locale.getDefault());
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,277,* Returns the default complex format for the given locale.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,278,* @param locale the specific locale used by the format.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,279,* @return the complex format specific to the given locale.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,281,public static ComplexFormat getInstance(Locale locale) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,282,NumberFormat f = getDefaultNumberFormat(locale);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,283,return new ComplexFormat(f);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,2,* Copyright 2004 The Apache Software Foundation.
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,17,package org.apache.commons.math.complex;
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,19,import java.text.NumberFormat;
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,20,import java.text.ParseException;
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,21,import java.util.Locale;
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,23,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,25,public abstract class AbstractComplexFormatTest extends TestCase {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,27,ComplexFormat complexFormat = null;
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,28,ComplexFormat complexFormatJ = null;
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,30,protected abstract Locale getLocale();
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,32,protected abstract char getDecimalCharacter();
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,34,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,35,complexFormat = ComplexFormat.getInstance(getLocale());
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,36,complexFormatJ = ComplexFormat.getInstance(getLocale());
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,37,"complexFormatJ.setImaginaryCharacter(""j"");"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,40,public void testSimpleNoDecimals() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,41,"Complex c = new Complex(1, 1);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,42,"String expected = ""1 + 1i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,43,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,44,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,47,public void testSimpleWithDecimals() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,48,"Complex c = new Complex(1.23, 1.43);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,49,"String expected = ""1"" + getDecimalCharacter() + ""23 + 1"" + getDecimalCharacter() + ""43i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,50,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,51,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,54,public void testSimpleWithDecimalsTrunc() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,55,"Complex c = new Complex(1.2323, 1.4343);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,56,"String expected = ""1"" + getDecimalCharacter() + ""23 + 1"" + getDecimalCharacter() + ""43i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,57,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,58,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,61,public void testNegativeReal() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,62,"Complex c = new Complex(-1.2323, 1.4343);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,63,"String expected = ""-1"" + getDecimalCharacter() + ""23 + 1"" + getDecimalCharacter() + ""43i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,64,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,65,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,68,public void testNegativeImaginary() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,69,"Complex c = new Complex(1.2323, -1.4343);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,70,"String expected = ""1"" + getDecimalCharacter() + ""23 - 1"" + getDecimalCharacter() + ""43i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,71,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,72,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,75,public void testNegativeBoth() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,76,"Complex c = new Complex(-1.2323, -1.4343);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,77,"String expected = ""-1"" + getDecimalCharacter() + ""23 - 1"" + getDecimalCharacter() + ""43i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,78,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,79,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,82,public void testZeroReal() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,83,"Complex c = new Complex(0.0, -1.4343);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,84,"String expected = ""0 - 1"" + getDecimalCharacter() + ""43i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,85,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,86,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,89,public void testZeroImaginary() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,90,"Complex c = new Complex(30.233, 0);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,91,"String expected = ""30"" + getDecimalCharacter() + ""23"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,92,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,93,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,96,public void testDifferentImaginaryChar() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,97,"Complex c = new Complex(1, 1);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,98,"String expected = ""1 + 1j"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,99,String actual = complexFormatJ.format(c);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,100,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,103,public void testStaticFormatComplex() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,104,Locale defaultLocal = Locale.getDefault();
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,105,Locale.setDefault(getLocale());
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,107,"Complex c = new Complex(232.222, -342.33);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,108,"String expected = ""232"" + getDecimalCharacter() + ""22 - 342"" + getDecimalCharacter() + ""33i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,109,String actual = ComplexFormat.formatComplex(c);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,110,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,112,Locale.setDefault(defaultLocal);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,115,public void testNan() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,116,"Complex c = new Complex(Double.NaN, Double.NaN);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,117,"String expected = ""(NaN) + (NaN)i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,118,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,119,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,122,public void testPositiveInfinity() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,123,"Complex c = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,124,"String expected = ""(Infinity) + (Infinity)i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,125,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,126,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,129,public void testNegativeInfinity() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,130,"Complex c = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,131,"String expected = ""(-Infinity) - (Infinity)i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,132,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,133,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,136,public void testParseSimpleNoDecimals() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,137,"String source = ""1 + 1i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,138,"Complex expected = new Complex(1, 1);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,139,try {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,140,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,141,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,142,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,143,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,147,public void testParseSimpleWithDecimals() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,148,"String source = ""1"" + getDecimalCharacter() + ""23 + 1"" + getDecimalCharacter() + ""43i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,149,"Complex expected = new Complex(1.23, 1.43);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,150,try {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,151,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,152,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,153,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,154,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,158,public void testParseSimpleWithDecimalsTrunc() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,159,"String source = ""1"" + getDecimalCharacter() + ""2323 + 1"" + getDecimalCharacter() + ""4343i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,160,"Complex expected = new Complex(1.2323, 1.4343);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,161,try {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,162,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,163,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,164,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,165,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,169,public void testParseNegativeReal() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,170,"String source = ""-1"" + getDecimalCharacter() + ""2323 + 1"" + getDecimalCharacter() + ""4343i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,171,"Complex expected = new Complex(-1.2323, 1.4343);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,172,try {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,173,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,174,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,175,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,176,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,180,public void testParseNegativeImaginary() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,181,"String source = ""1"" + getDecimalCharacter() + ""2323 - 1"" + getDecimalCharacter() + ""4343i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,182,"Complex expected = new Complex(1.2323, -1.4343);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,183,try {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,184,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,185,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,186,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,187,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,191,public void testParseNegativeBoth() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,192,"String source = ""-1"" + getDecimalCharacter() + ""2323 - 1"" + getDecimalCharacter() + ""4343i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,193,"Complex expected = new Complex(-1.2323, -1.4343);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,194,try {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,195,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,196,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,197,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,198,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,202,public void testParseZeroReal() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,203,"String source = ""0"" + getDecimalCharacter() + ""0 - 1"" + getDecimalCharacter() + ""4343i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,204,"Complex expected = new Complex(0.0, -1.4343);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,205,try {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,206,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,207,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,208,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,209,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,213,public void testParseZeroImaginary() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,214,"String source = ""-1"" + getDecimalCharacter() + ""2323"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,215,"Complex expected = new Complex(-1.2323, 0);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,216,try {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,217,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,218,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,219,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,220,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,224,public void testParseDifferentImaginaryChar() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,225,"String source = ""-1"" + getDecimalCharacter() + ""2323 - 1"" + getDecimalCharacter() + ""4343j"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,226,"Complex expected = new Complex(-1.2323, -1.4343);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,227,try {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,228,Complex actual = (Complex)complexFormatJ.parseObject(source);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,229,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,230,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,231,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,235,public void testParseNan() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,236,"String source = ""(NaN) + (NaN)i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,237,"Complex expected = new Complex(Double.NaN, Double.NaN);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,238,try {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,239,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,240,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,241,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,242,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,246,public void testParsePositiveInfinity() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,247,"String source = ""(Infinity) + (Infinity)i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,248,"Complex expected = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,249,try {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,250,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,251,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,252,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,253,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,257,public void testPaseNegativeInfinity() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,258,"String source = ""(-Infinity) - (Infinity)i"";"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,259,"Complex expected = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,260,try {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,261,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,262,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,263,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,264,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,268,public void testConstructorSingleFormat() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,269,NumberFormat nf = NumberFormat.getInstance();
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,270,ComplexFormat cf = new ComplexFormat(nf);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,271,assertNotNull(cf);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,272,"assertEquals(nf, cf.getRealFormat());"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,275,public void testGetImaginaryFormat() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,276,NumberFormat nf = NumberFormat.getInstance();
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,277,ComplexFormat cf = new ComplexFormat();
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,279,"assertNotSame(nf, cf.getImaginaryFormat());"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,280,cf.setImaginaryFormat(nf);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,281,"assertSame(nf, cf.getImaginaryFormat());"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,284,public void testSetImaginaryFormatNull() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,285,try {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,286,ComplexFormat cf = new ComplexFormat();
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,287,cf.setImaginaryFormat(null);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,288,fail();
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,289,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,290,// success
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,294,public void testSetRealFormatNull() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,295,try {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,296,ComplexFormat cf = new ComplexFormat();
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,297,cf.setRealFormat(null);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,298,fail();
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,299,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,300,// success
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,304,public void testGetRealFormat() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,305,NumberFormat nf = NumberFormat.getInstance();
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,306,ComplexFormat cf = new ComplexFormat();
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,308,"assertNotSame(nf, cf.getRealFormat());"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,309,cf.setRealFormat(nf);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,310,"assertSame(nf, cf.getRealFormat());"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,313,public void testSetImaginaryCharacterNull() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,314,try {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,315,ComplexFormat cf = new ComplexFormat();
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,316,cf.setImaginaryCharacter(null);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,317,fail();
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,318,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,319,// success
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,323,public void testSetImaginaryCharacterEmpty() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,324,try {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,325,ComplexFormat cf = new ComplexFormat();
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,326,"cf.setImaginaryCharacter("""");"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,327,fail();
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,328,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,329,// success
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,333,public void testFormatNumber() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,334,ComplexFormat cf = ComplexFormat.getInstance(getLocale());
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,335,Double pi = new Double(Math.PI);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,336,String text = cf.format(pi);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,337,"assertEquals(""3"" + getDecimalCharacter() + ""14"", text);"
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,340,public void testFormatObject() {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,341,try {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,342,ComplexFormat cf = new ComplexFormat();
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,343,Object object = new Object();
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,344,cf.format(object);
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,345,fail();
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,346,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,347,// success
True,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,2,* Copyright 2004 The Apache Software Foundation.
True,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,17,package org.apache.commons.math.complex;
True,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,19,import java.util.Locale;
True,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,22,public class FrenchComplexFormatTest extends AbstractComplexFormatTest {
True,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,24,protected char getDecimalCharacter() {
True,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,25,"return ',';"
True,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,28,protected Locale getLocale() {
True,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,29,return Locale.FRENCH;

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,156,** Check if dense output is needed.
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,157, @return true if there is at least one event handler or if
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,158, one of the step handlers requires dense output
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,160,rotected boolean requiresDenseOutput() {
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,161,f (!eventsStates.isEmpty()) {
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,162,eturn true;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,164,or (StepHandler handler : stepHandlers) {
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,165,f (handler.requiresDenseOutput()) {
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,166,eturn true;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,169,eturn false;
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,170,** Determines whether this handler needs dense output.
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,171, <p>The essence of this class is to provide dense output over all
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,172," steps, hence it requires the internal steps to provide themselves"
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,173, dense output. The method therefore returns always true.</p>
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,174, @return always true
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,176,ublic boolean requiresDenseOutput() {
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,177,eturn true;
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,386,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,387,ublic boolean requiresDenseOutput() {
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,388,eturn true;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,23,mport org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,24,mport org.apache.commons.math.ode.sampling.DummyStepInterpolator;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,214,bstractStepInterpolator interpolator;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,215,f (requiresDenseOutput()) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,216,inal RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,217,"ki.reinitialize(this, yTmp, yDotK, forward);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,218,nterpolator = rki;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,219, else {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,220,"nterpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,212,final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,213,"interpolator.reinitialize(this, yTmp, yDotK, forward);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,26,mport org.apache.commons.math.ode.sampling.DummyStepInterpolator;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,375,f (requiresDenseOutput()) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,376,"/ step size sequence: 2, 6, 10, 14, ..."
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,377,or (int k = 0; k < size; ++k) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,374,"// step size sequence: 2, 6, 10, 14, ..."
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,375,for (int k = 0; k < size; ++k) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,380, else {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,381,"/ step size sequence: 2, 4, 6, 8, ..."
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,382,or (int k = 0; k < size; ++k) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,383,equence[k] = 2 * (k + 1);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,595,ouble[] yDot1      = new double[y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,596,ouble[][] yMidDots = null;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,597,inal boolean denseOutput = requiresDenseOutput();
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,598,f (denseOutput) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,599,MidDots = new double[1 + 2 * sequence.length][];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,600,or (int j = 0; j < yMidDots.length; ++j) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,601,MidDots[j] = new double[y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,603, else {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,604,MidDots    = new double[1][];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,605,MidDots[0] = new double[y0.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,587,final double[] yDot1 = new double[y0.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,588,final double[][] yMidDots = new double[1 + 2 * sequence.length][y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,621,bstractStepInterpolator interpolator = null;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,622,f (denseOutput) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,623,"nterpolator = new GraggBulirschStoerStepInterpolator(y, yDot0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,624,"1, yDot1,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,625,"MidDots, forward);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,626, else {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,627,"nterpolator = new DummyStepInterpolator(y, yDot1, forward);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,603,final AbstractStepInterpolator interpolator =
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,604,"new GraggBulirschStoerStepInterpolator(y, yDot0,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,605,"y1, yDot1,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,606,"yMidDots, forward);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,820,f (denseOutput && ! reject) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,798,if (! reject) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,25,mport org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,26,mport org.apache.commons.math.ode.sampling.DummyStepInterpolator;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,118,bstractStepInterpolator interpolator;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,119,f (requiresDenseOutput()) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,120,inal RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,121,"ki.reinitialize(this, yTmp, yDotK, forward);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,122,nterpolator = rki;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,123, else {
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,124,"nterpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,116,final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,117,"interpolator.reinitialize(this, yTmp, yDotK, forward);"
False,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,53,** Determines whether this handler needs dense output.
False,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,54," Since this handler does nothing, it does not require dense output."
False,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,55, @return always false
False,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,57,ublic boolean requiresDenseOutput() {
False,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,58,eturn false;
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,44,** Determines whether this handler needs dense output.
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,45, <p>This method allows the integrator to avoid performing extra
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,46, computation if the handler does not need dense output. If this
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,47," method returns false, the integrator will call the {@link"
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,48, #handleStep} method with a {@link DummyStepInterpolator} rather
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,49, than a custom interpolator.</p>
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,50, @return true if the handler needs dense output
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,52,oolean requiresDenseOutput();
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,174,** Determines whether this handler needs dense output.
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,175, This handler needs dense output in order to provide data at
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,176, regularly spaced steps regardless of the steps the integrator
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,177," uses, so this method always returns true."
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,178, @return always true
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,180,ublic boolean requiresDenseOutput() {
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,181,eturn true;
False,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,63,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,64,eturn true;
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,254,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,255,eturn false;
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,295,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,296,eturn false;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,140,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,141,eturn false;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,287,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,288,eturn true;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,331,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,332,eturn false;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,139,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,140,eturn true;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,30,mport org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,31,mport org.apache.commons.math.ode.sampling.DummyStepHandler;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,295,Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,296,ublic void testNoDenseOutput()
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,297,"hrows MathUserException, IntegratorException {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,298,estProblem1 pb1 = new TestProblem1();
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,299,estProblem1 pb2 = pb1.copy();
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,300,ouble minStep = 0.1 * (pb1.getFinalTime() - pb1.getInitialTime());
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,301,ouble maxStep = pb1.getFinalTime() - pb1.getInitialTime();
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,302,ouble scalAbsoluteTolerance = 1.0e-4;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,303,ouble scalRelativeTolerance = 1.0e-4;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,305,"irstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,306,"calAbsoluteTolerance,"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,307,calRelativeTolerance);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,308,nteg.addStepHandler(DummyStepHandler.getInstance());
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,309,"nteg.integrate(pb1,"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,310,"b1.getInitialTime(), pb1.getInitialState(),"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,311,"b1.getFinalTime(), new double[pb1.getDimension()]);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,312,nt callsWithoutDenseOutput = pb1.getCalls();
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,313,"ssert.assertEquals(integ.getEvaluations(), callsWithoutDenseOutput);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,315,nteg.addStepHandler(new InterpolatingStepHandler());
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,316,"nteg.integrate(pb2,"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,317,"b2.getInitialTime(), pb2.getInitialState(),"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,318,"b2.getFinalTime(), new double[pb2.getDimension()]);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,319,nt callsWithDenseOutput = pb2.getCalls();
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,320,"ssert.assertEquals(integ.getEvaluations(), callsWithDenseOutput);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,322,ssert.assertTrue(callsWithDenseOutput > callsWithoutDenseOutput);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,343,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,344,eturn true;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,385,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,386,eturn false;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,421,rivate static class InterpolatingStepHandler implements StepHandler {
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,422,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,423,eturn true;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,425,ublic void reset() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,427,"ublic void handleStep(StepInterpolator interpolator,"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,428,oolean isLast)
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,429,hrows MathUserException {
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,430,ouble prev = interpolator.getPreviousTime();
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,431,ouble curr = interpolator.getCurrentTime();
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,432,nterpolator.setInterpolatedTime(0.5*(prev + curr));
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,139,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,140,eturn true;
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,173,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,174,eturn false;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,189,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,190,eturn false;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,230,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,231,eturn false;
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,21,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,289,@Test
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,290,"public void testIssue596() throws MathUserException, IntegratorException {"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,291,"FirstOrderIntegrator integ = new GraggBulirschStoerIntegrator(1e-10, 100.0, 1e-7, 1e-7);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,292,integ.addStepHandler(new StepHandler() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,294,public void reset() {}
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,296,"public void handleStep(StepInterpolator interpolator, boolean isLast) throws MathUserException {"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,297,double t = interpolator.getCurrentTime();
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,298,interpolator.setInterpolatedTime(t);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,299,double[] y = interpolator.getInterpolatedState();
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,300,double[] yDot = interpolator.getInterpolatedDerivatives();
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,301,"Assert.assertEquals(3.0 * t - 5.0, y[0], 1.0e-14);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,302,"Assert.assertEquals(3.0, yDot[0], 1.0e-14);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,305,double[] y = {4.0};
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,306,double t0 = 3.0;
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,307,double tend = 10.0;
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,308,integ.integrate(new FirstOrderDifferentialEquations() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,309,public int getDimension() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,310,return 1;
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,313,"public void computeDerivatives(double t, double[] y, double[] yDot) {"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,314,yDot[0] = 3.0;
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,316,"}, t0, y, tend, y);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,293,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,294,eturn true;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,335,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,336,eturn false;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,363,ssert.assertTrue(maxStep > 1.7);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,389,Assert.assertTrue(maxStep > 1.5);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,141,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,142,eturn true;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,139,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,140,eturn true;
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,173,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,174,eturn false;
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,180,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,181,eturn false;
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,225,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,226,eturn false;
False,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,35,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,36,eturn true;

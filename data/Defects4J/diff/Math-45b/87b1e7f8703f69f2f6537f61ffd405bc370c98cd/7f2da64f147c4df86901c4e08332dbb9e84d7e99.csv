is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,22," Utility that increments a counter until a maximum is reached, at which"
False,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,23, point it will throw an exception.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,22,"* Utility that increments a counter until a maximum is reached, at"
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,23,"* which point, the instance will by default throw a"
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,24,* {@link MaxCountExceededException}.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,25,"* However, the user is able to override this behaviour by defining a"
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,26,"* custom {@link MaxCountExceededCallback callback}, in order to e.g."
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,27,* select which exception must be thrown.
False,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,36,rivate int count;
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,40,private int count = 0;
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,42,* Function called at counter exhaustion.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,44,private final MaxCountExceededCallback maxCountCallback;
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,61,"this(max,"
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,62,new MaxCountExceededCallback() {
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,63,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,64,public void trigger(int max) {
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,65,throw new MaxCountExceededException(max);
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,71,* Defines a maximal count and a callback method to be triggered at
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,72,* counter exhaustion.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,74,* @param max Maximal count.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,75,* @param cb Function to be called when the maximal count has been reached.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,77,"public Incrementor(int max,"
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,78,MaxCountExceededCallback cb) {
False,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,54,ount = 0;
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,80,maxCountCallback = cb;
False,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,58, Set the upper limit for the counter.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,84,* Sets the upper limit for the counter.
False,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,69, Get the upper limit of the counter.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,95,* Gets the upper limit of the counter.
False,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,78, Get the current count.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,104,* Gets the current count.
False,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,87, Check whether a single increment is allowed.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,113,* Checks whether a single increment is allowed.
False,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,98, Perform multiple increments.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,124,* Performs multiple increments.
False,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,111, Add one to the current iteration count.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,137,* Adds one to the current iteration count.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,138,"* At counter exhaustion, this method will call the"
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,139,* {@link MaxCountExceededCallback#trigger(int) trigger} method of the
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,140,* callback object passed to the
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,141,"* {@link #Incrementor(int,MaxCountExceededCallback) constructor}."
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,142,"* If not explictly set, a default callback is used that will throw"
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,143,* a {@code MaxCountExceededException}.
False,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,113, @throws MaxCountExceededException at counter exhaustion.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,145,"* @throws MaxCountExceededException at counter exhaustion, unless a"
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,146,* custom {@link MaxCountExceededCallback callback} has been set at
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,147,* construction.
False,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,117,hrow new MaxCountExceededException(maximalCount);
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,151,maxCountCallback.trigger(maximalCount);
False,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,122, Reset the counter to 0.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,156,* Resets the counter to 0.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,163,* Defines a method to be called at counter exhaustion.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,164,* The {@link #trigger(int) trigger} method should usually throw an exception.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,166,public interface MaxCountExceededCallback {
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,168,* Function called when the maximal count has been reached.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,170,* @param maximalCount Maximal count.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,172,void trigger(int maximalCount);
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,17,import org.apache.commons.math.exception.TooManyEvaluationsException;
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,100,@Test(expected=TooManyEvaluationsException.class)
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,101,public void testAlternateException() {
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,102,final Incrementor.MaxCountExceededCallback cb
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,103,= new Incrementor.MaxCountExceededCallback() {
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,104,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,105,public void trigger(int max) {
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,106,throw new TooManyEvaluationsException(max);
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,110,"final Incrementor i = new Incrementor(0, cb);"
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,111,i.incrementCount();

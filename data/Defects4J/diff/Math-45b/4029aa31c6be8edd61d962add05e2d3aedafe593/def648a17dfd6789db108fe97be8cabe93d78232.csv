is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,18,package org.apache.commons.math.optimization.univariate;
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,20,import org.apache.commons.math.ConvergingAlgorithmImpl;
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,21,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,22,import org.apache.commons.math.optimization.UnivariateRealOptimizer;
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,25,* Provide a default implementation for several functions useful to generic
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,26,* optimizers.
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,28,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,29,* @since 2.0
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,31,public abstract class AbstractUnivariateRealOptimizer
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,32,extends ConvergingAlgorithmImpl implements UnivariateRealOptimizer {
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,34,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,35,private static final long serialVersionUID = 4543031162377070699L;
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,37,/** Indicates where a root has been computed. */
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,38,protected boolean resultComputed;
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,40,/** The last computed root. */
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,41,protected double result;
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,43,/** Value of the function at the last computed result. */
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,44,protected double functionValue;
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,47,* Construct a solver with given iteration count and accuracy.
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,49,* @param defaultAbsoluteAccuracy maximum absolute error
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,50,* @param defaultMaximalIterationCount maximum number of iterations
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,51,* @throws IllegalArgumentException if f is null or the
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,52,* defaultAbsoluteAccuracy is not valid
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,54,"protected AbstractUnivariateRealOptimizer(final int defaultMaximalIterationCount,"
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,55,final double defaultAbsoluteAccuracy) {
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,56,"super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);"
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,57,resultComputed = false;
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,60,/** Check if a result has been computed.
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,61,* @exception IllegalStateException if no result has been computed
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,63,protected void checkResultComputed() throws IllegalStateException {
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,64,if (!resultComputed) {
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,65,"throw MathRuntimeException.createIllegalStateException(""no result available"");"
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,69,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,70,public double getResult() {
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,71,checkResultComputed();
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,72,return result;
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,75,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,76,public double getFunctionValue() {
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,77,checkResultComputed();
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,78,return functionValue;
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,82,* Convenience function for implementations.
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,84,* @param result the result to set
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,85,* @param iterationCount the iteration count to set
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,87,"protected final void setResult(final double result, final int iterationCount) {"
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,88,this.result         = result;
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,89,this.iterationCount = iterationCount;
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,90,this.resultComputed = true;
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,94,* Convenience function for implementations.
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,96,* @param x the result to set
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,97,* @param fx the result to set
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,98,* @param iterationCount the iteration count to set
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,100,"protected final void setResult(final double x, final double fx,"
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,101,final int iterationCount) {
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,102,this.result         = x;
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,103,this.functionValue  = fx;
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,104,this.iterationCount = iterationCount;
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,105,this.resultComputed = true;
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,109,* Convenience function for implementations.
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,111,protected final void clearResult() {
True,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,112,this.resultComputed = false;
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,22,import org.apache.commons.math.optimization.GoalType;
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,31,ublic class BrentMinimizer extends UnivariateRealMinimizerImpl {
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,32,public class BrentOptimizer extends AbstractUnivariateRealOptimizer {
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,44,ublic BrentMinimizer() {
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,45,public BrentOptimizer() {
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,49," Find a minimum in the given interval, start at startValue."
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,50, <p>
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,51, A minimizer may require that the interval brackets a single minimum.
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,52, </p>
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,53, @param f the function to minimize.
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,54, @param min the lower bound for the interval.
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,55, @param max the upper bound for the interval.
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,56, @param startValue this parameter is <em>not</em> used at all
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,57, @return a value where the function is minimum
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,58, @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,59, or the minimizer detects convergence problems otherwise.
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,60, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,61, function
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,62, @throws IllegalArgumentException if min > max or the arguments do not
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,63, satisfy the requirements specified by the minimizer
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,65,"ublic double minimize(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,49,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,50,"public double optimize(final UnivariateRealFunction f, final GoalType goalType,"
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,68,"eturn minimize(f, min, max);"
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,53,"return optimize(f, goalType, min, max);"
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,72,"ublic double minimize(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,57,"public double optimize(final UnivariateRealFunction f, final GoalType goalType,"
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,74,"hrows MaxIterationsExceededException,"
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,75,unctionEvaluationException {
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,59,"throws MaxIterationsExceededException, FunctionEvaluationException {"
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,77,"eturn localMin(min, max, relativeAccuracy, absoluteAccuracy, f);"
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,61,"return localMin(f, goalType, min, max, relativeAccuracy, absoluteAccuracy);"
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,93, @param a Lower bound of the interval.
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,94, @param b Higher bound of the interval.
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,95, @param eps Relative accuracy.
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,96, @param t Absolute accuracy.
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,76,* @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,77,* or {@link GoalType#MINIMIZE}
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,78,* @param a Lower bound of the interval
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,79,* @param b Higher bound of the interval
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,80,* @param eps Relative accuracy
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,81,* @param t Absolute accuracy
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,103,"rivate double localMin(double a, double b, final double eps,"
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,104,"inal double t, final UnivariateRealFunction f)"
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,88,"private double localMin(final UnivariateRealFunction f, final GoalType goalType,"
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,89,"double a, double b, final double eps, final double t)"
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,96,if (goalType == GoalType.MAXIMIZE) {
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,97,fx = -fx;
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,149,if (goalType == GoalType.MAXIMIZE) {
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,150,fu = -fu;
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,191, else { // Termination.
False,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,192,"etResult(x, fx, count);"
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,182,} else { // termination
True,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,183,"setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);"
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,27,import org.apache.commons.math.optimization.GoalType;
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,28,import org.apache.commons.math.optimization.UnivariateRealOptimizer;
False,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,39,"uite.setName(""BrentMinimizer Tests"");"
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,41,"suite.setName(""BrentOptimizer Tests"");"
False,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,45,nivariateRealMinimizer minimizer = new BrentMinimizer();
False,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,46,"ssertEquals(3 * Math.PI / 2, minimizer.minimize(f, 4, 5), 70 * minimizer.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,47,UnivariateRealOptimizer minimizer = new BrentOptimizer();
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,48,"assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 70 * minimizer.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,48,"ssertEquals(3 * Math.PI / 2, minimizer.minimize(f, 1, 5), 70 * minimizer.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,50,"assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 70 * minimizer.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,56,nivariateRealMinimizer minimizer = new BrentMinimizer();
False,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,57,"ssertEquals(-0.27195613, minimizer.minimize(f, -0.3, -0.2), 1.0e-8);"
False,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,58,"ssertEquals( 0.82221643, minimizer.minimize(f,  0.3,  0.9), 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,58,UnivariateRealOptimizer minimizer = new BrentOptimizer();
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,59,"assertEquals(-0.27195613, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,60,"assertEquals( 0.82221643, minimizer.optimize(f, GoalType.MINIMIZE,  0.3,  0.9), 1.0e-8);"
False,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,62,"ssertEquals(-0.27195613, minimizer.minimize(f, -1.0, 0.2), 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,64,"assertEquals(-0.27195613, minimizer.optimize(f, GoalType.MINIMIZE, -1.0, 0.2), 1.0e-8);"
False,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,69,nivariateRealMinimizer solver = new BrentMinimizer();
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,71,UnivariateRealOptimizer solver = new BrentOptimizer();
False,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,72,"ouble result = solver.minimize(f, 3 * Math.PI / 2, 5);"
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,74,"double result = solver.optimize(f, GoalType.MINIMIZE, 3 * Math.PI / 2, 5);"
False,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,75,"esult = solver.minimize(f, 4, 3 * Math.PI / 2);"
True,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,77,"result = solver.optimize(f, GoalType.MINIMIZE, 4, 3 * Math.PI / 2);"

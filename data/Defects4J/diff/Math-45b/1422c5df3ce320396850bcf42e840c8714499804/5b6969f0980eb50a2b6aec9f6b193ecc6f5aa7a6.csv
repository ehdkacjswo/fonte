is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,1,package org.apache.commons.math;
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,3,import java.io.Serializable;
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,6,* Interface for algorithms handling convergence settings.
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,7,* <p>
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,8,"* This interface only deals with convergence parameters setting, not"
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,9,* execution of the algorithms per se.
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,10,* </p>
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,11,* @see ConvergenceException
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,12,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,13,* @since 2.0
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,15,public interface ConvergingAlgorithm extends Serializable {
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,18,* Set the upper limit for the number of iterations.
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,19,* <p>
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,20,"* Usually a high iteration count indicates convergence problems. However,"
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,21,"* the ""reasonable value"" varies widely for different algorithms. Users are"
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,22,* advised to use the default value supplied by the algorithm.</p>
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,23,* <p>
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,24,* A {@link ConvergenceException} will be thrown if this number
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,25,* is exceeded.</p>
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,27,* @param count maximum number of iterations
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,29,public abstract void setMaximalIterationCount(int count);
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,32,* Get the upper limit for the number of iterations.
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,34,* @return the actual upper limit
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,36,public abstract int getMaximalIterationCount();
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,39,* Reset the upper limit for the number of iterations to the default.
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,40,* <p>
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,41,* The default value is supplied by the algorithm implementation.</p>
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,43,* @see #setMaximalIterationCount(int)
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,45,public abstract void resetMaximalIterationCount();
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,48,* Set the absolute accuracy.
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,49,* <p>
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,50,* The default is usually chosen so that results in the interval
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,51,* -10..-0.1 and +0.1..+10 can be found with a reasonable accuracy. If the
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,52,"* expected absolute value of your results is of much smaller magnitude, set"
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,53,* this to a smaller value.</p>
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,54,* <p>
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,55,* Algorithms are advised to do a plausibility check with the relative
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,56,"* accuracy, but clients should not rely on this.</p>"
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,58,* @param accuracy the accuracy.
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,59,* @throws IllegalArgumentException if the accuracy can't be achieved by
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,60,* the solver or is otherwise deemed unreasonable.
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,62,public abstract void setAbsoluteAccuracy(double accuracy);
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,65,* Get the actual absolute accuracy.
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,67,* @return the accuracy
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,69,public abstract double getAbsoluteAccuracy();
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,72,* Reset the absolute accuracy to the default.
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,73,* <p>
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,74,* The default value is provided by the algorithm implementation.</p>
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,76,public abstract void resetAbsoluteAccuracy();
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,79,* Set the relative accuracy.
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,80,* <p>
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,81,* This is used to stop iterations if the absolute accuracy can't be
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,82,* achieved due to large values or short mantissa length.</p>
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,83,* <p>
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,84,* If this should be the primary criterion for convergence rather then a
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,85,"* safety measure, set the absolute accuracy to a ridiculously small value,"
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,86,* like {@link org.apache.commons.math.util.MathUtils#SAFE_MIN MathUtils.SAFE_MIN}.</p>
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,88,* @param accuracy the relative accuracy.
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,89,* @throws IllegalArgumentException if the accuracy can't be achieved by
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,90,*  the algorithm or is otherwise deemed unreasonable.
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,92,public abstract void setRelativeAccuracy(double accuracy);
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,95,* Get the actual relative accuracy.
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,96,* @return the accuracy
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,98,public abstract double getRelativeAccuracy();
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,101,* Reset the relative accuracy to the default.
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,102,* The default value is provided by the algorithm implementation.
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,104,public abstract void resetRelativeAccuracy();
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,107,* Get the number of iterations in the last run of the algorithm.
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,108,* <p>
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,109,* This is mainly meant for testing purposes. It may occasionally
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,110,* help track down performance problems: if the iteration count
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,111,"* is notoriously high, check whether the problem is evaluated"
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,112,"* properly, and whether another algorithm is more amenable to the"
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,113,* problem.</p>
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,115,* @return the last iteration count.
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,116,"* @throws IllegalStateException if there is no result available, either"
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,117,* because no result was yet computed or the last attempt failed.
True,src/java/org/apache/commons/math/ConvergingAlgorithm.java,src/java/org/apache/commons/math/ConvergingAlgorithm.java,119,public abstract int getIterationCount();
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,18,package org.apache.commons.math;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,21,* Provide a default implementation for several functions useful to generic
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,22,* converging algorithms.
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,24,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,25,* @since 2.0
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,27,public abstract class ConvergingAlgorithmImpl implements ConvergingAlgorithm {
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,29,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,30,private static final long serialVersionUID = 4059567655915789396L;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,32,/** Maximum absolute error. */
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,33,protected double absoluteAccuracy;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,35,/** Maximum relative error. */
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,36,protected double relativeAccuracy;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,38,/** Maximum number of iterations. */
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,39,protected int maximalIterationCount;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,41,/** Default maximum absolute error. */
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,42,protected double defaultAbsoluteAccuracy;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,44,/** Default maximum relative error. */
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,45,protected double defaultRelativeAccuracy;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,47,/** Default maximum number of iterations. */
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,48,protected int defaultMaximalIterationCount;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,50,// Mainly for test framework.
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,51,/** The last iteration count. */
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,52,protected int iterationCount;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,55,* Construct an algorithm with given iteration count and accuracy.
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,57,* @param defaultAbsoluteAccuracy maximum absolute error
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,58,* @param defaultMaximalIterationCount maximum number of iterations
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,59,* @throws IllegalArgumentException if f is null or the
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,60,* defaultAbsoluteAccuracy is not valid
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,62,"protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,"
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,63,final double defaultAbsoluteAccuracy) {
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,64,this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,65,this.defaultRelativeAccuracy = 1.0e-14;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,66,this.absoluteAccuracy = defaultAbsoluteAccuracy;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,67,this.relativeAccuracy = defaultRelativeAccuracy;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,68,this.defaultMaximalIterationCount = defaultMaximalIterationCount;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,69,this.maximalIterationCount = defaultMaximalIterationCount;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,70,this.iterationCount = 0;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,73,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,74,public int getIterationCount() {
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,75,return iterationCount;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,78,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,79,public void setAbsoluteAccuracy(double accuracy) {
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,80,absoluteAccuracy = accuracy;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,83,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,84,public double getAbsoluteAccuracy() {
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,85,return absoluteAccuracy;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,88,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,89,public void resetAbsoluteAccuracy() {
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,90,absoluteAccuracy = defaultAbsoluteAccuracy;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,93,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,94,public void setMaximalIterationCount(int count) {
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,95,maximalIterationCount = count;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,98,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,99,public int getMaximalIterationCount() {
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,100,return maximalIterationCount;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,103,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,104,public void resetMaximalIterationCount() {
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,105,maximalIterationCount = defaultMaximalIterationCount;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,108,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,109,public void setRelativeAccuracy(double accuracy) {
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,110,relativeAccuracy = accuracy;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,113,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,114,public double getRelativeAccuracy() {
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,115,return relativeAccuracy;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,118,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,119,public void resetRelativeAccuracy() {
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,120,relativeAccuracy = defaultRelativeAccuracy;
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,81,/ org.apache.commons.math.analysis.UnivariateRealSolverUtils
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,81,// org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,270,/ org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,270,// org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,274,/ org.apache.commons.math.analysis.UnivariateRealSolverImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,274,// org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,277,"{ ""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,278,"""param\u00e8tres de l''intervalle initial invalides : borne inf = {0}, valeur initiale = {1}, borne sup = {2}"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,278,/ org.apache.commons.math.analysis.LaguerreSolver
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,280,// org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,281,// org.apache.commons.math.analysis.solvers.BrentSolver
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,282,"{ ""function values at endpoints do not have different signs.  Endpoints: [{0}, {1}], Values: [{2}, {3}]"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,283,"""les valeurs de la fonction aux bornes n''ont pas des signes diff\u00e9rents. Bornes : [{0}, {1}], valeurs : [{2}, {3}]"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,285,// org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,286,// org.apache.commons.math.transform.FastFourierTransformer
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,287,"{ ""endpoints do not specify an interval: [{0}, {1}]"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,288,"""les extr\u00e9mit\u00e9s ne constituent pas un intervalle : [{0}, {1}]"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,290,// org.apache.commons.math.analysis.solvers.LaguerreSolver
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,282,/ org.apache.commons.math.analysis.NewtonSolver
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,294,// org.apache.commons.math.analysis.solvers.NewtonSolver
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,307,/ org.apache.commons.math.analysis.UnivariateRealIntegratorImpl
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,308,/ org.apache.commons.math.analysis.UnivariateRealSolverImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,319,// org.apache.commons.math.ConvergingAlgorithmImpl
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,357," ""endpoints do not specify an interval: [{0}, {1}]"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,358,"les extr\u00e9mit\u00e9s ne constituent pas un intervalle : [{0}, {1}]"" },"
True,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,21,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,96,f (((initial - min) * (max -initial)) < 0) {
False,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,97,"hrow new IllegalArgumentException(""Initial guess is not in search"" +"
False,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,98," interval."" + ""  Initial: "" + initial +"
False,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,99,"  Endpoints: ["" + min + "","" + max + ""]"");"
True,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,97,clearResult();
True,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,98,"verifySequence(min, initial, max);"
False,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,180,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,181,"""Function values at endpoints do not have different signs."" +"
False,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,182,"  Endpoints: ["" + min + "","" + max + ""]"" +"
False,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,183,"  Values: ["" + yMin + "","" + yMax + ""]"");"
True,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,178,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,179,"""function values at endpoints do not have different signs.  "" +"
True,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,180,"""Endpoints: [{0}, {1}], Values: [{2}, {3}]"","
True,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,181,"new Object[] { min, max, yMin, yMax });"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,20,import org.apache.commons.math.ConvergingAlgorithm;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,31,ublic interface UnivariateRealSolver {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,34, Set the upper limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,35, <p>
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,36," Usually a high iteration count indicates convergence problems. However,"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,37," the ""reasonable value"" varies widely for different solvers.  Users are"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,38, advised to use the default value supplied by the solver.</p>
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,39, <p>
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,40, A <code>ConvergenceException</code> will be thrown if this number
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,41, is exceeded.</p>
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,43, @param count maximum number of iterations
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,45,oid setMaximalIterationCount(int count);
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,48, Get the upper limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,50, @return the actual upper limit
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,52,nt getMaximalIterationCount();
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,55, Reset the upper limit for the number of iterations to the default.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,56, <p>
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,57, The default value is supplied by the solver implementation.</p>
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,59, @see #setMaximalIterationCount(int)
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,61,oid resetMaximalIterationCount();
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,64, Set the absolute accuracy.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,65, <p>
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,66, The default is usually choosen so that roots in the interval
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,67, -10..-0.1 and +0.1..+10 can be found with a reasonable accuracy. If the
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,68," expected absolute value of your roots is of much smaller magnitude, set"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,69, this to a smaller value.</p>
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,70, <p>
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,71, Solvers are advised to do a plausibility check with the relative
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,72," accuracy, but clients should not rely on this.</p>"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,74, @param accuracy the accuracy.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,75, @throws IllegalArgumentException if the accuracy can't be achieved by
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,76, the solver or is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,78,oid setAbsoluteAccuracy(double accuracy);
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,81, Get the actual absolute accuracy.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,83, @return the accuracy
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,85,ouble getAbsoluteAccuracy();
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,88, Reset the absolute accuracy to the default.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,89, <p>
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,90, The default value is provided by the solver implementation.</p>
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,92,oid resetAbsoluteAccuracy();
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,95, Set the relative accuracy.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,96, <p>
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,97, This is used to stop iterations if the absolute accuracy can't be
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,98, achieved due to large values or short mantissa length.</p>
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,99, <p>
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,100, If this should be the primary criterion for convergence rather then a
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,101," safety measure, set the absolute accuracy to a ridiculously small value,"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,102, like 1E-1000.</p>
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,104, @param accuracy the relative accuracy.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,105, @throws IllegalArgumentException if the accuracy can't be achieved by
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,106,  the solver or is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,108,oid setRelativeAccuracy(double accuracy);
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,111, Get the actual relative accuracy.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,112, @return the accuracy
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,114,ouble getRelativeAccuracy();
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,117, Reset the relative accuracy to the default.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,118, The default value is provided by the solver implementation.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,120,oid resetRelativeAccuracy();
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,32,public interface UnivariateRealSolver extends ConvergingAlgorithm {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,249, Get the number of iterations in the last run of the solver.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,250, <p>
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,251, This is mainly meant for testing purposes. It may occasionally
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,252, help track down performance problems: if the iteration count
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,253," is notoriously high, check whether the function is evaluated"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,254," properly, and whether another solver is more amenable to the"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,255, problem.</p>
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,257, @return the last iteration count.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,258," @throws IllegalStateException if there is no result available, either"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,259, because no result was yet computed or the last attempt failed.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,261,nt getIterationCount();
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,20,mport java.io.Serializable;
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,20,import org.apache.commons.math.ConvergingAlgorithmImpl;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,32,"ublic abstract class UnivariateRealSolverImpl implements UnivariateRealSolver,"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,33,erializable {
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,31,public abstract class UnivariateRealSolverImpl
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,32,extends ConvergingAlgorithmImpl implements UnivariateRealSolver {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,38,** Maximum absolute error. */
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,39,rotected double absoluteAccuracy;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,41,** Maximum relative error. */
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,42,rotected double relativeAccuracy;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,47,** Maximum number of iterations. */
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,48,rotected int maximalIterationCount;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,50,** Default maximum absolute error. */
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,51,rotected double defaultAbsoluteAccuracy;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,53,** Default maximum relative error. */
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,54,rotected double defaultRelativeAccuracy;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,59,** Default maximum number of iterations. */
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,60,rotected int defaultMaximalIterationCount;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,71,/ Mainly for test framework.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,72,** The last iteration count. */
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,73,rotected int iterationCount;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,97,rotected UnivariateRealSolverImpl(
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,98,"nivariateRealFunction f,"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,99,"nt defaultMaximalIterationCount,"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,100,ouble defaultAbsoluteAccuracy) {
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,74,"protected UnivariateRealSolverImpl(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,75,"final int defaultMaximalIterationCount,"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,76,final double defaultAbsoluteAccuracy) {
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,77,"super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,108,his.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,109,his.defaultRelativeAccuracy = 1E-14;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,110,his.defaultFunctionValueAccuracy = 1E-15;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,111,his.absoluteAccuracy = defaultAbsoluteAccuracy;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,112,his.relativeAccuracy = defaultRelativeAccuracy;
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,83,this.defaultFunctionValueAccuracy = 1.0e-15;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,114,his.defaultMaximalIterationCount = defaultMaximalIterationCount;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,115,his.maximalIterationCount = defaultMaximalIterationCount;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,126,"rotected UnivariateRealSolverImpl(int defaultMaximalIterationCount,"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,127,ouble defaultAbsoluteAccuracy) {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,128,his.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,129,his.defaultRelativeAccuracy = 1E-14;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,130,his.defaultFunctionValueAccuracy = 1E-15;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,131,his.absoluteAccuracy = defaultAbsoluteAccuracy;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,132,his.relativeAccuracy = defaultRelativeAccuracy;
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,95,"protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,96,final double defaultAbsoluteAccuracy) {
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,97,"super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,98,this.defaultFunctionValueAccuracy = 1.0e-15;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,134,his.defaultMaximalIterationCount = defaultMaximalIterationCount;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,135,his.maximalIterationCount = defaultMaximalIterationCount;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,139, Access the last computed root.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,141, @return the last computed root
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,142, @throws IllegalStateException if no root has been computed
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,102,/** Check if a result has been computed.
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,103,* @exception IllegalStateException if no result has been computed
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,144,ublic double getResult() {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,145,f (resultComputed) {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,146,eturn result;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,147, else {
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,105,protected void checkResultComputed() throws IllegalArgumentException {
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,106,if (!resultComputed) {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,153, Access the value of the function at the last computed result.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,155, @return the function value at the last result.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,156, @throws IllegalStateException if no value has been computed.
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,111,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,112,public double getResult() {
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,113,checkResultComputed();
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,114,return result;
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,117,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,159,f (resultComputed) {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,160,eturn functionValue;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,161, else {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,162,"hrow MathRuntimeException.createIllegalStateException(""no result available"", null);"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,119,checkResultComputed();
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,120,return functionValue;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,167, Access the last iteration count.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,169, @return the last iteration count
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,170, @throws IllegalStateException if no root has been computed
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,173,ublic int getIterationCount() {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,174,f (resultComputed) {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,175,eturn iterationCount;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,176, else {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,177,"hrow MathRuntimeException.createIllegalStateException(""no result available"", null);"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,123,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,124,public void setFunctionValueAccuracy(final double accuracy) {
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,125,functionValueAccuracy = accuracy;
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,128,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,129,public double getFunctionValueAccuracy() {
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,130,return functionValueAccuracy;
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,133,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,134,public void resetFunctionValueAccuracy() {
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,135,functionValueAccuracy = defaultFunctionValueAccuracy;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,187,"rotected final void setResult(double result, int iterationCount) {"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,188,his.result = result;
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,144,"protected final void setResult(final double result, final int iterationCount) {"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,145,this.result         = result;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,200,"rotected final void setResult(double x, double fx, int iterationCount) {"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,201,his.result = x;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,202,his.functionValue = fx;
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,157,"protected final void setResult(final double x, final double fx,"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,158,final int iterationCount) {
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,159,this.result         = x;
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,160,this.functionValue  = fx;
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,169,this.iterationCount = 0;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,215, Set the absolute accuracy.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,217, @param accuracy the accuracy.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,218, @throws IllegalArgumentException if the accuracy can't be achieved by
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,219,  the solver or is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,221,ublic void setAbsoluteAccuracy(double accuracy) {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,222,bsoluteAccuracy = accuracy;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,226, Get the actual absolute accuracy.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,228, @return the accuracy
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,230,ublic double getAbsoluteAccuracy() {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,231,eturn absoluteAccuracy;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,235, Reset the absolute accuracy to the default.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,237,ublic void resetAbsoluteAccuracy() {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,238,bsoluteAccuracy = defaultAbsoluteAccuracy;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,242, Set the upper limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,244, @param count maximum number of iterations
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,246,ublic void setMaximalIterationCount(int count) {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,247,aximalIterationCount = count;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,251, Get the upper limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,253, @return the actual upper limit
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,255,ublic int getMaximalIterationCount() {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,256,eturn maximalIterationCount;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,260, Reset the upper limit for the number of iterations to the default.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,262,ublic void resetMaximalIterationCount() {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,263,aximalIterationCount = defaultMaximalIterationCount;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,267, Set the relative accuracy.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,269, @param accuracy the relative accuracy.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,270, @throws IllegalArgumentException if the accuracy can't be achieved by
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,271,  the solver or is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,273,ublic void setRelativeAccuracy(double accuracy) {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,274,elativeAccuracy = accuracy;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,278, Get the actual relative accuracy.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,279, @return the accuracy
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,281,ublic double getRelativeAccuracy() {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,282,eturn relativeAccuracy;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,286, Reset the relative accuracy to the default.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,288,ublic void resetRelativeAccuracy() {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,289,elativeAccuracy = defaultRelativeAccuracy;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,293, Set the function value accuracy.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,295, @param accuracy the accuracy.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,296, @throws IllegalArgumentException if the accuracy can't be achieved by
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,297, the solver or is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,299,ublic void setFunctionValueAccuracy(double accuracy) {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,300,unctionValueAccuracy = accuracy;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,304, Get the actual function value accuracy.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,305, @return the accuracy
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,307,ublic double getFunctionValueAccuracy() {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,308,eturn functionValueAccuracy;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,312, Reset the actual function accuracy to the default.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,314,ublic void resetFunctionValueAccuracy() {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,315,unctionValueAccuracy = defaultFunctionValueAccuracy;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,329,"rotected boolean isBracketing(double lower, double upper,"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,330,nivariateRealFunction f) throws FunctionEvaluationException {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,331,ouble f1 = f.value(lower);
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,332,ouble f2 = f.value(upper);
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,183,"protected boolean isBracketing(final double lower, final double upper,"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,184,final UnivariateRealFunction f)
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,185,throws FunctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,186,final double f1 = f.value(lower);
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,187,final double f2 = f.value(upper);
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,344,"rotected boolean isSequence(double start, double mid, double end) {"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,199,"protected boolean isSequence(final double start, final double mid, final double end) {"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,356,"rotected void verifyInterval(double lower, double upper) {"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,211,"protected void verifyInterval(final double lower, final double upper) {"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,358,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,359,"""Endpoints do not specify an interval: ["" + lower +"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,360,","" + upper + ""]"");"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,213,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,214,"""endpoints do not specify an interval: [{0}, {1}]"","
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,215,"new Object[] { lower, upper });"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,373,"rotected void verifySequence(double lower, double initial, double upper) {"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,228,"protected void verifySequence(final double lower, final double initial, final double upper) {"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,375,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,376,"""Invalid interval, initial value parameters:  lower="" +"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,377,"ower + "" initial="" + initial + "" upper="" + upper);"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,230,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,231,"""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}"","
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,232,"new Object[] { lower, initial, upper });"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,392,"rotected void verifyBracketing(double lower, double upper,"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,393,nivariateRealFunction f) throws FunctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,247,"protected void verifyBracketing(final double lower, final double upper,"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,248,final UnivariateRealFunction f)
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,249,throws FunctionEvaluationException {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,397,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,398,"""Function values at endpoints do not have different signs."" +"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,399,"  Endpoints: ["" + lower + "","" + upper + ""]"" +"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,400,"  Values: ["" + f.value(lower) + "","" + f.value(upper) + ""]"");"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,253,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,254,"""function values at endpoints do not have different signs.  "" +"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,255,"""Endpoints: [{0}, {1}], Values: [{2}, {3}]"","
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,256,"new Object[] { lower, upper, f.value(lower), f.value(upper) });"

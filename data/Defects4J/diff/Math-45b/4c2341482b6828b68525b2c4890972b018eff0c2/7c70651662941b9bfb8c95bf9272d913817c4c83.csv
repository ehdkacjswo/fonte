is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,281,f (divisor == 0.0) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,281,if (divisor == 0d) {
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,284,f (Double.isInfinite(divisor) && !isInfinite()) {
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,285,eturn ZERO;
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,284,if (Double.isInfinite(divisor)) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,285,return !isInfinite() ? ZERO : NaN;
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,277,"ssert.assertEquals(x.divide(yComplex), x.divide(yDouble));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,277,"TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,281,"ssert.assertEquals(x.divide(yComplex), x.divide(yDouble));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,281,"TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,283,"x = new Complex(1, Double.NEGATIVE_INFINITY);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,284,"TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,287,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,288,public void testScalarDivideZero() {
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,289,"Complex x = new Complex(1,1);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,290,"TestUtils.assertEquals(x.divide(Complex.ZERO), x.divide(0), 0);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,256,ouble x;
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,258, = FastMath.log1p(-1.0);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,259,f (x != Double.NEGATIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,260,"hrow new RuntimeException(""Log1p of -1 should be -infinity"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,257,"Assert.assertTrue(""Logp of -1.0 should be -Inf"", Double.isInfinite(FastMath.log1p(-1.0)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,265,ouble x;
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,267, = FastMath.log(0.0);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,268,f (x != Double.NEGATIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,269,"hrow new RuntimeException(""Log of zero should be -Inf"");"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,271, = FastMath.log(-0.0);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,272,f (x != Double.NEGATIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,273,"hrow new RuntimeException(""Log of zero should be -Inf"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,264,"Assert.assertTrue(""Log of zero should be -Inf"", Double.isInfinite(FastMath.log(0.0)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,275, = FastMath.log(Double.NaN);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,276,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,277,"hrow new RuntimeException(""Log of NaN should be NaN"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,266,"Assert.assertTrue(""Log of -zero should be -Inf"", Double.isInfinite(FastMath.log(-0.0)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,279, = FastMath.log(-1.0);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,280,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,281,"hrow new RuntimeException(""Log of negative number should be NaN"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,268,"Assert.assertTrue(""Log of NaN should be NaN"", Double.isNaN(FastMath.log(Double.NaN)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,283, = FastMath.log(Double.MIN_VALUE);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,284,f (x != -744.4400719213812)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,285,hrow new RuntimeException(
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,286,"Log of Double.MIN_VALUE should be -744.4400719213812"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,270,"Assert.assertTrue(""Log of negative number should be NaN"", Double.isNaN(FastMath.log(-1.0)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,288, = FastMath.log(-1.0);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,289,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,290,"hrow new RuntimeException(""Log of negative number should be NaN"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,272,"Assert.assertEquals(""Log of Double.MIN_VALUE should be -744.4400719213812"", -744.4400719213812, FastMath.log(Double.MIN_VALUE), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,292, = FastMath.log(Double.POSITIVE_INFINITY);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,293,f (x != Double.POSITIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,294,"hrow new RuntimeException(""Log of infinity should be infinity"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,274,"Assert.assertTrue(""Log of infinity should be infinity"", Double.isInfinite(FastMath.log(Double.POSITIVE_INFINITY)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,299,ouble x;
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,301,* Smallest value that will round up to Double.MIN_VALUE */
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,302, = FastMath.exp(-745.1332191019411);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,303,f (x != Double.MIN_VALUE)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,304,hrow new RuntimeException(
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,305,"exp(-745.1332191019411) should be Double.MIN_VALUE"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,279,// Smallest value that will round up to Double.MIN_VALUE
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,280,"Assert.assertEquals(Double.MIN_VALUE, FastMath.exp(-745.1332191019411), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,307, = FastMath.exp(-745.1332191019412);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,308,f (x != 0.0)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,309,"hrow new RuntimeException(""exp(-745.1332191019412) should be 0.0"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,282,"Assert.assertEquals(""exp(-745.1332191019412) should be 0.0"", 0.0, FastMath.exp(-745.1332191019412), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,311, = FastMath.exp(Double.NaN);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,312,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,313,"hrow new RuntimeException(""exp of NaN should be NaN"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,284,"Assert.assertTrue(""exp of NaN should be NaN"", Double.isNaN(FastMath.exp(Double.NaN)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,315, = FastMath.exp(Double.POSITIVE_INFINITY);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,316,f (x != Double.POSITIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,317,"hrow new RuntimeException(""exp of infinity should be infinity"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,286,"Assert.assertTrue(""exp of infinity should be infinity"", Double.isInfinite(FastMath.exp(Double.POSITIVE_INFINITY)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,319, = FastMath.exp(Double.NEGATIVE_INFINITY);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,320,f (x != 0.0)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,321,"hrow new RuntimeException(""exp of -infinity should be 0.0"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,288,"Assert.assertEquals(""exp of -infinity should be 0.0"", 0.0, FastMath.exp(Double.NEGATIVE_INFINITY), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,323, = FastMath.exp(1.0);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,324,f (x != Math.E)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,325,"hrow new RuntimeException(""exp(1) should be Math.E"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,290,"Assert.assertEquals(""exp(1) should be Math.E"", Math.E, FastMath.exp(1.0), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,330,ouble x;
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,332," = FastMath.pow(-1.0, 0.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,333,f (x != 1.0)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,334,"hrow new RuntimeException(""pow(x, 0) should be 1.0"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,296,"Assert.assertEquals(""pow(-1, 0) should be 1.0"", 1.0, FastMath.pow(-1.0, 0.0), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,336," = FastMath.pow(-1.0, -0.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,337,f (x != 1.0)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,338,"hrow new RuntimeException(""pow(x, -0) should be 1.0"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,298,"Assert.assertEquals(""pow(-1, -0) should be 1.0"", 1.0, FastMath.pow(-1.0, -0.0), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,340," = FastMath.pow(Math.PI, 1.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,341,f (x != Math.PI)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,342,"hrow new RuntimeException(""pow(PI, 1.0) should be PI"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,300,"Assert.assertEquals(""pow(PI, 1.0) should be PI"", FastMath.PI, FastMath.pow(FastMath.PI, 1.0), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,344," = FastMath.pow(-Math.PI, 1.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,345,f (x != -Math.PI)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,346,"hrow new RuntimeException(""pow(-PI, 1.0) should be PI"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,302,"Assert.assertEquals(""pow(-PI, 1.0) should be -PI"", -FastMath.PI, FastMath.pow(-FastMath.PI, 1.0), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,348," = FastMath.pow(Math.PI, Double.NaN);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,349,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,350,"hrow new RuntimeException(""pow(PI, NaN) should be NaN"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,304,"Assert.assertTrue(""pow(PI, NaN) should be NaN"", Double.isNaN(FastMath.pow(Math.PI, Double.NaN)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,352," = FastMath.pow(Double.NaN, Math.PI);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,353,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,354,"hrow new RuntimeException(""pow(NaN, PI) should be NaN"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,306,"Assert.assertTrue(""pow(NaN, PI) should be NaN"", Double.isNaN(FastMath.pow(Double.NaN, Math.PI)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,356," = FastMath.pow(2.0, Double.POSITIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,357,f (x != Double.POSITIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,358,"hrow new RuntimeException(""pow(2.0, Infinity) should be Infinity"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,308,"Assert.assertTrue(""pow(2.0, Infinity) should be Infinity"", Double.isInfinite(FastMath.pow(2.0, Double.POSITIVE_INFINITY)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,360," = FastMath.pow(0.5, Double.NEGATIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,361,f (x != Double.POSITIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,362,"hrow new RuntimeException(""pow(0.5, -Infinity) should be Infinity"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,310,"Assert.assertTrue(""pow(0.5, -Infinity) should be Infinity"", Double.isInfinite(FastMath.pow(0.5, Double.NEGATIVE_INFINITY)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,364," = FastMath.pow(0.5, Double.POSITIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,365,f (x != 0.0)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,366,"hrow new RuntimeException(""pow(0.5, Infinity) should be 0.0"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,312,"Assert.assertEquals(""pow(0.5, Infinity) should be 0.0"", 0.0, FastMath.pow(0.5, Double.POSITIVE_INFINITY), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,368," = FastMath.pow(2.0, Double.NEGATIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,369,f (x != 0.0)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,370,"hrow new RuntimeException(""pow(2.0, -Infinity) should be 0.0"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,314,"Assert.assertEquals(""pow(2.0, -Infinity) should be 0.0"", 0.0, FastMath.pow(2.0, Double.NEGATIVE_INFINITY), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,372," = FastMath.pow(0.0, 0.5);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,373,f (x != 0.0)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,374,"hrow new RuntimeException(""pow(0.0, 0.5) should be 0.0"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,316,"Assert.assertEquals(""pow(0.0, 0.5) should be 0.0"", 0.0, FastMath.pow(0.0, 0.5), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,376," = FastMath.pow(Double.POSITIVE_INFINITY, -0.5);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,377,f (x != 0.0)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,378,"hrow new RuntimeException(""pow(Inf, -0.5) should be 0.0"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,318,"Assert.assertEquals(""pow(Infinity, -0.5) should be 0.0"", 0.0, FastMath.pow(Double.POSITIVE_INFINITY, -0.5), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,380," = FastMath.pow(0.0, -0.5);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,381,f (x != Double.POSITIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,382,"hrow new RuntimeException(""pow(0.0, -0.5) should be Inf"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,320,"Assert.assertTrue(""pow(0.0, -0.5) should be Inf"", Double.isInfinite(FastMath.pow(0.0, -0.5)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,384," = FastMath.pow(Double.POSITIVE_INFINITY, 0.5);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,385,f (x != Double.POSITIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,386,"hrow new RuntimeException(""pow(Inf, 0.5) should be Inf"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,322,"Assert.assertTrue(""pow(Inf, 0.5) should be Inf"", Double.isInfinite(FastMath.pow(Double.POSITIVE_INFINITY, 0.5)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,388," = FastMath.pow(-0.0, -3.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,389,f (x != Double.NEGATIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,390,"hrow new RuntimeException(""pow(-0.0, -3.0) should be -Inf"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,324,"Assert.assertTrue(""pow(-0.0, -3.0) should be -Inf"", Double.isInfinite(FastMath.pow(-0.0, -3.0)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,392," = FastMath.pow(Double.NEGATIVE_INFINITY, 3.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,393,f (x != Double.NEGATIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,394,"hrow new RuntimeException(""pow(-Inf, -3.0) should be -Inf"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,326,"Assert.assertTrue(""pow(-Inf, -3.0) should be -Inf"", Double.isInfinite(FastMath.pow(Double.NEGATIVE_INFINITY, 3.0)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,396," = FastMath.pow(-0.0, -3.5);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,397,f (x != Double.POSITIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,398,"hrow new RuntimeException(""pow(-0.0, -3.5) should be Inf"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,328,"Assert.assertTrue(""pow(-0.0, -3.5) should be Inf"", Double.isInfinite(FastMath.pow(-0.0, -3.5)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,400," = FastMath.pow(Double.POSITIVE_INFINITY, 3.5);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,401,f (x != Double.POSITIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,402,"hrow new RuntimeException(""pow(Inf, 3.5) should be Inf"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,330,"Assert.assertTrue(""pow(Inf, 3.5) should be Inf"", Double.isInfinite(FastMath.pow(Double.POSITIVE_INFINITY, 3.5)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,404," = FastMath.pow(-2.0, 3.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,405,f (x != -8.0)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,406,"hrow new RuntimeException(""pow(-2.0, 3.0) should be -8.0"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,332,"Assert.assertEquals(""pow(-2.0, 3.0) should be -8.0"", -8.0, FastMath.pow(-2.0, 3.0), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,408," = FastMath.pow(-2.0, 3.5);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,409,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,410,"hrow new RuntimeException(""pow(-2.0, 3.5) should be NaN"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,334,"Assert.assertTrue(""pow(-2.0, 3.5) should be NaN"", Double.isNaN(FastMath.pow(-2.0, 3.5)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,414," = FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,415,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,416,"hrow new RuntimeException(""pow(+Inf, NaN) should be NaN"");"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,418," = FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,419,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,420,"hrow new RuntimeException(""pow(+Inf, NaN) should be NaN"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,338,"Assert.assertTrue(""pow(+Inf, NaN) should be NaN"", Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,422," = FastMath.pow(1.0, Double.POSITIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,423,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,424,"hrow new RuntimeException(""pow(1.0, +Inf) should be NaN"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,340,"Assert.assertTrue(""pow(1.0, +Inf) should be NaN"", Double.isNaN(FastMath.pow(1.0, Double.POSITIVE_INFINITY)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,426," = FastMath.pow(Double.NEGATIVE_INFINITY, Double.NaN);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,427,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,428,"hrow new RuntimeException(""pow(-Inf, NaN) should be NaN"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,342,"Assert.assertTrue(""pow(-Inf, NaN) should be NaN"", Double.isNaN(FastMath.pow(Double.NEGATIVE_INFINITY, Double.NaN)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,430," = FastMath.pow(Double.NEGATIVE_INFINITY, -1.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,431,f (x != -0.0)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,432,"hrow new RuntimeException(""pow(-Inf, -1.0) should be 0.0"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,344,"Assert.assertEquals(""pow(-Inf, -1.0) should be 0.0"", 0.0, FastMath.pow(Double.NEGATIVE_INFINITY, -1.0), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,434," = FastMath.pow(Double.NEGATIVE_INFINITY, -2.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,435,f (x != 0.0)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,436,"hrow new RuntimeException(""pow(-Inf, -2.0) should be 0.0"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,346,"Assert.assertEquals(""pow(-Inf, -2.0) should be 0.0"", 0.0, FastMath.pow(Double.NEGATIVE_INFINITY, -2.0), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,438," = FastMath.pow(Double.NEGATIVE_INFINITY, 1.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,439,f (x != Double.NEGATIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,440,"hrow new RuntimeException(""pow(-Inf, 1.0) should be -Inf"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,348,"Assert.assertTrue(""pow(-Inf, 1.0) should be -Inf"", Double.isInfinite(FastMath.pow(Double.NEGATIVE_INFINITY, 1.0)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,442," = FastMath.pow(Double.NEGATIVE_INFINITY, 2.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,443,f (x != Double.POSITIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,444,"hrow new RuntimeException(""pow(-Inf, 2.0) should be +Inf"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,350,"Assert.assertTrue(""pow(-Inf, 2.0) should be +Inf"", Double.isInfinite(FastMath.pow(Double.NEGATIVE_INFINITY, 2.0)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,446," = FastMath.pow(1.0, Double.NEGATIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,447,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,448,"hrow new RuntimeException(""pow(1.0, -Inf) should be NaN"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,352,"Assert.assertTrue(""pow(1.0, -Inf) should be NaN"", Double.isNaN(FastMath.pow(1.0, Double.NEGATIVE_INFINITY)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,454,ouble x;
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,456," = FastMath.atan2(Double.NaN, 0.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,457,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,458,"hrow new RuntimeException(""atan2(NaN, 0.0) should be NaN"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,359,"Assert.assertTrue(""atan2(NaN, 0.0) should be NaN"", Double.isNaN(FastMath.atan2(Double.NaN, 0.0)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,460," = FastMath.atan2(0.0, Double.NaN);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,461,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,462,"hrow new RuntimeException(""atan2(0.0, NaN) should be NaN"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,361,"Assert.assertTrue(""atan2(0.0, NaN) should be NaN"", Double.isNaN(FastMath.atan2(0.0, Double.NaN)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,464," = FastMath.atan2(0.0, 0.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,465,f (x != 0.0 || 1 / x != Double.POSITIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,466,"hrow new RuntimeException(""atan2(0.0, 0.0) should be 0.0"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,363,"Assert.assertEquals(""atan2(0.0, 0.0) should be 0.0"", 0.0, FastMath.atan2(0.0, 0.0), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,468," = FastMath.atan2(0.0, 0.001);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,469,f (x != 0.0 || 1 / x != Double.POSITIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,470,"hrow new RuntimeException(""atan2(0.0, 0.001) should be 0.0"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,365,"Assert.assertEquals(""atan2(0.0, 0.001) should be 0.0"", 0.0, FastMath.atan2(0.0, 0.001), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,472," = FastMath.atan2(0.1, Double.POSITIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,473,f (x != 0.0 || 1 / x != Double.POSITIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,474,"hrow new RuntimeException(""atan2(0.1, +Inf) should be 0.0"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,367,"Assert.assertEquals(""atan2(0.1, +Inf) should be 0.0"", 0.0, FastMath.atan2(0.1, Double.POSITIVE_INFINITY), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,476," = FastMath.atan2(-0.0, 0.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,477,f (x != 0.0 || 1 / x != Double.NEGATIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,478,"hrow new RuntimeException(""atan2(-0.0, 0.0) should be -0.0"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,369,"Assert.assertEquals(""atan2(-0.0, 0.0) should be -0.0"", -0.0, FastMath.atan2(-0.0, 0.0), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,480," = FastMath.atan2(-0.0, 0.001);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,481,f (x != 0.0 || 1 / x != Double.NEGATIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,482,"hrow new RuntimeException(""atan2(-0.0, 0.001) should be -0.0"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,371,"Assert.assertEquals(""atan2(-0.0, 0.001) should be -0.0"", -0.0, FastMath.atan2(-0.0, 0.001), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,484," = FastMath.atan2(-0.1, Double.POSITIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,485,f (x != 0.0 || 1 / x != Double.NEGATIVE_INFINITY)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,486,"hrow new RuntimeException(""atan2(-0.0, +Inf) should be -0.0"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,373,"Assert.assertEquals(""atan2(-0.0, +Inf) should be -0.0"", -0.0, FastMath.atan2(-0.1, Double.POSITIVE_INFINITY), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,488," = FastMath.atan2(0.0, -0.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,489,f (x != Math.PI)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,490,"hrow new RuntimeException(""atan2(0.0, -0.0) should be PI"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,375,"Assert.assertEquals(""atan2(0.0, -0.0) should be PI"", FastMath.PI, FastMath.atan2(0.0, -0.0), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,492," = FastMath.atan2(0.1, Double.NEGATIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,493,f (x != Math.PI)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,494,"hrow new RuntimeException(""atan2(0.1, -Inf) should be PI"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,377,"Assert.assertEquals(""atan2(0.1, -Inf) should be PI"", FastMath.PI, FastMath.atan2(0.1, Double.NEGATIVE_INFINITY), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,496," = FastMath.atan2(-0.0, -0.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,497,f (x != -Math.PI)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,498,"hrow new RuntimeException(""atan2(-0.0, -0.0) should be -PI"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,379,"Assert.assertEquals(""atan2(-0.0, -0.0) should be -PI"", -FastMath.PI, FastMath.atan2(-0.0, -0.0), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,500," = FastMath.atan2(-0.1, Double.NEGATIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,501,f (x != -Math.PI)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,502,"hrow new RuntimeException(""atan2(0.1, -Inf) should be -PI"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,381,"Assert.assertEquals(""atan2(0.1, -Inf) should be -PI"", -FastMath.PI, FastMath.atan2(-0.1, Double.NEGATIVE_INFINITY), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,504," = FastMath.atan2(0.1, 0.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,505,f (x != Math.PI / 2)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,506,"hrow new RuntimeException(""atan2(0.1, 0.0) should be PI/2"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,383,"Assert.assertEquals(""atan2(0.1, 0.0) should be PI/2"", FastMath.PI / 2.0, FastMath.atan2(0.1, 0.0), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,508," = FastMath.atan2(0.1, -0.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,509,f (x != Math.PI / 2)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,510,"hrow new RuntimeException(""atan2(0.1, -0.0) should be PI/2"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,385,"Assert.assertEquals(""atan2(0.1, -0.0) should be PI/2"", FastMath.PI / 2.0, FastMath.atan2(0.1, -0.0), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,512," = FastMath.atan2(Double.POSITIVE_INFINITY, 0.1);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,513,f (x != Math.PI / 2)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,514,"hrow new RuntimeException(""atan2(Inf, 0.1) should be PI/2"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,387,"Assert.assertEquals(""atan2(Inf, 0.1) should be PI/2"", FastMath.PI / 2.0, FastMath.atan2(Double.POSITIVE_INFINITY, 0.1), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,516," = FastMath.atan2(Double.POSITIVE_INFINITY, -0.1);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,517,f (x != Math.PI / 2)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,518,"hrow new RuntimeException(""atan2(Inf, -0.1) should be PI/2"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,389,"Assert.assertEquals(""atan2(Inf, -0.1) should be PI/2"", FastMath.PI / 2.0, FastMath.atan2(Double.POSITIVE_INFINITY, -0.1), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,520," = FastMath.atan2(-0.1, 0.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,521,f (x != -Math.PI / 2)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,522,"hrow new RuntimeException(""atan2(-0.1, 0.0) should be -PI/2"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,391,"Assert.assertEquals(""atan2(-0.1, 0.0) should be -PI/2"", -FastMath.PI / 2.0, FastMath.atan2(-0.1, 0.0), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,524," = FastMath.atan2(-0.1, -0.0);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,525,f (x != -Math.PI / 2)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,526,"hrow new RuntimeException(""atan2(-0.1, -0.0) should be -PI/2"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,393,"Assert.assertEquals(""atan2(-0.1, -0.0) should be -PI/2"", -FastMath.PI / 2.0, FastMath.atan2(-0.1, -0.0), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,528," = FastMath.atan2(Double.NEGATIVE_INFINITY, 0.1);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,529,f (x != -Math.PI / 2)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,530,"hrow new RuntimeException(""atan2(-Inf, 0.1) should be -PI/2"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,395,"Assert.assertEquals(""atan2(-Inf, 0.1) should be -PI/2"", -FastMath.PI / 2.0, FastMath.atan2(Double.NEGATIVE_INFINITY, 0.1), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,532," = FastMath.atan2(Double.NEGATIVE_INFINITY, -0.1);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,533,f (x != -Math.PI / 2)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,534,"hrow new RuntimeException(""atan2(-Inf, -0.1) should be -PI/2"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,397,"Assert.assertEquals(""atan2(-Inf, -0.1) should be -PI/2"", -FastMath.PI / 2.0, FastMath.atan2(Double.NEGATIVE_INFINITY, -0.1), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,536," = FastMath.atan2(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,537,f (x != Math.PI / 4)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,538,"hrow new RuntimeException(""atan2(Inf, Inf) should be PI/4"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,399,"Assert.assertEquals(""atan2(Inf, Inf) should be PI/4"", FastMath.PI / 4.0, FastMath.atan2(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY),"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,400,MathUtils.EPSILON);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,540," = FastMath.atan2(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,541,f (x != Math.PI * 3.0 / 4.0)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,542,"hrow new RuntimeException(""atan2(Inf, -Inf) should be PI * 3/4"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,402,"Assert.assertEquals(""atan2(Inf, -Inf) should be PI * 3/4"", FastMath.PI * 3.0 / 4.0,"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,403,"FastMath.atan2(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,544," = FastMath.atan2(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,545,f (x != -Math.PI / 4)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,546,"hrow new RuntimeException(""atan2(-Inf, Inf) should be -PI/4"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,405,"Assert.assertEquals(""atan2(-Inf, Inf) should be -PI/4"", -FastMath.PI / 4.0, FastMath.atan2(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY),"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,406,MathUtils.EPSILON);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,548," = FastMath.atan2(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,549,f (x != -Math.PI * 3.0 / 4.0)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,550,"hrow new RuntimeException(""atan2(-Inf, -Inf) should be -PI * 3/4"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,408,"Assert.assertEquals(""atan2(-Inf, -Inf) should be -PI * 3/4"", - FastMath.PI * 3.0 / 4.0,"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,409,"FastMath.atan2(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,849,ouble x;
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,851, = FastMath.acos(Double.NaN);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,852,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,853,"hrow new RuntimeException(""acos(NaN) should NaN"");"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,855, = FastMath.acos(-1.1);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,856,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,857,"hrow new RuntimeException(""acos(-1.1) should NaN"");"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,859, = FastMath.acos(1.1);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,860,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,861,"hrow new RuntimeException(""acos(-1.1) should NaN"");"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,709,"Assert.assertTrue(""acos(NaN) should be NaN"", Double.isNaN(FastMath.acos(Double.NaN)));"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,711,"Assert.assertTrue(""acos(-1.1) should be NaN"", Double.isNaN(FastMath.acos(-1.1)));"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,863,"ssert.assertEquals(FastMath.acos(-1.0), FastMath.PI, Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,713,"Assert.assertTrue(""acos(-1.1) should be NaN"", Double.isNaN(FastMath.acos(1.1)));"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,715,"Assert.assertEquals(""acos(-1.0) should be PI"", FastMath.acos(-1.0), FastMath.PI, MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,865,"ssert.assertEquals(FastMath.acos(1.0), 0.0, Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,717,"Assert.assertEquals(""acos(1.0) should be 0.0"", FastMath.acos(1.0), 0.0, MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,867,"ssert.assertEquals(FastMath.acos(0.0), FastMath.PI / 2.0, Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,719,"Assert.assertEquals(""acos(0.0) should be PI/2"", FastMath.acos(0.0), FastMath.PI / 2.0, MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,875,ouble x;
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,877, = FastMath.asin(Double.NaN);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,878,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,879,"hrow new RuntimeException(""asin(NaN) should NaN"");"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,881, = FastMath.asin(-1.1);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,882,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,883,"hrow new RuntimeException(""asin(-1.1) should NaN"");"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,885, = FastMath.asin(1.1);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,886,f (x == x)
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,887,"hrow new RuntimeException(""asin(-1.1) should NaN"");"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,889,"ssert.assertEquals(FastMath.asin(1.0), FastMath.PI / 2.0, Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,891,"ssert.assertEquals(FastMath.asin(-1.0), -FastMath.PI / 2.0, Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,893,"ssert.assertEquals(FastMath.asin(0.0), 0.0, Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,728,"Assert.assertTrue(""asin(NaN) should be NaN"", Double.isNaN(FastMath.asin(Double.NaN)));"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,730,"Assert.assertTrue(""asin(1.1) should be NaN"", Double.isNaN(FastMath.asin(1.1)));"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,732,"Assert.assertTrue(""asin(-1.1) should be NaN"", Double.isNaN(FastMath.asin(-1.1)));"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,734,"Assert.assertEquals(""asin(1.0) should be PI/2"", FastMath.asin(1.0), FastMath.PI / 2.0, MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,736,"Assert.assertEquals(""asin(-1.0) should be -PI/2"", FastMath.asin(-1.0), -FastMath.PI / 2.0, MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,738,"Assert.assertEquals(""asin(0.0) should be 0.0"", FastMath.asin(0.0), 0.0, MathUtils.EPSILON);"

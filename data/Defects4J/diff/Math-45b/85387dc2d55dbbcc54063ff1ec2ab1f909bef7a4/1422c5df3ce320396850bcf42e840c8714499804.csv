is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,17,package org.apache.commons.math.analysis.minimization;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,19,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,21,import org.apache.commons.math.MaxIterationsExceededException;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,22,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,25,"* Implements Richard Brent's algorithm (from his book ""Algorithms for"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,26,"* Minimization without Derivatives"", p. 79) for finding minima of real"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,27,* univariate functions.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,29,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,30,* @since 2.0
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,32,public class BrentMinimizer extends UnivariateRealMinimizerImpl {
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,34,/** Serializable version identifier */
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,35,private static final long serialVersionUID = 7185472920191999565L;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,38,* Golden section.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,40,private static final double c = 0.5 * (3 - Math.sqrt(5));
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,43,* Construct a solver.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,45,public BrentMinimizer() {
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,46,"super(100, 1E-10);"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,50,"* Find a minimum in the given interval, start at startValue."
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,51,* <p>
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,52,* A minimizer may require that the interval brackets a single minimum.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,53,* </p>
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,54,* @param f the function to minimize.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,55,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,56,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,57,* @param startValue this parameter is <em>not</em> used at all
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,58,* @return a value where the function is minimum
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,59,* @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,60,* or the minimizer detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,61,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,62,* function
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,63,* @throws IllegalArgumentException if min > max or the arguments do not
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,64,* satisfy the requirements specified by the minimizer
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,66,"public double minimize(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,67,"final double min, final double max, final double startValue)"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,68,"throws MaxIterationsExceededException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,69,"return minimize(f, min, max);"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,72,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,73,"public double minimize(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,74,"final double min, final double max)"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,75,"throws MaxIterationsExceededException,"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,76,FunctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,77,clearResult();
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,78,"return localmin(min, max, relativeAccuracy, absoluteAccuracy, f);"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,82,"* Find the minimum of the function {@code f} within the interval {@code (a, b)}."
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,84,"* If the function {@code f} is defined on the interval {@code (a, b)}, then"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,85,* this method finds an approximation {@code x} to the point at which {@code f}
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,86,* attains its minimum.<br/>
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,87,* {@code t} and {@code eps} define a tolerance {@code tol = eps |x| + t} and
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,88,* {@code f} is never evaluated at two points closer together than {@code tol}.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,89,* {@code eps} should be no smaller than <em>2 macheps</em> and preferable not
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,90,"* much less than <em>sqrt(macheps)</em>, where <em>macheps</em> is the relative"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,91,* machine precision. {@code t} should be positive.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,93,* @param f the function to solve
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,94,* @param a Lower bound of the interval.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,95,* @param b Higher bound of the interval.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,96,* @param eps Relative accuracy.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,97,* @param t Absolute accuracy.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,98,* @return the point at which the function is minimal.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,99,* @throws MaxIterationsExceededException if the maximum iteration count
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,100,* is exceeded.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,101,* @throws FunctionEvaluationException if an error occurs evaluating
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,102,* the function.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,104,"private double localmin(double a, double b, final double eps,"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,105,"final double t, final UnivariateRealFunction f)"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,106,"throws MaxIterationsExceededException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,107,double x = a + c * (b - a);
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,108,double v = x;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,109,double w = x;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,110,double e = 0;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,111,double fx = f.value(x);
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,112,double fv = fx;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,113,double fw = fx;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,115,int count = 0;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,116,while (count < maximalIterationCount) {
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,117,double m = 0.5 * (a + b);
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,118,double tol = eps * Math.abs(x) + t;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,119,double t2 = 2 * tol;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,121,// Check stopping criterion.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,122,if (Math.abs(x - m) > t2 - 0.5 * (b - a)) {
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,123,double p = 0;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,124,double q = 0;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,125,double r = 0;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,126,double d = 0;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,127,double u = 0;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,129,if (Math.abs(e) > tol) { // Fit parabola.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,130,r = (x - w) * (fx - fv);
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,131,q = (x - v) * (fx - fw);
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,132,p = (x - v) * q - (x - w) * r;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,133,q = 2 * (q - r);
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,135,if (q > 0) {
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,136,p = -p;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,137,} else {
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,138,q = -q;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,141,r = e;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,142,e = d;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,145,if (Math.abs(p) < Math.abs(0.5 * q * r) &&
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,146,(p < q * (a - x)) && (p < q * (b - x))) { // Parabolic interpolation step.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,147,d = p / q;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,148,u = x + d;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,150,// f must not be evaluated too close to a or b.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,151,if (((u - a) < t2) || ((b - u) < t2)) {
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,152,d = (x < m) ? tol : -tol;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,154,} else { // Golden section step.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,155,e = ((x < m) ? b : a) - x;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,156,d = c * e;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,159,// f must not be evaluated too close to a or b.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,160,u = x + ((Math.abs(d) > tol) ? d : ((d > 0) ? tol : -tol));
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,161,double fu = f.value(u);
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,163,"// Update a, b, v, w and x."
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,164,if (fu <= fx) {
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,165,if (u < x) {
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,166,b = x;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,167,} else {
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,168,a = x;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,170,v = w;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,171,fv = fw;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,172,w = x;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,173,fw = fx;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,174,x = u;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,175,fx = fu;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,176,} else {
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,177,if (u < x) {
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,178,a = u;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,179,} else {
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,180,b = u;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,182,if ((fu <= fw) || (w == x)) {
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,183,v = w;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,184,fv = fw;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,185,w = u;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,186,fw = fu;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,187,} else if ((fu <= fv) || (v == x) || (v == w)) {
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,188,v = u;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,189,fv = fu;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,192,} else { // Termination.
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,193,"setResult(x, fx, count);"
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,194,return x;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,197,++count;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,200,throw new MaxIterationsExceededException(maximalIterationCount);
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,17,package org.apache.commons.math.analysis.minimization;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,19,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,20,import org.apache.commons.math.ConvergingAlgorithm;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,21,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,22,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,26,* Interface for (univariate real) minimization algorithms.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,28,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,29,* @since 2.0
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,31,public interface UnivariateRealMinimizer extends ConvergingAlgorithm {
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,34,//     * Set the function value accuracy.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,35,//     * <p>
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,36,//     * This is used to determine when an evaluated function value or some other
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,37,//     * value which is used as divisor is zero.</p>
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,38,//     * <p>
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,39,//     * This is a safety guard and it shouldn't be necessary to change this in
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,40,//     * general.</p>
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,42,//     * @param accuracy the accuracy.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,43,//     * @throws IllegalArgumentException if the accuracy can't be achieved by
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,44,//     * the minimizer or is otherwise deemed unreasonable.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,46,//    void setFunctionValueAccuracy(double accuracy);
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,49,//     * Get the actual function value accuracy.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,50,//     * @return the accuracy
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,52,//    double getFunctionValueAccuracy();
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,55,//     * Reset the actual function accuracy to the default.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,56,//     * The default value is provided by the minimizer implementation.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,58,//    void resetFunctionValueAccuracy();
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,61,* Find a minimum in the given interval.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,62,* <p>
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,63,* A minimizer may require that the interval brackets a single minimum.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,64,* </p>
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,65,* @param f the function to minimize.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,66,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,67,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,68,* @return a value where the function is minimum
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,69,* @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,70,* or the minimizer detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,71,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,72,* function
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,73,* @throws IllegalArgumentException if min > max or the endpoints do not
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,74,* satisfy the requirements specified by the minimizer
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,76,"double minimize(UnivariateRealFunction f, double min, double max)"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,77,"throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,78,FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,81,"* Find a minimum in the given interval, start at startValue."
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,82,* <p>
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,83,* A minimizer may require that the interval brackets a single minimum.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,84,* </p>
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,85,* @param f the function to minimize.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,86,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,87,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,88,* @param startValue the start value to use
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,89,* @return a value where the function is minimum
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,90,* @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,91,* or the minimizer detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,92,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,93,* function
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,94,* @throws IllegalArgumentException if min > max or the arguments do not
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,95,* satisfy the requirements specified by the minimizer
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,97,"double minimize(UnivariateRealFunction f, double min, double max, double startValue)"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,98,"throws ConvergenceException, FunctionEvaluationException;"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,101,* Get the result of the last run of the minimizer.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,103,* @return the last result.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,104,"* @throws IllegalStateException if there is no result available, either"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,105,* because no result was yet computed or the last attempt failed.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,107,double getResult();
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,110,* Get the result of the last run of the minimizer.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,112,* @return the value of the function at the last result.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,113,"* @throws IllegalStateException if there is no result available, either"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,114,* because no result was yet computed or the last attempt failed.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,116,double getFunctionValue();
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,18,package org.apache.commons.math.analysis.minimization;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,20,import org.apache.commons.math.ConvergingAlgorithmImpl;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,21,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,24,* Provide a default implementation for several functions useful to generic
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,25,* minimizers.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,27,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,28,* @since 2.0
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,30,public abstract class UnivariateRealMinimizerImpl
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,31,extends ConvergingAlgorithmImpl implements UnivariateRealMinimizer {
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,33,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,34,private static final long serialVersionUID = 4543031162377070699L;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,36,//    /** Maximum error of function. */
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,37,//    protected double functionValueAccuracy;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,39,//    /** Default maximum error of function. */
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,40,//    protected double defaultFunctionValueAccuracy;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,42,/** Indicates where a root has been computed. */
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,43,protected boolean resultComputed = false;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,45,/** The last computed root. */
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,46,protected double result;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,48,/** Value of the function at the last computed result. */
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,49,protected double functionValue;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,52,* Construct a solver with given iteration count and accuracy.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,54,* @param defaultAbsoluteAccuracy maximum absolute error
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,55,* @param defaultMaximalIterationCount maximum number of iterations
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,56,* @throws IllegalArgumentException if f is null or the
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,57,* defaultAbsoluteAccuracy is not valid
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,59,"protected UnivariateRealMinimizerImpl(int defaultMaximalIterationCount,"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,60,double defaultAbsoluteAccuracy) {
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,61,"super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,62,//        this.functionValueAccuracy = defaultFunctionValueAccuracy;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,65,/** Check if a result has been computed.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,66,* @exception IllegalStateException if no result has been computed
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,68,protected void checkResultComputed() throws IllegalArgumentException {
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,69,if (!resultComputed) {
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,70,"throw MathRuntimeException.createIllegalStateException(""no result available"", null);"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,74,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,75,public double getResult() {
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,76,checkResultComputed();
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,77,return result;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,80,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,81,public double getFunctionValue() {
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,82,checkResultComputed();
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,83,return functionValue;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,86,//    /** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,87,//    public void setFunctionValueAccuracy(double accuracy) {
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,88,//        functionValueAccuracy = accuracy;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,91,//    /** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,92,//    public double getFunctionValueAccuracy() {
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,93,//        return functionValueAccuracy;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,96,//    /** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,97,//    public void resetFunctionValueAccuracy() {
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,98,//        functionValueAccuracy = defaultFunctionValueAccuracy;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,102,* Convenience function for implementations.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,104,* @param result the result to set
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,105,* @param iterationCount the iteration count to set
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,107,"protected final void setResult(double result, int iterationCount) {"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,108,this.result = result;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,109,this.iterationCount = iterationCount;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,110,this.resultComputed = true;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,114,* Convenience function for implementations.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,116,* @param x the result to set
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,117,* @param fx the result to set
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,118,* @param iterationCount the iteration count to set
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,120,"protected final void setResult(double x, double fx, int iterationCount) {"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,121,this.result = x;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,122,this.functionValue = fx;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,123,this.iterationCount = iterationCount;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,124,this.resultComputed = true;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,128,* Convenience function for implementations.
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,130,protected final void clearResult() {
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,131,this.resultComputed = false;
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,17,package org.apache.commons.math.analysis.minimization;
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,19,import junit.framework.Test;
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,21,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,23,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,24,import org.apache.commons.math.analysis.QuinticFunction;
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,25,import org.apache.commons.math.analysis.SinFunction;
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,26,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,29,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,31,public final class BrentMinimizerTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,33,public BrentMinimizerTest(String name) {
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,34,super(name);
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,37,public static Test suite() {
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,38,TestSuite suite = new TestSuite(BrentMinimizerTest.class);
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,39,"suite.setName(""BrentMinimizer Tests"");"
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,40,return suite;
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,43,public void testSinMin() throws MathException {
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,44,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,45,UnivariateRealMinimizer minimizer = new BrentMinimizer();
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,46,"assertEquals(3 * Math.PI / 2, minimizer.minimize(f, 4, 5), 70 * minimizer.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,47,assertTrue(minimizer.getIterationCount() <= 50);
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,48,"assertEquals(3 * Math.PI / 2, minimizer.minimize(f, 1, 5), 70 * minimizer.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,49,assertTrue(minimizer.getIterationCount() <= 50);
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,52,public void testQuinticMin() throws MathException {
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,53,"// The quintic function has zeros at 0, +-0.5 and +-1."
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,54,"// The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,"
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,55,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,56,UnivariateRealMinimizer minimizer = new BrentMinimizer();
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,57,"assertEquals(-0.27195613, minimizer.minimize(f, -0.3, -0.2), 1.0e-8);"
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,58,"assertEquals( 0.82221643, minimizer.minimize(f,  0.3,  0.9), 1.0e-8);"
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,59,assertTrue(minimizer.getIterationCount() <= 50);
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,61,// search in a large interval
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,62,"assertEquals(-0.27195613, minimizer.minimize(f, -1.0, 0.2), 1.0e-8);"
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,63,assertTrue(minimizer.getIterationCount() <= 50);
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,67,public void testMinEndpoints() throws Exception {
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,68,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,69,UnivariateRealMinimizer solver = new BrentMinimizer();
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,71,// endpoint is minimum
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,72,"double result = solver.minimize(f, 3 * Math.PI / 2, 5);"
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,73,"assertEquals(3 * Math.PI / 2, result, 70 * solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,75,"result = solver.minimize(f, 4, 3 * Math.PI / 2);"
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,76,"assertEquals(3 * Math.PI / 2, result, 70 * solver.getAbsoluteAccuracy());"
